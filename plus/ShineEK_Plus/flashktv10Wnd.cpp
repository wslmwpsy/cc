// flashktv10Wnd.cpp : 实现文件
//

#include "stdafx.h"
#include "RTCOMDLL/RTCOMDLL_i.c"
#include "flashktv10.h"
#include "flashktv10Wnd.h"
#include ".\flashktv10wnd.h"
#include "file\config_file.h"
#include "common\StringCodeConversion.h"
#include "file\log.h"
#include "common/timer.h"
#include "language.h"
#include "parserxml/ParserXml.h"
#include "database/DBQueryCondition.h"
#include "flash/PageData.h"
#include "folder_name.h"
#include "common/string_function.h"
#include "common/Register.h"
#include "common/ping.h"
#include "dog/ShineLockClient.h"
#include "global_variable.h"

#include <WinBase.h>
#include <Dbt.h>
#include <sys/timeb.h>
#include <time.h>
#include <WS2tcpip.h>
#include <stdlib.h> 

#ifdef _DEBUG
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#endif // _DEBUG

//#include <cef_nplugin.h>

// Cflashktv10Wnd
extern wstring g_page_name[PAGE_MAX_NUMBER];
extern const TCHAR *page_call_para_card[PAGE_MAX_NUMBER];
extern const TCHAR *page_call_para[PAGE_MAX_NUMBER];
SOCKET recv_socket = 0;
SOCKET send_socket = 0;   //发送套接字
SOCKET recv_video_dating;
sockaddr_in ServerAddr;

typedef struct EnumFunArg
{	
	HWND      hWnd;
	DWORD    dwProcessId;	
}EnumFunArg,*LPEnumFunArg;
BOOL CALLBACK lpEnumFunc(HWND hwnd, LPARAM lParam)
{

	EnumFunArg  *pArg = (LPEnumFunArg)lParam;	
	DWORD  processId;
	GetWindowThreadProcessId(hwnd, &processId);    
	if( processId == pArg->dwProcessId)	
	{	
		pArg->hWnd = hwnd;
		return TRUE;	
	}
	return FALSE;	
}HWND ReturnWnd(DWORD processID)
{
	HWND retWnd=NULL;  
	EnumFunArg wi;  
	wi.dwProcessId   =processID;  
	wi.hWnd   =  NULL;  
	EnumWindows(lpEnumFunc,(LPARAM)&wi);
	if(wi.hWnd)
	{
		retWnd=wi.hWnd;
	}
	return retWnd;
}



int random (int i) { return std::rand()%i;}

void change_char(TCHAR *ch)
{
	TCHAR szMem[260] = {0x00};
	_tcscpy(szMem, ch);
	TCHAR *p = &szMem[0];
	int n = 0;
	while(_tcscmp(p, L"") != 0)
	{
		if (*p == '\\')
		{
			ch[n] = '/';
		}
		p++;
		n++;
	}
}

int bytesToInt(byte* bytes) 
{
	int addr = bytes[0] & 0xFF;
	addr |= ((bytes[1] << 8) & 0xFF00);
	addr |= ((bytes[2] << 16) & 0xFF0000);
	addr |= ((bytes[3] << 24) & 0xFF000000);
	return addr;
}

IMPLEMENT_DYNAMIC(Cflashktv10Wnd, CWnd)
	Cflashktv10Wnd::Cflashktv10Wnd()
{
	m_second_display_number = 0;
	m_hide_taskbar=true;           //隐藏任务栏
	memset(m_work_path,0x0,sizeof(m_work_path));        //工作路径
	m_thread_handle = NULL;
	m_assistant_thread_event_handle=NULL;
	m_server_thread_event_handle=NULL;
	m_upd_msg_thread_event_handle=NULL;
	m_tcp_msg_thread_event_handle=NULL;
	m_master_slave_event_handle=NULL;
	m_thread_run=true;
	m_lock_window=true;
	m_flash_screen_init_finish=false;
	m_find_dog_success=false;
	m_use_test_function=false;
	memset(m_image_page_path,0x0,sizeof(m_image_page_path));
	memset(m_video_bg_path,0x0,sizeof(m_video_bg_path));
	m_pc_state = CLOSE_ROOM_STATE;
	check_pk_content_timer_identifier = 0;
	request_head_picture_timer_identifier = 0;
	show_logo_timer_identifier=0;
	show_control_osd_timer_identifier=0;
	show_bmp_picture_timer_identifier=0;
	show_flash_text_timer_identifier=0;
	show_tv_text_timer_identifier=0;
	show_flash_background_timer_identifier=0;
	show_flash_logo_timer_identifier = 0;
	show_tv_logo_timer_identifier = 0;
	show_screen_saver_timer_identifier=0;
	auto_test_timer_identifier=0;
	common_timer_identifier=0;
	check_file_timer_identifier=0;
	check_mysql_timer_identifier=0;
	hide_check_window_timer_identifier=0;
	show_popup_window_timer_identifier=0;
	show_wall_panel_image_timer_identifier=0;
	m_start_test=false;
	memset(m_ktv_test_number,0x0,sizeof(m_ktv_test_number));
	m_auto_test_number=1;
	m_screen_show_window_exist=false;
	m_screen_msquare_window_exist = false;
	m_use_test_function=false;
	m_video_left_top_x=0;                 //视频窗口的上面的x坐标
	m_video_left_top_y=0;                 //视频窗口的上面的y坐标
	m_video_right_button_x=0;             //视频窗口的下面的x坐标
	m_video_right_button_y=0;             //视频窗口的下面的y坐标
	m_switch_screen_left_top_x=0;          //屏切视频窗口的上面的x坐标
	m_switch_screen_left_top_y=0;          //屏切视频窗口的上面的y坐标
	m_switch_screen_right_button_x=0;      //屏切视频窗口的下面的x坐标
	m_switch_screen_right_button_y=0;      //屏切视频窗口的下面的y坐标
	m_tv_logo_x = 20;
	m_tv_logo_y = 20;
	memset(m_dog_welcome,0x0,sizeof(m_dog_welcome));        //狗的欢迎词
	memset(m_client_welcome,0x0,sizeof(m_client_welcome));  //客户的欢迎词
	memset(m_msg_welcome,0x0,sizeof(m_msg_welcome));        //消息的欢迎词
	m_msg_welcome_scroll_count=0;                           //消息欢迎词的滚动次数
	m_welcome_text_type=FLASH_WELCOME_TYPE_CLIENT;          //欢迎词的类型
	m_master_slave_control_flag=0;                          //0:不启用 1：主控机 2：被控机
	memset(m_master_control_ip,0x0,sizeof(m_master_control_ip));   //主被控的IP地址
	for (int i=0;i<SLAVE_COMPUTER_MAX_COUNT;i++)
	{
		memset(m_slave_control_ip[i],0x0,sizeof(m_slave_control_ip[i]));
	}
	m_replay=false;                              //重唱
	m_song_count_after_close_room=0;             //关房之后，允许播放的歌曲数
	m_play_song_count_after_close_room=0;        //关房之后，已经播放的歌曲数
	m_is_recording=false;                   //录音状态
	m_need_record_flag = false;
	m_is_playing_video_ad=false;
	m_cancel_mute=true;
	m_page_show_row_count=9;
	m_movie_row_count = 6;
	memset(m_db_order_item,0x0,sizeof(m_db_order_item));
	memset(m_send_message,0x0,sizeof(m_send_message));                  //要发送的消息
	memset(m_msg_server_ip[0],0x0,sizeof(m_msg_server_ip[0]));                //消息服务器的IP
	memset(m_msg_server_ip[1],0x0,sizeof(m_msg_server_ip[1])); 
	m_msg_server_count=0;                     //消息服务器的个数
	memset(m_show_room_name,0x0,sizeof(m_show_room_name));
	memset(m_send_room_name,0x0,sizeof(m_send_room_name));
	memset(m_send_room_ip,0x0,sizeof(m_send_room_ip));
	memset(m_room_ip,0x0,sizeof(m_room_ip));
	m_control_osd_show_time=5;
	m_flash_show_logo=true;
	m_tv_show_ad_logo=true;
	m_pc_show_screen_saver=false;                  //显示屏保
	m_show_video_screen_saver=false;            //显示视频屏保
	m_show_ad_screen_saver=false;               //显示的是广告屏保
	m_start_screen_saver_time=0;             //启动屏保的时间
	m_start_video_screen_saver=false;           //目前启动的是视频屏保
	pc_play_video_type=VIDEO_TYPE_SONG;
	tv_play_video_type=VIDEO_TYPE_SONG;
	m_tv_show_dog_tip_info=0;
	memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
	m_song_light_control=false;
	m_song_audio_effect=false;
	m_check_video_file_exist=false;
	m_adjust_amplifier_volume=false;
	m_soft_decode_window_exist=false;
	m_use_soft_active_flash = false;
	m_slave_video_window_exist=false;       //被控视频窗口是否存在
	m_slave_parent_window_exist=false;      //被控窗口的父窗体存在
	m_slave_window_flash_player_exist=false;
	m_slave_screen_left_top_x=0;             //左上角的X坐标
	m_slave_screen_left_top_y=0;             //左上角的Y坐标
	m_slave_screen_right_bottom_x=0;         //右下角的X坐标
	m_slave_screen_right_bottom_y=0;         //右下角的Y坐标
	m_wall_panel_screen_left_x=0;            //墙面板左上角的X坐标
	m_wall_panel_screen_top_y=0;             //墙面板左上角的Y坐标
	m_wall_panel_screen_right_x=0;           //墙面板右下角的X坐标
	m_wall_panel_screen_bottom_y=0;          //墙面板右下角的Y坐标
	m_doorplate_left_top_x=0;
	m_doorplate_left_top_y=0;
	m_doorplate_right_bottom_x=0;
	m_doorplate_right_bottom_y=0;
	m_open_drinks=false;
	m_handwriting_window_exist=false;
	m_show_handwriting_window=false;
	m_association_word_count=0;
	m_cur_association_word_page=0;
	g_flash_use_language = FLASH_LANGUAGE_SIMPLIFIED_CHINESE; //flash默认使用的语言是简体中文
	memset(m_back_server_ip,0x0,sizeof(m_back_server_ip));
	memset(m_service_server_ip,0x0,sizeof(m_service_server_ip));
	m_tv_osd_allow_cut=true;
	m_screen_saver_window_exist=false;
	memset(m_make_bomb_code1,0x0,sizeof(m_make_bomb_code1));       //生成的第一组炸弹验证码
	memset(m_make_bomb_code2,0x0,sizeof(m_make_bomb_code2));       //生成的第二组炸弹验证码
	m_first_code_success=false;         //第一组密钥成功
	m_stop_dog_bomb=false;              //停狗炸弹
	m_first_stop_dog_code_success=false;//第一个停狗的码成功
	memset(m_dog_time_active_code,0x0,sizeof(m_dog_time_active_code)); //狗的激活时间码
	m_member_already_login=false;                    //会员是否已经登录 
	memset(m_member_ok_password,0x0,sizeof(m_member_ok_password));
	memset(m_memeber_phone_number,0x0,sizeof(m_memeber_phone_number));
	m_use_smart_pinyin=true;
	m_play_AD_time_elapse=10;
	m_pre_play_pos=0;
	m_show_screen_saver_state=false;
	m_show_screen_saver_state_activity = false;
	m_allow_repeat_select_song=false; 
	m_select_song_priority=false;
	m_select_song_number=0;
	m_user_select_song=false;
	m_song_show_mode=SONG_SHOW_MODE_LIST;
	m_member_song_count=0;
	m_preview_allow_play_song_db = true;
	m_preview_left_top_x=10;                  //预览视频窗口的上面的x坐标
	m_preview_left_top_y=10;                  //预览视频窗口的上面的y坐标
	m_preview_right_bottom_x=300;             //预览视频窗口的下面的x坐标
	m_preview_right_bottom_y=300;             //预览视频窗口的下面的y坐标
	m_first_display_x=0;              //第一块显卡的起始x坐标
	m_first_display_y=0;              //第一块显卡的起始y坐标
	m_first_display_width=0;          //第一块显卡的宽度
	m_first_display_height=0;         //第一块显卡的高度
	m_sencond_display_x=0;            //第二块显卡的起始x坐标
	m_sencond_display_y=0;            //第二块显卡的起始y坐标
	m_sencond_display_width=0;        //第二块显卡的宽度
	m_sencond_display_height=0;       //第二块显卡的高度
	m_third_display_x=0;              //第三块显卡的起始x坐标
	m_third_display_y=0;              //第三块显卡的起始y坐标
	m_third_display_width=0;          //第三块显卡的宽度
	m_third_display_height=0;         //第三块显卡的高度
	m_four_display_x=0;
	m_four_display_y=0;
	m_four_display_width=0;
	m_four_display_height=0;
	m_five_display_x=0;               //第五块显卡的起始x坐标
	m_five_display_y=0;               //第五块显卡的起始y坐标
	m_five_display_width=0;           //第五块显卡的宽度
	m_five_display_height=0;          //第五块显卡的高度
	m_wall_panel_image_width=0;              //墙面板图片的宽度
	m_wall_panel_image_height=0;             //墙面板图片的高度
	m_wall_panel_image_show=false;              //墙面板图片显示状态
	m_show_wall_panel_image_time=0;
	m_first_display_src_width = 0;
	m_first_display_src_height = 0;
	//m_use_fixed_resolution = false;
	m_preview_pre_play_pos=-1;
	for (int i=0;i<PAGE_MAX_NUMBER;i++)
	{
		memset(m_song_order_item_copy[i],0x0,sizeof(m_song_order_item_copy[i]));
	}
	m_page_allow_back=false;
	m_doorplate_window_exist=false;
	m_doorplate_init_success=false;
	m_allow_play_dj=false;
	m_show_drinks_state=false;
	m_drinks_process_id = -1;
	m_consume_process_id = -1;
	m_ktv_software_min = false;
	m_have_device_insert=false;
	for (int i=0;i<SURVER_QUESTION_COUNT;i++)
	{
		memset(m_surver_question[i],0x0,sizeof(m_surver_question[i]));
		m_satisfaction_degree[i]=0;
	}
	m_member_input_type=1;                        //要输入的内容类型 密码还是用户名
	m_member_manage_state=0;                      //会员管理状态
	memset(m_member_name,0x0,sizeof(m_member_name));                        //会员的名字
	memset(m_member_password,0x0,sizeof(m_member_password));                //会员的密码
	memset(m_member_old_password,0x0,sizeof(m_member_old_password));        //会员旧密码
	memset(m_phone_check_code,0x0,sizeof(m_phone_check_code));   //手机验证码
	m_click_count=0;
	m_full_screen_show=false;
	m_painting_area_left_x=12;                   //绘图区域的坐标
	m_painting_area_top_y=70;                    
	m_painting_area_right_x=929;
	m_painting_area_bottom_y=549;
	m_show_start_image=true;
	memset(m_save_song_file_path,0x0,sizeof(m_save_song_file_path));
	m_is_saving_audio=false;
	m_select_save_song_number=0;
	m_pip_show=false;
	m_check_video_exist=false;
	m_check_window_state=false;
	memset(m_local_computer_name,0x0,sizeof(m_local_computer_name));
	m_system_info_input_type=0;
	m_play_song_before_open_room=true;
	m_query_panel_language = SONG_LANGUAGE_CHINESE;
	m_link_server_number=0;
	m_pre_link_server_number=-1;
	m_use_load_balance=false;
	m_handwriting_window_left_x = 0;
	m_handwriting_window_top_y = 0;
	m_handwriting_window_right_x = 0;
	m_handwriting_window_bottom_y = 0;
	memset(m_cur_interface_version,0x0,sizeof(m_cur_interface_version));
	m_singer_class_mode = SINGER_CLASS_MODE_NEW;
	m_drinks_window_handle = 0;
	m_record_audio_number = 0;
	memset(m_tv_live_url,0x0,sizeof(m_tv_live_url));
	memset(m_select_popup_window_number,0x0,sizeof(m_select_popup_window_number));
	m_game_flash_player_exist=false;              //游戏播放器窗口是否存在
	m_wall_panel_flash_player_exist=FALSE;
	m_wall_panel_show_mode=WALL_PANEL_VIDEO_IMAGE;
	m_start_lyric_link=false;
	m_use_obscure_query=false;
	m_save_selected_song_to_server=false;
	m_room_file_type=0;
	memset(m_room_file_path,0x0,sizeof(m_room_file_path));
	m_input_box_show_help[0]=true;
	m_input_box_show_help[1]=true;
	m_cur_audio_effect_value=0;
	m_cur_music_sound_value = 0;
	m_interface_type=SCREEN_TYPE_HORIZON;
	m_replay_mode = 0;
	m_song_tip_image = NULL;
	m_show_song_tip_osd=false;
	m_allow_play_movie=false;
	m_sigma_card_output_mode = 0;
	m_show_song_total_count=true;
	m_show_game_window_number=0;
	m_game_full_screen_show=false;
	m_use_Interactive_game=false;
	m_call_service_state=false;
	m_click_service_button_number=0;
	memset(m_select_ligth_buttom,0x0,sizeof(m_select_ligth_buttom));
	_tcscpy(m_select_ligth_buttom,L"-1");
	m_select_environment_button_number=5;
	m_select_song_accompany_original = 1;
	m_control_change_tone=false;
	memset(m_interactive_game_page,0x0,sizeof(m_interactive_game_page));
	m_ink_language_button_number = 0;
	memset(m_mysql_server_path,0x0,sizeof(m_mysql_server_path));
	m_mysql_open_success = false;
	m_show_vertical_volumn_bar=false;
	m_memory_light_state=true;
	m_send_volumn_amplifier_code_count=1;
	memset(m_max_unicode_char,0x0,sizeof(m_max_unicode_char));
	m_screen_show_video=false;
	m_doorplate_show_scroll_text=false;
	m_AD_flash_player_exist=false;
	m_tv_topbox_mode=false;
	memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));
	m_singer_region_button_number = 0;
	m_language_button_number=0;               //语言选中的按钮编号
	m_new_theme_button_number=8;              //新主题选中的按钮编号
	m_new_song_button_number = 0;
	m_class_button_number = 9;
	m_opera_button_number=8;
	m_video_button_number=0;
	m_word_count_button_number=0;             //字数选中的按钮编号
	m_year_button_number=7;                   //年代选中的按钮编号
	m_movie_button_number=8;
	m_song_version_button_number=0;
	m_singer_sex_button_number=-1;
	memset(m_show_sort_mode,0x0,sizeof(m_show_sort_mode));
	m_second_display_exist = true;
	m_precheckout_state = false;
	m_weibo_display_number=0;
	m_weibo_show_mode = WEIBO_SHOW_MODE_FULL_SCREEN_V;
	m_weibo_image_width = 0;
	m_weibo_process_id = 0;
	g_dog_open_function.game = false;

	m_open_pk = false;
	m_pk_page_num = 0;
	m_pk_textbox_focus = 0;
	m_pk_login_member = false;
	m_brecvData_thread = true;
	m_pk_menber_sex = 0;
	m_pk_member_total = 0; 
	memset(m_pk_name,0x0,sizeof(m_pk_name));
	memset(m_pk_password,0x0,sizeof(m_pk_password));
	memset(m_recv_pk_data,0x0,sizeof(m_recv_pk_data));
	memset(m_recv_video_dating_data, 0x00, sizeof(m_recv_video_dating_data));
	memset(m_send_member_data,0x0,sizeof(m_send_member_data));
	memset(m_pk_invitationIP,0x0,sizeof(m_pk_invitationIP));
	memset(m_pk_local_video_ip,0x0,sizeof(m_pk_local_video_ip));
	memset(m_pk_other_boxIP,0x0,sizeof(m_pk_other_boxIP));
	m_pk_local_video_port = 0;
	m_pk_member_witch_one = -1;
	m_b_pk_invitation = false;
	m_b_pk_connect = false;
	m_n_Syn_count = 0;
	for (int i = 0; i < MAX_MENBER_NUM; i++)
	{
		memset(m_send_member_data[i].ipaddress,0x0,sizeof(m_send_member_data[i].ipaddress));
		memset(m_send_member_data[i].name,0x0,sizeof(m_send_member_data[i].name));
		memset(m_send_member_data[i].nsex,0x0,sizeof(m_send_member_data[i].nsex));
		memset(m_send_member_data[i].nstatus,0x0,sizeof(m_send_member_data[i].nstatus));
		memset(m_send_member_data[i].nBoxIp,0x0,sizeof(m_send_member_data[i].nBoxIp));
	}

	for (int i = 0; i < MAX_MENBER_NUM; i++)
	{
		memset(m_server_video_dating_data[i].ip, 0x00, sizeof(m_server_video_dating_data[i].ip));
		memset(m_server_video_dating_data[i].name, 0x00, sizeof(m_server_video_dating_data[i].name));
		m_server_video_dating_data[i].ncharacter = 0;
		m_server_video_dating_data[i].nstatus = 0;
	}

	m_pk_info_show_pc = false;
	m_pk_show_video = true;
	memset(m_pk_info_tip_msg,0x0,sizeof(m_pk_info_tip_msg));
	m_handwriting_window_show_hide = false;
	memset(m_encode_picture_path,0x0,sizeof(m_encode_picture_path));

	m_ipad_ecode_again = true;
	m_use_mobile_vod = true;

	m_rectPosition0.SetRectEmpty();
	m_rectPosition1.SetRectEmpty();
	m_audio_volume = 0;

	m_weibo_image_top_height = 0;


	m_msquare_left_top_x = 0;
	m_msquare_left_top_y = 0;
	m_msquare_right_button_x = 0; 
	m_msquare_right_button_y = 0;
	m_msqure_width = 0;
	m_msquer_height = 0;

	memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
	memset(m_voice_wave_path,0x0,sizeof(m_voice_wave_path));
	//memset(m_tape_mp3_name,0x0,sizeof(m_tape_mp3_name));
	m_use_score_system = SCORE_SYSTEM_NONE;
	m_score_intact = 0;                         //评分完整度总合
	m_score_similarity = 0;                     //相似度
	m_score_stability = 0;                      //稳定度
	m_score_decibel = 0;                        //声音分贝数
	m_shine_total_score = 0;
	m_total_calories = 0;
	m_soft_load_score_flash_success = false;
	m_load_score_flash_success = false;
	m_is_scoring = false;
	m_show_guide_osd = false;

	m_audio_effect_progress_id = -1;


	memset(m_recommedn_song_id,0x0,sizeof(m_recommedn_song_id)); 

	m_exist_arena_song = false;
	m_maiba_pk_type = 0;
	m_maiba_pk_count = 0;
	memset(m_maiba_song_info,0x0,sizeof(m_maiba_song_info)); 

	m_login_memebere_count = 0;
	m_maiba_number_button = 0;
	m_maiba_request_page = 0;
	m_maiba_current_request_type = MAIBA_DEKARON;
	m_activate_vip_button = -1;
	m_pre_activate_vip_button = -1;

	m_server_pop_up_window = false;
	m_wechat_button_number = 0;

	for (int i = 0; i < MAIBA_RULE_COUNT; i++)
	{
		memset(&m_maiba_rule_arena_info[i],0x0,sizeof(MAIBA_RULE_INFO)); 
	}

	m_request_song_type = REQUEST_NO;

	m_wechat_button_number = 0;
	m_web_song_total_count=0;    //总的条数
	m_web_total_page_nmuber=0;   //总的页码
	m_web_current_page_number=0;		//当前的页数
	memset(m_request_data,0x0,sizeof(m_request_data));
	m_number_image = NULL;
	m_recorder_exist_video_path = false;

	m_request_arena_one_song = true;
	memset(m_request_arena_song_id,0x0,sizeof(m_request_arena_song_id));

	m_member_sign_out_number = -1;
	m_use_area_pk = false;
	m_use_find_maiba_pk = false;
	m_set_dekaron_pk = false;         //是否启用了自由pK
	m_set_free_pk = false;           //是否启用了挑战麦霸
	m_set_ranking_plite = false;	 //是否启用了上榜有礼
	m_set_challenge_star = false;	 //是否设置了挑战大咖
	m_set_across_pass = false;		 //是否设置了百秒夺奖

	m_connect_rule_server_count=0;
	memset(m_wechat_song_encode,0x0,sizeof(m_wechat_song_encode));

	m_pk_hardware_mode = PK_HARDWARE_MODE_CAM;
	m_lyric_total_sentences = 0;

	m_play_song_total_time = 0;

	m_html_ctrl_exist = FALSE;

	m_screen_to_flash_timer = true;
	m_maiba_ranking_info = L"";	 

	m_record_type = 0;
	m_open_record_type = 0; 
	m_music_enjoy_path = L"";
	m_str_trend_list_path = L"";
	m_pre_theme_name = L"";
	m_vd_page_num = 0;
#ifdef DON_GUAN_K_PLUS
	m_language_slow_dancer = false;
#endif // DON_GUAN_K_PLUS
	m_old_word_count_button_number = -1;

	m_song_audio_effect_lock = false;
	m_song_light_lock = false;
	m_lock_audio_effect_value = -1;
	m_lock_function_code_value = -1;
	m_song_light_lock_value = -1;

	m_rectPosition_myself.SetRectEmpty();
	m_rectPosition_otherside.SetRectEmpty();

	m_video_dating_show = false;
	m_video_dating_total = 0;

#ifdef DON_GUAN_K_PLUS
	m_show_score_in_screen = false;
#else
	m_show_score_in_screen = true;
#endif // DON_GUAN_K_PLUS

	m_idless_song_switching = true;

	m_allow_show_cloud_song = false;

	m_default_show_score_line = 1;

	m_sunshine_show_db = false;

	m_show_cube_song_vec.clear();
	m_show_cube_singer_vec.clear();

	pThis = this;
	m_is_open_dlna = false;

	ZeroMemory(m_GxShine_dll[0], sizeof(m_GxShine_dll[0]));
	ZeroMemory(m_GxShine_dll[1], sizeof(m_GxShine_dll[1]));

	m_dlna_already_play_time = 0;

	m_bIRTCOMAPISuccess = FALSE;
	m_IRTCOMAPI_20065 = NULL;
	m_IRTCOMAPI_20068 = NULL;
	m_IRTCOMAPI_20082 = NULL;

	m_ulIndex = 0L;
	m_vice_screen_show_flag = true;
	m_vice_screen_flash_show = TRUE;
	m_vice_screen_window_exist = 0;
	m_vice_screen_flash_player_exist = FALSE;
	memset(m_szvice_screen_msg, 0x00, sizeof(m_szvice_screen_msg));
	m_is_open_four_track = false;
	m_first_open_four_track = true;
	_tcscpy(m_wechat_song_path, L"");

	m_maiba_song_list_count = 0;

	m_voice_singer = false;
	m_film_video_button_state = 1;
	show_music_enjoy_lyric_timer_identifier = 0;
	m_dLyricLastTime = 0;
	m_bFlag = true;
	m_bBegin = true;

	m_lpDlna_url_data= new TDLNA_URL_DATA;
	memset(m_lpDlna_url_data, 0x00, sizeof(TDLNA_URL_DATA));

	m_b_share_recv_msg=false;
	m_str_slave_recorder_song_id = L"";
	//平台音乐背景视频路径
	for (int i=0;i<4;i++)
	{
		ZeroMemory(m_szMusicEnjoyBkVideo[i], sizeof(m_szMusicEnjoyBkVideo[i]));
	}
	m_dMusicEnjoySpace = 0;
	m_nMusicEnjoyWidth = 0;
	m_nMusicEnjoyHeight = 0;
	//手动开房计时器
	m_close_room_timer_identifier = 0;
	m_nCloseRoomTimeSpace = 0;
	//潮流榜单
	m_vec_TrendListManager.clear();
	//互动场景屏
	m_inter_screen_exist = false;
	m_inter_screen_window_exist = false;
	m_inter_screen_mode = 0;
	m_show_activity_wnd = 0;
	m_activity_wnd_full_screen = false;
	m_inter_screen_flash_player_exist = false;
	m_inter_screen_soft_exist = false;
	m_inter_screen_flash_show = false;
	m_b_master_show_window_exist = false;
	m_b_slave_show_window_exist = false;
	m_vecTransparentWnd.clear();
	m_soft_decode_window_child_exist = false;
	memset(&m_inter_screen_caption, 0x00, sizeof(INTER_SCREEN_CAPTION));

	m_bBubble = false;
	m_bMightLike = false;
	//挑战大咖
	m_StarTransparentWnd = NULL;
	m_StarSoftTransparentWnd = NULL;
	m_bChallengeStarFinish = false;
	m_nFlashFinishCnt = 0;
	m_vec_challenge_star_info.clear();
	m_b_challenging = false;
	m_b_challenge_begin = false;
	m_nCurrentChallengeSongPage = 0;
	m_nChallengeSongPageCount = 0;
	m_nChallengeSongCount = 0;
	m_nCurrentScore = 0;
	m_nCurrentTotalScore = 0;			//单句总分
	m_nSingCount = 0;					//已唱总句数

	//百秒夺奖，闯关夺宝
// 	m_PassTransparentWnd = NULL;
// 	m_PassSoftTransparentWnd = NULL;
	m_bAcrossPassFlashFinish = false;
	m_bAcrossPassing = false;
	m_bInPageAcrossPass = false;
	m_bAcrossPassFlashPlayerExist = false;
	m_bAcrossPassSoftFlashPlayerExist = false;
	m_nContinueCount = 1;
	m_nGoalScore = 50;
	m_nIceInitCount = 5;
	m_nIceAddSecond = 5;
	m_nIntactCount = 0;
	m_nSimilarityCount = 0;
	m_nStabilityCount = 0;
	m_nCurPageCode = 0;	//活动页面
	m_nCurPassIndex = 0;
	m_nTotalPassCount = 0;
	m_vec_pass.clear();
	m_vec_pass_tmp.clear();
	memset(m_pass_state, UN_ACROSS, sizeof(m_pass_state));
	maiba_rule_timer_identifier = 0;
	maiba_song_list_timer_identifier = 0;
	//互动游戏
	m_bActiveGameFlashFinish = false;
	m_bActiveGaming = false;
	m_active_game_flash_player_exist = false;
	m_active_game_soft_flash_player_exist = false;
	m_nPlayerCount = 0;
	m_nPlayerIndex = 0;
	 m_nDiceNumber = 0;
	memset(m_szActiveGameUrl, 0x00, sizeof(m_szActiveGameUrl));
	memset(m_szPicFilePath, 0x00, sizeof(m_szPicFilePath));
	m_vecGamePlayer.clear();

	////
	m_iCurrent_pass = 0;
	m_listen_answer_index = -1;	
	m_video_show_exist = FALSE;
	m_listen_flash_page_tv_exist = FALSE;
	m_nListenPassCount = 4;//默认4关
	m_iCount_down = 30;	//默认30秒
	m_iCurrent_pass = 0;
	m_picture_mv_wind_exist = FALSE;
	m_picture_mv_wind_soft_exist = FALSE;
	m_st_picture_mv_vec.clear();
	m_bListenSongFlashFinish = false;
	m_bPictureMvFlashFinish = false;

	m_use_audio_effect = false;
	m_pWnd = NULL;
	m_bScoreFlashFinish = false;
	m_bScoring = false;
	m_bFirstLyric = false;
	m_video_show_wnd_exist = false;

	m_bWechatInteractionFlashFinish = false;
	m_wechat_interaction_soft_flash_player_exist = false;
	m_pWechatInteractionSoftTransparentWnd = NULL;
	m_wechat_interaction_flash_player_exist = false;
	m_pWechatInteractionTransparentWnd = NULL;

	m_nBarrageFlashFinishCnt = 0;
	m_bWechatBarrageOpen = false;
	m_nWechatBarrageMode = 0;
	memset(m_szWechatBarrageIp, 0x00, sizeof(m_szWechatBarrageIp));
	memset(m_szWechatBarrageUrl, 0x00, sizeof(m_szWechatBarrageUrl));
	memset(m_szWechatBarragePicFilePath, 0x00, sizeof(m_szWechatBarragePicFilePath));
	m_nFontSizeMin = 0;
	m_nFontSizeMax = 0;

	m_bWechatGiftFlashFinish = false;
	m_bWechatGiftFlashPlayerExist = false;
	m_pWechatGiftSoftTransparentWnd = NULL;
	m_bWechatGiftPrepare = false;
	m_bWechatGiftSending = false;
	m_destroy_gift_wnd_timer_identifier = 0;

	m_nPicturePlayTime = 0;

	m_server_manually_val = -1;

	m_st_video_show_vec.clear();

	m_nFilePraiseCnt = 0;
	
	m_default_track = 1;
	m_nScoreIncreaseRate = 0;

//#ifdef DALIAN_MATSA_EK_PLUS
	//活动奖励是否已领取
	m_bCSGetAward = false;
	m_bAPGetAward = false;
	m_bLSGetAward = false;
//#endif
	m_bInPageVideo = false;
	m_recv_active_flag = true;

	m_video_show_count_page = 10;

	m_open_full_screen = 0;
}

Cflashktv10Wnd::~Cflashktv10Wnd()
{
#ifdef _DEBUG
	_CrtDumpMemoryLeaks();
#endif // _DEBUG	
}


BEGIN_MESSAGE_MAP(Cflashktv10Wnd, CWnd)
	ON_WM_CLOSE()
	ON_WM_CREATE()
	ON_WM_TIMER()
END_MESSAGE_MAP()

BEGIN_EVENTSINK_MAP(Cflashktv10Wnd,CWnd)
	ON_EVENT(Cflashktv10Wnd,FLASH_PLAYER_WINDOW_ID,197,FlashCallShockwaveflash,VTS_BSTR)
	ON_EVENT(Cflashktv10Wnd,SUB_FLASH_PLAYER_WINDOW_ID,197,FlashCallShockwaveflash,VTS_BSTR)
	ON_EVENT(Cflashktv10Wnd,TEST_MACHINE_PLAYER_WINDOW_ID,197,FlashCallShockwaveflash,VTS_BSTR)
	ON_EVENT(Cflashktv10Wnd,LOCAL_GAME_PLAYER_WINDOW_ID,197,FlashCallShockwaveflash,VTS_BSTR)
	ON_EVENT(Cflashktv10Wnd,DRINKS_FLASH_PLAYER_WINDOW_ID,197,FlashCallShockwaveflash,VTS_BSTR)
END_EVENTSINK_MAP()

// Cflashktv10Wnd 消息处理程序

BOOL Cflashktv10Wnd::CreateWnd()
{
	try
	{
		config_file_manager config_file;
		int display_number=1;
		CParserXml parse_xml_class;
		bool result=false;
		int width = 0;
		int height = 0;

		HCURSOR hCursor = AfxGetApp()->LoadStandardCursor(IDC_ARROW);
		HBRUSH hBrush = (HBRUSH)GetStockObject(BLACK_BRUSH);
		HICON hIcon = LoadIcon(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDR_MAINFRAME));

		//得到安装路径
		memset(m_work_path,0x0,sizeof(m_work_path));
		::GetModuleFileName(NULL, m_work_path, sizeof(m_work_path)/sizeof(TCHAR));
		TCHAR *install_path = _tcsrchr(m_work_path, _T('\\'));
		if (install_path)
		{
			install_path[0] = '\0';
		}
		//得到界面类型,默认界面版本、语言
		memset(m_vc_show_song_or_singer,0x0,sizeof(m_vc_show_song_or_singer));
		memset(m_cur_interface_version,0x0,sizeof(m_cur_interface_version));
		result = parse_xml_class.get_screen_type(m_work_path,m_interface_type,m_cur_interface_version,g_flash_use_language,m_vc_show_song_or_singer);
		if (!result||(0==_tcscmp(m_cur_interface_version,L"")))
		{
			MessageBox(L"界面的配置错误，请检查Config.xml文件",L"提示",MB_OK);
			PostMessage(WM_CLOSE,NULL,NULL);

			//	return 0;
		}

		//得到点歌显卡编号
		display_number = config_file.read_integer(L"display",L"main_window_display_number",1);
		//得到显卡的起始坐标和分辨率
		result = get_display_device_settings(display_number,m_first_display_x,m_first_display_y,m_first_display_width,m_first_display_height);
		if (!result)
		{
			//如果显卡编号错误，即没有编号为1的。即采用下面的方式，获得主显卡的分辨率
			m_first_display_x = 0;
			m_first_display_y = 0;
			m_first_display_width = GetSystemMetrics(SM_CXSCREEN);
			m_first_display_height = GetSystemMetrics(SM_CYSCREEN);

			switch(m_interface_type)
			{
			case SCREEN_TYPE_HORIZON:
				{
					m_video_show_count_page = 10;
				}
				break;
			case SCREEN_TYPE_VERTICAL:
				{
					m_video_show_count_page = 9;
					singer_page_show_row_count = 8;
				}
				break;
			}
		}
		else
		{
			//get client configure,if use fixed resolution
			//m_use_fixed_resolution = config_file.read_boolean(L"os",L"use_fixed_resolution",false);
			//if (m_use_fixed_resolution)
			//{
			switch(m_interface_type)
			{
			case SCREEN_TYPE_HORIZON:
				{
					if (0 == _tcscmp(m_cur_interface_version, L"ek800") || 0 == _tcscmp(m_cur_interface_version, L"face800"))
					{
						width = 1280;
						height = 800;
					}
					else //if ((0 == _tcscmp(m_cur_interface_version, L"KF720")) || (0 == _tcscmp(m_cur_interface_version, L"YP720")))
					{
						width = 1280;
						height = 720;
					}
					m_video_show_count_page = 10;
				}
				break;
			case SCREEN_TYPE_VERTICAL:
				{
					if (0 == _tcscmp(m_cur_interface_version, L"ek800") || 0 == _tcscmp(m_cur_interface_version, L"face800"))
					{
						width = 800;
						height = 1280;
					}
					else //if ((0 == _tcscmp(m_cur_interface_version, L"KF720")) || (0 == _tcscmp(m_cur_interface_version, L"YP720")))
					{
						width = 720;
						height = 1280;
					}
					m_video_show_count_page = 9;
					singer_page_show_row_count = 8;
				}
				break;
			}

			m_query_singer_manager.set_singer_page_show_row_count(singer_page_show_row_count);

			//save src resolution
			m_first_display_src_width = m_first_display_width;
			m_first_display_src_height = m_first_display_height;
			if ((width != m_first_display_src_width)||(height != m_first_display_src_height))
			{
				//change display resolution
				m_first_display_width = width;
				m_first_display_height = height;
#ifndef _DEBUG
				set_display_device_resolution(display_number,m_first_display_x, m_first_display_y, m_first_display_width, m_first_display_height);
#endif // _DEBUG

				//regain resolution
				bool result = get_display_device_settings(display_number,m_first_display_x,m_first_display_y,m_first_display_width,m_first_display_height);
				if (!result)
				{
					//如果显卡编号错误，即没有编号为1的。即采用下面的方式，获得主显卡的分辨率
					m_first_display_x = 0;
					m_first_display_y = 0;
					m_first_display_width = GetSystemMetrics(SM_CXSCREEN);
					m_first_display_height = GetSystemMetrics(SM_CYSCREEN);
				}
			}
			//}			
		}
		//WS_EX_TOPMOST
		return CreateEx(NULL, AfxRegisterWndClass(CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS, hCursor, hBrush, hIcon),
			_T("阳光视翰KTV点歌系统"), WS_VISIBLE|WS_POPUP|WS_CLIPSIBLINGS|WS_CLIPCHILDREN,
			m_first_display_x,m_first_display_y, m_first_display_width,m_first_display_height, NULL, 0);
	}
	catch (...)
	{

	}
	return FALSE;
}

void Cflashktv10Wnd::close_video_box()
{
	TCHAR send_ip[256];
	memset(send_ip,0x0,sizeof(send_ip));

	send_pk_data_to_server(0);  //发送PK退出
	//发送视频转播盒停止
	send_data_to_video_box_stop(m_pk_local_video_ip);
	send_data_to_video_box_stop(m_pk_other_boxIP);
	//发送给盒子信息一方已经退出
	if (0 != _tcscmp(m_pk_invitationIP,L""))
	{
		_tcscpy(send_ip,m_pk_invitationIP);
	}
	if (0 != _tcscmp(m_pk_acceptIP,L""))
	{
		_tcscpy(send_ip,m_pk_acceptIP);
	}

	connect_inviation(send_ip,_T("quit"));

	_sleep(100);
	m_b_pk_connect = false;
	m_b_pk_invitation = false;
	//关闭视频
	m_player_manager.Live_Close(0);
	m_player_manager.Live_Close(1);

	//关闭视频OSD图片
	m_player_manager.stop_bmp_osd();

}

void Cflashktv10Wnd::start_software_on_close()
{
	try
	{
		config_file_manager config_file;
		std::wstring software_path;
		DWORD process_id = 0;

		//读出关闭时是否启动外调程序
		bool start_software = config_file.read_boolean(L"close",L"start_software",false);
		software_path = config_file.read_string(L"close",L"software_path",L"");
		if (start_software && (0 != _tcscmp(software_path.c_str(),L"")))
		{
			//启动程序
			start_plug_in_process(software_path.c_str(),SW_SHOW,process_id);
		}
	}
	catch (...)
	{

	} 

	return;
}

void Cflashktv10Wnd::OnClose()
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值

	WriteLog(__FL__, L"接受到软件关闭的消息");
	bool result=false;
	config_file_manager config_file;

	//发送关机串口命令
	write_com_data(COM_SEND_POWER_OFF);

	//通知所有线程退出
	m_thread_run=false;

	_sleep(500);

	if (m_b_pk_connect)
	{
		close_video_box();
	}

	//程序退出，发送关房消息
	//send_server_video_dating_data(VD_CLOSE_ROOM);

	teminate_process(L"PhotoSceneScreen.exe");

	if (m_open_pk)
	{
		send_pk_data_to_server(0);  //发送PK退出
	}

	if(m_show_cube_song_vec.size() > 0)
	{
		for (int i = 0; i < m_show_cube_song_vec.size(); i++)
		{
			delete m_show_cube_song_vec[i];
		}
		m_show_cube_song_vec.clear();
	}

	if (m_show_cube_singer_vec.size() > 0)
	{
		for (int i = 0; i < m_show_cube_singer_vec.size(); i++)
		{
			delete m_show_cube_singer_vec[i];
		}
		m_show_cube_singer_vec.clear();
	}

	if (m_st_video_show_vec.size() > 0)
	{
		for (int i = 0; i < m_st_video_show_vec.size(); i++)
		{
			delete m_st_video_show_vec[i];
		}
		m_show_cube_singer_vec.clear();
	}

	//杀死pk定时器
	if (0 != check_pk_content_timer_identifier)
	{
		KillTimer(check_pk_content_timer_identifier);
		check_pk_content_timer_identifier = 0;
	}

	if (0 != request_head_picture_timer_identifier)
	{
		KillTimer(request_head_picture_timer_identifier);
		request_head_picture_timer_identifier = 0;
	}
	//杀死定时器
	if (0!=show_logo_timer_identifier)
	{
		KillTimer(show_logo_timer_identifier);
		show_logo_timer_identifier = 0;
	}
	if (0!=show_control_osd_timer_identifier)
	{
		KillTimer(show_control_osd_timer_identifier);
		show_control_osd_timer_identifier = 0;
	}
	if (0!=show_bmp_picture_timer_identifier)
	{
		KillTimer(show_bmp_picture_timer_identifier);
		show_bmp_picture_timer_identifier=0;
	}
	if (0!=show_flash_text_timer_identifier)
	{
		KillTimer(show_flash_text_timer_identifier);
		show_flash_text_timer_identifier=0;
	}
	if (0!=show_tv_text_timer_identifier)
	{
		KillTimer(show_tv_text_timer_identifier);
		show_tv_text_timer_identifier=0;
	}
	if (0!=show_flash_background_timer_identifier)
	{
		KillTimer(show_flash_background_timer_identifier);
		show_flash_background_timer_identifier = 0;
	}
	if (0!=show_flash_logo_timer_identifier)
	{
		KillTimer(show_flash_logo_timer_identifier);
		show_flash_logo_timer_identifier = 0;
	}
	if (0!=show_tv_logo_timer_identifier)
	{
		KillTimer(show_tv_logo_timer_identifier);
		show_tv_logo_timer_identifier = 0;
	}
	if (0!=show_screen_saver_timer_identifier)
	{
		KillTimer(show_screen_saver_timer_identifier);
		show_screen_saver_timer_identifier=0;
	}
	if (0!=common_timer_identifier)
	{
		KillTimer(common_timer_identifier);
		common_timer_identifier=0;
	}
	if (0!=check_file_timer_identifier)
	{
		KillTimer(check_file_timer_identifier);
		check_file_timer_identifier=0;
	}
	if (0!=check_mysql_timer_identifier)
	{
		KillTimer(check_mysql_timer_identifier);
		check_mysql_timer_identifier=0;
	}
	if (0!=hide_check_window_timer_identifier)
	{
		KillTimer(hide_check_window_timer_identifier);
		hide_check_window_timer_identifier=0;
	}
	if (0!=show_popup_window_timer_identifier)
	{
		KillTimer(show_popup_window_timer_identifier);
		show_popup_window_timer_identifier=0;
	}
	if (0!=show_wall_panel_image_timer_identifier)
	{
		KillTimer(show_wall_panel_image_timer_identifier);
		show_wall_panel_image_timer_identifier=0;
	}
	if (0!=maiba_rule_timer_identifier)
	{
		KillTimer(maiba_rule_timer_identifier);
		maiba_rule_timer_identifier=0;
	}
	if (0!=maiba_song_list_timer_identifier)
	{
		KillTimer(maiba_song_list_timer_identifier);
		maiba_song_list_timer_identifier=0;
	}
	if (0!=m_close_room_timer_identifier)
	{
		KillTimer(m_close_room_timer_identifier);
		m_close_room_timer_identifier = 0;
	}
	//反初始化文化部的广告接口
	if (culture_video_ad)
	{
		delete culture_video_ad;
		culture_video_ad=NULL;
	}

	if (culture_pc_text_ad)
	{
		delete culture_pc_text_ad;
		culture_pc_text_ad = NULL;
	}
	if (culture_tv_text_ad)
	{
		delete culture_tv_text_ad;
		culture_tv_text_ad = NULL;
	}
	if (culture_pc_background_ad)
	{
		delete culture_pc_background_ad;
		culture_pc_background_ad = NULL;
	}
	if (culture_pc_logo_ad)
	{
		delete culture_pc_logo_ad;
		culture_pc_logo_ad = NULL;
	}
	if (culture_tv_logo_ad)
	{
		delete culture_tv_logo_ad;
		culture_tv_logo_ad = NULL;
	}
	if (culture_screen_saver_ad)
	{
		delete culture_screen_saver_ad;
		culture_screen_saver_ad=NULL;
	}
	if (culture_prompt_box_ad)
	{
		delete culture_prompt_box_ad;
		culture_prompt_box_ad = NULL;
	}

	if (g_dog_open_function.AD)
	{
		//启用文化部广告功能
		UninitADSystem_culture();
	}

	//反初始化大歌星库
	if (m_recorder_handle)
	{
		dagexing::DestroyHandle(m_recorder_handle);
	}

	//停止录音
	stop_recorder_audio(false,false,false);
	//反初始化录音类
	m_tape_audio.Fini();
	//释放资源
	if (m_song_tip_image)
	{
		delete m_song_tip_image;
		m_song_tip_image=NULL;
	}

	//关闭之前，必须先停止所有的播放，并释放控件
	m_player_manager.destroy_player();

	//关闭数据库
	m_db_query.close_DB();
	if ((0!=strcmp(m_mysql_server_path,"")) && m_mysql_open_success)
	{
		m_mysql_db.CloseConnect();
	}

	//反初始化独立窗口
	if (m_soft_decode_window_exist)
	{
		m_soft_decode_window.DestroyWindow();
	}
	if (m_doorplate_window_exist)
	{
		m_doorplate_window.DestroyWindow();
	}
	if (m_wall_panel_window_exist)
	{
		m_wall_panel_window.DestroyWindow();
	}
	if (m_slave_parent_window_exist)
	{
		m_slave_parent_window.DestroyWindow();
	}
	if (m_screen_saver_window_exist)
	{
		m_screen_saver_window.DestroyWindow();
	}
	if (m_vice_screen_window_exist)
	{
		m_vice_screen_window.DestroyWindow();
	}
	if (m_html_ctrl_exist)
	{
		m_html_ctrl.DestroyWindow();
	}
	if (m_b_master_show_window_exist)
	{
		m_master_show_window.DestroyWindow();
	}
	if (m_b_slave_show_window_exist)
	{
		m_slave_show_window.DestroyWindow();
	}
	if (m_bactivity_video_wnd_exist)
	{
		m_activity_video_wnd.DestroyWindow();
	}
	if (m_inter_screen_window_exist)
	{
		m_inter_screen_window.DestroyWindow();
	}
// 	if (m_PassTransparentWnd != NULL)
// 	{
// 		delete m_PassTransparentWnd;
// 		m_PassTransparentWnd = NULL;
// 	}
// 	if (m_PassSoftTransparentWnd != NULL)
// 	{
// 		delete m_PassSoftTransparentWnd;
// 		m_PassSoftTransparentWnd = NULL;
// 	}
	if (m_StarTransparentWnd != NULL)
	{
		delete m_StarTransparentWnd;
		m_StarTransparentWnd = NULL;
	}

	if (m_StarSoftTransparentWnd != NULL)
	{
		delete m_StarSoftTransparentWnd;
		m_StarSoftTransparentWnd = NULL;
	}
	//删除服务器上保存歌曲ID文件
	if (m_save_selected_song_to_server&&(0!=_tcscmp(m_save_song_file_path,L"")))
	{
		DeleteFile(m_save_song_file_path);	
	}
	//删除服务器上的连接编号
	if (m_pre_link_server_number>=0)
	{
		TCHAR send_msg[1024];

		memset(send_msg,0x0,sizeof(send_msg));

		swprintf(send_msg,L"Message&SERVERLINKSUB;%d$END",m_pre_link_server_number);
		send_data_to_service_udp(send_msg);
	}

	if (m_ipad_ecode_again)
	{
		//清空IPAD的验证码
		config_file.write_string(L"ipad",L"login_password",L"");
	}

	//终止微博系统
	if (m_weibo_process_id)
	{
		TCHAR weibo_id[256];
		memset(weibo_id,0x0,sizeof(weibo_id));
		swprintf(weibo_id,L"ShineWeiBo%d.exe",m_weibo_version_number);
		teminate_process(weibo_id);
	}

	//等待所有线程退出
	if (m_assistant_thread_event_handle)
	{
		WaitForSingleObject(m_assistant_thread_event_handle,2000);
		CloseHandle(m_assistant_thread_event_handle);
		m_assistant_thread_event_handle=NULL;
	}
	if (m_server_thread_event_handle)
	{
		WaitForSingleObject(m_server_thread_event_handle,2000);
		CloseHandle(m_server_thread_event_handle);
		m_server_thread_event_handle=NULL;
	}
	if (m_upd_msg_thread_event_handle)
	{
		WaitForSingleObject(m_upd_msg_thread_event_handle,2000);
		CloseHandle(m_upd_msg_thread_event_handle);
		m_upd_msg_thread_event_handle=NULL;
	}
	if (m_tcp_msg_thread_event_handle)
	{
		WaitForSingleObject(m_tcp_msg_thread_event_handle,2000);
		CloseHandle(m_tcp_msg_thread_event_handle);
		m_tcp_msg_thread_event_handle=NULL;
	}
	if (m_master_slave_event_handle)
	{
		WaitForSingleObject(m_master_slave_event_handle,2000);
		CloseHandle(m_master_slave_event_handle);
		m_master_slave_event_handle=NULL;
	}
	// yzg 2015-5-25 16:34:52
	if(m_IRTCOMAPI)
	{
		m_IRTCOMAPI->Release();
		m_IRTCOMAPI = NULL;
	}
	if(m_IRTCOMAPI_20065)
	{
		m_IRTCOMAPI_20065->Release();
		m_IRTCOMAPI_20065 = NULL;
	}
	if(m_IRTCOMAPI_20068)
	{
		m_IRTCOMAPI_20068->Release();
		m_IRTCOMAPI_20068 = NULL;
	}
	if(m_IRTCOMAPI_20082)
	{
		m_IRTCOMAPI_20082->Release();
		m_IRTCOMAPI_20082 = NULL;
	}
	//end yzg

	//反初始化com控件
	::CoUninitialize();

	if (m_hide_taskbar)
	{
		//如果隐藏了任务栏，软件退出时要显示
		hide_window_task_bar(false);
	}

	//如果使用了固定分辨率要恢复原有的。
	//if(m_use_fixed_resolution&&(m_first_display_src_width>0)&&(m_first_display_src_height>0))
	if((m_first_display_src_width != m_first_display_width) || (m_first_display_src_height != m_first_display_height))
	{
		config_file_manager config_file;

		//得到点歌显卡编号
		int display_number = config_file.read_integer(L"display",L"main_window_display_number",1);
		//改变显卡的分辨率
		set_display_device_resolution(display_number,0,0,m_first_display_src_width,m_first_display_src_height);
	}

	m_brecvData_thread = false;
	closesocket(recv_socket);
	//启动IE
	start_IE_software();

	delete m_lpDlna_url_data;
	//潮流榜单数据清空
	// 	if(m_vec_TrendListManager.size() > 0)
	// 	{
	// 		for (int i = 0; i < m_vec_TrendListManager.size(); i++)
	// 		{
	// 			delete m_vec_TrendListManager[i];
	// 		}
	// 		m_vec_TrendListManager.clear();
	// 	}
	//挑战大咖
	m_vec_challenge_star_info.clear();
	//百秒夺奖数据清空
	// 	if(m_vec_pass_tmp.size() > 0)
	// 	{
	// 		CPassManager *pass;
	// 		for (int i = 0; i < m_vec_pass_tmp.size(); i++)
	// 		{
	// 			delete m_vec_pass_tmp[i];
	// 		}
	// 		m_vec_pass_tmp.clear();
	// 	}
	// 	if(m_vec_pass.size() > 0)
	// 	{
	// 		for (int i = 0; i < m_vec_pass.size(); i++)
	// 		{
	// 			delete m_vec_pass[i];
	// 		}
	// 		m_vec_pass.clear();
	// 	}

	

	WriteLog(__FL__, L"已退出点歌系统");
	CWnd::OnClose();
}

UINT Cflashktv10Wnd::Cdecl_Callback(LPTOOL_DATA_RECORD lpTdr)
{
	switch(lpTdr->DataType)
	{
	case PLUGINS_NEED_NOTIFY: //插件需要通知
		{
			LPTPLUGINS_NOTIFY_DATA lpPnd = (LPTPLUGINS_NOTIFY_DATA)lpTdr->pData;
			switch(lpPnd->PluginsNotifytype)
			{
			case MAIN_SHOW_NOTIFY:
				break;
			case MAIN_PLAY_NOTIFY:
				{
					pThis->m_PluginsEx.UpdateToolsNotifyType(lpTdr->FileName, lpPnd->PluginsNotifytype, lpPnd->pData);
				}
				break;
			case PLAYER_NOTIFY:
				{
					pThis->m_PluginsEx.UpdateToolsNotifyType(lpTdr->FileName, lpPnd->PluginsNotifytype, lpPnd->pData);
					pThis->PostMessageW(WM_PLAYER_HANDLE, 0, (LPARAM)pThis->m_hWnd);
				}
				break;
			case DATA_NOTIFY:
				break;
			default:
				break;
			}
		}
		break;
	case PLUGINS_MEDIA_CONTROL: //与主程序播放动作交互
		{
			int iResult = 1;		
			LPtCONTROL_MEDIA_DATA lpCmd = (LPtCONTROL_MEDIA_DATA)lpTdr->pData;
			switch(lpCmd->ControlMediaType)
			{
			case ControlMedia_OpenFile: //打开文件
				{
					memset(pThis->m_lpDlna_url_data, 0x00, sizeof(TDLNA_URL_DATA));
					memcpy(pThis->m_lpDlna_url_data ,(LPTDLNA_URL_DATA)lpCmd->pData, sizeof(stTDLNAUrlData));
					WriteLog(__FL__, pThis->m_lpDlna_url_data->szUrl);

					pThis->flash_message_call_www_music(pThis->m_lpDlna_url_data->szUrl);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_PlayStateChange;
					lpPm.wParam = iResult;
					lpPm.lParam = (int*)PlayState_OpenFileSuccessed;
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);

					lpPm.MSG = WM_MediaPositionChange;
					lpPm.wParam = iResult;
					lpPm.lParam = 0; //pptv传过来的已经播放的秒数
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_Previous: //上一首
				break;
			case ControlMedia_Next: //下一首
				break;
			case ControlMedia_Stop: //停止
				{
					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_PlayStateChange;
					lpPm.wParam = iResult;
					lpPm.lParam = (int*)PlayState_Closed;
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_Pause: //暂停or播放
				{
					pThis->flash_message_call_function(SONG_PLAY_PAUSE);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_PlayStateChange;
					lpPm.wParam = iResult;
					lpPm.lParam = (int*)PlayState_Paused;
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_Resume: //继续播放
				{
					pThis->flash_message_call_function(SONG_PLAY);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_PlayStateChange;
					lpPm.wParam = iResult;
					lpPm.lParam = (int*)PlayState_Running;
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_Seek: //快进快退
				{
					char szPlayTime[MAX_PATH] = {0x00};
					strcpy(szPlayTime, (char*)lpCmd->pData);
					pThis->m_dlna_already_play_time = atoi(szPlayTime);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_MediaPositionChange;
					lpPm.wParam = iResult;
					lpPm.lParam = lpCmd->pData; //pptv传过来的已经播放的秒数
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_SetVolume: //设置音量
				{
					pThis->flash_message_call(L"music_volume", (TCHAR*)lpCmd->pData);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_MediaVolChange;
					lpPm.wParam = iResult;
					lpPm.lParam = lpCmd->pData; //音量值
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			case ControlMedia_SetMute: //静音
				{
					pThis->flash_message_call_function(SONG_MUTE);

					TPLAYER_MESSAGE lpPm;
					lpPm.MSG = WM_PlayStateChange;
					lpPm.wParam = iResult;
					lpPm.lParam = (int*)WM_MediaVolChange;
					pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
				}
				break;
			}
		}
		break;
	case PLUGINS_UPDATE_IMAGE: //更新图片
		break;
	}
	return 0;
}

Cflashktv10Wnd *Cflashktv10Wnd::pThis;
int Cflashktv10Wnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CWnd::OnCreate(lpCreateStruct) == -1)
		return -1;

	// TODO:  在此添加您专用的创建代码
	try
	{
		config_file_manager config_file;
		string_conversion string_conv;
		bool result=false;
		TCHAR m_db_path[256];
		TCHAR lyric_path[256];
		std::wstring server_ip;
		TCHAR game_path[256];
		DWORD process_id=0;
		TCHAR item_value[256];

		memset(m_db_path,0x0,sizeof(m_db_path));
		memset(lyric_path,0x0,sizeof(lyric_path));
		memset(game_path,0x0,sizeof(game_path));

		//_CrtDumpMemoryLeaks();
		//_CrtSetBreakAlloc(171955);

		//设置一个最大字符
		unsigned int unicode_max=0x9FFF;
		memcpy(m_max_unicode_char,&unicode_max,sizeof(unsigned int));

		//是否隐藏任务栏
		m_hide_taskbar = config_file.read_boolean(L"os",L"hide_taskbar",true);
		if (m_hide_taskbar)
		{
			//隐藏任务栏
			hide_window_task_bar(true);
		}
		//初始化com控件
		::CoInitialize(NULL);

		//得到网络日志文件路径
		std::wstring net_log_path = config_file.read_string(L"server",L"net_log_file_path",L"");
		if (!net_log_path.empty())
		{
			//得到计算机的名字
			TCHAR buffer[256];
			char hostname[256];

			memset(buffer, 0, sizeof(buffer));
			memset(hostname, 0, sizeof(hostname));

			//得到计算机的名字
			gethostname(hostname, sizeof(hostname));
			//转化成unicode编码
			string_conv.multibyte_to_widechar(hostname,buffer,sizeof(buffer)/sizeof(TCHAR));
			//网络路径增加计算机的名字
			net_log_path += L"\\";
			net_log_path += buffer;
		}
		//设置日志文件路径，必须提前设置日志路径，日志路径是全部变量，只设置一次
		SetLogFilePath(net_log_path.c_str());

		//设置了日志路径，才能写日志
		WriteLog(__FL__, L"*************************************************************");
		WriteLog(__FL__, L"Shine Co.,Ltd. software ver:1.0");
		WriteLog(__FL__, L"软件开始启动");

		//终止播放控件线程，防止他不能自动卸载
		//teminate_process(L"ShPlaySrv.exe");

		//删除过期的日志
		WriteLog(__FL__, L"删除过期的日志");
		delete_expire_log();

		//yzg 2015年5月22日09:35:32
		InitCom();

		//初始化伪随机数发生器的种子
		srand((unsigned int)time((time_t *)NULL));

		/*************************读取配置文件信息*******************************/
		//得到列表显示的行数，必须在界面显示之前
		m_page_show_row_count = config_file.read_integer(L"flash",L"page_show_row_count",9);
		//得到控制osd的显示时间
		m_control_osd_show_time = config_file.read_integer(L"osd",L"control_osd_show_time",5);
		//调整公放的音乐音量
		m_adjust_amplifier_volume = config_file.read_boolean(L"amplifier",L"adjust_amplifier_volume",false);
		//是否每次都检测文件存在
		m_check_video_file_exist = config_file.read_boolean(L"control",L"check_file_exist",false);
		//是否每首歌曲都启用灯控码值
		m_song_light_control = config_file.read_boolean(L"light",L"song_light_control",false);
		if(m_song_light_control)
		{
			WriteLog(__FL__, L"启用了每首歌曲都发送灯控码的功能");
		}
		//音效
		m_song_audio_effect = config_file.read_boolean(L"amplifier",L"song_audio_effect",false);
		if (m_song_audio_effect)
		{
			WriteLog(__FL__, L"启用了每首歌曲都发送音效码的功能");
		}
		//允许向多个消息服务器上发送消息，得到消息服务器IP		
		server_ip = config_file.read_string(L"server",L"message_server_ip",L"");
		if (!server_ip.empty())
		{
			char msg_ip[256];
			memset(msg_ip,0x0,sizeof(msg_ip));

			result = string_conv.widechar_to_multibyte(server_ip.c_str(),msg_ip,sizeof(msg_ip));
			if (result)
			{
				//分离IP地址
				char *split_symbol = strchr(msg_ip,';');
				if (split_symbol)
				{
					//两个消息服务器
					strncpy(m_msg_server_ip[0],msg_ip,split_symbol-msg_ip);
					strcpy(m_msg_server_ip[1],split_symbol+1);
					//消息服务器的个数
					m_msg_server_count = 2;
				}
				else
				{
					//一个消息服务器
					strcpy(m_msg_server_ip[0],msg_ip);
					//消息服务器的个数
					m_msg_server_count = 1;
				}
			}
			else
			{
				//消息服务器的个数
				m_msg_server_count = 0;
			}
		}
		else
		{
			//消息服务器的个数
			m_msg_server_count = 0;
		}

		//是否启用测机
		m_use_test_function = config_file.read_boolean(L"test_software",L"use_test_function",false);
		if (m_use_test_function)
		{
			//得到测机密码
			m_ktv_test_password = config_file.read_string(L"room",L"ktv_test_password",L"");
		}
		//得到演唱台屏幕的校准坐标
		m_slave_screen_left_top_x = config_file.read_integer(L"slave_screen_coordiante",L"left_top_x",0);
		m_slave_screen_left_top_y = config_file.read_integer(L"slave_screen_coordiante",L"left_top_y",0);
		m_slave_screen_right_bottom_x = config_file.read_integer(L"slave_screen_coordiante",L"right_bottom_x",0);
		m_slave_screen_right_bottom_y = config_file.read_integer(L"slave_screen_coordiante",L"right_bottom_y",0);
		//得到墙面板屏幕的校准坐标
		m_wall_panel_screen_left_x = config_file.read_integer(L"wall_panel_screen_coordiante",L"left_top_x",0);
		m_wall_panel_screen_top_y = config_file.read_integer(L"wall_panel_screen_coordiante",L"left_top_y",0);
		m_wall_panel_screen_right_x = config_file.read_integer(L"wall_panel_screen_coordiante",L"right_bottom_x",0);
		m_wall_panel_screen_bottom_y = config_file.read_integer(L"wall_panel_screen_coordiante",L"right_bottom_y",0);
		//得到门牌机屏幕的校准坐标
		m_doorplate_left_top_x = config_file.read_integer(L"doorplate_screen_coordiante",L"left_top_x",0);
		m_doorplate_left_top_y = config_file.read_integer(L"doorplate_screen_coordiante",L"left_top_y",0);
		m_doorplate_right_bottom_x = config_file.read_integer(L"doorplate_screen_coordiante",L"right_bottom_x",0);
		m_doorplate_right_bottom_y = config_file.read_integer(L"doorplate_screen_coordiante",L"right_bottom_y",0);


		//是否启用后台开关房
		m_use_open_room_function = config_file.read_boolean(L"room",L"use_open_roon_function",false);
		if(m_use_open_room_function)
		{
			WriteLog(__FL__, L"启用后台开关房控制");
		}
		else
		{
			WriteLog(__FL__, L"不使用后台开关房控制功能");
		}

		//得到开关房服务器IP
		server_ip = config_file.read_string(L"server",L"switch_room_server_ip",L"192.168.0.1");
		if (!server_ip.empty())
		{
			memset(m_back_server_ip,0x0,sizeof(m_back_server_ip));
			string_conv.widechar_to_multibyte(server_ip.c_str(),m_back_server_ip,sizeof(m_back_server_ip));
		}

		//得到设置麦霸规则服务器ip
		server_ip = config_file.read_string(L"server",L"set_maiba_rule_ip",L"");
		if (!server_ip.empty())
		{
			memset(m_set_maiba_rule_ip,0x0,sizeof(m_set_maiba_rule_ip));
			string_conv.widechar_to_multibyte(server_ip.c_str(),m_set_maiba_rule_ip,sizeof(m_set_maiba_rule_ip));

			AfxBeginThread(Cflashktv10Wnd::song_share_success_thread,this);
		}

		//服务程序所在的服务器IP
		server_ip = config_file.read_string(L"server",L"service_server_ip",L"");
		if (!server_ip.empty())
		{
			memset(m_service_server_ip,0x0,sizeof(m_service_server_ip));
			string_conv.widechar_to_multibyte(server_ip.c_str(),m_service_server_ip,sizeof(m_service_server_ip));
		}

		/************************得到IP信息*************************************/
		//得到机器名
		gethostname(m_send_room_name,sizeof(m_send_room_name));
		if (strlen(m_send_room_name)>0)
		{
			//得到IP
			hostent * host_content = gethostbyname(m_send_room_name);
			/*
			if (host_content && host_content->h_addr_list[0])
			{
			//多字节IP
			strcpy(m_send_room_ip,inet_ntoa(*((struct in_addr *)host_content->h_addr_list[0])));
			//宽字节IP
			string_conv.multibyte_to_widechar(m_send_room_ip,m_room_ip,sizeof(m_room_ip));
			}*/

			char server_temp[30];
			char local_temp[30]; 
			memset(server_temp,0x0,sizeof(server_temp));
			string_conv.widechar_to_multibyte(server_ip.c_str(),server_temp,sizeof(server_temp));
			//得到前面的ip段
			char* temp = strrchr(server_temp,'.');
			temp[0] = '\0';

			if (host_content)
			{
				if (host_content->h_addrtype == AF_INET)
				{
					int nAdapter = 0;
					while(host_content->h_addr_list[nAdapter])
					{
						in_addr *pAddr = (in_addr*)host_content->h_addr_list[nAdapter];
						strcpy(local_temp, inet_ntoa(*pAddr));
						temp = strrchr(local_temp,'.');
						temp[0] = '\0';
						if (0 == strcmp(local_temp, server_temp))
						{
							//多字节IP
							strcpy(m_send_room_ip, inet_ntoa(*pAddr));
							//宽字节IP
							string_conv.multibyte_to_widechar(m_send_room_ip,m_room_ip,sizeof(m_room_ip));
							break;
						}
						nAdapter++;
					}
				}
			}
		}
		WriteLog(__FL__, L"获得IP信息成功!");
		//得到服务器路径
		m_server_path = config_file.read_string(L"server",L"server_path",L"");
		if (!m_server_path.empty() && !PathFileExists(m_server_path.c_str()))
		{
			//服务器路径是错误的就清空
			m_server_path.clear();
			config_file.write_string(L"server",L"server_path",L"");
		}
		if (!m_server_path.empty())
		{
			//如果服务器路径非空，得到保存已选歌曲ID的文件路径
			swprintf(m_save_song_file_path,L"%s\\song_info",m_server_path.c_str());
			if (!PathFileExists(m_save_song_file_path))
			{
				//song_info文件夹不存在，就不保存选择歌曲编号了。
				memset(m_save_song_file_path,0x0,sizeof(m_save_song_file_path));
			}
			else
			{
				memset(m_save_song_file_path,0x0,sizeof(m_save_song_file_path));
				swprintf(m_save_song_file_path,L"%s\\song_info\\%s.dat",m_server_path.c_str(),m_room_ip);
			}

			m_music_enjoy_path = m_server_path;
		}

		//得到是否使用智能拼音
		m_use_smart_pinyin = config_file.read_boolean(L"flash",L"use_smart_pinyin",true);
		//播放广告的时间间隔
		m_play_AD_time_elapse = config_file.read_integer(L"AD",L"time_elapse",30);
		if (m_play_AD_time_elapse<30)
		{
			//至少30秒，以保证广告动画能做完
			m_play_AD_time_elapse = 30;
		}
		//默认歌曲名字颜色
		m_default_song_name_color =config_file.read_string(L"song_name_color",L"default_color",L"0xFFFFFF");
		//选择歌曲颜色
		m_select_song_name_color = config_file.read_string(L"song_name_color",L"select_song_color",L"0xFF9900");
		//正播放歌曲名字颜色
		m_playing_song_name_color = config_file.read_string(L"song_name_color",L"playing_song_color",L"0xFF0000");
		//预览是否允许播放歌曲总库
		m_preview_allow_play_song_db = config_file.read_boolean(L"preview_song",L"allow_play_song_db",true);
		//得到显示墙面板图片的时间
		m_show_wall_panel_image_time = config_file.read_integer(L"wall_panel",L"show_wall_panel_picture_time",10);
		//得到是否允许播放dj
		m_allow_play_dj = config_file.read_boolean(L"room",L"allow_play_dj",true);
		//得到允许播放DJ的时间
		m_allow_play_dj_time = config_file.read_string(L"room",L"all_play_dj_time",L"");
		//酒水软件启动后，后台最小化
		m_ktv_software_min = config_file.read_boolean(L"drinks",L"drinks_open_ktv_min",false);
		if(m_ktv_software_min)
		{
			WriteLog(__FL__, L"酒水软件启动后，后台最小化");
		}
		//是否每次都检测文件存在
		m_check_video_exist = config_file.read_boolean(L"control",L"check_file_exist",false);
		//开房前是否允许播放歌曲
		m_play_song_before_open_room = config_file.read_boolean(L"room",L"play_song_before_open_room",true);
		//关房之后，允许播放的歌曲数
		m_song_count_after_close_room = config_file.read_integer(L"room",L"play_song_count_close_room",0);
		m_play_song_count_after_close_room = m_song_count_after_close_room;
		//歌曲显示方式
		//m_song_show_mode = (FLASH_SONG_SHOW_MODE)config_file.read_integer(L"flash",L"song_show_mode",0);
		m_song_show_mode = SONG_SHOW_MODE_LIST;
		//是否启用负载均衡
		m_use_load_balance = config_file.read_boolean(L"control",L"use_load_balance",true);
		//歌星分类方式
		m_singer_class_mode = config_file.read_integer(L"flash",L"singer_class",1);
		if (0==m_singer_class_mode)
		{
			//旧分类方式
			m_singer_class_mode = SINGER_CLASS_MODE_OLD;
		}
		else
		{
			//新分类方式
			m_singer_class_mode = SINGER_CLASS_MODE_NEW;
		}
		for (int m=0;m<TV_CHANNEL_COUNT;m++)
		{
			//电视服务器
			memset(item_value,0x0,sizeof(item_value));
			swprintf(item_value,L"server_ip%d",m+1);
			m_tv_server_ip[m] = config_file.read_string(L"TV",item_value,L"192.168.0.1");
			//电视频道
			memset(item_value,0x0,sizeof(item_value));
			swprintf(item_value,L"channel%d",m+1);
			m_tv_channel[m] = config_file.read_integer(L"TV",item_value,0);
		}
		//是否锁定空闲歌曲音量
		m_lock_public_video_volume = config_file.read_boolean(L"amplifier",L"lock_public_video_volume",false);
		//读取墙面板显示模式
		m_wall_panel_show_mode = (WALL_PANEL_SHOW_MODE)config_file.read_integer(L"wall_panel",L"wall_panel_show_mode",WALL_PANEL_VIDEO_IMAGE);
		//模糊查询
		m_use_obscure_query = config_file.read_boolean(L"DB_query",L"obscure_query",false);
		if (m_use_obscure_query)
		{
			WriteLog(__FL__, L"启用数据库模糊查询功能");
			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].operation_symbols = L"like \"%";
			song_query_condition[SONG_NAME_SUFFIX].operation_symbols = L"like \"%";
			singer_query_condition[SINGER_TABLE_NAME_SUFFIX].operation_symbols = L"like \"%";
			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].operation_symbols = L"like \"%";
		}
		//保存已选歌曲到服务器
		m_save_selected_song_to_server = config_file.read_boolean(L"server",L"save_selected_song_to_server",false);
		if (m_save_selected_song_to_server)
		{
			WriteLog(__FL__, L"启用了保存已选歌曲到服务器的功能");
		}
		m_use_new_msg_system = config_file.read_boolean(L"msg_system",L"use_new_msg_system",false);
		if (m_use_new_msg_system)
		{
			WriteLog(__FL__, L"使用新的消息系统");
		}
		//重播模式
		m_replay_mode = config_file.read_integer(L"control_function",L"replay_function",0);
		//是否启用互动游戏
		m_use_Interactive_game = config_file.read_boolean(L"game",L"open_game",false);
		//互动游戏是否全屏
		m_game_full_screen_show = config_file.read_boolean(L"game",L"full_screen_show",false);
		//互动游戏显示的窗口编号
		m_show_game_window_number = config_file.read_integer(L"game",L"show_window_number",0);
		//创建歌曲提示的osd图片
		create_osd_image();
		//播放电影密码
		m_play_movie_password = config_file.read_string(L"room",L"play_movie_password",L"");
		//神龙卡输出模式
		m_sigma_card_output_mode = config_file.read_integer(L"control",L"sigma_card_output_mode",0);
		//显示歌曲总数
		m_show_song_total_count = config_file.read_boolean(L"flash",L"show_song_total_count",true);
		//启用内嵌酒水
		m_use_plug_in_drinks = config_file.read_boolean(L"drinks",L"use_plug_in_drinks",false);
		//是否启用控件变调功能
		m_control_change_tone = config_file.read_boolean(L"control",L"change_tone",false);
		if (m_control_change_tone)
		{
			WriteLog(__FL__, L"启用控件变调功能");
		}
		//是否允许取消服务
		m_pc_allow_cancel_service = config_file.read_boolean(L"flash",L"allow_cancel_service",false);
		//互动游戏允许空闲时间
		m_interactive_game_idless_time = config_file.read_integer(L"game",L"idless_time",6);
		if (m_interactive_game_idless_time<1)
		{
			m_interactive_game_idless_time = 1;
		}
		//转化成秒
		m_interactive_game_idless_time *= 60;
		//接受的灯光消息是否发送码
		m_recv_no_send_light_code = config_file.read_boolean(L"light",L"recv_no_send_code",false);
		//音量条
		m_show_vertical_volumn_bar=config_file.read_boolean(L"osd",L"show_vertical_volumn_bar",false);
		//记忆灯光状态
		m_memory_light_state = config_file.read_boolean(L"light",L"memory_light_state",true);
		//发送音量功放值的次数
		m_send_volumn_amplifier_code_count=config_file.read_integer(L"amplifier",L"send_amplifier_code_count",1);
		if (m_send_volumn_amplifier_code_count<1)
		{
			m_send_volumn_amplifier_code_count=1;
		}
		//是否软屏切
		m_screen_show_video = config_file.read_boolean(L"control",L"monitor_play_video",false);
		//门牌机是否显示滚动文字
		m_doorplate_show_scroll_text = config_file.read_boolean(L"doorplate_machine",L"show_scroll_text",false);
		//是否启用视频转播盒
		m_tv_topbox_mode = config_file.read_boolean(L"TV",L"topbox_mode",false);
		//得到电视的显示方式，单播或是组播
		m_tv_play_mode = config_file.read_integer(L"TV",L"tv_play_mode",1);
		//电视开启频道个数
		m_tv_show_count = config_file.read_integer(L"TV",L"tv_show_count",1);
		//电视频道名字
		m_tv_name[0] = config_file.read_string(L"TV",L"channel_name1",L"");
		m_tv_name[1] = config_file.read_string(L"TV",L"channel_name2",L"");
		m_tv_name[2] = config_file.read_string(L"TV",L"channel_name3",L"");
		m_tv_name[3] = config_file.read_string(L"TV",L"channel_name4",L"");
		m_tv_name[4] = config_file.read_string(L"TV",L"channel_name5",L"");
		m_tv_name[5] = config_file.read_string(L"TV",L"channel_name6",L"");
		m_tv_name[6] = config_file.read_string(L"TV",L"channel_name7",L"");
		m_tv_name[7] = config_file.read_string(L"TV",L"channel_name8",L"");

		//微博显示方式
		m_weibo_show_mode = config_file.read_integer(L"weibo",L"half_screen_show_pos",WEIBO_SHOW_MODE_FULL_SCREEN_V);
		//得到微博图片的宽度
		Get_weibo_image_width();

		//音乐欣赏的服务器路径
		m_music_enjoy_path = config_file.read_string(L"server",L"music_enjoy_path",L"");
		//潮流榜单文件服务器路径
		m_str_trend_list_path = config_file.read_string(L"server", L"trend_list_path", L"");
		//互动场景屏滚动字幕
		wstring strTmp = L"";
		TCHAR szTmp[256] = {0x00};
		strTmp = config_file.read_string(L"inter_screen",L"default_info",L"");
		_tcscpy(m_inter_screen_caption.default_info, strTmp.c_str());
		strTmp = config_file.read_string(L"inter_screen",L"ad_info",L"");
		_tcscpy(m_inter_screen_caption.ad_info, strTmp.c_str());
		strTmp = config_file.read_string(L"inter_screen",L"activity_info",L"");
		_tcscpy(m_inter_screen_caption.activity_info, strTmp.c_str());
		strTmp = config_file.read_string(L"inter_screen",L"program_info",L"");
		_tcscpy(m_inter_screen_caption.program_info, strTmp.c_str());
		strTmp = config_file.read_string(L"inter_screen",L"challenge_star_info",L"");
		_tcscpy(m_inter_screen_caption.challenge_star_info, strTmp.c_str());
		strTmp = config_file.read_string(L"inter_screen",L"across_pass_info",L"");
		_tcscpy(m_inter_screen_caption.across_pass_info, strTmp.c_str());
		//百秒夺奖配置
		m_nTotalPassCount = config_file.read_integer(L"across_pass", L"pass_count", 0);
		m_nContinueCount = config_file.read_integer(L"across_pass", L"continue_count",1);
		m_nGoalScore = config_file.read_integer(L"across_pass", L"goal_score", 50);
		m_nIceInitCount = config_file.read_integer(L"across_pass", L"ice_init_count", 5);
		m_nIceAddSecond = config_file.read_integer(L"across_pass", L"ice_add_second", 5);
		//互动游戏配置
		strTmp = config_file.read_string(L"server", L"active_game_ip", L"");
		string_conv.widechar_to_multibyte(strTmp.c_str(), m_szActiveGameIp, sizeof(m_szActiveGameIp));
		swprintf(m_szActiveGameUrl, L"http://%s/Index/GetW?ip=", strTmp.c_str());
		swprintf(szTmp, L"%s\\active_game_img", m_work_path);
		if (!PathFileExists(szTmp))
		{
			SuperMkDir(szTmp);
		}
		//微信互动-弹幕配置
		m_bWechatBarrageOpen = config_file.read_boolean(L"wechat", L"wechat_barrage_open", false);
		m_nWechatBarrageMode = config_file.read_integer(L"wechat", L"wechat_barrage_mode", 0);
		m_nFontSizeMin = config_file.read_integer(L"wechat", L"wechat_barrage_font_size_min", 20);
		m_nFontSizeMax = config_file.read_integer(L"wechat", L"wechat_barrage_font_size_max", 40);
		strTmp = config_file.read_string(L"wechat", L"wechat_barrage_ip", L"");
		string_conv.widechar_to_multibyte(strTmp.c_str(), m_szWechatBarrageIp, sizeof(m_szWechatBarrageIp));
		swprintf(m_szWechatBarrageUrl, L"http://%s/Barrage/EnterBarrage?ip=", strTmp.c_str());
		swprintf(szTmp, L"%s\\wechat_barrage_img", m_work_path);
		if (!PathFileExists(szTmp))
		{
			SuperMkDir(szTmp);
		}
		//微信互动-照片推送
		m_nPicturePlayTime = config_file.read_integer(L"wechat", L"wechat_picture_time", 15);

		//手动开房后自动关房的时间间隔
		m_nCloseRoomTimeSpace = config_file.read_integer(L"room", L"close_room_time_space", 0);
		//音乐欣赏背景视频路径
		strTmp = config_file.read_string(L"music_enjoy", L"baidu_bk_video_path", L"");
		_tcscpy(m_szMusicEnjoyBkVideo[0], strTmp.c_str());
		strTmp = config_file.read_string(L"music_enjoy", L"qq_bk_video_path", L"");
		_tcscpy(m_szMusicEnjoyBkVideo[1], strTmp.c_str());
		strTmp = config_file.read_string(L"music_enjoy", L"kugou_bk_video_path", L"");
		_tcscpy(m_szMusicEnjoyBkVideo[2], strTmp.c_str());
		strTmp = config_file.read_string(L"music_enjoy", L"kuwo_bk_video_path", L"");
		_tcscpy(m_szMusicEnjoyBkVideo[3], strTmp.c_str());
		//电影好评次数
		m_nFilePraiseCnt = config_file.read_integer(L"room", L"film_praise_count", 10);

		//录音文件保存路径
		m_recorder_dir = config_file.read_string(L"recorder",L"tape_path",L"");
		if (!m_recorder_dir.empty())
		{
			if (!PathFileExists(m_recorder_dir.c_str()))
			{
				SuperMkDir(m_recorder_dir.c_str());
			}
		}

		//录音文件保存的网络路径
		m_recorder_web_dir = config_file.read_string(L"recorder",L"tape_server_path",L"");
		if (!m_recorder_web_dir.empty())
		{
			if (!PathFileExists(m_recorder_web_dir.c_str()))
			{
				SuperMkDir(m_recorder_web_dir.c_str());
			}
		}

		//录音混合模式
		m_tape_mode = config_file.read_integer(L"recorder",L"tape_mode",1);
		m_player_manager.set_video_tape_mode(m_tape_mode);

		//得到当前的录音模式
		m_record_type = config_file.read_integer(L"recorder",L"record_type",0);

		if (1 == m_record_type)
		{
			//得到软件是否默认是否开启录音
			m_need_record_flag = config_file.read_boolean(L"recorder",L"record_flag",false);

			//读出当前 全自动录音模式  0,全自动录音关闭 1.全自动录音开启
			m_open_record_type = config_file.read_integer(L"recorder",L"open_record",0);
		}

		m_video_dating_show = config_file.read_boolean(L"room", L"video_dating_show", false);

		m_show_sort_init_mode = config_file.read_string(L"sort", L"song_sort_mode", L"pinyin");

		m_allow_show_cloud_song = config_file.read_boolean(L"room", L"allow_show_cloud_song", false);

		m_default_show_score_line = config_file.read_integer(L"mark", L"default_show_score_line", 1);

		if (m_default_show_score_line == 0)
		{
			m_show_score_in_screen = false;
		}
		m_nScoreIncreaseRate = config_file.read_integer(L"mark", L"socre_increase_rate", 0);
		WriteLog(__FL__, L"开始获取SQL Server数据库连接信息!");

		//阳光秀吧数据库配置
		std::wstring ssb_ip = config_file.read_string(L"sunshine_show",L"db_ip",L"");
		std::wstring ssb_user = config_file.read_string(L"sunshine_show",L"db_user",L"");
		std::wstring ssb_pwd = config_file.read_string(L"sunshine_show",L"db_pwd",L"");
		std::wstring ssb_db_name = config_file.read_string(L"sunshine_show",L"db_name",L"");

		//好声音数据库配置
		std::wstring vc_ip = config_file.read_string(L"voice_china",L"vc_ip",L"");
		std::wstring vc_user = config_file.read_string(L"voice_china",L"vc_user",L"");
		std::wstring vc_pwd = config_file.read_string(L"voice_china",L"vc_pwd",L"");
		std::wstring vc_db_name = config_file.read_string(L"voice_china",L"vc_name",L"");

		//照片MV服务器
		m_picture_mv_server_ip = config_file.read_string(L"server", L"picture_mv_server_ip", L"");

		//得到显示歌曲视频or图片
		m_song_show_video_picture = config_file.read_boolean(L"room",L"song_show_video_picture",false);
		//查询默认灯光
		m_default_auto_light = config_file.read_integer(L"room", L"set_default_auto_light", 1);

		//ksc歌词路径
		m_ksc_lyrics_path = config_file.read_string(L"server", L"ksc_lyrics_path", L"");

		//得到默认是否弹出服务框
		if (config_file.read_integer(L"room", L"server_pop_up_window", 0) == 0)
		{
			m_server_pop_up_window = false;
		}else{
			m_server_pop_up_window = true;
		}

		//对手动负载服务器处理
		int manually_config = config_file.read_integer(L"server_config", L"manually_config", 0);
		if (manually_config == 1) //开启手动负载均衡
		{
			//获得本机ip的最后一位
			TCHAR *pLastIP = _tcsrchr(m_room_ip, '.');
			pLastIP++;

			//查找当前访问第几台机器
			for (int i = 1; i < 7; i++)
			{
				CString csKey;
				csKey.Format(L"server%d", i);
				CString csServer= config_file.read_string(L"server_config", csKey, L"").c_str();
				
				//如果为空，则跳过
				if (csServer == _T(""))
					continue;

				csServer += _T(",");

				//解析字符串
				while(csServer != _T(""))
				{
					int nPos = csServer.Find(_T(",")); //获得到ip
					CString csleft = csServer.Left(nPos);
					if (_tcscmp(csleft.GetBuffer(), pLastIP) == 0)
					{
						m_server_manually_val = i - 1;
						break;
					}
					csServer = csServer.Mid(nPos + 1);
				}

				if(m_server_manually_val != -1) break;
			}
			m_player_manager.set_server_link_index(m_server_manually_val);
		}

		//读取默认音轨
		m_default_track = config_file.read_integer(L"room", L"default_track", 1);

		if (vc_ip != L"" && vc_user != L"" && vc_pwd != L"" && vc_db_name != L"")
		{
			//连接sql server数据库,连接阳光秀吧的数据库
			m_voice_china_db = m_sql_server_voice_db.Connect(vc_ip.c_str(),vc_user.c_str(),vc_pwd.c_str(),vc_db_name.c_str());
			if (!m_voice_china_db)
			{
				WriteLog(__FL__, L"连接SQL Server数据库失败! 请检查配置文件voice_china");
			}
		}

		if (ssb_ip != L"" && ssb_user != L"" && ssb_pwd != L"" && ssb_db_name != L"")
		{
			//连接sql server数据库,连接阳光秀吧的数据库
			m_sunshine_show_db = m_sql_server_db.Connect(ssb_ip.c_str(),ssb_user.c_str(),ssb_pwd.c_str(),ssb_db_name.c_str());
			if (!m_sunshine_show_db)
			{
				WriteLog(__FL__, L"连接SQL Server数据库失败! 请检查配置文件sunshine_show");
			}

			//电影数据库也使用这个连接
			m_film_manager.Init(&m_sql_server_db);
		}
		//必须先得到包房的IP地址
		//得到主被控信息
		result = get_master_slave_function();

		//读取是否启用ipad点歌
		m_use_mobile_vod = config_file.read_boolean(L"ipad",L"use_mobile_vod",true);
		//读取开房是否重新获取二维码 
		if (m_use_mobile_vod)
		{
			judge_generate_encode();
		}

		if (2!=m_master_slave_control_flag)
		{
			/*****************************启动IPAD服务程序********************************/
			//启动线程启动启动IPAD服务程

			//AfxBeginThread(start_ipad_service_thread,this);

			//检查程序是否运行
			result = check_process_run_state(L"ipadservice.exe");
			if (!result)
			{
				//没有运行就启动
				memset(game_path,0x0,sizeof(game_path));
				swprintf(game_path,L"%s\\ipadservice.exe",m_work_path);
				if (PathFileExists(game_path))
					start_plug_in_process(game_path,SW_SHOW,process_id);
			}
		}

		/***************************初始化广告图片***********************************/
		TCHAR image_path[256];

		memset(image_path,0x0,sizeof(image_path));

		if (SCREEN_TYPE_VERTICAL==m_interface_type)
		{
			//竖版
			swprintf(image_path,L"%s\\v",g_folder_name[11]);
		}
		else
		{
			//横版
			swprintf(image_path,L"%s\\h",g_folder_name[11]);
		}
		m_pc_AD_manager.init_picture_ad(image_path);
		m_game_AD_manager.init_picture_ad(g_folder_name[27]);
		m_wall_panel_AD_manager.init_picture_ad(g_folder_name[29]);


		/********************************启动架子鼓程序****************************************/
		//检查程序是否运行
		result = check_process_run_state(L"DumpListener.exe");
		if (!result)
		{
			//没有运行就启动
			memset(game_path,0x0,sizeof(game_path));
			swprintf(game_path,L"%s\\DumpListener.exe",m_work_path);
			if (PathFileExists(game_path))
				start_plug_in_process(game_path,SW_SHOW,process_id);
		}

		/************************************启动音效控制器*********************************/
		//检查程序是否运行
		result = check_process_run_state(L"AudioControl.exe");
		if (!result)
		{
			//没有运行就启动
			memset(game_path,0x0,sizeof(game_path));
			swprintf(game_path,L"%s\\AudioControl.exe",m_work_path);
			start_plug_in_process(game_path,SW_SHOW,process_id);
		}

		/***************************初始化歌词****************************************/
		/*
		//初始化歌词
		WriteLog(__FL__, L"开始初始化歌词检索");
		m_lyricSrarch.InitLyric(m_work_path);	
		WriteLog(__FL__, L"完成初始化歌词检索");
		*/
		/*************************搜索游戏***************************/
		/*
		memset(game_path,0x0,sizeof(game_path));
		swprintf(game_path,L"%s\\%s",m_work_path,g_folder_name[24]);
		m_game_manager.search_game(game_path);*/

		/***************************删除录音文件***********************/
		WriteLog(__FL__, L"删除录音文件");
		delete_recorder_file(); 

		/**********************************注册播放器控件**********************************/
		WriteLog(__FL__, L"注册播放器控件开始!!");
		result = config_file.read_boolean(L"control",L"register_control",false);
		if (result)
		{
			TCHAR font_path[256];
			memset(font_path,0x0,sizeof(font_path));

			//注册播放控件
			//m_player_manager.unregister_player_ocx();
			m_player_manager.register_player_ocx(m_work_path);
			//注册字体
			std::wstring folder_name = config_file.read_string(L"folder_name",L"font_folder_name",L"fonts");
			swprintf(font_path,L"%s\\%s",m_work_path,folder_name.c_str());
			register_font(font_path);
			//只注册一次
			//config_file.write_boolean(L"control",L"register_control",false);
			WriteLog(__FL__, L"注册控件完成");
		}
		WriteLog(__FL__, L"注册播放器控件结束!!");
		/****************************创建播放器**************************/
		if (2==m_master_slave_control_flag)
		{
#ifdef SLAVE_NO_PLAY_VIDEO
			GUI_Startup();
#else
			result = m_player_manager.create_player(this);
			if (!result)
			{
				WriteLog(__FL__, L"创建播放器失败");
				AfxMessageBox(L"创建播放器失败，请重启电脑");
				//退出系统
				PostMessage(WM_CLOSE,NULL,NULL);
			}
			if (!net_log_path.empty())
			{
				//赋值网络日志路径
				m_player_manager.Set(SD_LOG_DIRECTORY,(long)net_log_path.c_str());
			}
#endif
		}
		else
		{
			result = m_player_manager.create_player(this);
			if (!result)
			{
				WriteLog(__FL__, L"创建播放器失败");
				AfxMessageBox(L"创建播放器失败，请重启电脑");
				//退出系统
				PostMessage(WM_CLOSE,NULL,NULL);
			}
			if (!net_log_path.empty())
			{
				//赋值网络日志路径
				m_player_manager.Set(SD_LOG_DIRECTORY,(long)net_log_path.c_str());
			}
		}
		WriteLog(__FL__, L"创建播放器结束!");
		/*****************************创建播放器之后，在显示flash界面，由于需要解密***********************************/
		result = show_flash_interface();
		if (!result)
		{
			AfxMessageBox(L"加载flash界面失败，请检查界面是否正确");
			PostMessage(WM_CLOSE,NULL,NULL);
		}
		WriteLog(__FL__, L"播放器显示在flash中结束!");
		/******************************创建各个窗口*********************************/
		m_video_left_top_x = 100;
		m_video_left_top_y = 100;
		m_video_right_button_x = 300;
		m_video_right_button_y = 300;
		//软屏切窗口
		m_screen_show_window_exist = m_screen_show_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,CRect(m_video_left_top_x, m_video_left_top_y, m_video_right_button_x, m_video_right_button_y),this,VIDEO_SCREEN_SHOW_WINDOW_ID);
		if (m_screen_show_window_exist)
		{
			if (SCREEN_TYPE_VERTICAL==m_interface_type)
			{
				//竖版
				CRect window_rect;
				m_screen_show_window.GetClientRect(&window_rect);
				m_sub_screen_show_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,window_rect,&m_screen_show_window,SUB_SCREEN_SHOW_WINDOW_ID);
				m_screen_show_window.set_show_image(m_video_bg_path);
			}
			m_screen_show_window.show_window(false);
		}
		else
		{
			WriteLog(__FL__, L"创建软屏切窗口失败");
		}
		WriteLog(__FL__, L"创建软屏切窗口结束!");
#ifdef SICHUAN_M
		//创建m平方的图片窗口
		TCHAR msquare_path[256]; 
		memset(msquare_path,0x0,sizeof(msquare_path));
		swprintf(msquare_path,L"%s\\msquare.jpg",m_work_path);
		get_image_resolution(msquare_path,m_msqure_width,m_msquer_height);
		m_screen_msquare_window_exist = m_screen_msquare_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,CRect(m_msquare_left_top_x,m_msquare_left_top_y, m_msqure_width, m_msquer_height),this,MSQUARE_SCREEN_SHOW_WINDOW_ID);
		m_screen_msquare_window.set_show_image(msquare_path);
		m_screen_msquare_window.show_window(false);
#endif

		//大厅直播窗口
		m_lobby_live_window_exist = m_lobby_live_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,CRect(0, 0, 200, 200),this,LOBBY_LIVE_WINDOW_ID);
		if (m_lobby_live_window_exist)
		{
			m_lobby_live_window.show_window(false);
		}
		else
		{
			WriteLog(__FL__, L"创建大厅直播视频窗口失败");
		}
		WriteLog(__FL__, L"创建大厅直播窗口结束!");
		//电视窗口
		m_tv_window_exist = m_tv_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,CRect(0, 0, 0, 0),this,TV_WINDOW_ID);
		if (m_tv_window_exist)
		{
			m_tv_window.show_window(false);
		}
		else
		{
			WriteLog(__FL__, L"创建电视直播窗口失败");
		}
		WriteLog(__FL__, L"创建电视窗口结束!");
		//创建预览窗口
		m_preview_window_exist = m_preview_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,CRect(100, 100, 400, 400),this,PREVIEW_WINDOW_ID,false,220,true);
		if (m_preview_window_exist)
		{
			m_preview_window.show_window(false);
		}
		else
		{
			WriteLog(__FL__, L"创建预览视频窗口失败");
		}
		WriteLog(__FL__, L"创建预览窗口结束!");
		m_html_ctrl_exist = m_html_ctrl.CreateWnd(CRect(0,0,100,100), HTML_CTRL_ID, this);
		if (m_html_ctrl_exist)
		{
			m_html_ctrl.set_message_handle(m_hWnd);
			m_html_ctrl.ShowWindow(SW_HIDE);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = false;
		}
		WriteLog(__FL__, L"创建html窗口结束!");
		//手写面板
		m_handwriting_window_exist = m_handwriting_window.Create(WS_CHILD, CRect(0, 0, 100, 100), this,HANDWRITING_WINDOW_ID,false,220,false);
		if(m_handwriting_window_exist)
		{
			m_handwriting_window.ShowWindow(SW_HIDE);
			m_show_handwriting_window = false;
		}
		WriteLog(__FL__, L"创建手写面板结束!");
		//音效调节窗口
		memset(game_path,0x0,sizeof(game_path));
		if (!m_server_path.empty())
		{
			swprintf(game_path,L"%s\\audio_effect\\%s",m_server_path.c_str(),m_room_ip);
			if (!PathFileExists(game_path))
			{
				//文件夹不存在，就创建
				SuperMkDir(game_path);
			}
		}
		m_audio_effect_window_exist = m_audio_effect_window.CreateEx(0, AfxRegisterWndClass(NULL), NULL, WS_CHILD|SW_HIDE , CRect(m_first_display_x,m_first_display_y,m_first_display_width,m_first_display_height), this,AUDIO_EFFECT_WINDOW_ID,NULL,game_path);
		if (m_audio_effect_window_exist)
		{
			m_audio_effect_window.ShowWindow(SW_HIDE);
		}
		WriteLog(__FL__, L"创建音效调节窗口结束!");

		/*****************************加载广西视翰Topplayer DLL****************************/
		TCHAR szDllPath[MAX_PATH] = {0x00};
		//注册Callback函数
		m_PluginsEx.RegisterCdeclCallback(Cdecl_Callback);
#ifdef VICE_SCREEN_GUANGXI
		//灯光DLL		
		swprintf(szDllPath, L"%s\\GXShine\\LightControl_Plugins.dll", m_work_path);
		if (PathFileExists(szDllPath))
		{
			_tcscpy(m_GxShine_dll[0], szDllPath);
			m_PluginsEx.inital(szDllPath);
		}
#endif // VICE_SCREEN_GUANGXI

#ifdef _DEBUG
		//DLNADLL
		swprintf(szDllPath, L"%s\\GXShine\\DNLAControl_Plugins.dll", m_work_path);
		if (PathFileExists(szDllPath))
		{
			_tcscpy(m_GxShine_dll[1], szDllPath);
			m_PluginsEx.inital(szDllPath);

			//默认开启DLNA功能
			if(!m_PluginsEx.OnClickEx(m_GxShine_dll[1], true))
			{
				WriteLog(__FL__, L"开启DLNA功能失败!");
			}
			m_is_open_dlna = true;
		}
#endif // _DEBUG
		WriteLog(__FL__, L"加载Topplayer DLL结束!");
		//
		/*****************************初始化播放器******************************************/
		//初始化播放器
		if (m_screen_show_window_exist)
		{
			//先放大屏幕，这样使用D3D上屏，放大之后就不会花屏了
			m_screen_show_window.MoveWindow(0,0,640,480);
			if (SCREEN_TYPE_VERTICAL==m_interface_type)
			{
				//竖版
				m_sub_screen_show_window.MoveWindow(0,0,640,480);
				result = m_player_manager.initialize(m_screen_show_video,m_sub_screen_show_window.m_hWnd,m_hWnd);
			}
			else
			{
				result = m_player_manager.initialize(m_screen_show_video,m_screen_show_window.m_hWnd,m_hWnd);
			}
			if (!result)
			{
				WriteLog(__FL__, L"初始化播放器失败");
			}
			//窗口在恢复到原始尺寸
			m_screen_show_window.MoveWindow(CRect(m_video_left_top_x, m_video_left_top_y, m_video_right_button_x, m_video_right_button_y));
			if (SCREEN_TYPE_VERTICAL==m_interface_type)
			{
				CRect window_rect;
				m_screen_show_window.GetClientRect(&window_rect);
				m_sub_screen_show_window.MoveWindow(window_rect);
			}
		}
		WriteLog(__FL__, L"初始化播放器结束!");
		//视频播放管理初始化
		m_video_play_manager.initialize(m_hWnd,m_room_ip);
		WriteLog(__FL__, L"视频播放管理初始化结束!");
		//屏蔽 对录音进行初始化  FOR ZHEN 2013-08-07
		m_tape_audio.Init();
		WriteLog(__FL__, L"录音进行初始化结束!");
		/************************得到显示的包房名称的类型*******************************/
		memset(m_show_room_name,0x0,sizeof(m_show_room_name));
		int room_name_type = config_file.read_integer(L"room",L"show_roon_name_type",0);
		if (0==room_name_type)
		{
			//显示IP地址的最后一个字节
			//得到包房编号，IP地址的最后一个字节
			TCHAR *room_ip_name = _tcsrchr(m_room_ip,'.');
			_tcscpy(m_show_room_name,room_ip_name+1);
		}
		else if (1==room_name_type)
		{
			//计算机名称
			string_conv.multibyte_to_widechar(m_send_room_name,m_show_room_name,sizeof(m_show_room_name));
		}
		else
		{
			//读取配置文件
			config_file_manager room_name_config_file;

			//初始化配置文件名称
			room_name_config_file.init(L"room_name.ini");
			std::wstring read_room_name = room_name_config_file.read_string(L"room_name",m_room_ip,L"");
			if (read_room_name.empty())
			{
				//没有配置包房名，就显示IP地址的最后一个字节
				TCHAR *room_ip_name = _tcsrchr(m_room_ip,'.');
				_tcscpy(m_show_room_name,room_ip_name+1);
			}
			else
			{
				//显示客户写的包房名称
				_tcscpy(m_show_room_name,read_room_name.c_str());
			}
		}
		WriteLog(__FL__, L"得到显示的包房名称的类型初始化结束!");
		//启动了主被控，要创建主被控线程
		if ((1==m_master_slave_control_flag)||(2==m_master_slave_control_flag))
		{
			//使用主被控
			//启动主被控线程
			m_thread_handle = AfxBeginThread(Cflashktv10Wnd::master_slave_control_thread,this);
			if (m_thread_handle)
			{
				//创建线程终止的事件
				m_master_slave_event_handle = CreateEvent(NULL,true,false,NULL);
				if (m_master_slave_event_handle)
				{
					ResetEvent(m_master_slave_event_handle);
				}
			}			
		}
		WriteLog(__FL__, L"主被控初始化结束!");
		/****************************初始化大歌星录音库*****************************/
		m_recorder_handle = dagexing::CreateHandle(false);
		if (!m_recorder_handle)
		{
			WriteLog(__FL__, L"录音合成CreateHandle（）函数调用失败");
		}
		WriteLog(__FL__, L"初始化大歌星录音库!");
		/*************************启动线程*****************************/
		//创建辅助线程，用于检测前置机和加密狗，先初始化播放控件，让播放空闲先找狗
		m_thread_run = true;
		m_thread_handle = AfxBeginThread(Cflashktv10Wnd::assistant_thread,this);
		if (m_thread_handle)
		{
			//创建事件用于等待线程的终止
			m_assistant_thread_event_handle = CreateEvent(NULL, true, false, NULL);
			if (m_assistant_thread_event_handle)
			{
				ResetEvent(m_assistant_thread_event_handle);
			}
		}
		WriteLog(__FL__, L"启动查找加密狗线程启动成功!");

		//启动线程接受盒子消息
		//AfxBeginThread(send_data_to_box_tcp_thread,this);
		////创建事件用于等待线程的终止
		//m_box_thread_event_handle = CreateEvent(NULL, true, false, NULL);
		//if (m_box_thread_event_handle)
		//{
		//	ResetEvent(m_box_thread_event_handle);
		//}

		/***********************打开数据库*******************************/
		swprintf(m_db_path,L"%s\\ktv10.db",m_work_path);
		result = m_db_query.open_DB(m_db_path,true);
		if (result)
		{
			//打开数据库成功
			//清空录音表
			m_db_query.exec_sql(L"delete from song_recorder");
			//2011-07-29 modify.放到线程中得到服务器IP
			//得到服务器路径
			//get_server_path_by_db();
			AfxBeginThread(Cflashktv10Wnd::DB_thread,this);

			WriteLog(__FL__, L"打开数据库成功");
		}
		else
		{
			//打开数据库失败
			WriteLog(__FL__, L"打开数据库失败");
			AfxMessageBox(L"打开数据库失败，请检查数据库是否正确");
			//退出系统
			PostMessage(WM_CLOSE,NULL,NULL);
		}
		WriteLog(__FL__, L"初始化数据库结束!");
		//对空闲歌曲进行初始化，必须先进行播放器的初始化操作
		m_video_play_manager.query_idlesse_song_info(m_db_query);
		server_ip = config_file.read_string(L"server",L"mysql_server_ip",L"");
		if (!server_ip.empty())
		{
			//通过mysql数据查询房间状态
			string_conv.widechar_to_multibyte(server_ip.c_str(),m_mysql_server_path,sizeof(m_mysql_server_path));
			m_mysql_db.Init("cayman","1234",m_mysql_server_path,"Cayman");
			//连接数据库
			m_mysql_open_success = m_mysql_db.ConnectServer();
			if (m_mysql_open_success)
			{
				WriteLog(__FL__, L"打开mysql数据库成功");
			}
			else
			{
				WriteLog(__FL__, L"打开mysql数据库失败");
			}
		}

		//查询出排行榜的前十条数据
		//recommand_song_by_top_song();
		AfxBeginThread(query_recommand_top_song_thread,this);

		WriteLog(__FL__, L"查询出排行榜的前十条数据!");

		m_default_song_row_color = config_file.read_string(L"song_name_color",L"default_color",L"0xFFFFFF");       //默认歌曲颜色

#ifdef VOICE_CHINA_VERSION
		//启动接受好声音发送过来的数据
		AfxBeginThread(Cflashktv10Wnd::recv_server_voice_china_udp_thread,this);
#endif
		/*******************歌曲pk***********************/
		m_open_pk = get_use_pk_function();

		if (m_open_pk)
		{
			check_pk_content_timer_identifier = SetTimer(CHECK_PK_CONNECT_TIMER_EVENT_ID,1000,NULL);
		}

		//开启定时器，去请求图片
		request_head_picture_timer_identifier = SetTimer(REQUEST_HEAD_PICTURE_TIMER_EVENT_ID,1000*120,NULL);

		connect_server();

		get_use_video_dating_function();
		//发送给服务器，视频交友功能
		recv_serv_or_room_msg();

		//启动接收主被控文件线程
		//AfxBeginThread(Cflashktv10Wnd::recv_master_slave_file, this);

		//启动读取潮流榜单的线程
		AfxBeginThread(Cflashktv10Wnd::read_trend_list, this);

		//查询听音识曲四音轨歌曲个数
		AfxBeginThread(Cflashktv10Wnd::query_listen_song_info_tmp_thread, this);

		//生成互动游戏二维码图片
		result = generate_active_game_encode();
		if (!result)
		{
			WriteLog(__FL__, L"生成互动游戏二维码图片失败！");
		}
		//生成微信互动-弹幕二维码图片
		result = generate_wechat_barrage_encode();
		if (!result)
		{
			WriteLog(__FL__, L"生成微信互动-弹幕二维码图片失败！");
		}
		//接收云歌曲进度
		AfxBeginThread(Cflashktv10Wnd::cloud_song_down_progress, this);

		//**************************************照片场景
		//接受照片场景的flash消息
		AfxBeginThread(Cflashktv10Wnd::RecvFlashDataParseData, this);

		//是否启用全场景屏
		m_open_full_screen = config_file.read_integer(L"full_screen", L"full_screen", 0);
		if (m_open_full_screen == 1)
		{
			//启动全场景屏
			TCHAR szFlashPath[MAX_PATH] = {0x00};
			swprintf(szFlashPath, L"%s\\PhotoSceneScreen.app\\PhotoSceneScreen.exe", m_work_path);
			start_plug_in_processEx(szFlashPath, SW_SHOW, m_flash_process_id, m_flash_process_info);
		}
		///////////////////////////////////////*/
		//初始化爱秀直播ocx
		m_ocxShAxBrowse.Create(_T("BackMusic"), _T("BackMusic"),0, CRect(0,0,0,0), this, 10001);

#ifdef DAO_QI_MOVIE
		//道奇电影线程
		AfxBeginThread(Cflashktv10Wnd::DaoqiMovieCommunicateThread, this);
#endif // DAO_QI_MOVIE	

		return 0;
	}
	catch (...)
	{

	}

	return -1;
}

void Cflashktv10Wnd::send_server_video_dating_data(video_dating_status status, bool init /* = false */)
{
	TCHAR send_msg[1024];
	char local_ip[32] = {0x00};
	string_conversion string_conv;
	memset(send_msg,0x0,sizeof(send_msg));
	if (init)
	{
		//状态初始化		
		_tcscpy(m_video_dating_info.name, m_show_room_name); // 包房名
		m_video_dating_info.ncharacter = 1;	// 角色
		m_video_dating_info.nstatus = status; // 状态		
		bool result = GetHostIP(local_ip);//获得本机ip
		if (!result)
		{
			return;
		}
		string_conv.multibyte_to_widechar((const char *)local_ip,m_video_dating_info.ip,sizeof(m_video_dating_info.ip)/sizeof(TCHAR));
	}

	m_video_dating_info.nstatus = status;
	swprintf(send_msg,L"Message&VIDEODATING;%s@%d@%d@%s$END", m_video_dating_info.name, m_video_dating_info.nstatus, 
		m_video_dating_info.ncharacter, m_video_dating_info.ip);
	send_data_to_service_udp(send_msg);
}

void Cflashktv10Wnd::OnTimer(UINT nIDEvent)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	switch(nIDEvent)
	{
	case REQUEST_HEAD_PICTURE_TIMER_EVENT_ID:   //定时请求会员头像
		{
			request_head_picture_function();
		}
		break;
	case SHOW_PK_ACCEPT_WINDOW_TIMER_EVENT_ID:   //是否隐藏pk邀请对话框
		{
			bool result = false;
			TCHAR request[2048];
			memset(request,0x0,sizeof(request));

			m_b_pk_connect = false;
			m_b_pk_invitation = false;
			accept_invitation(0);
			TCHAR data[256];
			memset(data,0x0,sizeof(data));

			swprintf(data,L"%s",g_all_language[98].c_str());

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
			if (result)
			{
				flash_player_call_function(request);
			}

			//杀死定时器
			if (show_pk_accept_window_time_identifier)
			{
				KillTimer(show_pk_accept_window_time_identifier);
				show_pk_accept_window_time_identifier = 0;
			}

			//在电视上显示pk提示
			m_pk_info_show_pc = false;
			memset(m_pk_info_tip_msg,0x0,sizeof(m_pk_info_tip_msg));  //清空提示信息
			show_song_name();

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"popup_pk_dialog",_T("pk_HIDE"));
			if (result)
			{
				flash_player_call_function(request);
			}
		}
		break;
	case CHECK_PK_CONNECT_TIMER_EVENT_ID:   //检查PK是否连接
		{
			if (m_b_pk_connect)
			{
				string_conversion str_conv;
				//发送消息给连接的ip
				TCHAR checkIp[256];
				char  recviveIp[256];
				unsigned long return_time=0;		
				bool bexist = false;

				memset(checkIp,0x0,sizeof(checkIp));
				memset(recviveIp,0x0,sizeof(recviveIp));

				if (0 != _tcscmp(m_pk_invitationIP,L""))
				{
					_tcscpy(checkIp,m_pk_invitationIP);
				}
				if (0 != _tcscmp(m_pk_acceptIP,L""))
				{
					_tcscpy(checkIp,m_pk_acceptIP);
				}
				str_conv.widechar_to_multibyte(checkIp,recviveIp,sizeof(recviveIp));

				//判断当前IP是否存在
				for (int i = 0; i < m_pk_member_total; i++)
				{
					if (0 == _tcscmp(checkIp,m_send_member_data[i].ipaddress))
					{
						bexist = true;
					}
				}

				return_time = ping(recviveIp,1000);
				if (return_time<1000 && bexist)
				{
					//网络通 
				}
				else
				{
					//网络不通 
					//断开所有连接
					//	close_video_box();
					WriteLog(__FL__, L"网络不通断开连接!");


					//m_b_pk_connect = false;
					//m_b_pk_invitation = false;
				}

			}
		}
		break;
	case SHOW_LOGO_TIMER_EVENT_ID:           //动画显示logo的定时器
		{
			//显示下一幅logo图片
			show_next_logo_osd(false);
		}
		break;
	case DESTROY_GIFT_WND_TIME_EVENT_ID:
		{
			destroy_wechat_gift_wnd();
			KillTimer(m_destroy_gift_wnd_timer_identifier);
			m_destroy_gift_wnd_timer_identifier = 0;
			//清空队列
			m_wechat_gift_lock.lock();
			m_deque_wechat_message.clear();
			m_wechat_gift_lock.unlock();
		}
		break;
	case SHOW_CONTROL_OSD_TIMER_EVENT_ID:     //显示控制osd的定时器
		{
			//杀死定时器
			KillTimer(show_control_osd_timer_identifier);
			show_control_osd_timer_identifier = 0;
			//停止控制osd播放
			stop_control_osd_logo();
		}
		break;
	case SHOW_BMP_PICTURE_TIMER_EVENT_ID:
		{
			//杀死定时器
			KillTimer(show_bmp_picture_timer_identifier);
			show_bmp_picture_timer_identifier=0;
			if (!m_show_song_tip_osd)
			{
				//停止播放bmp osd
				m_player_manager.stop_bmp_osd();
				//显示下一首提示标志
				m_show_song_tip_osd=false;
			}			
			//设置歌词接龙标志
			m_start_lyric_link = false;		
		}
		break;
	case SHOW_SCORE_TIMER_EVENT_ID:
		{
			//杀死定时器
			KillTimer(show_score_timer_identifier);
			show_score_timer_identifier=0;
			//停止播放bmp osd
			m_player_manager.stop_score_osd();
		}
		break;
	case SHOW_SCREEN_FLASH_TIMER_EVENT_ID://定时清理异形窗口
		{
			int nSize = m_vecTransparentWnd.size();
			if (nSize == 0)
			{
				//杀死定时器
				KillTimer(show_screen_timer_identifier);
				show_screen_timer_identifier=0;
				break;
			}
			destroy_screen_flash_wnd();
		}
		break;
	case SHOW_FLASH_TEXT_TIMER_EVENT_ID:      //在flash上显示滚动文字的定时器
		{
			int timer_elapse=0;

			//杀死定时器
			KillTimer(show_flash_text_timer_identifier);
			show_flash_text_timer_identifier = 0;

			timer_elapse = timer_show_flash_text();
			if (timer_elapse<30)
			{
				timer_elapse = 30;
			}
			//启动定时器显示下一个文字
			show_flash_text_timer_identifier = SetTimer(SHOW_FLASH_TEXT_TIMER_EVENT_ID,timer_elapse*1000,NULL);
		}
		break;
	case SHOW_TV_TEXT_TIMER_EVENT_ID:         //在电视上显示滚动文字的定时器
		{
			int timer_elapse=0;

			KillTimer(show_tv_text_timer_identifier);
			show_tv_text_timer_identifier = 0;

			timer_elapse = timer_show_tv_text();
			if (timer_elapse<10)
			{
				timer_elapse = 10;
			}
			show_tv_text_timer_identifier = SetTimer(SHOW_TV_TEXT_TIMER_EVENT_ID,timer_elapse*1000,NULL);
		}
		break;
	case SHOW_FLASH_BACKGROUND_TIMER_EVENT_ID: //更新flash背景图片的定时器
		{
			int timer_elapse=0;

			KillTimer(show_flash_background_timer_identifier);
			show_flash_background_timer_identifier = 0;

			timer_elapse = timer_show_flash_background_picture();
			if (timer_elapse<30)
			{
				timer_elapse = 30;
			}
			show_flash_background_timer_identifier = SetTimer(SHOW_FLASH_BACKGROUND_TIMER_EVENT_ID,timer_elapse*1000,NULL);
		}
		break;
	case SHOW_FLASH_LOGO_TIMER_EVENT_ID:       //在flash上显示logo的定时器
		{
			int timer_elapse=0;

			KillTimer(show_flash_logo_timer_identifier);
			show_flash_logo_timer_identifier=0;

			timer_elapse = timer_show_flash_logo();
			if (timer_elapse<10)
			{
				timer_elapse = 10;
			}
			show_flash_logo_timer_identifier = SetTimer(SHOW_FLASH_LOGO_TIMER_EVENT_ID,timer_elapse*1000,NULL);
		}
		break;
	case SHOW_TV_LOGO_TIMER_EVENT_ID:          //在电视上显示logo的定时器
		{
			int timer_elapse=0;

			KillTimer(show_tv_logo_timer_identifier);
			show_tv_logo_timer_identifier=0;

			timer_elapse = timer_show_tv_logo();
			if (timer_elapse<10)
			{
				timer_elapse = 10;
			}
			show_tv_logo_timer_identifier = SetTimer(SHOW_TV_LOGO_TIMER_EVENT_ID,timer_elapse*1000,NULL);	
		}
		break;
	case SHOW_SCREEN_SAVER_TIMER_EVENT_ID:     //显示屏保的定时器
		{
			int page_index=0;
			int video_player_state=0;

			//add by yzg 2015-12-09
			//活动屏保显示时，不显示屏保
			if (m_show_screen_saver_state_activity)
			{
				m_start_screen_saver_timer.start();
				break;
			}
			//得到播放器状态
			video_player_state = m_player_manager.get_player_state();
			if (m_show_screen_saver_state&&((PLAYER_STATE_CLOSED==video_player_state)||(PLAYER_STATE_INIT==video_player_state)))
			{
				//如果是屏保状态，并且播放器处于停止状态，退出屏保
				quit_screen_save();
				break;
			}
			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			if ((m_use_plug_in_drinks&&m_show_drinks_state)||m_show_html_ctrl|| m_use_test_function || (page_video==page_index)||(page_preview==page_index) || (page_game==page_index)||(PLAYER_STATE_CLOSED==video_player_state)||(PLAYER_STATE_INIT==video_player_state)|| (m_audio_effect_window.IsWindowVisible()))
			{
				//测机状态、屏切页面，预览页面、游戏页面、音效调节页面都不启用屏保
				break;
			}

			if (m_show_video_screen_saver)
			{
				//显示视频屏保
				timer_show_video_screen_saver();
			}
			else
			{
				//显示图片屏保
				timer_show_pictrue_screen_saver();
			}
		}
		break;
	case SHOW_SCREEN_TO_FLASHS_TIME_EVENT_ID:
		{
			int page_index=0;
			int video_player_state=0;

			//add by yzg 2015-12-09
			//活动屏保显示时，不显示屏保
			if (m_show_screen_saver_state_activity)
			{
				m_start_screen_saver_timer.start();
				break;
			}
			//得到播放器状态
			video_player_state = m_player_manager.get_player_state();
			if (m_show_screen_saver_state&&((PLAYER_STATE_CLOSED==video_player_state)||(PLAYER_STATE_INIT==video_player_state)))
			{
				//如果是屏保状态，并且播放器处于停止状态，退出屏保
				quit_screen_save();
				break;
			}

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			if ((m_use_plug_in_drinks&&m_show_drinks_state) || m_use_test_function || (page_video==page_index)||(page_preview==page_index) || (page_game==page_index)||(PLAYER_STATE_CLOSED==video_player_state)||(PLAYER_STATE_INIT==video_player_state)|| (m_audio_effect_window.IsWindowVisible()))
			{
				//测机状态、屏切页面，预览页面、游戏页面、音效调节页面都不启用屏保
				break;
			}

			//返回
			if (m_show_screen_saver_state)
			{
				break;
			}

			int time_elapse = (int)(m_start_screen_saver_timer.last_time());

			if (time_elapse>m_start_screen_saver_time)
			{
				//隐藏手写
				if (m_handwriting_window_exist && m_show_handwriting_window)
				{
					m_handwriting_window.ShowWindow(SW_HIDE);
				}

#ifdef DON_GUAN_K_PLUS
				m_screen_show_window.show_window(false);
				m_player_manager.show_screen_video(false);
#endif // DON_GUAN_K_PLUS
				//发码
				//2015-6-11 17:47:34---LTL---屏保时隐藏小视频和娱乐新闻
				m_screen_show_window.show_window(false);
				if (page_index == page_yule_news||page_index == page_drinks||page_index == page_consumer)
				{
					if (m_html_ctrl_exist/* && m_html_ctrl.IsWindowVisible()*/)
					{
						m_html_ctrl.ShowWindow(SW_HIDE);
						m_html_ctrl.UpdateWindow();
						m_show_html_ctrl = false;
					}
				}
				TCHAR args[1024] = {0x00};
				TCHAR request[2048] = {0x00};
				swprintf(args, L"<data><info startButton=\"1\" screen=\"%d\"/></data>", m_screen_to_flash_timer);
				bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"screen_to_flash",args);
				if (result)
				{
					//发送大帮助文件到flash
					flash_message_call_service(L"6");
					flash_player_call_function(request);
				}
				m_show_screen_saver_state = true;
			}
		}
		break;
	case COMMON_TIMER_EVENT_ID:                //公用定时器
		{
			double last_time=0.0;
			bool result=false;

			//更新播放进度
			set_play_progress_bar_pos();
			//设置预览歌曲的播放进度
			set_preview_song_play_progress();

			//炸弹使用的
			int bomb_type = BOMB_NONE;
			bomb_type = m_shine_bomb.get_bomb_type();
			switch(bomb_type)
			{
			case BOMB_SONG:   //暂停歌曲炸弹
				{
					//暂停,参数是1：表示不显示暂停osd
					flash_message_call_function(SONG_PLAY_PAUSE,1);
					Sleep(100);
					//播放
					flash_message_call_function(SONG_PLAY_PAUSE,1);
				}
				break;
			case BOMB_STOP_DOG:  //停狗炸弹
			case BOMB_NONE:      //没有炸弹
			default:
				break;
			}
			//显示广告
			last_time = m_play_AD_timer.last_time();
			if (last_time>m_play_AD_time_elapse)
			{
				//改页面允许显示广告，才可以定期改变
				play_pc_AD_picture();
			}
			if (m_use_load_balance)
			{
				//启用负载均衡
				//如果长时间收不到服务发送过来的服务器编号，就随机
				last_time = m_load_balance_timer.last_time();
				if (last_time>LOAD_BALANCE_TIME_INTERVAL)
				{
					//重新计时
					m_load_balance_timer.start();
					//服务器编号累加1
					int rand_count = rand()/(RAND_MAX/6+1);
					if ((rand_count==m_link_server_number)||(rand_count>=6))
					{
						m_link_server_number++;
						if (m_link_server_number>=6)
						{
							m_link_server_number = 0;
						}
					}
					else
					{
						m_link_server_number = rand_count;
					}
				}
			}
			//是否隐藏墙面板图片
			if (m_wall_panel_image_show)
			{
				last_time = m_wall_panel_timer.last_time();
				if (last_time>=(double)m_show_wall_panel_image_time)
				{
					//隐藏图片
					switch(m_wall_panel_show_mode)
					{
					case WALL_PANEL_VIDEO_IMAGE:  //视频叠加图片
						{
							m_player_manager.hide_wall_panel_picture();
						}
						break;
					case WALL_PANEL_VIDEO_FLASH:  //视频叠加flash
						{
							m_wall_panel_flash_player.ShowWindow(SW_HIDE);
						}
						break;
					case WALL_PANEL_IMAGE_FLASH:   //图片叠加flash
						{
							m_wall_panel_flash_player.ShowWindow(SW_HIDE);
							//显示一下背景图片
							play_wall_panel_AD_picture();
						}
						break;
					default:
						break;
					}
					//设置标示
					m_wall_panel_image_show=false;
				}
			}
			//酒水
			if(!m_use_plug_in_drinks&&m_show_drinks_state&&m_ktv_software_min)
			{
				//酒水启动，要检测酒水是否退出，退出之后，点歌软件要置于顶层
				result = check_process_run_state(NULL,m_drinks_process_id);
				if (!result)
				{
					//最大化显示
					ShowWindow(SW_SHOWMAXIMIZED);
					//酒水关闭
					m_show_drinks_state = false;
					m_drinks_process_id = -1;
				}
			}
			if ((0!=m_show_game_window_number)&&m_game_flash_player_exist)
			{
				//检测软件和墙面板窗口中的互动游戏
				last_time = m_interative_game_timer.last_time();
				if ((last_time>m_interactive_game_idless_time)&&m_game_window.IsWindowVisible())
				{
					//隐藏
					send_keybd_code_to_game('M');
				}
			}

			//判断软解窗口是否移动
			judge_soft_window_move();

			//向主控机报道-------By_v.cai_2015/02/12 10:36
			if (2==m_master_slave_control_flag)
			{
				//被控机，向主控机报到
				send_master_slave_data(NULL,"SLAVECOMPUTERCHECKIN");
			}

			//检测当前时间是否允许播放DJ
			if (!m_allow_play_dj && m_allow_play_dj_time != L"")
			{
				CTime curr_time = CTime::GetCurrentTime();
				CString csCurTime = curr_time.Format(L"%H%M");
				int iCurTime = _ttoi(csCurTime);
				int iSetTime = _ttoi(m_allow_play_dj_time.c_str());
				if (iCurTime > iSetTime)
				{
					m_allow_play_dj = true;
				}
			}

			m_video_play_manager.set_cur_idlesse_list();

			if (m_first_open_four_track && m_is_open_four_track && m_flash_screen_init_finish)
			{
				//告诉flash是否打开四音轨
				TCHAR args[256] = {0x00};
				TCHAR request[256] = {0x00};
				//让界面启用四音轨，或者不启用
				if(m_is_open_four_track)
				{
					swprintf(args, L"<data><info open=\"1\"/></data>");
				}else{
					swprintf(args, L"<data><info open=\"0\"/></data>");
				}
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"open_four_track",args);
				if (result)
				{
					flash_player_call_function(request);
				}
				m_first_open_four_track = false;
			}
		}
		break;
	case CHECK_FILE_TIMER_EVENT_ID:     //检测文件是否存在的定时器
		{
			if (0==m_room_file_type)
			{
				//视点文件，负责开关房
				use_file_open_room();
			}
			else
			{
				//视翰文件，显示包房信息

			}
		}
		break;
	case CHECK_MYSQL_TIMER_EVENT_ID:
		{
			bool result = m_mysql_db.RoomState(m_send_room_ip);
			if (result)
			{
				//开房
				PostMessage(DM_RECV_SERVER_DATA,(WPARAM)"open0",NULL);
			}
			else
			{
				//关房
				PostMessage(DM_RECV_SERVER_DATA,(WPARAM)"close",NULL);
			}
		}
		break;
	case AUTO_TEST_TIMER_EVENT_ID:             //自动测试定时器
		{
			auto_test_software();
		}
		break;
	case HIDE_CHECT_WINDOW_TIMER_EVENT_ID:   //隐藏歌曲复选框的定时器
		{
			//杀死定时器
			KillTimer(hide_check_window_timer_identifier);
			hide_check_window_timer_identifier=0;
			//如果歌曲复选框显示，就隐藏
			if (m_check_window_state)
			{
				show_check_window(false);
			}
		}
		break;
	case SHOW_POPUP_WINDOW_TIMER_EVENT_ID:   //显示弹出窗口的定时器
		{
			//杀死定时器
			KillTimer(show_popup_window_timer_identifier);
			show_popup_window_timer_identifier=0;

			TCHAR request[256];
			bool result=false;

			//显示弹出页面
			memset(request,0x0,sizeof(request));
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"show_popup_page",m_select_popup_window_number);
			if (result)
			{
				flash_player_call_function(request);
				//由于首页和辅助页面，发送一次出不来，所以发送两次
				int page_index = m_flash_manage.get_last_page_index();
				if ((page_homepage==page_index)||(page_assist==page_index))
				{
					flash_player_call_function(request);
				}
			}
		}
		break;
	case SHOW_WALL_PANEL_IMAGE_TIMER_EVENT_ID:  //显示墙面板图片的定时器
		{
			if (!m_wall_panel_image_show)
			{
				//flash隐藏的时候，在显示图片
				play_wall_panel_AD_picture();
			}
		}
		break;
	case RECORD_NOISE_TIMER_EVENT_ID:  //录制噪音文件
		{
			bool result=false;
			char noise_file[256];
			TCHAR basic_noise[256];
			string_conversion string_conv;

			memset(noise_file,0x0,sizeof(noise_file));
			memset(basic_noise,0x0,sizeof(basic_noise));

			KillTimer(record_noise_timer_identifier);
			record_noise_timer_identifier=NULL;
			swprintf(basic_noise,L"%s\\BasicNoise.wav",m_work_path);
			//停止录制噪音文件
			m_tape_audio.StopTape();
			string_conv.widechar_to_multibyte(m_noise_path,noise_file,sizeof(noise_file));
			result = LoadNoiseFile(m_recorder_handle,noise_file);
			if (result)
			{
				//加载噪音文件成功,保存当前文件作为基准噪音
				DeleteFile(basic_noise);
				CopyFile(m_noise_path,basic_noise,FALSE);
			}
			else
			{
				//加载噪音文件失败，加载基准噪音
				memset(noise_file,0x0,sizeof(noise_file));
				string_conv.widechar_to_multibyte(basic_noise,noise_file,sizeof(noise_file));
				result = LoadNoiseFile(m_recorder_handle,noise_file);
				if (!result)
				{
					WriteLog(__FL__, L"加载噪音文件失败");
				}
			}
		}
		break;
	case SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID:
		{
			////
			TCHAR wide_string[256];
			int nLyricLen = 0;
			string_conversion string_conv;
			long color1 = RGB(210, 210, 0);
			long color2 = RGB(0, 210, 210);

			memset(wide_string,0x0,sizeof(wide_string));
			string_conv.multibyte_to_widechar(m_lyricManager.lyric[m_lyricManager.m_nLyricIndex].lyricContent.c_str(),wide_string,sizeof(wide_string)/sizeof(TCHAR));
			//歌词长度
			nLyricLen = string_conv.get_byte_size_of_multibyte(wide_string);
			//开始后持续时间
			m_lyricManager.m_dLasttime =  m_dLyricLastTime + m_music_enjoy_lyric_timer.last_time();
			//歌词开始时间
			double starttime = m_lyricManager.changeStringToDouble(true);
			if (m_dMusicEnjoySpace <= 0.00000001 && m_dMusicEnjoySpace >= -0.00000001)
			{
				m_dMusicEnjoySpace = m_timerMusicEnjoy.last_time();
			}

			if (starttime <= m_lyricManager.m_dLasttime + m_dMusicEnjoySpace)
			{
				if (m_bBegin)//开始时，同时显示第1、2行歌词
				{
					m_player_manager.play_control_text_osd(wide_string,color2,200,570,8);
					m_lyricManager.m_nLyricIndex++;

					memset(wide_string, 0x0, sizeof(wide_string));
					string_conv.multibyte_to_widechar(m_lyricManager.lyric[m_lyricManager.m_nLyricIndex].lyricContent.c_str(),wide_string,sizeof(wide_string)/sizeof(TCHAR));
					m_player_manager.play_control_text_osd(wide_string,color1,600,620,9);
				}
				else
				{
					if (m_bFlag)
					{
						if (nLyricLen*20 > m_nMusicEnjoyWidth-200)
							m_player_manager.play_control_text_osd(wide_string,color2,m_nMusicEnjoyWidth-nLyricLen*20,570,8);
						else
							m_player_manager.play_control_text_osd(wide_string,color2,200,570,8);
					}
					else
					{
						if (nLyricLen*20 > m_nMusicEnjoyWidth-600)
							m_player_manager.play_control_text_osd(wide_string,color2,m_nMusicEnjoyWidth-nLyricLen*20-50,620,9);
						else
							m_player_manager.play_control_text_osd(wide_string,color2,600,620,9);
					}
				}
			}

			starttime = m_lyricManager.changeStringToDouble(true);
			if (starttime < m_lyricManager.m_dLasttime + m_dMusicEnjoySpace)
			{
				if(m_bBegin)
				{
					m_player_manager.play_control_text_osd(wide_string,color2,600,620,9);
					m_lyricManager.m_nLyricIndex++;

					memset(wide_string, 0x0, sizeof(wide_string));
					string_conv.multibyte_to_widechar(m_lyricManager.lyric[m_lyricManager.m_nLyricIndex].lyricContent.c_str(),wide_string,sizeof(wide_string)/sizeof(TCHAR));
					m_player_manager.play_control_text_osd(wide_string,color1,200,570,8);
				}
				else
				{
					m_lyricManager.m_nLyricIndex++;
					m_bFlag = !m_bFlag;
					memset(wide_string, 0x0, sizeof(wide_string));
					string_conv.multibyte_to_widechar(m_lyricManager.lyric[m_lyricManager.m_nLyricIndex].lyricContent.c_str(),wide_string,sizeof(wide_string)/sizeof(TCHAR));
					if (wcslen(wide_string) == 0)
					{
						m_lyricManager.m_nLyricIndex++;
						memset(wide_string, 0x0, sizeof(wide_string));
						string_conv.multibyte_to_widechar(m_lyricManager.lyric[m_lyricManager.m_nLyricIndex].lyricContent.c_str(),wide_string,sizeof(wide_string)/sizeof(TCHAR));
					}
					nLyricLen = string_conv.get_byte_size_of_multibyte(wide_string);

					if (m_bFlag)
					{
						if (nLyricLen*20 > m_nMusicEnjoyWidth-200)
							m_player_manager.play_control_text_osd(wide_string,color1,m_nMusicEnjoyWidth-nLyricLen*20,570,8);
						else
							m_player_manager.play_control_text_osd(wide_string,color1,200,570,8);
					}
					else
					{
						if (nLyricLen*20 > m_nMusicEnjoyWidth-600)
							m_player_manager.play_control_text_osd(wide_string,color1,m_nMusicEnjoyWidth-nLyricLen*20-50,620,9);
						else
							m_player_manager.play_control_text_osd(wide_string,color1,600,620,9);
					}
				}

			}
			m_bBegin = false;
			if(m_lyricManager.m_nLyricIndex >= m_lyricManager.m_nLyriclineNum) 
			{
				//
				KillTimer(SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID);
				m_music_enjoy_lyric_timer.stop();
				m_lyricManager.m_nLyricIndex=0;
				show_music_enjoy_lyric_timer_identifier = 0;
				m_dLyricLastTime = 0;
			}
			////*/
		}
		break;
#ifdef VICE_SCREEN_GUANGXI
	case GET_VICE_SCREEN_TO_FLASH_TIME_EVENT_ID:
		{
			TCHAR szrp[MAX_PATH] = {0x00};
			if (m_vice_screen_show_flag)
			{				
				swprintf(szrp, L"0:1");				
				m_vice_screen_show_flag = false;
			}else{
				swprintf(szrp, L"1:1");
				m_vice_screen_show_flag = true;
			}
			flash_message_call_maiba(MAIBA_DEKARON, szrp);
		}
		break;
#endif // VICE_SCREEN_GUANGXI	
	case INTER_SCREEN_MAIBA_RULE_TIME_EVENT_ID:
		{
			flash_message_call_activity();
		}
		break;
	case INTER_SCREEN_MAIBA_SONG_LIST_TIME_EVENT_ID:
		{
			TCHAR szrp[MAX_PATH] = {0x00};
			if (m_recv_active_flag)
			{				
				swprintf(szrp, L"0:1");				
				m_recv_active_flag = false;
			}else{
				swprintf(szrp, L"1:1");
				m_recv_active_flag = true;
			}
			flash_message_call_maiba(MAIBA_DEKARON, szrp);
		}
		break;
	case CLOSE_ROOM_TIME_SPACE_TIME_EVENT_ID://自动关房
		{
			//发送关房指令
			SendMessage(DM_RECV_SERVER_DATA,(WPARAM)"close",NULL);

			KillTimer(m_close_room_timer_identifier);
			m_close_room_timer_identifier = 0;
		}
		break;
	default:
		break;
	}

	CWnd::OnTimer(nIDEvent);
}  

LRESULT Cflashktv10Wnd::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
	// TODO: 在此添加专用代码和/或调用基类
	switch(message)
	{
	case WM_KEYDOWN:
	case WM_SYSKEYDOWN:
		{
			//有新的操作，重新计时
			m_start_screen_saver_timer.start();
			//2011-02-10 add
			//时间保护，方式频繁点击墙面板
			double last_time = m_recv_ps2_timer.last_time();
			if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
			{
				break;
			}
			//重新计时
			m_recv_ps2_timer.start();

			//得到当前页面索引
			int page_index = m_flash_manage.get_last_page_index();
			switch(wParam)
			{
			case 'Q':
				{ 
					if (page_index == page_across_pass)
					{
						break;
					}
					if (m_use_plug_in_drinks&&m_show_drinks_state)
					{
						//隐藏内嵌酒水
						hide_plug_in_drinks();
					}
					//跳转到系统管理页面
					flash_message_call_page_jump(page_system_manager);
				}
				break;
			case '0':  //大键盘上的数字键
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
					//密码框显示中，可以通过键盘输入密码
					if (page_system_manager==page_index)
					{
						TCHAR data[32];

						memset(data,0x0,sizeof(data));
						//转化成字符串
						data[0] = wParam;
						flash_message_call_system_manager(data);
					}
				}
				break;
			case 96:  //小键盘上的数字键
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
				{
					//密码框显示中，可以通过键盘输入密码
					if (page_system_manager==page_index)
					{
						TCHAR data[32];

						memset(data,0x0,sizeof(data));
						//转化成字符串
						data[0] = wParam-48;
						flash_message_call_system_manager(data);
					}
				}
				break;
			case 13: //enter键
			case 108: //小键盘上的
				{
					//按下回车键，如果显示密码框，需要判断密码是否正确
					if (page_system_manager==page_index)
					{
						flash_message_call_system_manager(L"11");
					}
				}
				break;
			case 8:   //回删
				{
					//如果显示密码框，就需要回删
					if (page_system_manager==page_index)
					{
						flash_message_call_system_manager(L"10");
					}
				}
				break;
			default:
				break;
			}
			//解析接受到的值，看是否是中控盒消息
			m_inherit_com.parse_ps2_value((int)wParam);
			//互动游戏
			send_keybd_code_to_game(wParam);
		}
		break;
	case WM_NEED_PLAYER_FREDATA:
		{
			m_player_manager.Set_fre_spectrumsitify_hwnd(this->m_hWnd);
			m_player_manager.Set_fre_spectrumsitify_spec((int)lParam);
		}
		break;
	case WM_SoundSpectrumBegin:
	case WM_SoundSpectrumData:
	case WM_SoundSpectrumEnd:
	case WM_MusicBeat:
		{
			TPLAYER_MESSAGE lpPm;
			lpPm.MSG = message;
			lpPm.wParam = wParam;
			lpPm.lParam = (LPVOID)lParam;
			m_PluginsEx.NotifyToolPlugins(PLAYER_NOTIFY, lpPm);
		}
		break;
	case DM_FLASH_INITIALIZATIONF_FINISH:  //flash界面初始化完成，发送的消息
		{
			try
			{
				config_file_manager config_file;
				string_conversion string_conv;
				TCHAR request[2048];
				bool result=false;
				int page_index=0;

				//开始计时
				m_start_screen_saver_timer.start();
				m_avoid_cut_timer.start();
				m_cut_song_timer.start();
				m_play_AD_timer.start();
				m_preview_control_timer.start();
				m_password_timer.start();
				m_load_balance_timer.start();
				m_recv_ps2_timer.start();
				m_seek_video_timer.start();
				m_interative_game_timer.start();
				video_switch_timer.start();

				//得到欢迎词
				std::wstring client_welcome = config_file.read_string(L"flash",L"welcome_message",L"");
				std::wstring place_notice = config_file.read_string(L"flash",L"place_notice",L"");
				if (!client_welcome.empty())
				{
					memset(m_client_welcome,0x0,sizeof(m_client_welcome));
					//正在显示狗的欢迎词，该显示客户欢迎词，滚动信息增加房间号
					swprintf(m_client_welcome,L"%s",client_welcome.c_str());
					show_text_on_flash(m_client_welcome);
				}

				if (!place_notice.empty())
				{
					m_place_notice_info = client_welcome;
				}


				if(m_find_dog_success&&!m_lock_window)
				{
					//已经找到加密狗，隐藏形象页
					screen_show_visible(false);
				}

				if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//正在使用测机功能中，就可以显示
					memset(request,0x0,sizeof(request));
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"bgAndTxt",L"<data><info txt=\"点击进入测试按钮，开始测试\"/></data>");
					if (result)
					{
						m_test_flash_player.CallFunction(request);
					}
				}

				/*************以下是换肤之后，必须更新的信息*****************/
				//更新目前使用的语言
				change_flash_show_language();
				//flash界面初控制按钮始化
				update_flash_control_button();
				//更新音频和音效值
				update_flash_audio_info();
				//更新选择的歌曲
				update_select_song_count();
				//服务按钮状态
				if (m_call_service_state)
				{
					//高亮状态
					send_service_button_state(m_click_service_button_number,1);
				}
				//设置灯光高亮按钮状态
				send_light_button_state();
				//设置音乐音效按钮的高亮状态
				send_audio_effect_button_state();
				//设置麦克音效按钮的高亮状态
				send_music_sound_button_state();
				//设置环境音的按钮状态
				send_environment_audio_button_state();
				//重新显示歌曲名字
				show_song_name();

#ifdef DON_GUAN_K_PLUS
				//设置评分的按钮高亮状态并设置显示平分线
				send_score_button_state(0);
				m_player_manager.set_show_score_line(0);
#else
				//设置评分的按钮高亮状态并设置显示平分线
				send_score_button_state(m_default_show_score_line);
				m_default_show_score_line = 0;
//yzg			m_player_manager.set_show_score_line(m_default_show_score_line);
#endif // DON_GUAN_K_PLUS


				result = m_player_manager.is_playing();
				if (!result)
				{
					//暂停状态重新更新osd和歌曲名字
					show_control_osd(CONTROL_OSD__PAUSE);
				}

				//设置录音按钮状态
				set_button_show_state(TAPE_BUTTON_STATE,m_need_record_flag);

				//换肤，默认显示首页
				page_change(page_homepage);
				if (SCREEN_TYPE_VERTICAL==m_interface_type)
				{
					//竖版首页也有广告，播放图片广告
					play_pc_AD_picture();
				}

				SetFocus();

				//flash界面初始化完成
				WriteLog(__FL__, L"flash界面初始化完成");
			}
			catch (...)
			{

			}
		}
		break;
	case DM_CHECK_DOG: //检测加密狗线程发送的消息
		{
			try
			{
				//放开flash消息的拦截
				m_flash_player.change_intercept_msg_flag(false);

				switch(wParam)
				{
				case CONNECT_DOG_FAIL:    //连接加密狗失败
					{
						//加密狗异常，锁定窗口
						m_lock_window = true;

						WriteLog(__FL__, L"找不到加密狗，请检查加密狗和网络");
						memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
#ifdef MONGOLIA_VERSION
						_tcscpy(m_dog_tip_info,L"Can not find the dog");
#else
						_tcscpy(m_dog_tip_info,L"找不到加密狗，请检查加密狗和网络");
#endif
						//找不到加密狗直接退出
						MessageBox(L"没有找到加密狗，请检查网络",L"温馨提示",MB_OK);
						PostMessage(WM_CLOSE,NULL,NULL);
					}
					break;
				case DOG_LOGIN_CHECK:          //加密狗登录检查
					{
						//加密狗异常，锁定窗口
						m_lock_window = true;
						switch(lParam)
						{
						case SHINE_ERROR_MOULDID:		//LoginCheck Error  模块编号
							{
								WriteLog(__FL__, L"加密狗没有开通该版本");
								memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
#ifdef MONGOLIA_VERSION
								_tcscpy(m_dog_tip_info,L"Dog do not open the version");
#else
								_tcscpy(m_dog_tip_info,L"加密狗没有开通该版本");
#endif
							}
							break;
						case SHINE_ERROR_COUNT:		//LoginCheck Error  点数不够
							{
								WriteLog(__FL__, L"加密狗的点数不够，请增加点数");
								memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
#ifdef MONGOLIA_VERSION
								_tcscpy(m_dog_tip_info,L"Dog points is not enough, please increase the number of points");
#else
								_tcscpy(m_dog_tip_info,L"加密狗的点数不够，请增加点数");
#endif
							}
							break;
						default:
							{
								WriteLog(__FL__, L"1717：软件限制狗已经到期，请你升级软件狗");
								memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
#ifdef MONGOLIA_VERSION
								_tcscpy(m_dog_tip_info,L"Dog has expired,please upgrade");
#else
								_tcscpy(m_dog_tip_info,L"1717：软件限制狗已经到期，请你升级软件狗");
#endif
							}
							break;
						}
						//找不到加密狗直接退出
						MessageBox(L"加密狗没有开通该版本或点数不够，请联系销售人员",L"温馨提示",MB_OK);
						PostMessage(WM_CLOSE,NULL,NULL);
					}
					break;
				case TIMER_CHECK_DOG_FAIL: //定期检测加密狗失败
					{
						//加密狗异常，锁定窗口
						m_lock_window = true;

						WriteLog(__FL__, L"程序码值D171702");
						//memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
						//_tcscpy(m_dog_tip_info,L"系统正在自检测，请联系服务员");
						WriteLog(__FL__, L"定期检测加密狗失败,请求服务[TIMER_CHECK_DOG_FAIL]");
						//呼叫服务员
						flash_message_call_function(CALL_ATTENDANT);
						//切歌曲
						flash_message_call_function(SONG_NEXT);
					}
					break;
				case SOFTWARE_DOG_VALID_DAY_TIP:    //软件狗剩下的有效天数提示
					{
						TCHAR valid_day[512];
						memset(valid_day,0x0,sizeof(valid_day));
#ifdef MONGOLIA_VERSION
						swprintf(valid_day,L"Software dog valid day:%d，please upgrade",(int)lParam);
#else
						swprintf(valid_day,L"软件狗已经到期，请你尽快升级软件狗",(int)lParam);
#endif
						WriteLog(__FL__, valid_day);

						if((int)lParam < 1)
						{
							//加密狗过期直接退出
							MessageBox(valid_day,L"温馨提示",MB_OK);
							PostMessage(WM_CLOSE,NULL,NULL);
						}
						//不在提示
						//memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
						//_tcscpy(m_dog_tip_info,valid_day);
					}
					break;
				case CONTROL_DOG_VALID_DAY_TIP:   //控件狗的有效天数提示
					{
						TCHAR valid_day[512];
						memset(valid_day,0x0,sizeof(valid_day));

						if (lParam>10)
						{
							_tcscpy(valid_day,L"您的卡拉OK节目许可即将到期，请按时交纳版权费");
						}
						else
						{
							_tcscpy(valid_day,L"您的卡拉OK节目许可已到期，请及时交纳版权费");
						}
						WriteLog(__FL__, valid_day);
						//电视上提示狗过期信息用
						memset(m_dog_tip_info,0x0,sizeof(m_dog_tip_info));
						_tcscpy(m_dog_tip_info,valid_day);
					}
					break;
				case CHECK_DOG_SUCCESS:   //检测加密狗成功，设置和播放相关的初始化
					{
						config_file_manager config_file;
						bool result=false;
						TCHAR log[1024];
						TCHAR path[256];
						TCHAR image_path[256];

						memset(path,0x0,sizeof(path));
						memset(log,0x0,sizeof(log));

						WriteLog(__FL__, L"检测加密狗成功");

						//找到加密狗，解除锁屏
						m_lock_window = false;

						/*
						if (2==m_master_slave_control_flag)
						{
						//被控机，向主控机报到
						send_master_slave_data(NULL,"SLAVECOMPUTERCHECKIN");
						}
						*/

						if (m_flash_screen_init_finish)
						{
							//检测加密狗不管成功还是失败，都要隐藏形象页
							screen_show_visible(false);
						}

						//先创建线程，然后在发送本机器的IP和名称，否则会接受不到
						//创建接受数据线程
						m_thread_handle = AfxBeginThread(Cflashktv10Wnd::recv_server_data_thread,this);
						if (m_thread_handle)
						{
							//创建事件用于终止线程
							m_server_thread_event_handle = CreateEvent(NULL,true,false,NULL);
							if (m_server_thread_event_handle)
							{
								ResetEvent(m_server_thread_event_handle);
							}
						}
						//创建接受消息的线程 udp方式
						m_thread_handle = AfxBeginThread(Cflashktv10Wnd::recv_server_msg_udp_thread,this);
						if (m_thread_handle)
						{
							//创建线程终止的事件
							m_upd_msg_thread_event_handle = CreateEvent(NULL,true,false,NULL);
							if (m_upd_msg_thread_event_handle)
							{
								ResetEvent(m_upd_msg_thread_event_handle);
							}
						}
						//创建接受消息的线程 tcp方式
						m_thread_handle = AfxBeginThread(Cflashktv10Wnd::recv_server_msg_tcp_thread,this);
						if (m_thread_handle)
						{
							//创建线程终止的事件
							m_tcp_msg_thread_event_handle = CreateEvent(NULL,true,false,NULL);
							if (m_tcp_msg_thread_event_handle)
							{
								ResetEvent(m_tcp_msg_thread_event_handle);
							}
						}

						if (1==m_tape_mode)   //需要软件混合伴奏
						{
							//启动万达录音合成线程
							AfxBeginThread(Cflashktv10Wnd::mixer_audio_thread,this,THREAD_PRIORITY_BELOW_NORMAL);
							//录取10秒噪音
							memset(m_noise_path,0x0,sizeof(m_noise_path));
							swprintf(m_noise_path,L"%s\\noise.wav",m_work_path);
							DeleteFile(m_noise_path);
							//开始录音
							m_tape_audio.StartTape(m_noise_path);
							record_noise_timer_identifier = SetTimer(RECORD_NOISE_TIMER_EVENT_ID,10000,NULL);
						}

						if (g_dog_open_function.AD)
						{
							//启用文化部广告功能
							WriteLog(__FL__, L"启用了文化部的广告功能");

							//初始化文化部的广告接口
							long init_result = InitADSystem_culture();
							if (1==init_result)
							{
								culture_video_ad = new AD_ITEM_CULTURE;
								if (culture_video_ad)
								{
									//视频广告
									memset(culture_video_ad,0x0,sizeof(AD_ITEM_CULTURE));
									play_culture_video_ad = true;
								}
								culture_pc_text_ad = new AD_ITEM_CULTURE;
								if (culture_pc_text_ad)
								{
									memset(culture_pc_text_ad,0x0,sizeof(AD_ITEM_CULTURE));
									//启动显示文字到flash上的定时器
									show_flash_text_timer_identifier = SetTimer(SHOW_FLASH_TEXT_TIMER_EVENT_ID,20*1000,NULL);
								}
								culture_tv_text_ad = new AD_ITEM_CULTURE;
								if (culture_tv_text_ad)
								{
									memset(culture_tv_text_ad,0x0,sizeof(AD_ITEM_CULTURE));
									//启动显示文字到电视上的定时器
									show_tv_text_timer_identifier = SetTimer(SHOW_TV_TEXT_TIMER_EVENT_ID,40*1000,NULL);
								}
								culture_pc_background_ad = new AD_ITEM_CULTURE;
								if (culture_pc_background_ad)
								{
									memset(culture_pc_background_ad,0x0,sizeof(AD_ITEM_CULTURE));
									//启动显示flash背景的定时器
									show_flash_background_timer_identifier = SetTimer(SHOW_FLASH_BACKGROUND_TIMER_EVENT_ID,30*1000,NULL);
								}
								culture_pc_logo_ad = new AD_ITEM_CULTURE;
								if (culture_pc_logo_ad)
								{
									memset(culture_pc_logo_ad,0x0,sizeof(culture_pc_logo_ad));
									//启动显示flash上logo的定时器
									show_flash_logo_timer_identifier = SetTimer(SHOW_FLASH_LOGO_TIMER_EVENT_ID,10*1000,NULL);
								}
								culture_tv_logo_ad = new AD_ITEM_CULTURE;
								if (culture_tv_logo_ad)
								{
									memset(culture_tv_logo_ad,0x0,sizeof(culture_tv_logo_ad));
									//启动显示电视上logo的定时器
									show_tv_logo_timer_identifier = SetTimer(SHOW_TV_LOGO_TIMER_EVENT_ID,25*1000,NULL);
								}
								culture_screen_saver_ad = new AD_ITEM_CULTURE;
								if (culture_screen_saver_ad)
								{
									//图片屏保广告
									memset(culture_screen_saver_ad,0x0,sizeof(culture_screen_saver_ad));
								}
								culture_prompt_box_ad = new AD_ITEM_CULTURE;
								if (culture_prompt_box_ad)
								{
									//提示框
									memset(culture_prompt_box_ad,0x0,sizeof(culture_prompt_box_ad));
								}
							}
						}

						//打开中控盒串口
						open_control_box_com();

						//启用微博系统
						show_weibo_system();

						//场景屏是否存在
						m_inter_screen_exist = m_inter_screen_manager.m_inter_screen_info.b_exsit;

						//是否启用软解
						m_soft_decode_window_exist = config_file.read_boolean(L"soft_decode",L"use_soft_decode",false);
						if (m_soft_decode_window_exist)
						{
							//启用软解
							WriteLog(__FL__, L"启用软解");
							//得到软解显卡的编号
							m_second_display_number = config_file.read_integer(L"display",L"soft_window_display_number",2);
							//得到软解显卡的分辨率
							result = get_display_device_settings(m_second_display_number,m_sencond_display_x,m_sencond_display_y,m_sencond_display_width,m_sencond_display_height);
							if (!result)
							{
								WriteLog(__FL__, L"得到软解窗口的分辨率失败,使用设置的分辨率");

								m_sencond_display_width = config_file.read_integer(L"soft_decode",L"tv_resolution_x",1280);
								m_sencond_display_height = config_file.read_integer(L"soft_decode",L"tv_resolution_y",720);
								m_sencond_display_x = m_first_display_width + 0/*m_sencond_display_width*/;
								m_sencond_display_y = m_first_display_y;
								m_second_display_exist = false;
								//扩展显卡
								//set_display_device_resolution(display_number,m_sencond_display_x,m_sencond_display_y,m_sencond_display_width,m_sencond_display_height);
								//刷新主显卡
								//display_number = config_file.read_integer(L"display",L"main_window_display_number",1);
								//set_display_device_resolution(display_number,m_first_display_x,m_first_display_y,m_first_display_width,m_first_display_height);
							}

							//根据微博调整窗口位置
							if (1 == m_weibo_version_number)
							{
								adjust_soft_window_width(m_sencond_display_x,m_sencond_display_width);
							}
							else if (2 == m_weibo_version_number)
							{
								adjust_soft_window_width(m_sencond_display_x,m_sencond_display_width,m_sencond_display_height);
								m_sencond_display_y += m_weibo_image_top_height;
							}

							//写日志
							memset(log,0x0,sizeof(log));
							swprintf(log,L"软解显卡的分辨率%d*%d",m_sencond_display_width,m_sencond_display_height);
							WriteLog(__FL__, log);

							m_rt_soft_activity.left = m_sencond_display_x;
							m_rt_soft_activity.top = m_sencond_display_y;
							m_rt_soft_activity.right = m_rt_soft_activity.left + m_sencond_display_width;
							m_rt_soft_activity.bottom = m_rt_soft_activity.top + m_sencond_display_height;
							//创建软解窗口
							m_soft_decode_window_exist = m_soft_decode_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(m_sencond_display_x,m_sencond_display_y,m_sencond_display_x+m_sencond_display_width,m_sencond_display_y+m_sencond_display_height),NULL,0,false,220,false);
							if (m_soft_decode_window_exist)
							{
								//设置消息窗口句柄
								m_soft_decode_window.set_message_handle(m_hWnd);
								m_soft_decode_window.ShowWindow(SW_SHOW);
								//平台音乐歌词屏幕宽度
								m_nMusicEnjoyWidth = m_sencond_display_width;
								m_nMusicEnjoyHeight = m_sencond_display_height;
								//是否全屏显示
								m_full_screen_show = config_file.read_boolean(L"control",L"full_screen_show",true);
								if (m_full_screen_show)
								{
									//全屏显示不会拉伸osd
									m_player_manager.Set(SD_FULL_SIZE_OSD,1);
									//调整控制osd的位置
									m_osd_play_manager.adjust_control_osd_coordinate(m_sencond_display_width,m_sencond_display_height,m_soft_decode_window_exist);
								}
								else
								{
									//调整控制osd的位置
									m_osd_play_manager.adjust_control_osd_coordinate(720,480,m_soft_decode_window_exist);
								}

								m_use_soft_active_flash = config_file.read_boolean(L"soft_decode", L"use_soft_active_flash", true);
								if (!m_use_soft_active_flash)
								{
 									//把软解窗口的句柄赋值给播放控件
									m_player_manager.set_soft_decode_function(m_soft_decode_window.m_hWnd);
								}
								else
								{
									UINT nFlashId = 0;

									m_soft_decode_window_child_exist = m_soft_decode_window_child.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE, CRect(0,0,m_sencond_display_width,m_sencond_display_height),&m_soft_decode_window,NULL,false,220,false);
									if (m_soft_decode_window_child_exist)
									{
										WriteLog(__FL__, L"互动场景屏主视屏窗口创建成功");
										//设置消息反馈句柄
										m_soft_decode_window_child.set_message_handle(m_hWnd);
										m_soft_decode_window_child.BringWindowToTop();
										m_soft_decode_window_child.ShowWindow(SW_SHOW);
										m_player_manager.set_soft_decode_function(m_soft_decode_window_child.m_hWnd);
									}
								}
								////////////////////
							}

							/************************检测是否启用打分系统*******************************/
							if (SCORE_SYSTEM_SHINE==m_use_score_system)  //阳光评分系统
							{
								/*///分数结果
								m_soft_load_score_flash_success = m_soft_score_flash_player.Create(NULL,WS_CHILD,CRect(0,0,m_sencond_display_width,m_sencond_display_height),&m_soft_decode_window,SCORE_SOFT_FLASH_WINDOW_ID);
								m_soft_load_score_flash_success = false;
								if (m_soft_load_score_flash_success)
								{
									TCHAR score_path[256];

									memset(score_path,0x0,sizeof(score_path));

									//swprintf(score_path,L"%s\\score_flash\\SongsScoring.swf",m_work_path);
									swprintf(score_path,L"%s\\score_flash_interface\\Main.swf",m_work_path);
									if (PathFileExists(score_path))
									{
										m_soft_score_flash_player.Stop();
										m_soft_score_flash_player.LoadMovie(0,score_path);
										m_soft_score_flash_player.ShowWindow(SW_HIDE);
									}
									else
									{
										m_soft_load_score_flash_success = false;
									}
								}
								//////*/
								//启用实时评分功能
 								//m_player_manager.Set(SD_REALTIME_SCORE, 1);
							}
						}
						else
						{
							if (!m_inter_screen_exist)
							{
								//硬解，设置神龙卡输出方式
								if (0==m_sigma_card_output_mode)
								{
									//VGA输出
									m_player_manager.Set(SD_SIGMAOUT_TARGET,1);
								}
								else
								{
									//电视输出
									m_player_manager.Set(SD_SIGMAOUT_TARGET,0);
									m_player_manager.Set(SD_SIGMAOUT_CONNECTOR,m_sigma_card_output_mode-1);
								}
								//调整控制osd的位置
								m_osd_play_manager.adjust_control_osd_coordinate(720,480,m_soft_decode_window_exist);
							}//*/
						}

						//现在软硬解码都可以启用被控视频窗口，即吧台窗口
						m_slave_video_window_exist = config_file.read_boolean(L"control",L"open_slave_video_window",false);
						if (m_slave_video_window_exist)
						{
							CString flash_panel_path;

							WriteLog(__FL__, L"启用了演唱台功能");

							//得到吧台显卡的编号
							int display_number = config_file.read_integer(L"display",L"bar_window_display_number",3);
							//得到吧台的坐标
							result = get_display_device_settings(display_number,m_third_display_x,m_third_display_y,m_third_display_width,m_third_display_height);
							if (result)
							{
								//写日志
								memset(log,0x0,sizeof(log));
								swprintf(log,L"演唱台显卡起始坐标：x=%d  y=%d 分辨率：%d*%d",m_third_display_x,m_third_display_y,m_third_display_width,m_third_display_height);
								WriteLog(__FL__, log);

								//创建flash播放器的父窗体								
								m_slave_parent_window_exist = m_slave_parent_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(m_third_display_x,m_third_display_y,m_third_display_x+m_third_display_width,m_third_display_y+m_third_display_height),NULL,0,false,220,false);
								if (m_slave_parent_window_exist)
								{
									//设置消息反馈句柄
									m_slave_parent_window.set_message_handle(m_hWnd);
									m_slave_parent_window.ShowWindow(SW_SHOW);

									//创建被控视频窗口
									m_slave_video_window_exist = m_slave_video_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(0,0,m_third_display_width,m_third_display_height),&m_slave_parent_window,SLAVE_VIDEO_WINDOW_ID,false,220,false);
									if (m_slave_video_window_exist)
									{
										m_slave_video_window.ShowWindow(SW_SHOW);
										//设置句柄给控件
										m_player_manager.set_slave_video_handle(m_slave_video_window.m_hWnd);
									}

									//是否在演唱台端显示控制osd
									result = config_file.read_boolean(L"control",L"slave_window_show_osd",false);
									if (result)
									{
										//在演唱台上显示osd
										m_player_manager.Set(SD_OSD_ON_SLAVE_WND,1);
									}
									else
									{
										//创建控制条的flash播放器
										int control_bar_height = 125*m_first_display_width/1440;  //按照宽度锁房高度
										m_slave_window_flash_player_exist = m_slave_window_flash_player.Create(NULL,WS_CHILD|WS_CLIPSIBLINGS,CRect(0,0,m_third_display_width,control_bar_height),&m_slave_parent_window,SLAVE_WINDOW_FLASH_PLAYER_ID);
										if (m_slave_window_flash_player_exist)
										{
											//得到小面板路径
											flash_panel_path.Format(L"%s\\%s\\miniPanel2.swf",m_work_path,g_folder_name[9]);
											if (!PathFileExists(flash_panel_path))
											{
												//如果演唱条的控制条不存在，就设置成false，以后就不在显示
												m_slave_window_flash_player_exist = false;
											}
											else
											{
												//加载控制条
												m_slave_window_flash_player.LoadMovie(0,flash_panel_path);
												m_slave_window_flash_player.Stop();
												m_slave_window_flash_player.ShowWindow(SW_HIDE);
											}
										}
										//监听串口
										int com_port = config_file.read_integer(L"control",L"slave_window_com_port",0);
										m_bar_touch_screen_com.init_com(m_hWnd,DM_SCREEN_COM_RECEIVE_MESSAGE,L"");
										result = m_bar_touch_screen_com.open(com_port,L"9600,N,8,1");
										result = m_bar_touch_screen_com.is_open();
										if (result)
										{
											WriteLog(__FL__, L"被控端触摸屏的串口打开成功");
										}
										else
										{
											WriteLog(__FL__, L"被控端触摸屏的串口打开失败");
										}
									}//end else
								}//end if
							}
							else
							{
								WriteLog(__FL__, L"得到演唱台的窗口坐标失败");
							}
						}

						//是否启用墙面板视频
						m_wall_panel_window_exist = config_file.read_boolean(L"wall_panel",L"open_wall_panel_video",false);
						if (m_wall_panel_window_exist)
						{
							TCHAR ini_file_path[256];
							int picture_number=0;
							TCHAR picture_path[256];
							TCHAR wall_panel_path[256];
							bool result=false;

							memset(ini_file_path,0x0,sizeof(ini_file_path));
							memset(picture_path,0x0,sizeof(picture_path));
							memset(wall_panel_path,0x0,sizeof(wall_panel_path));

							//启用墙面板
							WriteLog(__FL__, L"启用墙面板视频");
							//得到显卡的编号
							int display_number = config_file.read_integer(L"display",L"wall_panel_display_number",4);
							//得到墙面板显卡的分辨率
							result = get_display_device_settings(display_number,m_four_display_x,m_four_display_y,m_four_display_width,m_four_display_height);
							if (result)
							{
								//写日志
								memset(log,0x0,sizeof(log));
								swprintf(log,L"墙面板显卡的分辨率%d*%d",m_four_display_width,m_four_display_height);
								WriteLog(__FL__, log);
								//得到使用的墙面板图片编号
								picture_number = config_file.read_integer(L"wall_panel",L"wall_panel_picture_number",1);
								//创建墙面板窗口
								m_wall_panel_window_exist = m_wall_panel_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(m_four_display_x,m_four_display_y,m_four_display_x+m_four_display_width,m_four_display_y+m_four_display_height),NULL,0,false,220,false);
								if (m_wall_panel_window_exist)
								{
									//设置消息反馈句柄
									m_wall_panel_window.set_message_handle(m_hWnd);
									m_wall_panel_window.BringWindowToTop();
									m_wall_panel_window.ShowWindow(SW_SHOW);
									if (m_use_Interactive_game && g_dog_open_function.game && (2==m_show_game_window_number))
									{
										//启动互动游戏，并且显示到墙面板窗口，那么不显示墙面板了
										m_wall_panel_show_mode=WALL_PANEL_VIDEO;
										//把窗口句柄赋值给控件
										m_player_manager.Set(SD_WALL_PAD_HWND,(long)m_wall_panel_window.m_hWnd);
									}
									else
									{
										//根据显示模式分别创建
										switch(m_wall_panel_show_mode)
										{
										case WALL_PANEL_VIDEO_IMAGE:
										default:
											{
												//把窗口句柄赋值给控件
												m_player_manager.Set(SD_WALL_PAD_HWND,(long)m_wall_panel_window.m_hWnd);
												//把图片显示到墙面板视频上
												show_wall_panel_image();									
												//得到墙面板图片的高度和宽度
												swprintf(picture_path,L"%s\\%s\\wall_panel%d.png",m_work_path,g_folder_name[15],picture_number);
												result = get_image_resolution(picture_path,m_wall_panel_image_width,m_wall_panel_image_height);
												if (!result)
												{
													m_wall_panel_image_width = 595;
													m_wall_panel_image_width = 337;										
												}
											}
											break;
										case WALL_PANEL_VIDEO_FLASH:
											{
												//把窗口句柄赋值给控件
												m_player_manager.Set(SD_WALL_PAD_HWND,(long)m_wall_panel_window.m_hWnd);
												//创建墙面板flash播放器
												m_wall_panel_flash_player_exist = m_wall_panel_flash_player.Create(NULL,WS_CHILD,CRect(0,0,m_four_display_width,m_four_display_height),&m_wall_panel_window,WALL_PANEL_PLAYER_WINDOW_ID);
												if (m_wall_panel_flash_player_exist)
												{
													//加载墙面板
													swprintf(wall_panel_path,L"%s\\%s\\wallpanel.swf",m_work_path,g_folder_name[28]);
													m_wall_panel_flash_player.LoadMovie(0,wall_panel_path);
													m_wall_panel_flash_player.ShowWindow(SW_HIDE);
													//设置标示显示
													m_wall_panel_image_show = true;
												}
											}
											break;
										case WALL_PANEL_IMAGE_FLASH:
											{
												//显示图片
												play_wall_panel_AD_picture();
												//启动定时器显示图片
												show_wall_panel_image_timer_identifier = SetTimer(SHOW_WALL_PANEL_IMAGE_TIMER_EVENT_ID,m_play_AD_time_elapse*1000,NULL);
												//创建墙面板flash播放器
												m_wall_panel_flash_player_exist = m_wall_panel_flash_player.Create(NULL,WS_CHILD,CRect(0,0,m_four_display_width,m_four_display_height),&m_wall_panel_window,WALL_PANEL_PLAYER_WINDOW_ID);
												if (m_wall_panel_flash_player_exist)
												{
													//加载墙面板
													swprintf(wall_panel_path,L"%s\\%s\\wallpanel.swf",m_work_path,g_folder_name[28]);
													m_wall_panel_flash_player.LoadMovie(0,wall_panel_path);
													m_wall_panel_flash_player.ShowWindow(SW_HIDE);
													//设置标示显示
													m_wall_panel_image_show = true;
												}
											}
											break;
										}
										//开始计时
										m_wall_panel_timer.start();
										//监听第一串口
										swprintf(ini_file_path,L"wall_panel_picture\\wall_panel%d.ini",picture_number);
										m_wall_panel_screen_com1.init_com(m_hWnd,DM_WALL_PANEL_COM_RECEIVE_MESSAGE,ini_file_path);
										int com_port = config_file.read_integer(L"wall_panel",L"wall_panel_com_port1",1);
										result = m_wall_panel_screen_com1.open(com_port,L"9600,N,8,1");
										result = m_wall_panel_screen_com1.is_open();
										if (result)
										{
											WriteLog(__FL__, L"第一个墙面板触摸屏的串口打开成功");
										}
										else
										{
											WriteLog(__FL__, L"第一个墙面板触摸屏的串口打开失败");
										}
										//监听第二串口
										m_wall_panel_screen_com2.init_com(m_hWnd,DM_WALL_PANEL_COM_RECEIVE_MESSAGE,ini_file_path);
										com_port = config_file.read_integer(L"wall_panel",L"wall_panel_com_port2",1);
										result = m_wall_panel_screen_com2.open(com_port,L"9600,N,8,1");
										result = m_wall_panel_screen_com2.is_open();
										if (result)
										{
											WriteLog(__FL__, L"第二个墙面板触摸屏的串口打开成功");
										}
										else
										{
											WriteLog(__FL__, L"第二个墙面板触摸屏的串口打开失败");
										}
										//监听第三串口
										m_wall_panel_screen_com3.init_com(m_hWnd,DM_WALL_PANEL_COM_RECEIVE_MESSAGE,ini_file_path);
										com_port = config_file.read_integer(L"wall_panel",L"wall_panel_com_port3",1);
										result = m_wall_panel_screen_com3.open(com_port,L"9600,N,8,1");
										result = m_wall_panel_screen_com3.is_open();
										if (result)
										{
											WriteLog(__FL__, L"第三个墙面板触摸屏的串口打开成功");
										}
										else
										{
											WriteLog(__FL__, L"第三个墙面板触摸屏的串口打开失败");
										}
										//监听第四串口
										m_wall_panel_screen_com4.init_com(m_hWnd,DM_WALL_PANEL_COM_RECEIVE_MESSAGE,ini_file_path);
										com_port = config_file.read_integer(L"wall_panel",L"wall_panel_com_port4",1);
										result = m_wall_panel_screen_com4.open(com_port,L"9600,N,8,1");
										result = m_wall_panel_screen_com4.is_open();
										if (result)
										{
											WriteLog(__FL__, L"第四个墙面板触摸屏的串口打开成功");
										}
										else
										{
											WriteLog(__FL__, L"第四个墙面板触摸屏的串口打开失败");
										}
									}
								}
							}
							else
							{
								m_wall_panel_window_exist=false;
								WriteLog(__FL__, L"得到墙面板窗口的分辨率失败");
							}
						}

#ifdef VICE_SCREEN_GUANGXI
						//是否启用副屏
						m_vice_screen_window_exist = config_file.read_integer(L"vice_screen", L"open_vice_screen", 0);
						if (m_vice_screen_window_exist == 1)
						{
							int display_number = config_file.read_integer(L"display",L"vice_screen_number",9);
							//得到吧台的坐标
							result = get_display_device_settings(display_number,m_six_display_x,m_six_display_y,m_six_display_width,m_six_display_height);
							if (!result)
							{
								WriteLog(__FL__, L"得到副屏的显卡分辨率失败");
								//由于使用USB转VGA的显卡，所以获取不到分辨率，使用设置的分辨率
								m_six_display_x = config_file.read_integer(L"vice_screen",L"screen_left_x",0);
								m_six_display_y = config_file.read_integer(L"vice_screen",L"screen_top_y",0);
								m_six_display_width = config_file.read_integer(L"vice_screen",L"screen_width",m_first_display_width);
								m_six_display_height = config_file.read_integer(L"vice_screen",L"screen_height",m_first_display_height);
							}
							m_vice_screen_window_exist = m_vice_screen_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(m_six_display_x,m_six_display_y,m_six_display_x+m_six_display_width,m_six_display_y+m_six_display_height),NULL,0,false,220,false);
							if (m_vice_screen_window_exist)
							{
								//设置消息反馈句柄
								m_vice_screen_window.set_message_handle(m_hWnd);
								m_vice_screen_window.BringWindowToTop();
								m_vice_screen_window.ShowWindow(SW_SHOW);

								//把窗口句柄赋值给控件
								m_player_manager.Set(SD_WALL_PAD_HWND,(long)m_vice_screen_window.m_hWnd);
								//创建墙面板flash播放器
								m_vice_screen_flash_player_exist = m_vice_screen_flash_player.Create(NULL,WS_CHILD|WS_CLIPSIBLINGS|WS_CLIPCHILDREN,CRect(0,0,m_six_display_width,m_six_display_height),&m_vice_screen_window,VICE_SCREEN_PLAYER_ID);
								if (m_vice_screen_flash_player_exist)
								{
									CString flash_panel_path;
									//加载墙面板
									flash_panel_path.Format(L"%s\\%s\\Main.swf",m_work_path,g_folder_name[40]);
									//得到小面板路径									
									//flash_panel_path.Format(L"%s\\%s\\miniPanel2.swf",m_work_path,g_folder_name[9]);
									m_vice_screen_flash_player.LoadMovie(0,flash_panel_path);
									//m_vice_screen_flash_player.BringWindowToTop();
									m_vice_screen_flash_player.ShowWindow(SW_HIDE);
								}

								//创建被控视频窗口
								m_slave_video_window_exist = m_slave_video_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(0,0,720,480),&m_vice_screen_window,SLAVE_VIDEO_WINDOW_ID,false,220,false);
								if (m_slave_video_window_exist)
								{					 
									//m_slave_video_window.BringWindowToTop();
									m_slave_video_window.ShowWindow(SW_HIDE);
									//设置句柄给控件
									m_player_manager.set_slave_video_handle(m_slave_video_window.m_hWnd);
								}
							}
						}
#endif // VICE_SCREEN_GUANGXI

						/*****************************互动场景屏窗口******************************************/
						////互动场景屏窗口大小
						CRect inter_screen_rect;

						result = get_display_device_settings(m_inter_screen_manager.m_inter_screen_info.n_display_number, 
							m_inter_screen_manager.m_inter_screen_info.n_x, m_inter_screen_manager.m_inter_screen_info.n_y, 
							m_inter_screen_manager.m_inter_screen_info.n_width, m_inter_screen_manager.m_inter_screen_info.n_height);
						if (!result)
						{
							WriteLog(__FL__, L"得到互动场景屏窗口的分辨率失败,使用设置的分辨率");

							m_inter_screen_manager.m_inter_screen_info.n_width = config_file.read_integer(L"inter_screen",L"inter_screen_width",1280);
							m_inter_screen_manager.m_inter_screen_info.n_height = config_file.read_integer(L"inter_screen",L"inter_screen_height",720);
							m_inter_screen_manager.m_inter_screen_info.n_x = m_first_display_width /*+ m_sencond_display_width*/;
							m_inter_screen_manager.m_inter_screen_info.n_y = m_sencond_display_y;
						}
						inter_screen_rect.left = m_inter_screen_manager.m_inter_screen_info.n_x;
						inter_screen_rect.top = m_inter_screen_manager.m_inter_screen_info.n_y;
						inter_screen_rect.right = m_inter_screen_manager.m_inter_screen_info.n_x + m_inter_screen_manager.m_inter_screen_info.n_width;
						inter_screen_rect.bottom = m_inter_screen_manager.m_inter_screen_info.n_y + m_inter_screen_manager.m_inter_screen_info.n_height;
						//flash播放器大小
						m_rt_flash_player = inter_screen_rect;
						m_inter_screen_exist = m_inter_screen_manager.m_inter_screen_info.b_exsit;
						if (m_inter_screen_exist)
						{
							m_inter_screen_window_exist = m_inter_screen_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,m_rt_flash_player/*CRect(1280, 0, 600, 500)*/,NULL,0,false,220,false);
							if (m_inter_screen_window_exist)
							{
								WriteLog(__FL__, L"互动场景屏窗口创建成功");
								//设置消息反馈句柄	
								m_inter_screen_window.set_message_handle(m_hWnd);
								m_inter_screen_window.ShowWindow(SW_SHOW);
								//创建flash播放器
								m_inter_screen_mode = m_inter_screen_manager.m_inter_screen_info.n_mode;
								m_show_activity_wnd = m_inter_screen_manager.m_inter_screen_info.n_show_activity_wnd;
								m_activity_wnd_full_screen = m_inter_screen_manager.m_inter_screen_info.b_activity_wnd_full_screen;
								if (m_inter_screen_mode != 0)
								{
									m_inter_screen_flash_player_exist = m_inter_screen_flash_player.Create(NULL,WS_CHILD|WS_CLIPSIBLINGS|WS_CLIPCHILDREN,CRect(0,0,m_rt_flash_player.Width(),m_rt_flash_player.Height()),&m_inter_screen_window,INTER_SCREEN_PLAYER_ID);
									if (m_inter_screen_flash_player_exist)
									{
										WriteLog(__FL__, L"互动场景屏flash创建成功");
										//加载
										TCHAR path[256] = {0x0};
										swprintf(path,L"%s\\inter_screen_interface\\Main.swf",m_work_path);
										m_inter_screen_flash_player.LoadMovie(0, path);
										m_inter_screen_flash_player.ShowWindow(SW_SHOW);
									}
								}
								else
								{
									m_rtRelativeActivityWnd = CRect(0, 0, m_rt_flash_player.Width(), m_rt_flash_player.Height());
								}
							}
							//平台音乐歌词屏幕宽度
							m_nMusicEnjoyWidth = m_rt_flash_player.Width();
							m_nMusicEnjoyHeight = m_rt_flash_player.Height();
							//全屏显示不会拉伸osd
							m_player_manager.Set(SD_FULL_SIZE_OSD, 1);
							//调整控制osd的位置
							m_osd_play_manager.adjust_control_osd_coordinate(m_rt_flash_player.Width(), m_rt_flash_player.Height(), true);

							//启用麦霸规则信息定时器
							maiba_rule_timer_identifier = SetTimer(INTER_SCREEN_MAIBA_RULE_TIME_EVENT_ID, 60*1000, NULL);
							//启用显示活动信息定时器
							maiba_song_list_timer_identifier = SetTimer(INTER_SCREEN_MAIBA_SONG_LIST_TIME_EVENT_ID, 60*1000, NULL);
							//设置活动窗口
							m_rtAbsoluteActivityWnd = m_rt_flash_player;
							//设置主视频窗口位置
							m_rt_master.left = 0;
							m_rt_master.top = 0;
							m_rt_master.right = m_rt_flash_player.Width();
							m_rt_master.bottom = m_rt_flash_player.Height();
							//m_b_master_show_window_exist = m_master_show_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE, m_rt_master, NULL, 0, false, 220, false);
							m_b_master_show_window_exist = m_master_show_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE, m_rt_master,&m_inter_screen_window,MASTER_SHOW_WINDOW_ID,false,220,false);
							if (m_b_master_show_window_exist)
							{
								WriteLog(__FL__, L"互动场景屏主视屏窗口创建成功");
								//设置消息反馈句柄
								m_master_show_window.set_message_handle(m_hWnd);
								m_master_show_window.BringWindowToTop();
								m_master_show_window.ShowWindow(SW_HIDE);
								if (m_soft_decode_window_exist)
								{
									m_player_manager.Set(SD_SLAVE_VIDEO_HWND, (long)m_master_show_window.m_hWnd);

									//是否在演唱台端显示控制osd
									result = config_file.read_boolean(L"control",L"slave_window_show_osd",false);
									if (result)
									{
										//在演唱台上显示osd
										m_player_manager.Set(SD_OSD_ON_SLAVE_WND,1);
									}
								}
								else
								{
									m_inter_screen_soft_exist = true;
									m_player_manager.Set(SD_DUAL_OUTPUT_HWND, (long)m_master_show_window.m_hWnd);
								}

								if (m_inter_screen_mode == 0)
								{
									m_master_show_window.ShowWindow(SW_SHOW);
								}
							}

							if (m_inter_screen_mode == 2 ||  m_inter_screen_mode == 3)
							{
								//设置辅视频窗口位置
								m_rt_slave.left = 0;
								m_rt_slave.top = 0;
								m_rt_slave.right = m_rt_flash_player.Width();
								m_rt_slave.bottom = m_rt_flash_player.Height();
// 								m_b_slave_show_window_exist = m_slave_show_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE, m_rt_slave, NULL, 0, false, 220, false);
								m_b_slave_show_window_exist = m_slave_show_window.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,m_rt_slave,&m_inter_screen_window,SLAVE_SHOW_WINDOW_ID,false,220,false);
								if (m_b_slave_show_window_exist)
								{
									WriteLog(__FL__, L"互动场景屏辅视屏窗口创建成功");
									//设置消息反馈句柄
									m_slave_show_window.set_message_handle(m_hWnd);
									m_slave_show_window.BringWindowToTop();
									m_slave_show_window.ShowWindow(SW_HIDE);
									m_player_manager.Set(SD_WALL_PAD_HWND/*SD_SECTV_VIDEO_HWND*/,(long)m_slave_show_window.m_hWnd);
								}
								////设置活动视频窗口位置
								CRect rt_activity_video_wnd;
								rt_activity_video_wnd.left = 0;
								rt_activity_video_wnd.top = 0;
								rt_activity_video_wnd.right = m_rt_flash_player.Width();
								rt_activity_video_wnd.bottom = m_rt_flash_player.Height();
								m_bactivity_video_wnd_exist = m_activity_video_wnd.Create(WS_CHILD|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,rt_activity_video_wnd,&m_inter_screen_window,ACTIVITY_VIDEO_WND_ID,false,220,false);
								if (m_bactivity_video_wnd_exist)
								{
									WriteLog(__FL__, L"互动场景屏活动视屏窗口创建成功");
									//设置消息反馈句柄
									//m_activity_video_wnd.set_message_handle(m_hWnd);
									m_activity_video_wnd.BringWindowToTop();
									m_activity_video_wnd.ShowWindow(SW_HIDE);
									m_player_manager.Set(SD_SECTV_VIDEO_HWND, (long)m_activity_video_wnd.m_hWnd);
									//配置电视转播
									TCHAR live_path[256] = {0x00};
									int output_audio_channel = 0;
									std::wstring video_path = config_file.read_string(L"inter_screen", L"default_video_path", L"");
									//读取配置文件
									wstring server_ip = config_file.read_string(L"lobby_live",L"server_ip",L"234.1.1.1");
									wstring server_port = config_file.read_string(L"lobby_live",L"server_port",L"1234");
									//swprintf(live_path,L"udp://%s:",server_ip.c_str());
									//直播IP必须赋值到六个服务器路径中
									//internet_video_info.set_server_path1(live_path);
									//直播的端口号必须赋值给歌曲的相对路径
									//internet_video_info.set_song_relative_path(server_port.c_str()); 
									if (m_tv_topbox_mode)
									{
										//机顶盒方式  改成单播方式  FOR ZHEN 2012-11-29
										if (TV_GROUP_PLAY_MODE == m_tv_play_mode)
										{
											swprintf(live_path,L"shn://%s:%s",server_ip.c_str(),server_port.c_str());
										}
										else
										{
											swprintf(live_path,L"shn://%s@%s:4360",server_port.c_str(),server_ip.c_str());
										}

									}
									else
									{
										//vlc方式
										swprintf(live_path,L"udp://%s:%s",server_ip.c_str(),server_port.c_str());
									}
									
									if (video_path.empty())
									{
										//设置大厅直播的媒体源
										m_player_manager.Set(SD_SECTV_MEDIA_SOURCE,(long)live_path);
									}
									else
									{
										m_player_manager.Set(SD_SECTV_MEDIA_SOURCE,(long)video_path.c_str());
									}
									m_player_manager.Set(SD_SECTV_AUDIO_ONOFF,output_audio_channel);
								}
								////////////////////////*/
							}

							if (m_inter_screen_flash_player_exist) //是否存在频谱flash
							{
								int spectrum = config_file.read_integer(L"room", L"set_spectrum", 0);

								//设置频谱数据
								if(spectrum == 1)
									m_player_manager.Set(SD_SET_SPECTRUM, MAKEWPARAM(SPECTRUM_MAX_VALUE, SPECTRUM_MAX_COUNT));
							}//*/
						}
						else{
							//
						}

						//是否启用门牌机
						m_doorplate_window_exist = config_file.read_boolean(L"doorplate_machine",L"use_doorplate_machine",false);
						if (m_doorplate_window_exist)
						{
							TCHAR path[256];

							memset(path,0x0,sizeof(path));

							WriteLog(__FL__, L"启用门牌机功能");

							result = config_file.read_boolean(L"doorplate_machine",L"force_use_set_resolution",false);
							if (result)
							{
								WriteLog(__FL__, L"强制使用设置的分辨率");
								//强制使用设置的分辨率
								m_five_display_x = config_file.read_integer(L"doorplate_machine",L"screen_left_x",0);
								m_five_display_y = config_file.read_integer(L"doorplate_machine",L"screen_top_y",0);
								m_five_display_width = config_file.read_integer(L"doorplate_machine",L"screen_width",m_first_display_width);
								m_five_display_height = config_file.read_integer(L"doorplate_machine",L"screen_height",m_first_display_height);
							}
							else
							{
								int display_number = config_file.read_integer(L"display",L"doorplate_machine_display_number",5);
								//得到吧台的坐标
								result = get_display_device_settings(display_number,m_five_display_x,m_five_display_y,m_five_display_width,m_five_display_height);
								if (!result)
								{
									WriteLog(__FL__, L"得到门牌机的显卡分辨率失败");
									//由于使用USB转VGA的显卡，所以获取不到分辨率，使用设置的分辨率
									m_five_display_x = config_file.read_integer(L"doorplate_machine",L"screen_left_x",0);
									m_five_display_y = config_file.read_integer(L"doorplate_machine",L"screen_top_y",0);
									m_five_display_width = config_file.read_integer(L"doorplate_machine",L"screen_width",m_first_display_width);
									m_five_display_height = config_file.read_integer(L"doorplate_machine",L"screen_height",m_first_display_height);
								}
							}

							//写日志
							memset(log,0x0,sizeof(log));
							swprintf(log,L"门牌机显卡起始坐标：x=%d y=%d  分辨率%d*%d",m_five_display_x,m_five_display_y,m_five_display_width,m_five_display_height);
							WriteLog(__FL__, log);
							//是否启用门牌机酒水功能
							//m_use_doorplate_drinks = config_file.read_boolean(L"doorplate_machine",L"use_drinks_function",false);
							//创建窗口 2011-07-15 modify 以后全部使用flash门牌机
							m_doorplate_window_exist = m_doorplate_window.Create(CRect(m_five_display_x,m_five_display_y,m_five_display_x+m_five_display_width,m_five_display_y+m_five_display_height),m_show_room_name,false,m_hWnd);
							if (m_doorplate_window_exist)
							{
								//创建flash播放器
								m_doorplate_window_exist = m_doorplate_flash_player.Create(NULL,WS_CHILD|WS_VISIBLE,CRect(0,0,m_five_display_width,m_five_display_height),&m_doorplate_window,DOORPLATE_FLASH_PLAYER_WINDOW_ID);
								if (m_doorplate_window_exist)
								{
									//加载flash界面
									//加载flash界面
									memset(path,0x0,sizeof(path));
									memset(image_path,0x0,sizeof(image_path));
									if (m_five_display_width>m_five_display_height)
									{
										//横版
										//检测是否需要替换图片
										swprintf(image_path,L"%s\\%s\\room_image\\%s.png",m_work_path,g_folder_name[30],m_room_ip);
										if (PathFileExists(image_path))
										{
											memset(path,0x0,sizeof(path));
											swprintf(path,L"%s\\%s\\img\\h\\left.png",m_work_path,g_folder_name[30]);
											CopyFile(image_path,path,FALSE);
										}
										//加载文件路径
										memset(path,0x0,sizeof(path));
										swprintf(path,L"%s\\%s\\doorplate_h.swf",m_work_path,g_folder_name[30]);
									}
									else
									{
										//竖版
										//检测是否需要替换图片
										swprintf(image_path,L"%s\\%s\\room_image\\%s.png",m_work_path,g_folder_name[30],m_room_ip);
										if (PathFileExists(image_path))
										{
											memset(path,0x0,sizeof(path));
											swprintf(path,L"%s\\%s\\img\\v\\left.png",m_work_path,g_folder_name[30]);
											CopyFile(image_path,path,FALSE);
										}
										//加载文件路径
										memset(path,0x0,sizeof(path));
										swprintf(path,L"%s\\%s\\doorplate_v.swf",m_work_path,g_folder_name[30]);
									}

									//加载文件
									m_doorplate_flash_player.LoadMovie(0,path);
									m_doorplate_flash_player.BringWindowToTop();
									m_doorplate_flash_player.ShowWindow(SW_SHOW);

									//监听串口
									m_doorplate_com.init_com(m_hWnd,DM_DOORPLATE_COM_RECV_MESSAGE,NULL);
									int com_port = config_file.read_integer(L"doorplate_machine",L"com_port",1);
									result = m_doorplate_com.open(com_port,L"9600,N,8,1");
									result = m_doorplate_com.is_open();
									if (result)
									{
										WriteLog(__FL__, L"门牌机串口打开成功");
									}
									else
									{
										WriteLog(__FL__, L"门牌机串口打开失败");
									}
								}
							}
						}
						//是否启用互动游戏
						if (m_use_Interactive_game && (g_dog_open_function.game))  //2011-04-28 modify 狗必须开互动游戏功能
						{
							int left_x=0;
							int top_y=0;
							int width=0;
							int height=0;
							TCHAR game_path[256];

							memset(game_path,0x0,sizeof(game_path));

							//启用互动游戏
							WriteLog(__FL__, L"启用互动游戏");
							//检测是否启用互动游戏声音
							result = config_file.read_boolean(L"game",L"output_audio",true);
							if (result)
							{
								//打开flash音频
								m_player_manager.Set(SD_FLASH_WAVE_ONOFF,1);
							}
							else
							{
								//关闭flash音频
								m_player_manager.Set(SD_FLASH_WAVE_ONOFF,0);
							}
							//查看是否显示在软解窗口中
							if ((1==m_show_game_window_number)&&m_soft_decode_window_exist)
							{
								//显示到软解窗口中
								if (m_game_full_screen_show)
								{
									//全屏显示
									left_x = m_sencond_display_x;
									top_y = m_sencond_display_y;
									width = m_sencond_display_width;
									height = m_sencond_display_height;
								}
								else
								{
									//居中显示
									left_x = m_sencond_display_x + m_sencond_display_width*5/24;
									top_y = m_sencond_display_y + m_sencond_display_height/9;
									width = m_sencond_display_width*7/12;
									height = m_sencond_display_height*7/12;
								}
							}
							else if ((2==m_show_game_window_number)&&m_wall_panel_window_exist)
							{
								//显示到墙面板上，全屏显示
								left_x = m_four_display_x;
								top_y = m_four_display_y;
								width = m_four_display_width;
								height = m_four_display_height;
							}
							else
							{
								//第六屏中
								//得到显卡的编号
								int display_number = config_file.read_integer(L"display",L"game_display_number",6);
								//得到墙面板显卡的分辨率
								result = get_display_device_settings(display_number,left_x,top_y,width,height);
								if (!result && m_soft_decode_window_exist)
								{
									left_x = m_sencond_display_x + m_sencond_display_width/4;
									top_y = m_sencond_display_y + m_sencond_display_height/4;
									width = m_sencond_display_width/2;
									height = m_sencond_display_height/2;
									//设置互动游戏显示窗口编号
									m_show_game_window_number = 1;
								}
								else
								{
									//设置互动游戏显示窗口编号
									m_show_game_window_number = 0;
								}
							}
							//创建父窗口
							result = m_game_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(left_x,top_y,left_x+width,top_y+height),NULL,0,false,220,false);
							if (result)
							{
								m_game_window.BringWindowToTop();
								m_game_window.show_window(true);
								//设置消息窗口句柄
								m_game_window.set_message_handle(m_hWnd);
								//创建flash播放窗口
								m_game_flash_player_exist = m_game_flash_player.Create(NULL,WS_CHILD|WS_VISIBLE,CRect(0,0,width,height),&m_game_window,GAME_FLASH_PLAYER_WINDOW_ID);
								if (m_game_flash_player_exist)
								{
									//加载游戏
									swprintf(game_path,L"%s\\%s\\KtvGames.swf",m_work_path,g_folder_name[26]);
									m_game_flash_player.LoadMovie(0,game_path);
									m_game_flash_player.ShowWindow(SW_SHOW);
									//聚焦到当前页面
									SetFocus();
								}
							}
						}
						else
						{
							//关闭flash音频
							m_player_manager.Set(SD_FLASH_WAVE_ONOFF,0);
							//不启用互动游戏
							m_use_Interactive_game=false;
						}
						//广告屏幕
						m_AD_flash_player_exist = config_file.read_boolean(L"AD",L"open_AD_window",false);
						if (m_AD_flash_player_exist)
						{
							int left_x=0;
							int top_y=0;
							int width=0;
							int height=0;
							TCHAR AD_path[256];

							//得到显卡的编号
							int display_number = config_file.read_integer(L"display",L"AD_window_display_number",7);
							//得到AD屏显卡分辨率
							m_AD_flash_player_exist = get_display_device_settings(display_number,left_x,top_y,width,height);
							if (m_AD_flash_player_exist)
							{
								m_AD_flash_player_exist = m_AD_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(left_x,top_y,left_x+width,top_y+height),NULL,0,false,220,false);
								if (m_AD_flash_player_exist)
								{
									m_AD_window.BringWindowToTop();
									m_AD_window.show_window(true);
									//设置消息窗口句柄
									m_AD_window.set_message_handle(m_hWnd);
									//创建flash播放窗口
									m_AD_flash_player_exist = m_AD_flash_player.Create(NULL,WS_CHILD|WS_VISIBLE,CRect(0,0,width,height),&m_AD_window,AD_FLASH_PLAYER_WINDOW_ID);
									if (m_AD_flash_player_exist)
									{
										memset(AD_path,0x0,sizeof(AD_path));
#define NEW_AD_MACHINE
#ifndef NEW_AD_MACHINE	//新的广告机flash
										if (width>height)
										{
											//横屏
											swprintf(AD_path,L"%s\\%s\\AD_h.swf",m_work_path,g_folder_name[36]);
										}
										else
										{
											//竖屏
											swprintf(AD_path,L"%s\\%s\\AD_v.swf",m_work_path,g_folder_name[36]);
										}
#else
										swprintf(AD_path,L"%s\\%s\\AD_Machine.swf",m_work_path,g_folder_name[36]);
#endif
										m_AD_flash_player.LoadMovie(0,AD_path);
										m_AD_flash_player.ShowWindow(SW_SHOW);
										m_AD_flash_player.put_ScaleMode(2);
										//聚焦到当前页面
										SetFocus();
									}
								}
							}
						}
						/*
						//第二块电视
						m_second_tv_window_exist = config_file.read_boolean(L"SecondTVScreen",L"open_tv",false);
						if (m_second_tv_window_exist)
						{
						//启用第二块电视屏，显示组播节目
						TCHAR live_path[256];
						int output_audio_channel=0;
						int left_x=0;
						int top_y=0;
						int width=0;
						int height=0;

						memset(live_path,0x0,sizeof(live_path));

						//得到显卡的编号
						int display_number = config_file.read_integer(L"display",L"second_tv_window_display_number",1);
						//得到第二个电视屏的显卡分辨率
						m_second_tv_window_exist = get_display_device_settings(display_number,left_x,top_y,width,height);
						if (m_second_tv_window_exist)
						{
						//创建大厅直播窗口到第二个显卡区域
						m_second_tv_window_exist = m_second_tv_window.Create(WS_POPUP|WS_CLIPCHILDREN|WS_CLIPSIBLINGS|WS_VISIBLE,CRect(left_x,top_y,left_x+width,top_y+height),NULL,0,false,220,false);
						if (m_second_tv_window_exist)
						{
						m_second_tv_window.BringWindowToTop();
						m_second_tv_window.ShowWindow(SW_SHOW);
						//把大厅直播的窗口句柄赋值给控件
						m_player_manager.Set(SD_SECTV_VIDEO_HWND,(long)(m_second_tv_window.m_hWnd));
						//得到组播IP
						std::wstring server_ip = config_file.read_string(L"SecondTVScreen",L"multicast_ip",L"234.1.1.1");
						//得到组播的端口号
						std::wstring server_port = config_file.read_string(L"SecondTVScreen",L"multicast_port",L"1234");
						swprintf(live_path,L"udp://%s:%s",server_ip.c_str(),server_port.c_str());
						//设置大厅直播的媒体源
						m_player_manager.Set(SD_SECTV_MEDIA_SOURCE,(long)live_path);
						//默认输出歌曲声音
						output_audio_channel = 0;
						m_player_manager.Set(SD_SECTV_AUDIO_ONOFF,output_audio_channel);
						}
						}
						}*/

						//设置电视窗口句柄
						result = m_player_manager.TV_control(TVC_SET_DISP_HWND,(long)m_tv_window.m_hWnd,0);
						//设置助唱功能声卡的名字和打分功能
						m_player_manager.set_help_sing_and_mark(m_use_score_system);

						//设置评分文件路径
						std::wstring score_path = config_file.read_string(L"mark",L"score_path",L"");
						if (!score_path.empty())
						{
							m_player_manager.Set(SD_SET_SCORE_FILEPATH,(long)score_path.c_str());
						}

						//设置缓存字节数
						int cache_size = config_file.read_integer(L"control",L"cache_size_MB",8);
						if (cache_size>=3)
						{
							m_player_manager.Set(SD_PREFECT_MB,cache_size);
						}
						//是否启用视频补偿
						result = config_file.read_boolean(L"control",L"use_video_compensation",false);
						if (result)
						{
							m_player_manager.Set(SD_VIDENH_ONOFF,1);
						}
						//只处理右半部分
						result = config_file.read_boolean(L"control",L"video_compensation_right_half",false);
						if (result)
						{
							m_player_manager.Set(SD_VIDENH_HALF_ONLY,1);
						}

						//切除视频黑边
						m_player_manager.Set(SD_CUT_BLACK_BORDER, 0);

						//打开预览音频
						open_preview_audio();

						//显示公司的logo图标
						show_logo_osd();

						//得到狗的欢迎词
						memset(m_dog_welcome,0x0,sizeof(m_dog_welcome));
						if(_tcslen(user_infor.Name)<(sizeof(m_dog_welcome)/sizeof(TCHAR)-5))
						{
							//防止越界
							swprintf(m_dog_welcome,L"%s%s",DogWelcomeTip,user_infor.Name);
							show_text_on_flash(m_dog_welcome);
						}

						if(m_flash_screen_init_finish)
						{
							//加密狗和界面都初始化完成之后显示歌曲名字
							show_song_name();
						}

						//创建图片屏保窗口
						m_screen_saver_window_exist = m_screen_saver_window.Create(this,m_first_display_width,m_first_display_height);
						//检测是否启用屏保
						m_pc_show_screen_saver = config_file.read_boolean(L"screen_saver",L"show_screen_saver",false);
						if (m_pc_show_screen_saver)
						{
							m_show_video_screen_saver = config_file.read_boolean(L"screen_saver",L"show_video_screen_saver",false);
							//if (m_show_video_screen_saver && m_screen_show_window_exist && m_screen_show_video)
							if (m_show_video_screen_saver && m_screen_show_window_exist)
							{
								//视频播放窗口存在并且显示视频窗口时，才能显示视频屏保
								m_show_video_screen_saver = true;
							}
							else
							{
								//显示图片屏保
								TCHAR screen_saver_path[256];
								int picture_show_time=0;

								memset(screen_saver_path,0x0,sizeof(screen_saver_path));

								if (m_screen_show_window_exist)
								{
									//显示图片屏保
									swprintf(screen_saver_path,L"%s\\%s",m_work_path,g_folder_name[7]);

									//设置屏保路径
									int nResult = m_screen_saver_window.set_screen_saver_path(screen_saver_path);
									if (nResult<=0)
									{
										m_pc_show_screen_saver = false;
									}
									else
									{
										//得到每个屏保图片显示的时间
										picture_show_time = config_file.read_integer(L"screen_saver",L"screen_saver_picture_show_time",30);
										m_screen_saver_window.set_show_time(picture_show_time);
									}
								}
								else
								{
									m_pc_show_screen_saver = false;
								}
							}
							if (m_pc_show_screen_saver)
							{
								//得到无操作时，启动屏保的时间
								m_start_screen_saver_time = config_file.read_integer(L"screen_saver",L"start_screen_saver_time",60);

								//竖版不弹
								if (m_screen_to_flash_timer)
								{
									show_screen_to_flash_timer_identifier = SetTimer(SHOW_SCREEN_TO_FLASHS_TIME_EVENT_ID,m_start_screen_saver_time,NULL);
								}

								/*
								//用户单击视频启动的屏保
								if (SCREEN_TYPE_VERTICAL==m_interface_type)
								{
								//竖版不弹
								if (m_screen_to_flash_timer)
								{
								show_screen_to_flash_timer_identifier = SetTimer(SHOW_SCREEN_TO_FLASHS_TIME_EVENT_ID,m_start_screen_saver_time*2*1000,NULL);
								}									
								}
								else
								{
								//启动屏保定时器
								show_screen_saver_timer_identifier = SetTimer(SHOW_SCREEN_SAVER_TIMER_EVENT_ID,1000,NULL);
								}
								*/
							}
						}						

						if (m_use_open_room_function||m_use_test_function)
						{
							//使用后台开关房功能或测机功能，目前就是锁房状态
							m_pc_state = CLOSE_ROOM_STATE;
							//找到解密狗之后，播放歌曲
							if (2!=m_master_slave_control_flag)
							{
								//被控机不允许切主控机
								WriteLog(__FL__, L"开机自动播放歌曲");
								flash_message_call_function(SONG_NEXT);
							}
						}
						else
						{
							//直接开房
							ktv_open_room();
						}

						//启动一个公共定时器
						common_timer_identifier = SetTimer(COMMON_TIMER_EVENT_ID,1000,NULL);
						//是否启用检测文件开关房的功能
						result = config_file.read_boolean(L"room_file",L"use_file_mode",false);
						if (result)
						{
							//得到文件路径
							std::wstring path = config_file.read_string(L"room_file",L"file_path",L"");
							if (!path.empty())
							{
								int room_last_byte=0;

								//得到包房文件类型
								m_room_file_type = config_file.read_integer(L"room_file",L"file_type",0);
								//显示IP地址的最后一个字节
								//得到包房编号，IP地址的最后一个字节
								TCHAR *room_ip_name = _tcsrchr(m_room_ip,'.');
								swscanf(room_ip_name+1,L"%d",&room_last_byte);
								//得到包房文件路径
								if (0==m_room_file_type)
								{
									//视点文件
									swprintf(m_room_file_path,L"%s\\%04d.frt",path.c_str(),room_last_byte);
								}
								else
								{
									//视翰文件
									swprintf(m_room_file_path,L"%s\\%04d.ini",path.c_str(),room_last_byte);
								}
								//启用检测文件是否存在的定时器
								check_file_timer_identifier = SetTimer(CHECK_FILE_TIMER_EVENT_ID,10000,NULL);
							}
						}
						if ((0!=strcmp(m_mysql_server_path,"")) && m_mysql_open_success)
						{
							check_mysql_timer_identifier = SetTimer(CHECK_MYSQL_TIMER_EVENT_ID,10000,NULL);
						}

#ifdef VICE_SCREEN_GUANGXI
						//如果启用了副屏，则启用定时器
						if (m_vice_screen_window_exist)
						{
							SetTimer(GET_VICE_SCREEN_TO_FLASH_TIME_EVENT_ID, 10*1000, NULL);
						}
#endif // VICE_SCREEN_GUANGXI

						if (m_use_open_room_function)
						{
							//如果使用开关房控制，要咨询后台服务器，目前是否是开房状态
							//如果socket连接不上，在这发送启动会变慢，改成线程方式
							g_back_server_msg_type = BACK_SERVER_MSG_TYPE_IP_NAME;
							AfxBeginThread(Cflashktv10Wnd::send_msg_to_back_server_thread,this);
						}
						if (0!=m_show_game_window_number)
						{
							//游戏在软解窗口或墙板窗口，隐藏互动游戏
							send_keybd_code_to_game('M');
						}

						//记录加密狗检测成功的标示
						m_find_dog_success = true;
						//找狗成功
						WriteLog(__FL__, L"加密狗部分的初始化全部完成");
						//得到焦点
						SetFocus();
#ifdef LOOP_PLAY_BG_SONG     //循环播放背景声音
						{
							TCHAR wave_path[256];

							memset(wave_path,0x0,sizeof(wave_path));

							swprintf(wave_path,L"%s\\atmosphere_video\\between_song.wav",m_work_path);

							PlaySound(wave_path,NULL,SND_FILENAME|SND_NOWAIT|SND_ASYNC|SND_LOOP);
						}
#endif

#ifdef  CHANGCHUN_DRINKS_VERSION    //2010-12-16 add  长春酒水
						//软件启动的时候，就加载酒水软件，只能加载一次
						flash_message_call_drinks();
#endif
					}
					break;
				default:
					break;
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_PLAY_SONG_TIP_MESSAGE:
		{
			//得到分数
			if (SCORE_SYSTEM_NONE!=m_use_score_system)
			{
				PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
				if (m_show_song_tip_osd)      //启用了评分，隐藏歌曲提示
				{
					m_show_song_tip_osd=false;
					set_bmp_picture_show_timer(500);
// 					if (m_soft_load_score_flash_success)
// 					{
// 						//隐藏flash动画
// 						m_soft_score_flash_player.ShowWindow(SW_HIDE);
// 					}
// 					if (m_load_score_flash_success)
// 					{
// 						m_score_flash_player.ShowWindow(SW_HIDE);
// 					}
				}
				if ((PLAY_SCORE_VIDEO!=video_type))
				{
					//初始化阳光评分变量
					m_score_intact = 0;                         //评分完整度总合
					m_score_similarity = 0;                     //相似度
					m_score_stability = 0;                      //稳定度
					m_score_decibel = 0;                        //声音分贝数
					m_lyric_total_sentences = 0;                //歌词总句数
					m_shine_total_score = 0;
					m_nCurrentScore = 0;
					memset(m_score_song_info,0x0,sizeof(m_score_song_info));   //评分歌曲
					memset(m_next_song_info,0x0,sizeof(m_next_song_info));     //下一首歌曲
				}

				if (video_type == PLAY_MUSIC_ENJOY)
				{
					set_music_enjoy_osd();
				}
			}
			else if (m_soft_decode_window_exist)
			{
				bool result=false;

				//软解才显示下一首提示osd
				result = save_song_tip_osd();
				if (result)
				{
					//显示
					show_song_tip_osd();
				}
			}
			//下一首的时候，环境音已经关闭，所以重设按钮状态
			m_select_environment_button_number=5; 
			//设置环境音的按钮状态
			send_environment_audio_button_state();
		}
		break;
	case WM_OSD_PLAY_DONE:  //osd完成消息
		{
			int osd_number = LOWORD(wParam);
			switch(osd_number)
			{
			case nLayerText:  //滚动文字
				{
					show_song_name();
				}
				break;
			default:
				break;
			}
		}
		break;
	case WM_PLAYER_NOTIFY:
		{
			bool result=false;
			TCHAR log[1024];

			memset(log,0x0,sizeof(log));

			if ((int)wParam != 500)
			{
				//写日志
				swprintf(log,L"控件返回的消息码：%d",wParam);
				WriteLog(__FL__, log);
			}			

			switch(wParam)
			{
			case PN_MEDIA_OPENED_SUCCEED:	// 打开文件成功
				{
					enum PLAYER_PLAY_STATE player_state;
					bool kalaok_track=false;
					bool result=false;
					song_info video_information;

					//记录视频发送给前置机的信息
					copy_precomputer_video_send_info();
					//下一首时结束歌词接龙
					if (m_start_lyric_link)
					{
						//结束歌词接龙
						if (show_bmp_picture_timer_identifier)
						{
							//杀死定时器
							KillTimer(show_bmp_picture_timer_identifier);
							show_bmp_picture_timer_identifier=0;
						}
						//停止播放bmp osd
						m_player_manager.stop_bmp_osd();
						//设置标示
						m_start_lyric_link = false;
					}
					//标示要开始唱的是第一句歌词
					m_bFirstLyric = true;
					//停止播放评分图片osd
					m_player_manager.stop_score_osd();

					//得到正在播放的歌曲
					m_video_play_manager.get_playing_video(video_information);

					//销毁挑战大咖控件
					if (!m_b_challenge_begin && !m_b_challenging)
					{
						if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
						{
							delete m_StarTransparentWnd;
							m_StarTransparentWnd = NULL;
							//全屏显示flash时，还原视频窗口位置
							if (m_activity_wnd_full_screen)
							{
								if (m_show_activity_wnd == 0 || m_inter_screen_mode == 0 || m_inter_screen_mode == 1)
								{
									m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
								}
								else
								{
									m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
								}
							}
						}
						if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
						{
							delete m_StarSoftTransparentWnd;
							m_StarSoftTransparentWnd = NULL;
						}
						m_nFlashFinishCnt = 0;
						m_bChallengeStarFinish = false;
					}
					//销毁百秒夺奖控件
					if (!m_bAcrossPassing)
					{
						if (m_bAcrossPassFlashPlayerExist || m_bAcrossPassSoftFlashPlayerExist)
						{
							m_nFlashFinishCnt = 0;
							m_bAcrossPassFlashFinish = false;
							m_nCurPageCode = 0;	
							m_nCurrentScore = 0;
							m_nCurrentTotalScore = 0;
							m_nSingCount = 0;
						}
						if (m_bAcrossPassFlashPlayerExist)
						{
							m_AcrossPassFlashPlayer.DestroyWindow();
							m_bAcrossPassFlashPlayerExist = false;
						}
						if (m_bAcrossPassSoftFlashPlayerExist)
						{
							m_AcrossPassSoftFlashPlayer.DestroyWindow();
							m_bAcrossPassSoftFlashPlayerExist = false;
						}
					}
					if (!m_bScoring)
					{
						if (m_soft_load_score_flash_success)
						{
							m_soft_score_flash_player.DestroyWindow();
							m_soft_load_score_flash_success = false;
						}
						if (m_load_score_flash_success)
						{
							m_score_flash_player.DestroyWindow();
							m_load_score_flash_success = false;
						}
						m_bScoring =false;
					}

					//set_guid_song_button_state(false);
					//导唱状态取消
					set_button_show_state(GUID_BUTTON_STATE,false);
					m_enter_guide_song = false;
					m_show_guide_osd = false;

					if (1==m_master_slave_control_flag)
					{
						//主控机，发送正播放的歌曲给手持被控机
						send_playing_song_to_handheld();
					}

					m_select_song_accompany_original = -1;


					//得到播放器的状态
					player_state = m_video_play_manager.get_player_cur_state();
					if((BEGIN_STATE==player_state)||(IDLESSE_STATE==player_state)||(END_STATE==player_state))
					{
						//原唱
						kalaok_track = true;
#ifdef AUTO_OPEN_GUID  //ZHEN 2013-09-14
						exit_enter_guid_song(false);  //关闭导唱
#endif
					}
					else
					{
						//伴唱
						kalaok_track = false;
#ifdef AUTO_OPEN_GUID  //ZHEN 2013-09-14
						exit_enter_guid_song(true);  //开启导唱
#endif
					}

					//开始播放视频
					result = m_player_manager.play_video_file(m_cancel_mute,kalaok_track,m_lock_public_video_volume);
					//默认是取消静音
					m_cancel_mute = true;

					if(result)
					{ 
						TCHAR request[512];
						TCHAR para[256];
						TCHAR karaoke[256];
						TCHAR vocal[256];
						TCHAR guid[256];
						int   karaoke_state = 1;
						int   vocal_state = 1;
						int   midi_guid_state = 1;
						int   vocal_guid_state = 1;

						memset(request, 0x0, sizeof(request));
						memset(para, 0x0, sizeof(para));
						memset(karaoke, 0x0, sizeof(karaoke));
						memset(vocal, 0x0, sizeof(vocal));
						memset(guid, 0x0, sizeof(guid));

						//判断歌曲是否存在导唱
						if((BEGIN_STATE==player_state)||(IDLESSE_STATE==player_state)||(END_STATE==player_state)||(PLAY_MUSIC_ENJOY==video_information.get_video_type()))
						{
							m_select_song_accompany_original = 3;  //原唱
							_tcscpy(para, L"<data><info karaoke=\"1\" vocal=\"1\" midi_guid=\"0\" vocal_guid=\"0\" /></data>");
						}
						else
						{
							video_information.get_channel_track(true, vocal);
							video_information.get_channel_track(false, karaoke);
							video_information.get_guid_track(guid);
							if (0 == _tcscmp(vocal, karaoke))
							{
								vocal_state = 0;
								vocal_guid_state = 0;
							}
							if (0 == _tcscmp(guid, L"0"))
							{
								midi_guid_state = 0;
								m_select_song_accompany_original = 1;  //原版伴奏
							}
							else if(0 == _tcscmp(guid, L"5"))
							{
								karaoke_state = 0;
								m_select_song_accompany_original = 0;  //主旋伴奏
							}
							else
							{
								m_select_song_accompany_original = 1;  //原版伴奏
							}
							_stprintf(para, L"<data><info karaoke=\"%d\" vocal=\"%d\" midi_guid=\"%d\" vocal_guid=\"%d\" /></data>",
								karaoke_state, vocal_state, midi_guid_state, vocal_guid_state);
						}
						result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"track_button_state", para);
						if (result)
						{
							flash_player_call_function(request);
						}
						send_accompany_original_button_state();

						if (SELECT_SONG_STATE == m_pc_state)
						{
							if (!m_player_manager.get_channel_memory())
							{
								//切换为默认音轨
								switch(m_default_track)
								{
								case 0: //主旋伴奏
									{
										switch(_ttoi(guid))
										{
										case 3: case 5: case 8:
											{
												flash_message_call_function(ENTER_GUIDE_SONG);
											}
											break;
										default:
											break;
										}
									}
									break;
								case 2: //原唱
									{
										flash_message_call_function(SONG_ORIGINAL);
									}
									break;
								case 3: //人声倒唱
									{
										flash_message_call_function(EXIT_GUIDE_SONG);
									}
									break;
								default:
									break;
								}
							}
						}
						
						//停止播放OSD
						//m_player_manager.stop_bmp_osd();
						//得到当前歌曲是不是录音文件
						if (PLAY_SONG_TYPE_RECORDER_SONG == video_information.get_video_type())
						{
							//判断当前录音歌曲的视频文件是否存在
							if (!video_information.get_recorder_exist_video_path())
							{
								//不存在 当前歌曲的视频文件
								//show_recorder_picture_on_tv();
								m_recorder_exist_video_path = true;
							}
						}
						else
						{
							m_recorder_exist_video_path = false;
						}

						//得到播放的总长
						m_play_song_total_time = m_player_manager.get_total_time_length();

						//删除map存储的歌曲
						delete_repeat_select_song(video_information);

						/*
						if (m_need_record_flag)
						{
						//增加 选择歌曲全部录音 2012-12-18 
						flash_message_call_recorder_audio(L"1");
						if (m_is_recording)
						{
						//需要录音，就开始录音
						start_recorder_audio();
						}
						}
						*/

						bool bisrecord = false;
						if (video_information.get_flash_page_code() == page_sb_ranking_polite ||
							video_information.get_flash_page_code() == page_sb_free_pk ||
							video_information.get_flash_page_code() == page_sb_challenge_pk 
							// 							|| video_information.get_flash_page_code() == page_challenge_star ||
							// 							video_information.get_flash_page_code() == page_across_pass
							)
						{
							int song_sort = video_information.get_song_sort();
							int maiba_pk = (song_sort>>2)&0x01; //是带评分的文件

							if (m_set_free_pk || m_set_ranking_plite /*|| m_set_challenge_star || m_set_across_pass*/)
							{
								if (!m_is_recording && maiba_pk == 1 && player_state != IDLESSE_STATE) //如果没有开启录音
								{
									flash_message_call(L"record", L"1");
									flash_message_call(L"score", L"1");
									bisrecord = true;
								}
							}else if (m_set_dekaron_pk)
							{
								TCHAR szSongID[MAX_PATH] = {0x00};
								video_information.get_song_id(szSongID);
								TCHAR * pStr = _tcsstr(m_maiba_rule_arena_info[1].song_id, szSongID); //擂台PK中是否有当前歌曲
								if (!m_is_recording && maiba_pk == 1 && pStr && player_state != IDLESSE_STATE) //如果没有开启录音
								{
									flash_message_call(L"record", L"1");
									flash_message_call(L"score", L"1");
									bisrecord = true;
								}
							}
						}
						else
						{
							flash_message_call(L"record", L"0");
							//评分记忆
							if (m_show_score_in_screen)
							{
								flash_message_call(L"score", L"1");
							}
							else
							{
								flash_message_call(L"score", L"0");
							}
						}

						if (!bisrecord)
						{
							//录音的类型 0,半自动录音  1，全自动录音
							if (0 == m_record_type)
							{
								//半自动录音

							}
							else
							{
								if (1 == m_record_type && 1 == m_open_record_type)   
								{
									TCHAR song_type[256] = {0x00};
									video_information.get_song_type(song_type);
									if (!(_tcscmp(song_type, L"1001") == 0 || _tcscmp(song_type, L"1002") == 0 ||
										_tcscmp(song_type, L"1003") == 0 || _tcscmp(song_type, L"1004") == 0))
									{
										m_is_recording = true;
										//全部录音
										flash_message_call_recorder_audio(L"1");
									}
								} 

								//增加 选择歌曲全部录音 2012-12-18 
								//flash_message_call_recorder_audio(L"1");
								if (m_is_recording)
								{
									//需要录音，就开始录音
									start_recorder_audio();
								}
							}
						}

						//如果打开成功的是秀秀mv，则创建照片mv窗口
						PLAY_SONG_TYPE song_type = video_information.get_video_type();
						if (video_information.get_flash_page_code() == page_picture_mv && !m_bInPageVideo)
						{
							//创建照片mv的窗口
							create_picture_mv_wnd();
							m_nCurPageCode = page_picture_mv;
							//为照片mv的当前歌曲赋值
							m_piture_mv_songInfo = video_information;
							//向被控端发送遮挡图片消息
							send_master_slave_cover_iamge_data(true, page_picture_mv);				
						}
						else
						{
							destroy_picture_mv_wnd(); //销毁照片mv窗口
						}

						if (video_information.get_flash_page_code() == page_listen_knowledge_song)
						{
							int music_volume=0;
							int microphone_volume=0;
							int tune=0;
							m_player_manager.get_volume_tune(music_volume,microphone_volume,tune);
							if (m_iCurrent_pass < m_nListenPassCount/2)
							{
								flash_message_call_function(ENTER_GUIDE_SONG);
							}
							else if (m_iCurrent_pass >= m_nListenPassCount/2)
							{
								flash_message_call_function(EXIT_GUIDE_SONG);
							}

							m_player_manager.seek(20); //设置在第20秒播放
							TCHAR szMusicVolume[MAX_PATH] = {0x00};
							swprintf(szMusicVolume, L"%d", music_volume);
							flash_message_call(L"music_volume", szMusicVolume);
						}else if (video_information.get_flash_page_code() == page_across_pass)
						{
							int music_volume=0;
							int microphone_volume=0;
							int tune=0;
							m_player_manager.get_volume_tune(music_volume,microphone_volume,tune);
							flash_message_call_function(SONG_ACCOMPANY);

// 							m_player_manager.seek(30); //设置在第30秒播放
							TCHAR szMusicVolume[MAX_PATH] = {0x00};
							swprintf(szMusicVolume, L"%d", music_volume);
							flash_message_call(L"music_volume", szMusicVolume);
						}
						//如果不是文化部的，就不用上传数据
						if (g_dog_open_function.precomputer_check)
						{
							//文化部狗的需要上传数据
							string_conversion string_conv;
							char temp_conv[128];
							TCHAR culture_code[128];
							TCHAR song_name[64];

							memset(temp_conv,0x0,sizeof(temp_conv));
							memset(culture_code,0x0,sizeof(culture_code));
							memset(song_name,0x0,sizeof(song_name));

							//检测并记录要播放的是不是视频广告
							m_is_playing_video_ad = m_player_manager.is_play_video_ad();
							if (m_is_playing_video_ad)
							{
								//播放视频广告
								if (culture_video_ad)
								{
									//正常播放是0，过路歌曲是1,广告是2
									send_precomputer_msg[VIDEO_TYPE].song_type = '2';
									memset(send_precomputer_msg[VIDEO_TYPE].song_id,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_id));
									sprintf(send_precomputer_msg[VIDEO_TYPE].song_id,"%s%s",culture_video_ad->szType_code,culture_video_ad->szCode_id);
									memset(send_precomputer_msg[VIDEO_TYPE].song_name,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_name));
								}
							}
							else
							{
								//播放歌曲
								if (PLAY_SONG_STATE==player_state)
								{
									//正常播放是0，过路歌曲是1,广告是2
									send_precomputer_msg[VIDEO_TYPE].song_type = '0';

									//得到文化部歌曲编号
									result = video_information.get_culture_code(culture_code);
									if (result)
									{
										memset(temp_conv,0x0,sizeof(temp_conv));
										result = string_conv.widechar_to_multibyte(culture_code,temp_conv,sizeof(temp_conv));
										{
											memset(send_precomputer_msg[VIDEO_TYPE].song_id,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_id));
											strcpy(send_precomputer_msg[VIDEO_TYPE].song_id,temp_conv);
										}
									}
									//得到歌曲名字
									result = video_information.get_song_name(song_name);
									if (result)
									{
										memset(temp_conv,0x0,sizeof(temp_conv));
										result = string_conv.widechar_to_multibyte(song_name,temp_conv,sizeof(temp_conv));
										{
											memset(send_precomputer_msg[VIDEO_TYPE].song_name,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_name));
											strcpy(send_precomputer_msg[VIDEO_TYPE].song_name,temp_conv);
										}
									}
								}
								else
								{
									//正常播放是0，过路歌曲是1,广告是2
									send_precomputer_msg[VIDEO_TYPE].song_type = '1';
									memset(send_precomputer_msg[VIDEO_TYPE].song_id,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_id));
									strcpy(send_precomputer_msg[VIDEO_TYPE].song_id,"99999999");
									memset(send_precomputer_msg[VIDEO_TYPE].song_name,0x0,sizeof(send_precomputer_msg[VIDEO_TYPE].song_name));
								}	
							}
							//得到开始时间
							send_precomputer_msg[VIDEO_TYPE].start_time = time(0);
						}

						if (m_replay)
						{
							//重唱
							//停止控制osd
							stop_control_osd_logo();
						}
						else if (VIDEO_TYPE_SONG==tv_play_video_type)
						{
							//显示控制osd 下一首
							result = show_control_osd(CONTROL_OSD__NEXT);
							//启动控制osd播放时间的定时器
							set_control_osd_show_timer();
						}

						//通过串口发送复位信息
						if (m_song_light_lock) //是否锁定
						{

						}
						else
						{
							result = write_com_data(COM_SEND_NEXT_SONG);
							if (result)
							{
								//如果串口发送成功，默认回到原调
								m_player_manager.change_tune(TUNE_ORIGINAL_FLAG,0,m_control_change_tone);
							}
						}

						//播放歌曲时需要控制灯光
						if (m_song_light_control && (PLAY_SONG_STATE == player_state || IDLESSE_STATE == player_state))
						{
							int light_control = 0;
							//发送串口灯光码
							if (m_song_light_lock)
							{
								light_control = m_song_light_lock_value;
							}
							else
							{
								//mod by yzg 2015-12-04
								//DLNA、录音歌曲、大厅视频、电视转播走默认灯光
								PLAY_SONG_TYPE song_type = video_information.get_video_type();
								if (IDLESSE_STATE == player_state || song_type == PLAY_SONG_TYPE_RECORDER_SONG
									|| song_type == PLAY_DLNA_VIDEO || song_type == PLAY_TV || song_type == PLAY_LOBBY_LIVE
									|| song_type ==  PLAY_MUSIC_ENJOY)
								{
									light_control = -1;
								}else
								{
									light_control = video_information.get_light_control_set();
								}
							}
default_light:
							switch(light_control)
							{
							case 0:    //灯光 全关
								{
									write_com_data(COM_SEND_LIGHT_CLOSE, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"0");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 全关");
								}
								break;
							case 1:    //灯光 全开 
								{
									write_com_data(COM_SEND_LIGHT_OPEN, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"1");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 全开");
								}
								break;
							case 2:    //灯光 明亮
								{
									write_com_data(COM_SEND_LIGHT_STANDARD, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"2");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 明亮");
								}
								break;
							case 3:    //灯光 柔和
								{
									write_com_data(COM_SEND_LIGHT_BACKGROUND, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"3");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 柔和");
								}
								break;
							case 4:    //灯光 时尚
								{
									write_com_data(COM_SEND_LIGHT_STAGE, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"4");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 时尚");
								}
								break;
							case 5: //动感
								{
									write_com_data(COM_SEND_LIGHT_SCINTILLATION, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"5");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 动感");
								}
								break;
							case 6: //温馨
								{
									write_com_data(COM_SEND_LIGHT1, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"6");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 温馨");
								}
								break;
							case 7: //浪漫
								{
									write_com_data(COM_SEND_LIGHT2, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"7");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 浪漫");
								}
								break;
							case 8: //商务
								{
									write_com_data(COM_SEND_LIGHT3, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"8");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 商务");
								}
								break;
							case 9: //绚丽
								{
									write_com_data(COM_SEND_LIGHT4, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"9");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 明快");
								}
								break;
							case 10: //梦幻
								{
									write_com_data(COM_SEND_LIGHT5, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"10");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 梦幻");
								}
								break;
							case 11: //预留1
								{
									write_com_data(COM_SEND_LIGHT6, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"11");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留1");
								}
								break;
							case 12: //预留2
								{
									write_com_data(COM_SEND_LIGHT7, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"12");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留2");
								}
								break;
							case 13: //预留3
								{
									write_com_data(COM_SEND_LIGHT8, 0, true, light_control);
									//高亮的灯光按钮
									_tcscpy(m_select_ligth_buttom,L"13");
									WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留3");
								}
								break;
							case 14:
								{
									write_com_data(COM_SEND_LIGHT_MUTE, 0, true, light_control);
									//高亮的灯光按钮
									//_tcscpy(m_select_ligth_buttom,L"14");
									WriteLog(__FL__, L"歌曲静音时需要控制灯光");
								}
								break;
							case 15:
								{
									write_com_data(COM_SEND_LIGHT_PAUSE, 0, true, light_control);
									//高亮的灯光按钮
									//_tcscpy(m_select_ligth_buttom,L"15");
									WriteLog(__FL__, L"歌曲暂停时需要控制灯光");
								}
								break;
							default:
								{
									if (m_use_audio_effect)
									{
										write_com_data(COM_SEND_LIGHT_CLOSE, 0, true, light_control);
										//高亮的灯光按钮
										_tcscpy(m_select_ligth_buttom,L"0");
										WriteLog(__FL__, L"播放歌曲时需要控制灯光 全关");
									}
									else
									{
										light_control = m_default_auto_light;
										goto default_light;
									}
								}
								break;
							}
							//设置灯光高亮按钮状态
							send_light_button_state();
						}

						if (m_song_audio_effect)
						{
							int audio_effect = 0;

							//是否是锁定音效码值
							if (m_song_audio_effect_lock)
							{
								audio_effect = m_lock_audio_effect_value+1;
							}
							else
							{
								int ae = video_information.get_audio_effect_code();
#ifdef DON_GUAN_K_PLUS											
								audio_effect = ae % 6;

								if(0 == audio_effect)
									audio_effect++;

								float va = (float)ae / 6.;
								int music_sound = (int)va;
								if (va > 0. && ae != 18)
								{
									music_sound++;
								}

								switch(music_sound)
								{
								case 1:
									write_com_data(COM_SEND_MUSIC_SOUND_PROFESSIONAL);
									m_cur_music_sound_value = 2;
									break;
								case 2:
									write_com_data(COM_SEND_MUSIC_SOUND_MAGIC);
									m_cur_music_sound_value = 3;
									break;
								case 3:
									write_com_data(COM_SEND_MUSIC_SOUND_RESERVE1);
									m_cur_music_sound_value = 4;
									break;
								}
								//设置音效按钮的高亮状态
								send_music_sound_button_state();

								//2015-1-24 12:59:27LTL
								Sleep(500);
#endif // DON_GUAN_K_PLUS								
							}

							switch(audio_effect)
							{
							case 1:    //音效 标准
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_STANDARD);
									m_cur_audio_effect_value = 0;
								}
								break;
							case 2:    //音效 剧场
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_THEATER);
									m_cur_audio_effect_value = 1;
								}
								break;
							case 3:    //音效 唱将
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_PROFESSIONAL);
									m_cur_audio_effect_value = 2;
								}
								break;
							case 4:    //音效 魔音
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_MAGIC);
									m_cur_audio_effect_value = 3;
								}
								break;
							case 5:  //音效预留
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_RESERVE1);
									m_cur_audio_effect_value = 4;
								}
								break;
							case 6:  //音效预留
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_RESERVE2);
									m_cur_audio_effect_value = 5;
								}
								break;
							case 7:  //音效预留
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_RESERVE3);
									m_cur_audio_effect_value = 6;
								}
								break;
							case 8:  //音效预留
								{
									write_com_data(COM_SEND_AUDIO_EFFECT_RESERVE4);
									m_cur_audio_effect_value = 7;
								}
								break;
							default:
								break;
							}
							//设置音效按钮高亮状态
							send_audio_effect_button_state();
						}
						//显示滚动的歌曲名字
						show_song_name();
						//flash界面初控制按钮始化
						update_flash_control_button();
						//更新音量和音效信息
						update_flash_audio_info();
					}
				}
				break;
			case PN_MEDIA_OPENED_FAILED:	// 打开文件失败
				{
					int n = 0;
				}
			case PN_MEDIA_PLAY_FROZEN:		// 播放卡死
				{
					//自动播放完成的，不取消静音
					m_cancel_mute = false;
					if (2!=m_master_slave_control_flag)
					{
						//播放下一首，被控机不能启动播放下一首
						WriteLog(__FL__, L"control return ERROR切歌");
						flash_message_call_function(SONG_NEXT);
					}
					if ((VIDEO_TYPE_LOBBY_LIVE == tv_play_video_type)||(VIDEO_TYPE_TV == tv_play_video_type))
					{
						//如果是大厅直播，要求回到歌曲视频
						switch_screen_play_song_video();
					}
					m_replay=false;
				}
				break;
			case PN_MEDIA_PLAY_FINISHED:	// 文件播放完成
				{
					//文件是DLNA文件，则告诉手机断开
					if(m_player_manager.get_playing_video_type() == PLAY_DLNA_VIDEO)
					{
						TPLAYER_MESSAGE lpPm;
						lpPm.MSG = WM_PlayStateChange;
						lpPm.wParam = 1;
						lpPm.lParam = (int*)PlayState_Closed;
						pThis->m_PluginsEx.NotifyToolPlugins(MAIN_PLAY_NOTIFY, lpPm);
					}
					//播放下一首
					if (VIDEO_TYPE_LOBBY_LIVE == tv_play_video_type)
					{
						//回到播放歌曲 
						switch_screen_play_song_video();
					}
					else
					{
						if (m_nCurPageCode != page_picture_mv && m_nCurPageCode != page_challenge_star 
							&& m_nCurPageCode != page_listen_knowledge_song && m_nCurPageCode != page_across_pass)
						{
							/*add by yzg 2015-10-27
							//由于分数过低，通过配置提高评分分数
							*/
							if (m_nCurrentScore>0 && m_nCurrentScore<=50)
							{
								m_nCurrentScore += m_nCurrentScore*m_nScoreIncreaseRate/100;
							}
							else if (m_nCurrentScore>50 && m_nCurrentScore<=80)
							{
								m_nCurrentScore += (100 - m_nCurrentScore)*m_nScoreIncreaseRate/100;
							}
							if (m_nCurrentScore >= 98)
							{
								m_nCurrentScore = 98;
							}
						}
						//文件播放完成停止录音
						stop_recorder_audio(false,true,true);
						//自动播放完成的，不取消静音
						m_cancel_mute = false;
						if(2==m_master_slave_control_flag)
						{
							//被控机，不能主动播放下一首
							break;
						}
						/*****************主控机操作****************************/
						//得到视频类型
						PLAY_SONG_TYPE video_type =	m_player_manager.get_playing_video_type();
						if (PLAY_MSG_VIDEO_FIRE_ALARYM == video_type)
						{
							WriteLog(__FL__, L"火警需要重复播放");
							flash_message_call_function(SONG_REPLAY);
						}
						else
						{
							TCHAR logText[256];
							memset(logText,0x0,sizeof(logText));
							swprintf(logText,L"当前歌曲分数为：%d,当前歌曲视频类型：%d",/*m_shine_total_score*/m_nCurrentScore,(int)video_type);
							WriteLog(__FL__, logText);

							if (m_show_score_in_screen && (m_nCurrentScore > 0) && (PLAY_SONG_TYPE_SELECT_SONG == video_type) 
								&& m_nCurPageCode != page_picture_mv && m_nCurPageCode != page_challenge_star 
								&& m_nCurPageCode != page_listen_knowledge_song && m_nCurPageCode != page_across_pass)
							{
								if (SCORE_SYSTEM_SHINE==m_use_score_system)  //阳光评分系统
								{
									if (m_soft_decode_window_exist)
									{
										////分数结果
										m_soft_load_score_flash_success = m_soft_score_flash_player.Create(NULL,WS_CHILD,CRect(0,0,m_sencond_display_width,m_sencond_display_height),&m_soft_decode_window,SCORE_SOFT_FLASH_WINDOW_ID);
										if (m_soft_load_score_flash_success)
										{
											TCHAR score_path[256];
											memset(score_path,0x0,sizeof(score_path));

											swprintf(score_path,L"%s\\score_flash_interface\\Main.swf",m_work_path);
											if (PathFileExists(score_path))
											{
												m_soft_score_flash_player.Stop();
												m_soft_score_flash_player.LoadMovie(0,score_path);
												m_soft_score_flash_player.ShowWindow(SW_SHOW);
												m_soft_score_flash_player.BringWindowToTop();
												m_soft_score_flash_player.put_ScaleMode(2);
												m_bScoring = true;
											}
											else
											{
												m_soft_load_score_flash_success = false;
											}
										}
									}
									if (m_inter_screen_exist)
									{
										m_load_score_flash_success = m_score_flash_player.Create(NULL,WS_CHILD,m_rtRelativeActivityWnd,&m_inter_screen_window,SCORE_FLASH_WINDOW_ID);
										if (m_load_score_flash_success)
										{
											TCHAR score_path[256];
											memset(score_path,0x0,sizeof(score_path));

											swprintf(score_path,L"%s\\score_flash_interface\\Main.swf",m_work_path);
											if (PathFileExists(score_path))
											{
												m_score_flash_player.Stop();
												m_score_flash_player.LoadMovie(0,score_path);
												m_score_flash_player.ShowWindow(SW_SHOW);
												m_score_flash_player.BringWindowToTop();
												m_score_flash_player.put_ScaleMode(2);
												m_bScoring = true;
											}
											else
											{
												m_load_score_flash_success = false;
											}
										}
									}
									//////*/
								}
								if ((m_soft_load_score_flash_success||m_load_score_flash_success) && m_bScoring)
								{
									//分数大于0，需要打分，就显示分数
									result = make_mark_for_singer(/*m_shine_total_score*/m_nCurrentScore);
									if (!result)
									{
										WriteLog(__FL__, L"播放打分视频失败，主动播放下一首");
										//播放打分视频失败，主动播放下一首
										if (m_replay && (1==m_replay_mode))
										{
											//单曲循环播放
											WriteLog(__FL__, L"单曲循环播放");
											flash_message_call_function(SONG_REPLAY);
										}
										else
										{
											WriteLog(__FL__, L"播放完成，自动播放下一首");
											flash_message_call_function(SONG_NEXT,1);
											m_replay=false;
										}
									}
									else
									{
										m_replay=false;
										//显示评分结果
										//show_song_tip_osd(5000);
	#ifdef DON_GUAN_K_PLUS
										if ((m_soft_load_score_flash_success||m_load_score_flash_success) && m_show_score_in_screen)
	#else
										if (m_soft_load_score_flash_success || m_load_score_flash_success)
	#endif // DON_GUAN_K_PLUS									
										{
											WriteLog(__FL__, L"显示评分结果======PN_MEDIA_PLAY_FINISHED");

											//设置标识
											m_show_song_tip_osd = true;

	#ifdef DON_GUAN_K_PLUS //K+需要声音
											TCHAR szAudioPath[MAX_PATH] = {0x00};
											if (m_shine_total_score < 80)
											{
												swprintf(szAudioPath, L"%s\\score_audio\\LessThan80.wav", m_work_path);
											}else if (m_shine_total_score >= 80 && m_shine_total_score < 90)
											{
												swprintf(szAudioPath, L"%s\\score_audio\\Between8090.wav", m_work_path);
											}else if (m_shine_total_score >= 90)
											{
												swprintf(szAudioPath, L"%s\\score_audio\\MoreThan90.wav", m_work_path);
											}

											//播放音频
											if (m_soft_decode_window_exist)
											{
												//软解，直接播放，没有延迟
												PlaySound(szAudioPath, NULL, SND_FILENAME|SND_NOWAIT|SND_ASYNC);
											}
											else
											{
												//硬解码，必须有控件播放
												m_player_manager.play_wave_mixer_audio(szAudioPath,0,1);
											}
	#endif // DON_GUAN_K_PLUS
										}
	#ifdef DON_GUAN_K_PLUS
										else{
											flash_message_call_function(SONG_NEXT,1);
										}
	#endif // DON_GUAN_K_PLUS
									}								}

							}
							else
							{
								if (m_replay && (1==m_replay_mode))
								{
									//单曲循环播放
									WriteLog(__FL__, L"单曲循环播放");
									flash_message_call_function(SONG_REPLAY);
								}
								else
								{
									//发送给邀请方
									if (m_b_pk_invitation)
									{
										//发送邀请方的列表
										int nTotalSong = 0;
										TCHAR autoplayinfo[2048];
										TCHAR song_id[256];
										TCHAR song_xml[256];
										TCHAR send_ip[256];
										song_info song_information;
										std::wstring select_song_xml; 

										memset(send_ip,0x0,sizeof(send_ip));

										if (0 != _tcscmp(m_pk_invitationIP,L""))
										{
											_tcscpy(send_ip,m_pk_invitationIP);
										}
										if (0 != _tcscmp(m_pk_acceptIP,L""))
										{
											_tcscpy(send_ip,m_pk_acceptIP);
										}
										memset(autoplayinfo,0x0,sizeof(autoplayinfo));

										//得到当前已选的歌曲列表
										nTotalSong = m_video_play_manager.get_select_song_count();
										//<item song_id=\"%s\"/>"
										select_song_xml += L"auto_play<song_list>";
										for (int i = 0; i < nTotalSong; i++)
										{	
											memset(song_id,0x0,sizeof(song_id));
											memset(song_xml,0x0,sizeof(song_xml));

											m_video_play_manager.get_select_song_information(song_information,i,false);
											song_information.get_song_id(song_id);
											swprintf(song_xml,L"<item song_id=\"%s\"/>",song_id);

											select_song_xml += song_xml;
										}
										select_song_xml += L"</song_list>";
										swprintf(autoplayinfo,L"%s",select_song_xml.c_str());



										connect_inviation(send_ip,autoplayinfo);
									}

									//本机播放下一首视频
									WriteLog(__FL__, L"播放完成，自动播放下一首");
									flash_message_call_function(SONG_NEXT);
									m_replay=false;
								}
							}
						}//
					}
				}
				break;
			case PN_SRV_RESTARTED:  //播放服务重启
				{
					//重新载入公司logo
					show_next_logo_osd(true);
				}
				break;
			case PN_LYRIC_SCORE:	// 播放评分
				{
					//LPARAM 从低8位开始分别是 完整度 相似度 声调稳定程度 声音大小(分贝数)
					int single_intact=0;
					int single_similarity=0;
					int single_stability=0;
					int single_decibel=0;
					int single_score=0;

					single_intact = lParam&0xff;
					single_similarity = (lParam>>8)&0xff;
					single_stability = (lParam>>16)&0xff;
					single_decibel = (lParam>>24)&0xff;

					//单句分数
					single_score = (single_intact+single_similarity+single_stability)/3;

					m_score_intact += single_intact;                         //评分完整度总合  
					m_score_similarity += single_similarity;                 //相似度
					m_score_stability += single_stability;                   //稳定度
					m_score_decibel += single_decibel;                       //声音分贝数

					m_nCurrentTotalScore += single_score;			//单句总分
					m_nSingCount++;									//已唱总句数

					int current_score = 0;
					if (m_nCurrentTotalScore == 0)
					{
						current_score = 0;
					}
					else if (m_lyric_total_sentences > 0)
					{
						current_score = m_nCurrentTotalScore/m_lyric_total_sentences;
					}

					if (current_score >= 98)
					{
						current_score = 98;
					}
					m_nCurrentScore = current_score;

					if (m_show_score_in_screen
						&& m_nCurPageCode != page_picture_mv && m_nCurPageCode != page_challenge_star 
						&& m_nCurPageCode != page_listen_knowledge_song && m_nCurPageCode != page_across_pass)
					{
						//显示单句得分和提示语 2014-05-13 ZLG
						//show_sing_score(single_score);
						TCHAR szLog[256] = {0x00};
						swprintf(szLog, L"总分：%d，生准：%d，音准：%d，完整度：%d", current_score, single_similarity, single_stability, single_intact);
						//WriteLog(__FL__, szLog);

						show_single_score(current_score, single_similarity, single_stability, single_intact);
					}
					//挑战歌曲
					if (m_b_challenging)
					{
						//if (current_score > m_nCurrentScore)
						{
							result = flash_message_call_challenging_score(current_score);
						}
					}
					if (m_bAcrossPassing)
					{
						// 百秒夺奖时扔锤子
						flash_message_call_sound_effect(single_intact, single_similarity, single_stability);
					}
				}
				break;
			case PN_LYRIC_SCORE_DONE: // 评分完成
				{
					//LPARAM=句子总数量
					compute_socre_result();

					//绘制图片
					//result = save_score_tip_osd(m_shine_total_score,m_score_similarity,m_score_intact,m_score_stability,m_total_calories);
					//if (result)
					//{
					//结束之后在显示
					//show_song_tip_osd(5000);
					//}
				}
				break;
			case PN_LYRIC_SENTENCE:
				{
					//总句数
					m_lyric_total_sentences = (int)lParam;
				}
				break;
			case PN_LYRIC_REALTIME_SCORE://实时评分
				{
					//LPARAM 从低8位开始分别是 完整度 相似度 声调稳定程度 声音大小(分贝数)
					int single_intact=0;
					int single_similarity=0;
					int single_stability=0;
					int single_decibel=0;
					int single_score=0;

					single_intact = lParam&0xff;
					single_similarity = (lParam>>8)&0xff;
					single_stability = (lParam>>16)&0xff;
					single_decibel = (lParam>>24)&0xff;
					//单句分数
					single_score = (single_intact+single_similarity+single_stability)/3;
					if (m_show_score_in_screen)
					{
						//show_single_score(single_score, single_similarity, single_stability, single_intact);
					}
				}
				break;
			case PN_LYRIC_FIRST_SENTENCE:
				{
					if (m_bAcrossPassing)
					{
						//开始倒计时和涨冰块
						if (m_bFirstLyric)
						{
							flash_message_call_start_countdown();
							m_bFirstLyric = false;
						}
					}
				}
				break;
			case PN_SPECTRUM: // 歌曲频谱信息, LPARAM = 频谱数据缓冲区指针(BYTE类型)
				{
					LPBYTE byteParam = (LPBYTE)lParam;

					CString strSpectrum = L"", strItem = L"";

					for (int i = 0; i < SPECTRUM_MAX_COUNT; i++)
					{
						int bp = *byteParam++;

						float fBp = 0.0;
						if (bp != 0)
						{
							//转换为-1-1之间的float值
							if (bp > 50) //大于50转为0-1之间的值
							{
								fBp = ((float)(bp - 50))/50.0;
							}else if( bp < 50){ //小于50转为-1 - 0之间的值
								fBp = -(1 - ((float)bp)/50.0);
							}
						}						
						strItem.Format(L"%f", fBp);
						strSpectrum += strItem + L",";
					}

					strSpectrum.TrimRight(L",");

					int len = strSpectrum.GetLength();

					TCHAR request[1024+512];
					TCHAR data[1024+512];
					bool result=false;

					memset(request,0x0,sizeof(request));
					memset(data,0x0,sizeof(data));

					swprintf(data,L"%s",strSpectrum);

					//改变环境音效按钮高亮状态
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"music_spectrum",data);
					if (result)
					{
						try
						{
							m_inter_screen_flash_player.CallFunction(request);
						}	
						catch (COleDispatchException* ex)
						{
							TCHAR   szCause[255];
							CString strFormatted;

							ex->GetErrorMessage(szCause, 255);
							strFormatted = "The program exited because of this error: ";
							strFormatted += szCause;
							strFormatted += "; send flash value:";
							strFormatted += request;
							WriteLog(__FL__, strFormatted);
						}					
					}
				}
				break;//*/
			default:
				break;
			}
		}
		break;	
	case WM_LBUTTONDOWN:
	case WM_RBUTTONDOWN:
	case WM_LBUTTONDBLCLK:
	case WM_RBUTTONDBLCLK:
		{
			int page_index=0;

			int xPos = 0;
			int yPos = 0;

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();

			//有新的操作，重新计时
			m_start_screen_saver_timer.start();

			xPos = LOWORD(lParam);
			yPos = HIWORD(lParam);

			if (!m_show_start_image)
			{
				//形象页隐藏之后，才进行提示和弹出密码框
				if (!m_find_dog_success)
				{
					//没有找到狗之前要进行提示
					if (0==_tcscmp(m_dog_tip_info,L""))
					{
						flash_show_tip_message(24);
					}
					else
					{
						flash_show_tip_message(m_dog_tip_info);
					}
				}

				//点击首页的左上角时，要弹出密码框
				int xPos = LOWORD(lParam);
				int yPos = HIWORD(lParam);
				if ((page_homepage==page_index)&&(xPos<104)&&(yPos<66))
				{
					show_password_window();
				}
			}
		}
		break;
	case DM_SHOW_WALL_PANEL_MESSAGE:
		{
			show_wall_panel_interface();
		}
		break;
	case WM_MOUSEMOVE:
		{
			//有新的操作，重新计时
			//m_start_screen_saver_timer.start();
		}
		break;
	case WM_SECTV_NOTIFY:
		{
			int page_index=0;

			page_index = m_flash_manage.get_last_page_index();
			switch(wParam)
			{
			case PN_MEDIA_OPENED_SUCCEED:	// 打开文件成功
				{
					int nret = PN_MEDIA_OPENED_SUCCEED;
					//m_player_manager.Set(SD_SECTV_AUDIO_ONOFF, 1);
				}
				break;
			case PN_MEDIA_OPENED_FAILED:		// 打开文件失败
				{
					int nRet = PN_MEDIA_OPENED_FAILED;
				}
				break;
			case PN_MEDIA_PLAY_FROZEN:		// 播放卡死
				{

				}
				break;
			case PN_MEDIA_PLAY_FINISHED:		// 文件播放完成
				{
					int nret = PN_MEDIA_PLAY_FINISHED;
				}
				break;
			default:
				break;
			}
		}
		break;
	case WM_PREVIEW_NOTIFY:    //大厅直播或预览
		{
			int page_index=0;

			page_index = m_flash_manage.get_last_page_index();
			switch(wParam)
			{
			case PN_MEDIA_OPENED_SUCCEED:	// 打开文件成功
				{
					if (page_preview==page_index)
					{
						//预览，打开成功了再显示，主要是为了显示背景
						m_preview_window.MoveWindow(CRect(m_preview_left_top_x,m_preview_left_top_y,m_preview_right_bottom_x,m_preview_right_bottom_y),TRUE);
						m_preview_window.show_window(true);
					}else if (page_phone_push_preview == page_index)
					{
						//手机推送预览
						m_preview_window.MoveWindow(CRect(m_dlna_preview_left_top_x,m_dlna_preview_left_top_y,m_dlna_preview_right_bottom_x,m_dlna_preview_right_bottom_y),TRUE);
						m_preview_window.show_window(true);
					}
					else
					{
						if (VIDEO_TYPE_PREVIEW_SONG==pc_play_video_type)
						{
							//屏切在预览歌曲
						}
						else if(VIDEO_TYPE_LOBBY_LIVE==pc_play_video_type)
						{
							//大厅直播，打开成功了再显示，主要是为了显示背景
							pc_show_video_window();
						}
						else if(VIDEO_TYPE_TV==pc_play_video_type)
						{
							//TV直播，打开成功了再显示，主要是为了显示背景
							pc_show_video_window();
						}
					}
				}
				break;
			case PN_MEDIA_OPENED_FAILED:		// 打开文件失败
				{
					if (page_preview==page_index)
					{
						//预览
						flash_show_tip_message(32);
					}
					else
					{
						if (VIDEO_TYPE_PREVIEW_SONG==pc_play_video_type)
						{
							//屏切在预览歌曲
							preview_next_song();
						}
						else
						{
							//如果是大厅直播或者电视，要求回到歌曲视频
							switch_screen_play_song_video();
						}
					}
				}
				break;
			case PN_MEDIA_PLAY_FROZEN:		// 播放卡死
				{
					if (page_preview==page_index)
					{
						//预览
						flash_show_tip_message(32);
					}
					else
					{
						//如果是大厅直播或者电视，要求回到歌曲视频
						switch_screen_play_song_video();
					}
				}
				break;
			case PN_MEDIA_PLAY_FINISHED:		// 文件播放完成
				{
					if (page_preview==page_index)
					{
						//预览
						m_player_manager.preview_close();
						if (m_preview_window_exist)
						{
							m_preview_window.show_window(false);
						}
						//返回前一个页面
						flash_message_call_function(PAGE_BACK);
					}
					else
					{
						if (VIDEO_TYPE_PREVIEW_SONG==pc_play_video_type)
						{
							//屏切在预览歌曲
							preview_next_song();
						}
						else
						{
							//如果是大厅直播或者电视，要求回到歌曲视频
							switch_screen_play_song_video();
						}
					}
				}
				break;
			default:
				break;
			}
		}
		break;
	case DM_SCREEN_SAVER_END:     //屏保消息
		{
			//屏保结束
			m_show_screen_saver_state=false;
			m_show_ad_screen_saver = false;

			if (m_handwriting_window_exist && m_show_handwriting_window)
			{
				//显示手写
				m_handwriting_window.BringWindowToTop();
				m_handwriting_window.ShowWindow(SW_SHOW);
				m_handwriting_window.UpdateWindow();
			}
			//重新计时
			m_start_screen_saver_timer.start();
			if (!m_show_video_screen_saver && m_show_ad_screen_saver)
			{
				//把发送给前置机的信息拷贝到发送结构体中
				copy_precomputer_send_info(SCREEN_SAVER_TYPE);
			}
		}
		break;
	case DM_SCREEN_VIDEO_CLICK:   //视频播放子窗口发送过来的消息
		{
			show_quit_video_screen_saver();
			/*
			if (SCREEN_TYPE_VERTICAL==m_interface_type)
			{
			//竖版不弹
			}
			else
			{

			show_quit_video_screen_saver();
			}
			*/
		}
		break;
	case DM_MSQURE_WINDOW_CLICK_MESSAGE:  //定制页面窗口发过来的信息
		{
			show_quit_video_screen_saver();

			//返回定制页面
			flash_message_call_page_jump(page_custom_song);
		}
		break;
	case DM_SUB_WINDOW_MESSAGE:  //子窗口发送过来的消息
		{
			FlashCallShockwaveflash((LPCTSTR)wParam);
		}
		break;
	case DM_BOX_COM_RECEIVE_MESSAGE:  //中控盒串口接收到得消息
		{
			bool result=false;
			bool discard_value=false;

			//对串口发送过来的值，要进行保护
			switch(wParam)
			{
			case COM_RECEIVE_NEXT_SONG:
				{
					result = m_player_manager.is_play_video_ad();
					if (result)
					{
						//是在播放广告，在判断是否可以切换，歌曲都可以切换
						result = m_video_play_manager.video_allow_cut();
						if (!result)
						{
							//不允许切掉
							discard_value = true;
							break;
						}
					}
					//防止频繁切换
					double last_time = m_cut_song_timer.last_time();
					if (last_time<PLAY_VIDEO_MIN_TIME_LENGTH)
					{
						discard_value = true;
						break;
					}
					//重新开始计时
					m_cut_song_timer.start();
				}
				break;
			case COM_RECEIVE_REPLAY_SONG: //重唱
				{
					//防止频繁切换
					double last_time = m_cut_song_timer.last_time();
					if (last_time<PLAY_VIDEO_MIN_TIME_LENGTH)
					{
						discard_value = true;
						break;
					}
					//重新开始计时
					m_cut_song_timer.start();
				}
				break;
			case COM_RECEIVE_KARAOKE_ACCOMPANY: //原伴唱
			case COM_RECEIVE_KARAOKE_TRACK:     //原唱
			case COM_RECEIVE_ACCOMPANY_TRACK:   //伴唱
			case COM_RECEIVE_PLAY_PAUSE:         //播放暂停
			case COM_RECEIVE_PLAY:               //播放
			case COM_RECEIVE_PAUSE:              //暂停
			case COM_RECEIVE_MUSIC_VOLUME_UP:   //音乐的音量加
			case COM_RECEIVE_MUSIC_VOLUME_DOWN: //音乐的音量减
			case COM_RECEIVE_MICROPHONE_VOLUME_UP: //麦克风的音量加
			case COM_RECEIVE_MICROPHONE_VOLUME_DOWN://麦克风的音量减
			case COM_RECEIVE_TUNE_UP:               //音调增
			case COM_RECEIVE_TUNE_DOWN:             //音调减
			case COM_RECEIVE_TUNE_STANDARD:         //原调
			case COM_RECEIVE_ATMOSPHERE_APPLAUSE:    //鼓掌
			case COM_RECEIVE_ATMOSPHERE_CHEER:       //欢呼
			case COM_RECEIVE_ATMOSPHERE_OUTCRY:      //催眠
			case COM_RECEIVE_ATMOSPHERE_WHISTLE:     //狂汗
			case COM_RECEIVE_AUDIO_EFFECT_STANDARD:      //标准
			case COM_RECEIVE_AUDIO_EFFECT_THEATER:       //剧场
			case COM_RECEIVE_AUDIO_EFFECT_PROFESSIONAL:  //唱将
			case COM_RECEIVE_AUDIO_EFFECT_MAGIC:         //魔音
			case COM_RECEIVE_AUDIO_EFFECT_RESERVE1:      //音效预留
			case COM_RECEIVE_AUDIO_EFFECT_RESERVE2:      //音效预留
			case COM_RECEIVE_AUDIO_EFFECT_RESERVE3:      //音效预留
			case COM_RECEIVE_AUDIO_EFFECT_RESERVE4:      //音效预留
			case COM_RECEIVE_AUDIO_EFFECT_CHANGE:        //音效改变
			case COM_RECEIVE_ENJOY_SONG:                 //欣赏
			case COM_RECEIVE_SONG_MUTE:          //静音/取消静音
			case COM_RECEIVE_SONG_MUTE_BUTTON:   //静音
			case COM_RECEIVE_SONG_UNMUTE_BUTTON: //取消静音
			case COM_RECEIVE_RECORDER:           //录音
			case COM_RECEIVE_LIGHT1:             //灯光
			case COM_RECEIVE_LIGHT2:
			case COM_RECEIVE_LIGHT3:
			case COM_RECEIVE_LIGHT4:
			case COM_RECEIVE_LIGHT5:
			case COM_RECEIVE_LIGHT6:
			case COM_RECEIVE_LIGHT7:
			case COM_RECEIVE_LIGHT8:
			case COM_RECEIVE_LIGHT9:
			case COM_RECEIVE_LIGHT10:
			case COM_RECEIVE_LIGHT_OPEN:            //灯光全开
			case COM_RECEIVE_LIGHT_CLOSE:
			case COM_RECEIVE_REQUEST_SERVICE:       //请求服务
			case COM_RECEIVE_AIR_CONDITION_STRONG:       //空调强
			case COM_RECEIVE_AIR_CONDITION_MID:          //空调中
			case COM_RECEIVE_AIR_CONDITION_WEAK:         //空调弱
			case COM_RECEIVE_AIR_CONDITION_CLOSE:        //空调关闭
			case COM_RECEIVE_DISCHARGE_AIR_FUNCTION:     //排风
			case COM_RECEIVE_SERVER_LIGHT_STATE:         //服务灯状态
			case COM_RECEIVE_ATMOSPHERE_HAOZAN:	//好赞
			case COM_RECEIVE_ATMOSPHERE_SHIHUA: //石化
			case COM_RECEIVE_ATMOSPHERE_XIEHUA: //献花
			case COM_RECEIVE_ATMOSPHERE_TUXIE: //吐血
			case COM_RECEIVE_ATMOSPHERE_FEIWEN: //飞吻
			case COM_RECEIVE_ATMOSPHERE_XINSUI: //心碎
			case COM_RECEIVE_ATMOSPHERE_HAIXIU: //害羞
			case COM_RECEIVE_ATMOSPHERE_ZADAN: //砸蛋
			default:
				{
					//防止频繁点击墙面板
					double last_time = m_avoid_cut_timer.last_time();
					if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
					{
						discard_value = true;
						break;
					}
					//重新开始计时
					m_avoid_cut_timer.start();
				}
				break;
			}
			if (!discard_value)
			{
				//不丢弃才执行
				switch(wParam)
				{
				case COM_RECEIVE_REQUEST_SERVICE:      //请求服务
					{
						WriteLog(__FL__, L"中控盒串口接收到的请求服务消息[COM_RECEIVE_REQUEST_SERVICE]");
						flash_message_call_function(CALL_ATTENDANT);
					}
					break;
				case COM_RECEIVE_CANCEL_SERVICE:       //取消服务
					{
						cancel_call_service();
					}
					break;
				case COM_RECEIVE_MICROPHONE_VOLUME_UP:   //麦克风音量加
					{
						flash_message_call_function(MICROPHONE_VOLUME_UP);
					}
					break;
				case COM_RECEIVE_MICROPHONE_VOLUME_DOWN: //麦克风音量减
					{
						flash_message_call_function(MICROPHONE_VOLUME_DOWN);
					}
					break;
				case COM_RECEIVE_MUSIC_VOLUME_UP:        //音乐的音量加
					{
						flash_message_call_function(MUSIC_VOLUME_UP);
					}
					break;
				case COM_RECEIVE_MUSIC_VOLUME_DOWN:      //音乐的音量减
					{
						flash_message_call_function(MUSIC_VOLUME_DOWN);
					}
					break;
				case COM_RECEIVE_TUNE_UP:                //音调加
					{
						flash_message_call_function(TUNE_UP);
					}
					break;
				case COM_RECEIVE_TUNE_DOWN:              //音调减
					{
						flash_message_call_function(TUNE_DOWN);
					}
					break;
				case COM_RECEIVE_TUNE_STANDARD:          //标准调
					{
						flash_message_call_function(TUNE_ORIGINAL);
					}
					break;
				case COM_RECEIVE_NEXT_SONG:              //下一首
					{
						WriteLog(__FL__, L"中控盒发送的切歌指令");
						flash_message_call_function(SONG_NEXT);
					}
					break;
				case COM_RECEIVE_REPLAY_SONG:            //重唱
					{
						flash_message_call_function(SONG_REPLAY);
					}
					break;
				case COM_RECEIVE_KARAOKE_ACCOMPANY:      //原伴唱
					{
						flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
					}
					break;
				case COM_RECEIVE_KARAOKE_TRACK:          //原唱
					{
						result = m_player_manager.get_channel();
						if (!result || m_player_manager.get_guid_channel() == 1)
						{
							m_player_manager.set_guid_channel(0);
							//伴唱，改为原唱
							flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
						}
					}
					break;
				case COM_RECEIVE_ACCOMPANY_TRACK:        //伴唱
					{
						result = m_player_manager.get_channel();
						if (result || m_player_manager.get_guid_channel() == 1)
						{
							m_player_manager.set_guid_channel(0);
							//原唱，改为伴唱
							flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
						}
					}
					break;
				case COM_RECEIVE_PLAY_PAUSE:             //播放\暂停
					{
						flash_message_call_function(SONG_PLAY_PAUSE);
					}
					break;
				case COM_RECEIVE_PLAY:                   //播放
					{
						result = m_player_manager.is_playing();
						if (!result)
						{
							//暂停，就开始播放
							flash_message_call_function(SONG_PLAY_PAUSE);
						}
					}
					break;
				case COM_RECEIVE_PAUSE:                  //暂停
					{
						result = m_player_manager.is_playing();
						if (result)
						{
							//播放，就开始暂停
							flash_message_call_function(SONG_PLAY_PAUSE);
						}
					}
					break;
				case COM_RECEIVE_SONG_MUTE:              //静音 取消静音
					{
						flash_message_call_function(SONG_MUTE_UNMUTE);
					}
					break;
				case COM_RECEIVE_SONG_MUTE_BUTTON:      //静音
					{
						result = m_player_manager.is_mute();
						if (!result)
						{
							//非静音状态，改成静音
							flash_message_call_function(SONG_MUTE_UNMUTE);
						}
					}
					break;
				case COM_RECEIVE_SONG_UNMUTE_BUTTON:    //取消静音
					{
						result = m_player_manager.is_mute();
						if (result)
						{
							//静音状态，改成非静音
							flash_message_call_function(SONG_MUTE_UNMUTE);
						}
					}
					break;
				case COM_RECEIVE_RECORDER:               //录音
					{
						flash_message_call_recorder_audio(L"1");
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_APPLAUSE:    //掌声
					{
						flash_message_call_function(ATMOSPHERE_APPLAUSE);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_HAOZAN:	//好赞
					{
						flash_message_call_function(ATMOSPHERE_HAOZAN);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_SHIHUA: //石化
					{
						flash_message_call_function(ATMOSPHERE_SHIHUA);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_XIEHUA: //献花
					{
						flash_message_call_function(ATMOSPHERE_XIANHUA);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_TUXIE: //吐血
					{
						flash_message_call_function(ATMOSPHERE_TUXUE);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_FEIWEN: //飞吻
					{
						flash_message_call_function(ATMOSPHERE_FEIWEN);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_XINSUI: //心碎
					{
						flash_message_call_function(ATMOSPHERE_XINSUI);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_HAIXIU: //害羞
					{
						flash_message_call_function(ATMOSPHERE_HAIXIU);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_ZADAN: //砸蛋
					{
						flash_message_call_function(ATMOSPHERE_ZADAN);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_CHEER:       //欢呼
					{
						flash_message_call_function(ATMOSPHERE_CHEER);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_OUTCRY:      //催眠
					{
						flash_message_call_function(ATMOSPHERE_OUTCRY);
					}
					break;
				case COM_RECEIVE_ATMOSPHERE_WHISTLE:     //狂汗
					{
						flash_message_call_function(ATMOSPHERE_WHISTLE);
					}
					break;
				case COM_RECEIVE_LIGHT1:                 //灯光1
					{
						//flash_message_call_function(LIGHT_STANDARD,0,true);LIGHT_OPEN2
						flash_message_call_function(LIGHT_OPEN2,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT2:                 //灯光2
					{
						flash_message_call_function(LIGHT_BACKGROUND,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT3:                 //灯光3
					{
						flash_message_call_function(LIGHT_STAGE,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT4:                 //灯光4
					{
						flash_message_call_function(LIGHT_SCINTILLATION,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT5:                 //灯光5
					{
						flash_message_call_function(LIGHT_OPEN1,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT6:                 //灯光6
					{
						flash_message_call_function(LIGHT_OPEN3,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT7:                 //灯光7
					{
						flash_message_call_function(LIGHT_OPEN4,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT8:                 //灯光8
					{
						flash_message_call_function(LIGHT_OPEN5,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT9:                 //灯光9
					{
						flash_message_call_function(LIGHT_OPEN6,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT10:                 //灯光10
					{
						flash_message_call_function(LIGHT_OPEN7,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT11:
					{
						flash_message_call_function(LIGHT_OPEN8,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT12:
					{
						flash_message_call_function(LIGHT_STANDARD,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT_OPEN:                //灯光全开
					{
						flash_message_call_function(LIGHT_OPEN,0,true);
					}
					break;
				case COM_RECEIVE_LIGHT_CLOSE:                //灯光关闭
					{
						flash_message_call_function(LIGHT_CLOSE,0,true);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_STANDARD:      //标准
					{
						flash_message_call_function(AUDIO_EFFECT_STANDARD);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_THEATER:       //剧场
					{
						flash_message_call_function(AUDIO_EFFECT_THEATER);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_PROFESSIONAL:  //唱将
					{
						flash_message_call_function(AUDIO_EFFECT_PROFESSIONAL);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_MAGIC:         //魔音
					{
						flash_message_call_function(AUDIO_EFFECT_MAGIC);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_RESERVE1:      //音效预留
					{
						flash_message_call_function(AUDIO_EFFECT_RESERVE1);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_RESERVE2:      //音效预留
					{
						flash_message_call_function(AUDIO_EFFECT_RESERVE2);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_RESERVE3:      //音效预留
					{
						flash_message_call_function(AUDIO_EFFECT_RESERVE3);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_RESERVE4:      //音效预留
					{
						flash_message_call_function(AUDIO_EFFECT_RESERVE4);
					}
					break;
				case COM_RECEIVE_AUDIO_EFFECT_CHANGE:   //音效改变
					{
						switch(m_cur_audio_effect_value)
						{
						case 0:
							{
								flash_message_call_function(AUDIO_EFFECT_STANDARD);
							}
							break;
						case 1:
							{
								flash_message_call_function(AUDIO_EFFECT_THEATER);
							}
							break;
						case 2:
							{
								flash_message_call_function(AUDIO_EFFECT_PROFESSIONAL);
							}
							break;
						case 3:
							{
								flash_message_call_function(AUDIO_EFFECT_MAGIC);
							}
							break;
						case 4:
							{
								flash_message_call_function(AUDIO_EFFECT_RESERVE1);
							}
							break;
						case 5:
							{
								flash_message_call_function(AUDIO_EFFECT_RESERVE2);
							}
							break;
						default:
							{
								flash_message_call_function(AUDIO_EFFECT_STANDARD);
							}
							break;
						}
						m_cur_audio_effect_value++;
						if (m_cur_audio_effect_value>3)
						{
							m_cur_audio_effect_value = 0;
						}
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_STANDARD:      //音乐音效标准
					{
						flash_message_call_function(MUSIC_SOUND_STANDARD);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_THEATER:       //音乐音效剧场
					{
						flash_message_call_function(MUSIC_SOUND_THEATER);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_PROFESSIONAL:  //音乐音效唱将
					{
						flash_message_call_function(MUSIC_SOUND_PROFESSIONAL);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_MAGIC:         //音乐音效魔音
					{
						flash_message_call_function(MUSIC_SOUND_MAGIC);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_RESERVE1:      //音乐音效预留
					{
						flash_message_call_function(MUSIC_SOUND_RESERVE1);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_RESERVE2:      //音乐音效预留
					{
						flash_message_call_function(MUSIC_SOUND_RESERVE2);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_RESERVE3:      //音乐音效预留
					{
						flash_message_call_function(MUSIC_SOUND_RESERVE3);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_RESERVE4:      //音乐音效预留
					{
						flash_message_call_function(MUSIC_SOUND_RESERVE4);
					}
					break;
				case COM_RECEIVE_MUSIC_SOUND_CHANGE:   //音乐音效改变
					{
						switch(m_cur_music_sound_value)
						{
						case 0:
							{
								flash_message_call_function(MUSIC_SOUND_STANDARD);
							}
							break;
						case 1:
							{
								flash_message_call_function(MUSIC_SOUND_THEATER);
							}
							break;
						case 2:
							{
								flash_message_call_function(MUSIC_SOUND_PROFESSIONAL);
							}
							break;
						case 3:
							{
								flash_message_call_function(MUSIC_SOUND_MAGIC);
							}
							break;
						default:
							{
								flash_message_call_function(MUSIC_SOUND_STANDARD);
							}
							break;
						}
						m_cur_music_sound_value++;
						if (m_cur_music_sound_value>3)
						{
							m_cur_music_sound_value = 0;
						}
					}
					break;
				case COM_RECEIVE_ENJOY_SONG:    //欣赏
					{
						flash_message_call_function(SONG_ENJOYMERT);
					}
					break;
				case COM_RECEIVE_AIR_CONDITION_STRONG:       //空调强
					{
						flash_message_call_function(AIR_CONDITION_STRONG);
					}
					break;			
				case COM_RECEIVE_AIR_CONDITION_MID:          //空调中
					{
						flash_message_call_function(AIR_CONDITION_MID);
					}
					break;			
				case COM_RECEIVE_AIR_CONDITION_WEAK:         //空调弱
					{
						flash_message_call_function(AIR_CONDITION_WEAK);
					}
					break;
				case COM_RECEIVE_AIR_CONDITION_CLOSE:        //空调关闭
					{
						flash_message_call_function(AIR_CONDITION_CLOSE);
					}
					break;
				case COM_RECEIVE_DISCHARGE_AIR_FUNCTION:     //排风
					{
						flash_message_call_function(DISCHARGE_AIR_FUNCTION);
					}
					break;
				case COM_RECEIVE_SERVER_LIGHT_STATE:      //服务灯状态
					{
						if (CLOSE_ROOM_STATE==m_pc_state)
						{
							//关房状态，关房灯光发送给中控盒
							write_com_data(COM_SEND_CLOSE_ROOM);
							//关闭服务灯
							write_com_data(COM_SEND_CLOSE_SERVICE_LIGHT);
						}
						else
						{
							//开房状态，开房灯光发送给中控盒
							write_com_data(COM_SEND_OPEN_ROOM);
						}
					}
					break;
				default:
					break;
				}
			}
		}
		break;
	case DM_INK_RECOGNITION_FINISH:              //手写识别完成，第四个参数是识别结果
		{
			try
			{
				CString *recognition_result = NULL;
				TCHAR data[1024];
				TCHAR request[1024];
				bool result=false;
				TCHAR select_result[256];
				int index_page = 0;

				memset(data,0x0,sizeof(data));
				memset(request,0x0,sizeof(request));

				//得到识别的结果
				recognition_result = (CString *)lParam;
				for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
				{
					memset(select_result,0x0,sizeof(select_result));
					_tcscpy(select_result,recognition_result[i].GetBuffer(0));
					//删除特殊字符
					flash_replace_special_char(select_result);
					//保存识别的结果
					m_recognition_result[i].Format(L"%s",select_result);
					if (m_recognition_result[i].IsEmpty())
					{
						WriteLog(__FL__, L"识别的结果有空");
					}
				}
				//显示识别的结果
				if (0==_tcscmp(m_cur_interface_version,L"YYC"))
				{
					//8个
					swprintf(data,L"<data><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/></data>",
						m_recognition_result[0].GetBuffer(0),m_recognition_result[1].GetBuffer(0), m_recognition_result[2].GetBuffer(0),m_recognition_result[3].GetBuffer(0),   \
						m_recognition_result[4].GetBuffer(0),m_recognition_result[5].GetBuffer(0), m_recognition_result[6].GetBuffer(0),m_recognition_result[7].GetBuffer(0));
				}
				else
				{
					//10个
					swprintf(data,L"<data><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/><item word=\"%s\"/></data>",
						m_recognition_result[0].GetBuffer(0),m_recognition_result[1].GetBuffer(0), m_recognition_result[2].GetBuffer(0),m_recognition_result[3].GetBuffer(0),   \
						m_recognition_result[4].GetBuffer(0),m_recognition_result[5].GetBuffer(0), m_recognition_result[6].GetBuffer(0),m_recognition_result[7].GetBuffer(0),   \
						m_recognition_result[8].GetBuffer(0),m_recognition_result[9].GetBuffer(0));
				}
				//识别的字
				index_page = m_flash_manage.get_last_page_index();

				if (index_page == page_custom_song || index_page == page_proposal)
				{
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"wordlist2",data);
				}
				else
				{
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"wordlist",data);
				}

				if (result)
				{
					flash_player_call_function(request);
				}
				//手写联想字数改为0
				m_association_word_count=0;
			}
			catch (...)
			{

			}
		}
		break;
	case DM_SCREEN_COM_RECEIVE_MESSAGE: //被控窗口发送过来的坐标信息
		{
			try
			{
				//第三个参数是X坐标，第四个参数是Y坐标
				int x_coordinate=0;
				int y_coordinate=0;
				TCHAR request[1024];
				TCHAR data[1024];
				bool result=false;

				memset(request,0x0,sizeof(request));
				memset(data,0x0,sizeof(data));

				if((m_slave_screen_right_bottom_x<0)||(m_slave_screen_right_bottom_y<0))
				{
					//没有校准之前不发码
					WriteLog(__FL__, L"请先校准演唱台的触摸屏");
					break;
				}

				//输出日志
				//memset(data,0x0,sizeof(data));
				//swprintf(data,L"演唱台触摸屏的坐标信息:%d:%d",wParam,lParam);
				//WriteLog(__FL__, data);

				if (m_slave_screen_left_top_x<m_slave_screen_right_bottom_x)
				{
					//坐标原点在左边
					x_coordinate = (((int)wParam)-m_slave_screen_left_top_x)*1440/(m_slave_screen_right_bottom_x-m_slave_screen_left_top_x);
				}
				else
				{
					//坐标原点在右边
					x_coordinate = (m_slave_screen_left_top_x - ((int)wParam))*1440/(m_slave_screen_left_top_x-m_slave_screen_right_bottom_x);
				}				

				if (m_slave_screen_left_top_y<m_slave_screen_right_bottom_y)
				{
					//坐标原点在上面
					y_coordinate = (((int)lParam)-m_slave_screen_left_top_y)*m_third_display_height/(m_slave_screen_right_bottom_y-m_slave_screen_left_top_y);
				}
				else
				{
					//坐标原点在下面
					y_coordinate = (m_slave_screen_left_top_y - ((int)lParam))*m_third_display_height/(m_slave_screen_left_top_y-m_slave_screen_right_bottom_y);
				}
				//写日志
				memset(data,0x0,sizeof(data));
				swprintf(data,L"演唱台触摸屏转化后的坐标：%d:%d",x_coordinate,y_coordinate);
				WriteLog(__FL__, data);

				if (y_coordinate<150)
				{
					//只有点中了播放控制条，才发码
					memset(data,0x0,sizeof(data));
					swprintf(data,L"%d:%d",x_coordinate,y_coordinate);
					//把坐标点发送给flash
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"touchpos",data);
					if (result && m_slave_window_flash_player_exist)
					{
						m_slave_window_flash_player.CallFunction(request);
					}
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_WALL_PANEL_COM_RECEIVE_MESSAGE:  //墙板触摸屏串口发送过来的坐标信息
		{
			//第三个参数是X坐标，第四个参数是Y坐标
			int x_coordinate=0;
			int y_coordinate=0;
			int left_space=0;
			int top_space=0;
			TCHAR request[1024];
			TCHAR data[1024];
			bool result=false;

			memset(data,0x0,sizeof(data));

			//显示墙面版  2013-08-23 ZHEN
			result = show_wall_panel_interface();
			if (!result)
			{
				break;
			}

			if((m_wall_panel_screen_right_x<0)||(m_wall_panel_screen_bottom_y<0))
			{
				//没有校准之前不发码
				WriteLog(__FL__, L"请先校准墙面板的触摸屏");
				break;
			}

			//输出日志
			//memset(data,0x0,sizeof(data));
			//swprintf(data,L"墙面板触摸屏的坐标信息:%d:%d",wParam,lParam);
			//WriteLog(__FL__, data);

			//转化成显卡图标
			if (m_wall_panel_screen_left_x<m_wall_panel_screen_right_x)
			{
				//坐标原点在左边
				x_coordinate = (((int)wParam)-m_wall_panel_screen_left_x)*m_four_display_width/(m_wall_panel_screen_right_x-m_wall_panel_screen_left_x);
			}
			else
			{
				//坐标原点在右边
				x_coordinate = (m_wall_panel_screen_left_x - ((int)wParam))*m_four_display_width/(m_wall_panel_screen_left_x-m_wall_panel_screen_right_x);
			}				

			if (m_wall_panel_screen_top_y<m_wall_panel_screen_bottom_y)
			{
				//坐标原点在上面
				y_coordinate = (((int)lParam)-m_wall_panel_screen_top_y)*m_four_display_height/(m_wall_panel_screen_bottom_y-m_wall_panel_screen_top_y);
			}
			else
			{
				//坐标原点在下面
				y_coordinate = (m_wall_panel_screen_top_y - ((int)lParam))*m_four_display_height/(m_wall_panel_screen_top_y-m_wall_panel_screen_bottom_y);
			}
			//写日志
			memset(data,0x0,sizeof(data));
			swprintf(data,L"墙面板触摸屏转化后的坐标：%d:%d",x_coordinate,y_coordinate);
			WriteLog(__FL__, data);

			switch (m_wall_panel_show_mode)
			{
			case WALL_PANEL_VIDEO_IMAGE:   //视频叠加图片
				{
					//得到图片距离左边和上面的间距
					left_space = (m_four_display_width-m_wall_panel_image_width)/2;
					top_space = (m_four_display_height-m_wall_panel_image_height)/2;
					//判断如果不在图片点击区域，就直接返回
					if ((x_coordinate<=left_space)||(y_coordinate<=top_space)||(x_coordinate>=(m_four_display_width-left_space))||(y_coordinate>=(m_four_display_height-top_space)))
					{
						break;
					}
					//转化到图片坐标
					x_coordinate -= left_space;
					y_coordinate -= top_space;

					//判断是否点中某个按钮
					m_wall_panel_screen_com1.determine_point_in_rect(x_coordinate,y_coordinate);
				}
				break;
			case WALL_PANEL_VIDEO_FLASH:  //flash界面
			case WALL_PANEL_IMAGE_FLASH:
				{
					memset(data,0x0,sizeof(data));
					memset(request,0x0,sizeof(request));

					//转化成800*600
					x_coordinate = x_coordinate*800/m_four_display_width;
					y_coordinate = y_coordinate*600/m_four_display_height;
					//传递给flash
					swprintf(data,L"%d:%d",x_coordinate,y_coordinate);
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"touchpos",data);
					if (result && m_wall_panel_flash_player_exist)
					{
						m_wall_panel_flash_player.CallFunction(request);
					}
				}
				break;
			}
		}
		break;
	case DM_DOORPLATE_COM_RECV_MESSAGE:   //门牌机
		{
			try
			{
				//第三个参数是X坐标，第四个参数是Y坐标
				int x_coordinate=0;
				int y_coordinate=0;
				TCHAR request[1024];
				TCHAR data[1024];
				bool result=false;

				memset(request,0x0,sizeof(request));
				memset(data,0x0,sizeof(data));

				if((m_doorplate_right_bottom_x<0)||(m_doorplate_right_bottom_y<0))
				{
					//没有校准之前不发码
					WriteLog(__FL__, L"请先校准门牌机的触摸屏");
					break;
				}

				//输出日志
				//memset(data,0x0,sizeof(data));
				//swprintf(data,L"门牌机触摸屏的坐标信息:%d:%d",wParam,lParam);
				//WriteLog(__FL__, data);

				//转化成1280*768
				if (m_five_display_width>m_five_display_height)
				{
					if (m_doorplate_left_top_x<m_doorplate_right_bottom_x)
					{
						//坐标原点在左边
						x_coordinate = (((int)wParam)-m_doorplate_left_top_x)*m_five_display_width/(m_doorplate_right_bottom_x-m_doorplate_left_top_x);
					}
					else
					{
						//坐标原点在右边
						x_coordinate = (m_doorplate_left_top_x - ((int)wParam))*m_five_display_width/(m_doorplate_left_top_x-m_doorplate_right_bottom_x);
					}				

					if (m_doorplate_left_top_y<m_doorplate_right_bottom_y)
					{
						//坐标原点在上面
						y_coordinate = (((int)lParam)-m_doorplate_left_top_y)*m_five_display_height/(m_doorplate_right_bottom_y-m_doorplate_left_top_y);
					}
					else
					{
						//坐标原点在下面
						y_coordinate = (m_doorplate_left_top_y - ((int)lParam))*m_five_display_height/(m_doorplate_left_top_y-m_doorplate_right_bottom_y);
					}
					//横版
					x_coordinate = x_coordinate*1280/m_five_display_width;
					y_coordinate = y_coordinate*720/m_five_display_height;
				}
				else
				{
					if (m_doorplate_left_top_y<m_doorplate_right_bottom_y)
					{
						//坐标原点在左边
						x_coordinate = (((int)lParam)-m_doorplate_left_top_y)*m_five_display_width/(m_doorplate_right_bottom_y-m_doorplate_left_top_y);
					}
					else
					{
						//坐标原点在右边
						x_coordinate = (m_doorplate_left_top_y - ((int)lParam))*m_five_display_width/(m_doorplate_left_top_y-m_doorplate_right_bottom_y);
					}				

					if (m_doorplate_left_top_x<m_doorplate_right_bottom_x)
					{
						//坐标原点在上面
						y_coordinate = (((int)wParam)-m_doorplate_left_top_x)*m_five_display_height/(m_doorplate_right_bottom_x-m_doorplate_left_top_x);
					}
					else
					{
						//坐标原点在下面
						y_coordinate = (m_doorplate_left_top_x - ((int)wParam))*m_five_display_height/(m_doorplate_left_top_x-m_doorplate_right_bottom_x);
					}
					//竖版
					x_coordinate = x_coordinate*768/m_five_display_width;
					y_coordinate = y_coordinate*1280/m_five_display_height;
				}

				//写日志
				memset(data,0x0,sizeof(data));
				swprintf(data,L"门牌机触摸屏转化后的坐标：%d:%d",x_coordinate,y_coordinate);
				WriteLog(__FL__, data);

				memset(data,0x0,sizeof(data));
				swprintf(data,L"%d|%d",x_coordinate,y_coordinate);
				//把坐标点发送给flash
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"set_doorplate_point",data);
				if (result && m_doorplate_window_exist&&m_doorplate_init_success)
				{
					m_doorplate_flash_player.CallFunction(request);
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_RECV_SERVER_DATA:  //接受到的开关房的消息数据
		{
			try
			{
				char recv_data[1024];
				TCHAR wide_string[1024];
				TCHAR log[1024];
				string_conversion string_conv;
				char send_data[1024];
				TCHAR change_room_song_path[256];              //换房保存的歌曲路径
				config_file_manager config_file;

				memset(recv_data,0x0,sizeof(recv_data));
				memset(wide_string,0x0,sizeof(wide_string));
				memset(log,0x0,sizeof(log));
				memset(send_data,0x0,sizeof(send_data));
				memset(change_room_song_path,0x0,sizeof(change_room_song_path));

				/*
				if (!g_dog_open_function.drinks_software)
				{
				WriteLog(__FL__, L"加密狗没有开通后台功能，不能使用后台开关房");
				break;
				}
				*/

				//第三个参数是接收到的数据
				strcpy(recv_data,(char *)wParam);

				if (1==m_master_slave_control_flag)
				{
					//主控机接收到开关房信息，要发送给被控机
					sprintf(send_data,"SERVERDATA%s",recv_data);
					send_master_slave_data(NULL,send_data);
				}

				if (m_use_open_room_function && ((0==memcmp(recv_data,"open0",5))|| (0==memcmp(recv_data,"open1",5)) || (0==memcmp(recv_data,"open2",5))) && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//启用了后台或密码开房，才接受开关房信息
					//开房
					ktv_open_room();
					//发送开房指令到中控盒
					write_com_data(COM_SEND_OPEN_ROOM);
					//从服务器上得到选择的歌曲编号，然后录入到已选中
					if (!m_server_path.empty())
					{
						//得到换房保存已选歌曲编号的路径
						swprintf(change_room_song_path,L"%s\\%s.dat",m_server_path.c_str(),m_room_ip);
						//从服务器得到路径
						get_select_song_from_server(change_room_song_path);
					}

					if (m_video_dating_show)
					{
						//开放加入视频交友
						send_server_video_dating_data(VD_IDLE, true);
					}					
					//回到首页
					if (1==m_master_slave_control_flag)
					{
						page_change(page_homepage);
					}

#ifdef DAO_QI_MOVIE
					MOVIE_MSG_CONTROL MMCtrl;
					ZeroMemory(&MMCtrl, sizeof(MOVIE_MSG_CONTROL));
					MMCtrl.head = HEAD_FLAG;
					MMCtrl.mmt = MMT_DIAITAL_MSG;
					MMCtrl.mmc = MMCMSG_OPEN_ROOM;
					SendDaoQiSystemMsg(&MMCtrl);
#endif // DAO_QI_MOVIE

					//预结标示
					m_precheckout_state = false;
				}
				else if (m_use_open_room_function && (0==memcmp(recv_data,"close",5)) && (CLOSE_ROOM_STATE!=m_pc_state))
				{
					//启用了后台或密码开房，才接受开关房信息
					//如果是屏保状态退出屏保
					if (m_show_screen_saver_state)
					{
						quit_screen_save();
					}
					//如果是大厅直播或电视，回到歌曲
					if ((VIDEO_TYPE_LOBBY_LIVE==pc_play_video_type)||(VIDEO_TYPE_TV==pc_play_video_type)||(VIDEO_TYPE_LOBBY_LIVE==tv_play_video_type)||(VIDEO_TYPE_TV==tv_play_video_type))
					{
						//回到歌曲视频
						switch_screen_play_song_video();
					}
					//删除服务器上保存歌曲ID文件
					if (m_save_selected_song_to_server&&(0!=_tcscmp(m_save_song_file_path,L"")))
					{
						DeleteFile(m_save_song_file_path);	
					}
					//关房灯光发送给中控盒
					write_com_data(COM_SEND_CLOSE_ROOM);
					//关闭服务灯
					write_com_data(COM_SEND_CLOSE_SERVICE_LIGHT);
					//关房
					m_pc_state = CLOSE_ROOM_STATE;
					//add 2012-09-26 FOR ZHEN
					send_room_state_to_ipad_server();
					//设置播放电影标示
					m_allow_play_movie = false;
					//关房之后，记录播放的歌曲数
					m_play_song_count_after_close_room=1;
					//获取播放的歌曲类型
					PLAY_SONG_TYPE song_type = m_player_manager.get_playing_video_type();
					if ((((0==m_master_slave_control_flag)||(1==m_master_slave_control_flag)) && (-1==m_song_count_after_close_room))
						||(song_type == PLAY_MOVIE))//关房时若播放电影，切歌
					{
						//主控机，如果设置关房的播放歌曲数是-1，立即切掉
						WriteLog(__FL__, L"关房切歌");
						flash_message_call_function(SONG_NEXT);
					}
					if (m_ipad_ecode_again)
					{
						//清空IPAD的验证码
						memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));
						config_file.write_string(L"ipad",L"login_password",m_ipad_login_code);
					}
					//电视上显示验证码
					show_song_name();

					if (m_video_dating_show)
					{
						//改状态
						send_server_video_dating_data(VD_CLOSE_ROOM);
						if (m_video_dating_accept_info.nstatus == VD_BUSY)
						{
							connect_video_dating(m_video_dating_accept_info.ip, L"quit");
						}
					}

#ifdef DON_GUAN_K_PLUS
					page_change(page_close_clear_msg);
#else
					if (1==m_master_slave_control_flag)
					{
						//回到首页
						page_change(page_homepage);
						//电视端活动页面关闭
						CloseActivePageOnTv();
					}
#endif // DON_GUAN_K_PLUS

#ifdef DAO_QI_MOVIE
					MOVIE_MSG_CONTROL MMCtrl;
					ZeroMemory(&MMCtrl, sizeof(MOVIE_MSG_CONTROL));
					MMCtrl.head = HEAD_FLAG;
					MMCtrl.mmt = MMT_DIAITAL_MSG;
					MMCtrl.mmc = MMCMSG_CLOSE_ROOM;
					SendDaoQiSystemMsg(&MMCtrl);
#endif // DAO_QI_MOVIE

					//预结标示
					m_precheckout_state = false;
				}
				//else if (m_use_open_room_function && (0==memcmp(recv_data,"open1",5)) && (CLOSE_ROOM_STATE==m_pc_state))
				//{
				//	//启用了后台或密码开房，才接受开关房信息
				//	//换房
				//	ktv_open_room();
				//	//从服务器上得到选择的歌曲编号，然后录入到已选中
				//	memset(m_change_room_song_path,0x0,sizeof(m_change_room_song_path))
				//	if (!m_server_path.empty())
				//	{
				//		//得到换房保存已选歌曲编号的路径
				//		swprintf(m_change_room_song_path,L"%s\\%s.dat",m_server_path.c_str(),m_send_room_ip);
				//		//从服务器得到路径
				//		get_select_song_from_server(m_change_room_song_path);
				//	}
				//	//回到首页
				//	page_change(page_homepage);
				//}
				else if (m_use_open_room_function && (0==memcmp(recv_data,"chang",5)) && (CLOSE_ROOM_STATE!=m_pc_state))
				{
					//启用了后台或密码开房，才接受开关房信息
					//如果是屏保状态退出屏保
					if (m_show_screen_saver_state)
					{
						quit_screen_save();
					}
					//如果是大厅直播或电视，回到歌曲
					if ((VIDEO_TYPE_LOBBY_LIVE==pc_play_video_type)||(VIDEO_TYPE_TV==pc_play_video_type)||(VIDEO_TYPE_LOBBY_LIVE==tv_play_video_type)||(VIDEO_TYPE_TV==tv_play_video_type))
					{
						//回到歌曲视频
						switch_screen_play_song_video();
					}
					//关房灯光发送给中控盒
					write_com_data(COM_SEND_CLOSE_ROOM);
					//关闭服务灯
					write_com_data(COM_SEND_CLOSE_SERVICE_LIGHT);
					//被换掉房
					m_pc_state = CLOSE_ROOM_STATE;
					//add 2012-09-26 FOR ZHEN
					send_room_state_to_ipad_server();

					//保存已选歌曲编号到服务器
					if (!m_server_path.empty())
					{
						memset(wide_string,0x0,sizeof(wide_string));
						string_conv.multibyte_to_widechar(recv_data+strlen("chang"),wide_string,sizeof(wide_string)/sizeof(TCHAR));
						//得到换房保存已选歌曲编号的路径
						swprintf(change_room_song_path,L"%s\\%s.dat",m_server_path.c_str(),wide_string);
						//保存已选歌曲
						save_select_song_number(change_room_song_path);
					}
					//被换掉的房间，只能播放完当前首歌曲
					m_play_song_count_after_close_room=m_song_count_after_close_room;
					if (((0==m_master_slave_control_flag)||(1==m_master_slave_control_flag)) && (-1==m_song_count_after_close_room))
					{
						//主控机，如果设置关房的播放歌曲数是-1，立即切掉
						WriteLog(__FL__, L"换房切歌");
						flash_message_call_function(SONG_NEXT);
					}
					if (m_ipad_ecode_again)
					{
						//清空IPAD的验证码
						memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));
						config_file.write_string(L"ipad",L"login_password",m_ipad_login_code);
					}
					//电视上显示验证码
					show_song_name();

					//改状态
					send_server_video_dating_data(VD_CLOSE_ROOM);
					if (m_video_dating_accept_info.nstatus == VD_BUSY)
					{
						connect_video_dating(m_video_dating_accept_info.ip, L"quit");
					}

#ifdef DON_GUAN_K_PLUS
					page_change(page_close_clear_msg);
#else
					//回到首页
					page_change(page_homepage);
#endif // DON_GUAN_K_PLUS
					//预结标示
					m_precheckout_state = false;
				}
				else if (m_use_open_room_function && (0==memcmp(recv_data,"precheckout",11))&&(SELECT_SONG_STATE==m_pc_state))
				{
					//预结账
					m_precheckout_state = true;
					//内嵌酒水关闭
					hide_plug_in_drinks();
				}
				else if (m_use_open_room_function && 0==memcmp(recv_data,"cleared",7) && m_pc_state == CLOSE_ROOM_STATE)
				{
					//回到首页
					page_change(page_homepage);
				}

				//酒水
				if ((0==memcmp(recv_data,"open0",5)) || (0==memcmp(recv_data,"open1",5)))
				{
					m_open_drinks=true;
				}
				else if ((0==memcmp(recv_data,"close",5)) || (0==memcmp(recv_data,"chang",5)))
				{
					m_open_drinks=false;
				}

				if (m_open_full_screen == 1)
				{
					//初始化exe的flash
					InitFlashByExe();
				}				

				//写日志
				memset(log,0x0,sizeof(log));
				memset(wide_string,0x0,sizeof(wide_string));
				string_conv.multibyte_to_widechar(recv_data,wide_string,sizeof(wide_string));
				swprintf(log,L"接受到开关房数据：%s",wide_string);
//				WriteLog(__FL__, log);
			}
			catch (...)
			{

			}
		}
		break;
	case DM_RECV_SERVER_MSG:   //接收到的服务器消息数据
		{
			try
			{
				osd_text_picture osd_msg;
				MESSAGE_SHOW_MODE show_mode;
				MESSAGE_CONTENT_TYPE content_type;
				text_osd_info text_info;
				play_variable play_var;
				TCHAR background_path[256];
				TCHAR path[256];
				char recv_data[1024*52];
				bool result=false;
				string_conversion str_con;

				memset(background_path,0x0,sizeof(background_path));
				memset(path,0x0,sizeof(path));
				memset(recv_data,0x0,sizeof(recv_data));

				//第三个参数是接受到的数据
				strcpy(recv_data,(char *)wParam);

				//先判断是否是特殊消息
				if (0==strnicmp(recv_data,g_software_exit_string,21))
				{
					//退出程序
					PostMessage(WM_CLOSE,NULL,NULL);
					break;
				}
				else if (0==strnicmp(recv_data,g_shutdown_string,21))
				{
					//关闭机器
					shutdown_computer();
					break;
				}
				else if (0==_strnicmp(recv_data,g_reboot_string,21))
				{
					//重启机器
					reboot_computer();
					break;
				}
				else if (0==_strnicmp(recv_data,"LINKSERVERNUMBER",16))
				{
					//得到要连接的服务器编号
					sscanf(recv_data+16,"%d",&m_link_server_number);
					//重新计时
					m_load_balance_timer.start();
					break;
				}
				else if (0==_strnicmp(recv_data,"DOWNSONGFILESUCCESS",19))
				{
					//得到广播消息下载歌曲成功,修改数据库
					down_song_file_success(recv_data+20);
					break;
				}
				else if (0==_strnicmp(recv_data,"OUTLETSSERVERIP",15))
				{
					/*
					//后台服务IP地址
					if (0!=strcmp(m_service_server_ip,recv_data+15))
					{
					TCHAR log[256];
					TCHAR server_ip[256];
					memset(server_ip,0x0,sizeof(server_ip));

					memset(log,0x0,sizeof(log));

					memset(m_service_server_ip,0x0,sizeof(m_service_server_ip));
					strcpy(m_service_server_ip,recv_data+15);

					str_con.multibyte_to_widechar(m_service_server_ip,server_ip,sizeof(server_ip));
					swprintf(log,L"服务所在服务器的IP:%s",server_ip);
					WriteLog(__FL__, log);
					}
					*/
					break;
				}
				else if (0==_strnicmp(recv_data,"PLACENOTICE",11))  //如果是公告消息
				{
					//m_place_notice_info
					//接收到数据广播
					TCHAR notice_info[1024];
					memset(notice_info,0x0,sizeof(notice_info));

					str_con.multibyte_to_widechar(recv_data+12,notice_info,sizeof(notice_info));
					m_place_notice_info = notice_info;

					show_text_on_flash(m_place_notice_info.c_str());

					//flash_message_call_place_notice();

					break; 
				}
				else if (0==_strnicmp(recv_data,"WECHATSONG",10))  //如果是盒子发过来的微信点歌页面码
				{
					get_wechat_song_encode_number(recv_data+11);
					break;
				}
				else if (0 == _strnicmp(recv_data,"RequestMaibaRule",16))   //是设置规则发过来的数据
				{
					//判断是否开房了
					if (CLOSE_ROOM_STATE==m_pc_state)
					{
						break;
					}
					//解析设置擂台信息
					result = parse_arena_rule_info(recv_data+16,1,0);

					send_maiba_rule_to_master(recv_data+16);

					break;
				}
				else if (0 == _strnicmp(recv_data,"RequestMaibaRanking",19))  //得到当前擂台歌曲的前10名高分榜
				{
					//判断是否开房了
					if (CLOSE_ROOM_STATE==m_pc_state)
					{
						break;
					}
					//解析数据
					parse_message_call_room_ranking(recv_data+19);
					break;
				}
				else if (0 == _strnicmp(recv_data,"REQUESTMAIBADATA",16))
				{
					//解析麦霸数据PK相关数据
					//parse_server_arena_song(recv_data+17);
					break;
				}
				else if (0 == _strnicmp(recv_data,"REQUESTMAIBAONEDATA",19))
				{
					//解析是当前这首歌返回来的值
					parse_message_call_arena_one_song(recv_data+19);
					break;
				}
				else if (0 == _strnicmp(recv_data,"MAIBASONGINFO",13))
				{
					//解析得到歌曲(是网络数据)
					parse_maiba_song_info(recv_data+14);
					break;
				}
				else if (0 == _strnicmp(recv_data,"MAIBAVOICEINFO",14))
				{
					//解析是当前这首歌返回来的值
					parse_message_call_maiba_song(recv_data+14);
					break;
				}
				else if (0 == _strnicmp(recv_data,"MEMBERUSERINFO",14))  //用户登录后返回的值
				{
					//用户登录后
					bool result = false;
					result = m_memeber_manage[m_activate_vip_button].parse_member_info(recv_data+14);
					if (result)
					{
						//发送成功
						flash_message_calll_memeber_info();
					}
					break;
				}
				else if (0 == _strnicmp(recv_data,"MEMBERPHONE",11))
				{
					//MEMBERPHONE:0 (0,成功，1，失败,12 已经注册) 验证码是否发送成功
					WriteLog(__FL__, (TCHAR*)recv_data+11);
					break;
				}
				else if (0 == _strnicmp(recv_data,"MEMBEROPERATE",13))
				{
					//MEMBEROPERATE:0 (0,成功，1，失败,14)
					WriteLog(__FL__, (TCHAR*)recv_data+13);
					break;
				}
				else if (0 == _strnicmp(recv_data,"MYSTOREINFO",11))
				{
					std::wstring song_id_list;
					//我的收藏列表
					result = m_memeber_manage[m_activate_vip_button].parse_memeber_song_info(recv_data+11,song_id_list);
					if (result)
					{
						//返回有数据，进行查询
						song_query_member_data_by_id(song_id_list);
					}
					break;
				}
				else if (0 == _strnicmp(recv_data,"PUSHSONG",8))
				{
					//如果是终端推送歌曲
					flash_message_call_service_push_song(recv_data + 9);
					break;
				}
				else if (0 == _strnicmp(recv_data,"SONG_SHARE_SUCCESS",18))
				{
					//如果是终端接收到分享歌曲
					flash_message_call_service_share_success(recv_data + 19);
					break;
				}
				else if (0 == _strnicmp(recv_data, "PHONE_BARRAGE", 13))
				{
					//接受iss广播的弹幕，防止丢失数据，启用多线程接收数据
					LPBARRAGE_MSG pBarrageInfo = new BARRAGE_MSG();
					pBarrageInfo->pWnd = this;
					strcpy(pBarrageInfo->szData, &recv_data[13]);
					AfxBeginThread(flash_message_call_service_barrage, pBarrageInfo);
					break;
				}

				//初始化一下，文字和图片类
				osd_msg = m_osd_play_manager.m_osd_text_picture;
#ifdef DAO_QI_MOVIE
				MOVIE_MSG_CONTROL MMCtrl;
				ZeroMemory(&MMCtrl, sizeof(MOVIE_MSG_CONTROL));
				bool ret = osd_msg.parse_msg(recv_data, &MMCtrl);
				if (MMCtrl.head == HEAD_FLAG) //获得到了消息系统的消息，发送到道奇电影
				{
					SendDaoQiSystemMsg(&MMCtrl);
				}
#else
				bool ret = osd_msg.parse_msg(recv_data);
#endif // DAO_QI_MOVIE
				if (ret)
				{
					//解析成功，显示
					show_mode = osd_msg.get_show_mode();
					content_type = osd_msg.get_content_type();

					switch(show_mode)
					{
					case MESSAGE_SHOW_COMPUTER: //电脑上显示
						{
							switch(content_type)
							{
							case MESSAGE_TEXT:   //文字
								{
									MESSAGE_TYPE message_type = osd_msg.get_message_type();
									int link_server_number=0;

									switch(message_type)
									{
									case MESSAGE_SERVICE_ANSWER: // 服务响应
										{
											ret = osd_msg.get_text_info(text_info);
											if (ret&&(0==_tcscmp(text_info.Text(),L"取消服务")))
											{
												//取消服务，发送给中控盒
												write_com_data(COM_SEND_CANCEL_SERVER);
												if(CLOSE_ROOM_STATE==m_pc_state)
												{
													//关房状态，关闭服务灯
													write_com_data(COM_SEND_CLOSE_SERVICE_LIGHT);
												}
												//设置服务按钮状态
												send_service_button_state(m_click_service_button_number,0);
												//设置标识
												m_call_service_state = false;
												//发送给门牌机-*
												send_service_state_to_doorplate(false);
											}
										}
										break;
									default:
										{
											ret = osd_msg.get_text_info(text_info);
											if (ret)
											{
												break;
											}
											//显示到flash界面上
											memset(m_msg_welcome,0x0,sizeof(m_msg_welcome));
											_tcscpy(m_msg_welcome,text_info.Text());
											//得到滚动次数
											ret = osd_msg.get_text_play_variable(play_var);
											if (!ret)
											{
												break;
											}
											m_msg_welcome_scroll_count = play_var.nRepeat;
											//显示到门牌机
											doorplate_show_scroll_text(text_info.Text(),play_var.nRepeat);
										}
										break;
									}
								}
								break;
							case MESSAGE_PICTURE:  //图片
								{
									memset(path,0x0,sizeof(path));

									ret = osd_msg.get_text_info(text_info);
									if (!ret)
									{
										break;
									}
									//得到图片路径
									swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[10],text_info.Text());
									//flash上显示图片
									show_picture_screen_save(path);
								}
								break;
							case MESSAGE_BOTH:  //图片和文字
								{

								}
								break;
							default:
								break;
							}
						}
						break;
					case MESSAGE_SHOW_TV:  //电视上显示
						{
							switch(content_type)
							{
							case MESSAGE_TEXT:   //文字
								{
									memset(background_path,0x0,sizeof(background_path));
									ret = m_osd_play_manager.get_background_path(background_path);
									if (!ret)
									{
										break;
									}
									ret = osd_msg.get_text_info(text_info);
									if (!ret)
									{
										break;
									}
									ret = osd_msg.get_text_play_variable(play_var);
									if (!ret)
									{
										break;
									}
									m_player_manager.play_text_osd(background_path,text_info,play_var);
									//发送过来的消息不允许切掉
									m_tv_osd_allow_cut = false;
									//显示到门牌机
									doorplate_show_scroll_text(text_info.Text(),play_var.nRepeat);


									//添加滚动文字
									send_ad_data_to_weibo(text_info.Text());

								}
								break;
							case MESSAGE_PICTURE:  //图片
								{
									memset(path,0x0,sizeof(path));
									ret = osd_msg.get_text_info(text_info);
									if (!ret)
									{
										break;
									}
									swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[10],text_info.Text());
									ret = osd_msg.get_picture_play_variable(play_var);
									if (!ret)
									{
										break;
									}
									m_player_manager.play_bmp_osd(path,play_var,OSDAlignmentCenter);
								}
								break;
							case MESSAGE_BOTH:  //图片和文字
								{
								}
								break;
							case MESSAGE_MPG:  //视频
								{
									song_info message_video_info;
									MESSAGE_TYPE message_type = osd_msg.get_message_type();
									int link_server_number=0;

									switch(message_type)
									{
									case MESSAGE_FIRE_ALARM: // 火警
										{
											//得到视频路径
											memset(path,0x0,sizeof(path));
											swprintf(path,L"%s\\%s\\火警.mpg",m_work_path,g_folder_name[10]);

											if (!PathFileExists(path))
											{
												//文件不存在直接跳过
												break;
											}
											//设置火警视频的本地路径
											message_video_info.set_local_path(path);
											//设置视频名
											message_video_info.set_song_name(L"火警提示");
											//设置音量
											message_video_info.set_accompany_volume(50);
											message_video_info.set_karaoke_volume(50);
											//设置视频类型
											message_video_info.set_video_type(PLAY_MSG_VIDEO_FIRE_ALARYM);
											//赋值给控件进行播放
											result = m_player_manager.set_video_file(message_video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
											if (result)
											{
												m_video_play_manager.set_playing_video(message_video_info);
											}
										}
										break;
									case MESSAGE_NOTICE: // 公告
									case MESSAGE_BLESSING: // 祝福词
									case MESSAGE_FOUND_SOME_ONE: // 寻人启事
									case MESSAGE_PAY_REMANDING: // 结帐预告
									case MESSAGE_SERVICE_ANSWER: // 服务响应
									case MESSAGE_ROBBER_ALARM: // 匪警
									default:
										{
											memset(path,0x0,sizeof(path));
											ret = osd_msg.get_text_info(text_info);
											if (!ret)
											{
												break;
											}
											swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[10],text_info.Text());
											if (!PathFileExists(path))
											{
												//文件不存在直接跳过
												break;
											}
											//设置视频的本地路径
											message_video_info.set_local_path(path);
											//设置视频名
											message_video_info.set_song_name(text_info.Text());
											//设置音量
											message_video_info.set_accompany_volume(50);
											message_video_info.set_karaoke_volume(50);
											//设置视频类型
											message_video_info.set_video_type(PLAY_MSG_VIDEO);
											//赋值给控件进行播放
											result = m_player_manager.set_video_file(message_video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
											if (result)
											{
												m_video_play_manager.set_playing_video(message_video_info);
											}
										}
										break;
									}
								}
								break;
							default:
								break;
							}
						}
						break;
					case MESSAGE_SHOW_BOTH:  //同时显示
						{
							switch(content_type)
							{
							case MESSAGE_TEXT:   //文字
								{
									//flash上显示文字
									ret = osd_msg.get_text_info(text_info);
									if (ret)
									{
										//显示到flash界面上
										//记录欢迎词
										memset(m_msg_welcome,0x0,sizeof(m_msg_welcome));
										_tcscpy(m_msg_welcome,text_info.Text());
										//得到滚动次数
										ret = osd_msg.get_text_play_variable(play_var);
										if (!ret)
										{
											break;
										}
										m_msg_welcome_scroll_count = play_var.nRepeat;
										//电视上显示文字
										memset(background_path,0x0,sizeof(background_path));
										ret = m_osd_play_manager.get_background_path(background_path);
										if (!ret)
										{
											break;
										}
										m_player_manager.play_text_osd(background_path,text_info,play_var);
										//发送过来的消息不允许切掉
										m_tv_osd_allow_cut = false;
										//显示到门牌机
										doorplate_show_scroll_text(text_info.Text(),play_var.nRepeat);
									}
								}
								break;
							case MESSAGE_PICTURE:  //图片
								{
									//flash上显示图片
									//得到图片路径
									memset(path,0x0,sizeof(path));
									ret = osd_msg.get_text_info(text_info);
									if (!ret)
									{
										break;
									}
									//得到图片路径
									swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[10],text_info.Text());

									//flash上显示图片
									show_picture_screen_save(path);

									//电视上显示图片
									ret = osd_msg.get_picture_play_variable(play_var);
									if (!ret)
									{
										break;
									}
									m_player_manager.play_bmp_osd(path,play_var,OSDAlignmentCenter);
								}
								break;
							case MESSAGE_BOTH:  //图片和文字
								{
								}
								break;
							case MESSAGE_MPG:  //视频
								{
									song_info message_video_info;
									MESSAGE_TYPE message_type = osd_msg.get_message_type();
									int link_server_number=0;

									switch(message_type)
									{
									case MESSAGE_FIRE_ALARM: // 火警
										{
											//得到视频路径
											memset(path,0x0,sizeof(path));
											swprintf(path,L"%s\\%s\\火警.mpg",m_work_path,g_folder_name[10]);

											if (!PathFileExists(path))
											{
												//文件不存在直接跳过
												break;
											}
											//设置火警视频的本地路径
											message_video_info.set_local_path(path);
											//设置视频名
											message_video_info.set_song_name(L"火警提示");
											//设置音量
											message_video_info.set_accompany_volume(50);
											message_video_info.set_karaoke_volume(50);
											//设置视频类型
											message_video_info.set_video_type(PLAY_MSG_VIDEO_FIRE_ALARYM);
											//赋值给控件进行播放
											result = m_player_manager.set_video_file(message_video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
											if (result)
											{
												m_video_play_manager.set_playing_video(message_video_info);
											}
										}
										break;
									case MESSAGE_NOTICE: // 公告
									case MESSAGE_BLESSING: // 祝福词
									case MESSAGE_FOUND_SOME_ONE: // 寻人启事
									case MESSAGE_PAY_REMANDING: // 结帐预告
									case MESSAGE_SERVICE_ANSWER: // 服务响应
									case MESSAGE_ROBBER_ALARM: // 匪警
									default:
										{
											memset(path,0x0,sizeof(path));
											ret = osd_msg.get_text_info(text_info);
											if (!ret)
											{
												break;
											}
											swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[10],text_info.Text());
											if (!PathFileExists(path))
											{
												//文件不存在直接跳过
												break;
											}
											//设置视频的本地路径
											message_video_info.set_local_path(path);
											//设置视频名
											message_video_info.set_song_name(text_info.Text());
											//设置音量
											message_video_info.set_accompany_volume(50);
											message_video_info.set_karaoke_volume(50);
											//设置视频类型
											message_video_info.set_video_type(PLAY_MSG_VIDEO);
											//赋值给控件进行播放
											result = m_player_manager.set_video_file(message_video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
											if (result)
											{
												m_video_play_manager.set_playing_video(message_video_info);
											}
										}
										break;
									}
								}
								break;
							default:
								break;
							}
						}
						break;
					default:
						break;
					}
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_ADD_SING_SONG:   //增加已唱歌曲到数据库中
		{
			try
			{
				TCHAR song_id[128];
				TCHAR data[1024];
				TCHAR server_ip[256];
				string_conversion string_con;

				int row=0;

				memset(song_id,0x0,sizeof(song_id));
				memset(data,0x0,sizeof(data));
				memset(server_ip,0x0,sizeof(server_ip));

				//第四个参数是歌曲ID
				_tcscpy(song_id,(TCHAR *)lParam);
				swprintf(data,L"Message&SINGSONGID;%s$END",song_id);
				//通过udp协议发送给服务程序
				send_data_to_service_udp(data);


				if (1==m_master_slave_control_flag)
				{
					//主控机已唱歌曲变化之后，发送给手持设备
					send_sing_song_to_handheld();
				}

				//通过TCP发送给统计程序
				if (0 != strcmp(m_set_maiba_rule_ip,""))
				{
					//发送终端监测
					string_con.multibyte_to_widechar(m_service_server_ip,server_ip,sizeof(server_ip));

					memset(data,0x0,sizeof(data));
					swprintf(data,L"SINGMONITORSONG{\"song_id\":\"%s\",\"local_ip\":\"%s\",\"server_ip\":\"%s\",\"room_name\":\"%s\"}",
						song_id,m_room_ip,server_ip,m_show_room_name);

					REQUEST_BOX_DATA *request_rule_data = new REQUEST_BOX_DATA;
					request_rule_data->pThis = this;
					_tcscpy(request_rule_data->request_data,data);
					AfxBeginThread(send_data_to_maiba_rule_thread,request_rule_data);

					//发送点播记录统计
					memset(data,0x0,sizeof(data));
					swprintf(data,L"SINGSONGID{\"song_id\":\"%s\"}",song_id);

					REQUEST_BOX_DATA *request_rule_data1 = new REQUEST_BOX_DATA;
					request_rule_data1->pThis = this;
					_tcscpy(request_rule_data1->request_data,data);
					AfxBeginThread(send_data_to_maiba_rule_thread,request_rule_data1);
				}
				else
				{
					WriteLog(__FL__, L"发送终端监测时，服务器ip为空");
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_SAVE_SELECT_SONG_ID:  //保存选择歌曲的ID到服务器上
		{
			if (m_save_selected_song_to_server && (CLOSE_ROOM_STATE!=m_pc_state)&&(2!=m_master_slave_control_flag)&&(0!=_tcscmp(m_save_song_file_path,L"")))
			{
				//启用了保存已选歌曲到服务器功能，被控机不保存

				//保存已选歌曲ID到服务器上
				save_select_song_number(m_save_song_file_path);
			}
			if (1==m_master_slave_control_flag)
			{
				//主控机已选歌曲变化之后，发送给手持设备
				send_select_song_to_handheld();
			}
			//显示已选歌曲
			//show_select_or_sing_song(SHOW_SELECT_SONG,FIRST_PAGE_OPERATE,0);
			//show_select_or_sing_song(SHOW_SING_SONG,FIRST_PAGE_OPERATE,0);
		}
		break;
	case WM_DEVICECHANGE:  //设备改变
		{
			switch(wParam)
			{
			case DBT_DEVICEARRIVAL:   //设备插入
				{
					PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;

					// Check whether a CD or DVD was inserted into a drive.
					if (lpdb -> dbch_devicetype == DBT_DEVTYP_VOLUME)
					{
						TCHAR disk_path[256];
						int page_index=0;
						PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;

						memset(disk_path,0x0,sizeof(disk_path));

						//得到盘符
						m_logical_disk_drive = FirstDriveFromMask(lpdbv->dbcv_unitmask);
						swprintf(disk_path,L"%c:\\",m_logical_disk_drive);
						//检测设备类型
						UINT nDriveType = GetDriveType (disk_path);
						switch(nDriveType)
						{
						case DRIVE_REMOVABLE:
						case DRIVE_CDROM:
						case DRIVE_FIXED:
							{
								//外部设备插入
								m_have_device_insert = true;
								//进行提示
								flash_show_tip_message(35);
								//得到页面索引
								page_index = m_flash_manage.get_last_page_index();
								if (page_U_disk==page_index)
								{
									//如果是U盘播歌页面，刷新
									show_U_disk_song();
								}
							}
							break;
						default:
							break;
						}
					}
					else if (lpdb -> dbch_devicetype == DBT_DEVTYP_PORT)   // 是串口设备   2011-02-23 add
					{
						//需要重新启动中控盒串口
						open_control_box_com();
					}
				}
				break;
			case DBT_DEVICEREMOVECOMPLETE: //设备被移除
				{
					PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;

					// Check whether a CD or DVD was removed from a drive.
					if (DBT_DEVTYP_VOLUME==lpdb ->dbch_devicetype)
					{
						PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;
						TCHAR disk_drive = FirstDriveFromMask(lpdbv->dbcv_unitmask);
						if (disk_drive==m_logical_disk_drive)
						{
							//外部设备移除
							m_have_device_insert = false;
							//得到页面索引
							int page_index = m_flash_manage.get_last_page_index();
							if (page_U_disk==page_index)
							{
								//移动设备移除，返回辅助功能页
								flash_message_call_function(PAGE_BACK);
							}
							//进行提示
							flash_show_tip_message(36);
						}
					}
				}
				break;
			default:
				break;
			}
		}
		break;
	case DM_MASTER_SLAVE_MESSAGE:  //主被控消息数据
		{
			try
			{
				char recv_data[10240];
				TCHAR conv_recv_data[10240];
				string_conversion string_conv;
				song_info query_song_info;
				bool result=false;

				memset(recv_data,0x0,sizeof(recv_data));
				memset(conv_recv_data,0x0,sizeof(conv_recv_data));

				//第三个参数是接受到的主被控信息
				strcpy(recv_data,(const char*)wParam);

				if (1==m_master_slave_control_flag)
				{
					if (CLOSE_ROOM_STATE==m_pc_state)
					{
						//关房状态，不接受被控信息
						break;
					}
					//主控机
					if (0==strncmp(recv_data,"SELECTSONG",10))
					{
						if (m_find_dog_success)
						{
							//音乐欣赏
							if (0==strncmp(recv_data,"SELECTSONG&1&",12))
							{
								TCHAR wrecv_data[10240] = {0x00};
								int version = -1;
								TCHAR song_type[MAX_PATH] = {0x00};
								string_conv.multibyte_to_widechar(recv_data, wrecv_data, sizeof(wrecv_data));
								TCHAR *pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_type(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_version(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_bk_path(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_relative_path(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_singer_name(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_singer_id1(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_name(&pData[1]);
								pData[0] = '\0';

								pData = wcsrchr(&wrecv_data[12], '&');
								query_song_info.set_song_id(&pData[1]);
								pData[0] = '\0';

								query_song_info.set_music_enjoy(1);
								query_song_info.set_video_type(PLAY_MUSIC_ENJOY);

								//根据播放器状态，播放或插入已选歌曲中
								bool result = play_or_insert_select_list(query_song_info,false, true);
								//2015年5月14日17:59:10---被控端平台音乐歌曲无法高亮---LTL
								//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
								refresh_screen_list();
								break;
							}

							//找到加密狗，才允许被控机点歌
							TCHAR song_id[128];
							song_info query_song_info;
							bool result=false;

							memset(song_id,0x0,sizeof(song_id));

							string_conv.multibyte_to_widechar(recv_data+12,song_id,sizeof(song_id));
							//通过歌曲ID得到歌曲信息
							if (0==strncmp(recv_data+10,"M",1))
							{
								//电影
								//result = get_movie_info_by_id(song_id,query_song_info,PLAY_MOVIE);
								result = get_film_info_by_id(song_id, query_song_info);
							}else if (0==strncmp(recv_data+10,"R",1))
							{
								result = get_record_song_info_by_id(song_id, query_song_info, PLAY_SONG_TYPE_RECORDER_SONG);
							}
							else
							{
								//歌曲
								result = get_song_info_by_id(song_id,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
							}
							if (result)
							{
								TCHAR song_local_path[256] = {0x00};   //得到当前歌曲的状态 0：本地歌曲  1：下载歌曲  2：更新歌曲
								//得到本地是否有这首歌曲
								query_song_info.get_local_path(song_local_path);
								if (0==_tcscmp(song_local_path,L"1"))
								{
									//需要下载当前歌曲
									dwon_song_file_to_server(song_id,1);
									///标示为下载歌曲
									query_song_info.set_down_update_song(1);
								}								

								//插入已选，或播放该歌曲
								if (0==strncmp(recv_data+11,"1",1))
								{
									//优先
									play_or_insert_select_list(query_song_info,true,true);
								}
								else
								{
									play_or_insert_select_list(query_song_info,false,true);
								}
								//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
								refresh_screen_list();
								//重新显示上下首歌名
								show_song_name();
							}
						}
					}
					else if (0==strncmp(recv_data,"BATCHSELECTSONG",15))
					{
						//批量选择歌曲
						if (m_find_dog_success)
						{
							//找到加密狗，才允许被控机点歌
							TCHAR song_id[1024];
							bool result=false;

							memset(song_id,0x0,sizeof(song_id));

							string_conv.multibyte_to_widechar(recv_data+15,song_id,sizeof(song_id));
							//进行同步
							result = syn_select_song(false,song_id);
							if (result)
							{
								//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
								refresh_screen_list();
								//重新显示上下首歌名
								show_song_name();
								//更新已选歌曲数量
								update_select_song_count();
							}
						}
					}
					else if (0==strncmp(recv_data,"PSELECTSONG",11))
					{
						//优先选择歌曲
						TCHAR song_suffix[256];

						//得到优先的歌曲下标
						memset(song_suffix,0x0,sizeof(song_suffix));
						string_conv.multibyte_to_widechar(recv_data+11,song_suffix,sizeof(song_suffix));

						flash_message_call_priority_select_song(song_suffix,true);
					}
					else if (0==strncmp(recv_data,"DSELECTSONG",11))
					{
						//删除选择歌曲
						TCHAR song_suffix[256];

						//得到删除的歌曲下标
						memset(song_suffix,0x0,sizeof(song_suffix));
						string_conv.multibyte_to_widechar(recv_data+11,song_suffix,sizeof(song_suffix));

						flash_message_call_delete_select_song(song_suffix,true);
					}
					else if (0==strncmp(recv_data,"DRECORDSONG",11))   //删除已录歌曲
					{
						//删除选择歌曲
						TCHAR song_number[256];

						//得到删除的歌曲下标
						memset(song_number,0x0,sizeof(song_number));
						string_conv.multibyte_to_widechar(recv_data+11,song_number,sizeof(song_number));
						flash_message_call_delete_recorder_song_by_id(song_number);
					}
					else if (0==strncmp(recv_data,"RECL",4))
					{
						//录音列表
					}
					else if(0==strncmp(recv_data,"CONTROL",7))
					{
						if (m_find_dog_success)
						{
							//找到加密狗，才允许被控机控制
							//控制类
							int control_code=0;

							//转化为控制码
							sscanf(recv_data+7,"%d",&control_code);
							//做一下预处理
							result = protect_control_operate(control_code);
							if (!result)
							{
								//处理控制码
								flash_message_call_function(control_code,0,true);
							}
						}
					}
					//2015-2-9 11:14:18LTL
					else if (0==strncmp(recv_data, "SCORE", 5))
					{
						//控制面板信息,发送过来的是xml语句
						string_conv.multibyte_to_widechar(recv_data+5,conv_recv_data,sizeof(conv_recv_data));

						int index;

						swscanf(conv_recv_data, L"%d", &index);

						if (0 == index){
							m_show_score_in_screen = false;
						}else{
							m_show_score_in_screen = true;
						}
						//del by yzg
// 						m_player_manager.Set(SD_SET_SCORE_LINE_ONOFF, index);
// 						m_player_manager.set_show_score_line(m_show_score_in_screen);
						send_score_button_state(index);
					}
					else if (0==strncmp(recv_data,"GAMECONTROL",11))    //游戏控制
					{
						if (SELECT_SONG_STATE==m_pc_state)
						{
							int keybd_code=0;

							//转化为控制码
							sscanf(recv_data+11,"%d",&keybd_code);
							send_keybd_code_to_game(keybd_code);
						}
					}
					else if (0==strncmp(recv_data,"MARACAS",7))   //沙锤
					{
						if (SELECT_SONG_STATE==m_pc_state)
						{
							if (0==strcmp(recv_data+7,"start"))
							{
								play_atmosphere_audio(ATMOSPHERE_MARACAS);
							}
							else
							{
								stop_environment_audio();
							}
						}
					}
					else if (0==strncmp(recv_data,"HANDBELL",8))    //手铃
					{
						if (SELECT_SONG_STATE==m_pc_state)
						{
							//找到加密狗，才允许被控机控制
							if (0==strcmp(recv_data+8,"start"))
							{
								play_atmosphere_audio(ATMOSPHERE_HANDBELL);
							}
							else
							{
								stop_environment_audio();
							}
						}
					}
					else if (0==strncmp(recv_data,"DRUM",4))  //鼓点
					{
						if (SELECT_SONG_STATE==m_pc_state)
						{
							//找到加密狗，才允许被控机控制
							if (0==strcmp(recv_data+4,"start"))
							{
								play_atmosphere_audio(ATMOSPHERE_DRUM);
							}
							else
							{
								stop_environment_audio();
							}
						}
					}
					//手持设备的查询
					else if (0==strncmp(recv_data,"QUERYSONGSQL",12))
					{
						//查询歌曲数据
						query_song_by_handheld_sql(recv_data+12);
					}
					else if (0==strncmp(recv_data,"QUERYMOVIESQL",13))
					{
						//查询电影数据
						query_movie_by_handheld_sql(recv_data+13);
					}
					else if (0==strncmp(recv_data,"QUERYSINGERSQL",14))
					{
						//查询歌星数据
						query_singer_by_handheld_sql(recv_data+14);
					}
					else if (0==strncmp(recv_data,"USERINFO",8))
					{
						//用户信息
						m_http_service.save_user_info(recv_data+8);
					}
					else if (0==strncmp(recv_data,"DELUSER",7))
					{
						//删除用户信息
						m_http_service.delete_user_info(recv_data+7);
					}
					else if (0==strncmp(recv_data, "SHARERECORD", 11))
					{
						memset(conv_recv_data, 0x0, sizeof(conv_recv_data));
						string_conv.multibyte_to_widechar(recv_data + 11, conv_recv_data, sizeof(conv_recv_data));
						flash_message_call_share_recorder_audio(conv_recv_data, true);
					}else if (0==strncmp(recv_data, "dj", 2))
					{
						int index = -1;
						sscanf(recv_data, "dj:%d", &index);
						if (index == 0)
						{
							m_allow_play_dj = false;
						} 
						else if (index == 1)
						{
							m_allow_play_dj = true;
						}
					}else if (0==strncmp(recv_data, "record", 6))
					{
						char args[256] = {0x00};
						sscanf(recv_data, "record:%s",args);
						if (0==strcmp(args,"1"))
						{
							if (0==m_record_type)
							{
								//如果是半自动录音
								flash_message_call_recorder_audio_type(L"1",false);
							}
							else
							{
								m_open_record_type = 1;
								m_is_recording = true;
							}
						}
						else if (1==strcmp(args,"1"))
						{
							if (0==m_record_type)
							{
								//如果是半自动录音
								flash_message_call_recorder_audio_type(L"2",false);
							}
							else
							{
								m_open_record_type = 0;
								m_is_recording = false;
							}
						}

						set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);
					}else if (0==strncmp(recv_data, "MUSICVOLUME", 11))
					{
						TCHAR szVolume[256] = {0x00};
						string_conv.multibyte_to_widechar(&recv_data[11], szVolume, sizeof(szVolume));
						flash_message_call(L"music_volume", szVolume);
					}else if (0 == strncmp(recv_data, "DOWNLOAD_FILE_ERROR", 19)) //删除下载错误的歌曲
					{
						int index = -1;
						//删除选择歌曲
						TCHAR song_id[256];

						memset(song_id,0x0,sizeof(song_id));
						string_conv.multibyte_to_widechar(recv_data+19,song_id,sizeof(song_id));
						WriteLog(__FL__, song_id);

						//得到删除的歌曲下标
						memset(song_id,0x0,sizeof(song_id));
						string_conv.multibyte_to_widechar(recv_data+19,song_id,sizeof(song_id));

						m_cloud_song_lock.lock();
						if (m_down_song_vec.size() != 0)
						{
							vector<wstring>::iterator it = find(m_down_song_vec.begin(), m_down_song_vec.end(), song_id);
							if (it != m_down_song_vec.end())
							{
								m_down_song_vec.erase(it);
							}
							if(m_video_play_manager.query_select_song_by_id_ex(song_id, index))
							{
								index--;

								TCHAR song_suffix[16] = {0x00};
								swprintf(song_suffix, L"%d", index);
								WriteLog(__FL__, L"删除已选中下载错误的歌曲!索引值：");
								WriteLog(__FL__, song_suffix);

								if (_ttoi(song_suffix) >= 0)
								{
									flash_message_call_delete_select_song(song_suffix,true);
								}
							}
						}
						m_cloud_song_lock.unlock();
					}else if (0 == strncmp(recv_data, "imageFace:", 10))
					{
						TCHAR args[256] = {0x00};
						string_conv.multibyte_to_widechar(&recv_data[10], args, sizeof(args));
						flash_message_call(L"imageFace", args);
					}
					else if (0 == strncmp(recv_data, "imageBarrage:", 13))
					{
						TCHAR args[256] = {0x00};
						string_conv.multibyte_to_widechar(&recv_data[13], args, sizeof(args));
						flash_message_call(L"imageBarrage", args);
					}else if (0 == strncmp(recv_data, "SET_IDLESSE_INDEX&", 18))
					{
						m_video_play_manager.set_cur_idlesse_video_number(atoi(&recv_data[18]));
					}else if (0 == strncmp(recv_data, "video", 5))
					{
						string_conv.multibyte_to_widechar(&recv_data[5], conv_recv_data, sizeof(conv_recv_data));
						if (m_is_recording)
						{
							stop_recorder_audio(false,false,false);
						}			

						flash_message_call_switch_screen_pc(conv_recv_data, true);
					}else if (0 == strncmp(recv_data, "PICTURE_MV:", 11)) //照片MV
					{
						picture_mv_data_to_flash(&recv_data[11]);
					}
					else if (0 == strncmp(recv_data, "ACTIVE_GAME_JOIN:", 17))	//互动游戏
					{
						WriteLog(__FL__, L"收到互动游戏玩家加入的消息。");

						int nSize = m_vecGamePlayer.size();
						if (nSize >= 6)
						{
							WriteLog(__FL__, L"互动游戏玩家人数已达到最大值。");
							break;
						}
						string strRecv = recv_data, strHead("ACTIVE_GAME_JOIN:"), strArgs("");
						strArgs = strRecv.substr(strHead.length(), strRecv.length() - strHead.length());

						result = parse_active_game_player_info(strArgs.c_str());
						if (!result)
						{
							WriteLog(__FL__, L"互动游戏解析玩家信息失败！");
							break;
						}
					}
					else if (0 == strncmp(recv_data, "ACTIVE_GAME_QUIT:", 17))
					{
						WriteLog(__FL__, L"收到互动游戏玩家退出的消息。");

						string strRecv = recv_data, strHead("ACTIVE_GAME_QUIT:"), strArgs("");
						strArgs = strRecv.substr(strHead.length(), strRecv.length() - strHead.length());

						string_conv.multibyte_to_widechar(strArgs.c_str(), conv_recv_data, sizeof(conv_recv_data));

						vector<GAME_PLAYER_INFO>::iterator iter = m_vecGamePlayer.begin();
						for (; iter!=m_vecGamePlayer.end(); )
						{
							if (_tcscmp(iter->szOpenId, conv_recv_data) == 0)
							{
								iter = m_vecGamePlayer.erase(iter);
								break;
							}
							else
								++iter;
						}
						//向flash发送玩家信息
						bool bRet = flash_message_call_player_info();
					}
					else if (0 == strncmp(recv_data, "ACTIVE_GAME_HIGH_LIGHT:", 23))
					{
						WriteLog(__FL__, L"收到互动游戏头像高亮消息。");
						string strRecv = recv_data, strHead("ACTIVE_GAME_HIGH_LIGHT:"), strArgs("");
						strArgs = strRecv.substr(strHead.length(), strRecv.length() - strHead.length());

						string_conv.multibyte_to_widechar(strArgs.c_str(), conv_recv_data, sizeof(conv_recv_data));
						flash_message_call_player_high_light(conv_recv_data);
					}
					else if (0 == strncmp(recv_data, "ACTIVE_GAME_DICE:", 17))
					{
						WriteLog(__FL__, L"收到互动游戏骰子点数消息。");
						int nNum1 = 0, nNum2 = 0;
						TCHAR tmp[256] = {0x00};
						sscanf(recv_data, "ACTIVE_GAME_DICE:%d,%d", &nNum1, &nNum2);

						swprintf(tmp, L"%d,%d", nNum1, nNum2);
						//发送声音标志

						//发送点数信息给flash
						flash_message_call_dice_number(nNum1, nNum2);
					}
					else if (0 == strncmp(recv_data, "BARRAGE_INFO:", 13))//弹幕信息
					{
						if (!m_bWechatBarrageOpen)
						{
							break;//未开启弹幕
						}
						WriteLog(__FL__, L"收到弹幕信息.");
						//接受iss广播的弹幕，防止丢失数据，启用多线程接收数据
						LPBARRAGE_MSG pBarrageInfo = new BARRAGE_MSG();
						pBarrageInfo->pWnd = this;
						strcpy(pBarrageInfo->szData, &recv_data[13]);
						AfxBeginThread(parse_wechat_barrage_info_thread, pBarrageInfo);
						break;
					}
					else if (0 == strncmp(recv_data, "wechat_thhp&", 12)) //接受微信活动信息
					{
						//json解析文件
						Json::Reader reader;
						Json::Value root;

						//解析成功
						if (reader.parse(&recv_data[12], root, false))
						{
							LPWECHAT_MESSAGE lpWechatMsg = new WECHAT_MESSAGE();
							if(root.isMember("guid"))
								strcpy(lpWechatMsg->guid, root["guid"].asString().c_str());
							if(root.isMember("name"))
								strcpy(lpWechatMsg->filename, root["name"].asString().c_str());
							if (root.isMember("num"))
								lpWechatMsg->num = root["num"].asInt();
							if (root.isMember("notic_type"))
								lpWechatMsg->notice_type = root["notic_type"].asInt();
							if(root.isMember("url"))
								strcpy(lpWechatMsg->url, root["url"].asString().c_str());
							if(root.isMember("wechatname"))
								strcpy(lpWechatMsg->nickname, root["wechatname"].asString().c_str());
							if(root.isMember("portrait"))
								strcpy(lpWechatMsg->portrait, root["portrait"].asString().c_str());
							if(root.isMember("openid"))
								strcpy(lpWechatMsg->openid, root["openid"].asString().c_str());
							lpWechatMsg->pWnd = this;

							if (lpWechatMsg->num==9 && !m_bWechatGiftFlashPlayerExist)
							{
								create_wechat_gift_wnd();
							}
							AfxBeginThread(wechat_message_thread, lpWechatMsg);
						}
					}
					else if (0 == strncmp(recv_data, "ACTIVE_GAME_SCENE:", 18))
					{
						TCHAR szUrl[2048] = {0x00};
						string_conv.multibyte_to_widechar(&recv_data[18], szUrl, sizeof(szUrl));
						CString csTmp = _T("");
						csTmp.Format(L"[ACTIVE_GAME_SCENE]:msg = %s", szUrl);
						WriteLog(__FL__, csTmp);
						flash_message_call_active_game_scene(szUrl);
					}
					else if (0 == strncmp(recv_data, "PDRAGSORTSONG", 13))//拖动排序已选列表
					{
						int nOrigin = 0, nDestination = 0;
						string_conv.multibyte_to_widechar(recv_data+13,conv_recv_data,sizeof(conv_recv_data));
						CString strTmp = conv_recv_data;
						int nPos = strTmp.Find(_T('|'));
						//获取起始位置，终止位置
						nOrigin = _wtoi(strTmp.Left(nPos).GetBuffer());
						nDestination = _wtoi(strTmp.Mid(nPos+1).GetBuffer());

						result = flash_message_call_drag_sort_select_song(nOrigin, nDestination, true);
					}
				}
				else if(2==m_master_slave_control_flag)
				{
					//被控机
					if (0==strncmp(recv_data,"SELECTSONG",10))
					{
						//音乐欣赏
						if (0==strncmp(recv_data,"SELECTSONG&1&",12))
						{
							TCHAR wrecv_data[10240] = {0x00};
							int version = -1;
							TCHAR song_type[MAX_PATH] = {0x00};
							string_conv.multibyte_to_widechar(recv_data, wrecv_data, sizeof(wrecv_data));
							TCHAR *pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_song_type(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_song_version(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_song_relative_path(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_singer_name(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_singer_id1(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_song_name(&pData[1]);
							pData[0] = '\0';

							pData = wcsrchr(&wrecv_data[12], '&');
							query_song_info.set_song_id(&pData[1]);
							pData[0] = '\0';


							query_song_info.set_music_enjoy(1);
							query_song_info.set_video_type(PLAY_MUSIC_ENJOY);

							//根据播放器状态，播放或插入已选歌曲中
							bool result = play_or_insert_select_list(query_song_info,false, true);
							//2015年5月14日17:59:10---被控端平台音乐歌曲无法高亮---LTL
							//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
							refresh_screen_list();
							//重新显示上下首歌名
							show_song_name();

							break;
						}

						//选择列表
						TCHAR song_id[128];

						memset(song_id,0x0,sizeof(song_id));

						m_idless_song_switching = false;

						//得到歌曲ID
						string_conv.multibyte_to_widechar(recv_data+12,song_id,sizeof(song_id));
						//通过歌曲ID得到歌曲信息
						if (0==strncmp(recv_data+10,"M",1))
						{
							//电影
							// 							result = get_movie_info_by_id(song_id,query_song_info,PLAY_MOVIE);
							result = get_film_info_by_id(song_id, query_song_info);
						}else if (0==strncmp(recv_data+10,"R",1))
						{
							result = get_record_song_info_by_id(song_id, query_song_info, PLAY_SONG_TYPE_RECORDER_SONG);
						}
						else
						{
							//歌曲
							result = get_song_info_by_id(song_id,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
						}
						if (result)
						{
							TCHAR song_local_path[256] = {0x00};   //得到当前歌曲的状态 0：本地歌曲  1：下载歌曲  2：更新歌曲
							//得到本地是否有这首歌曲
							query_song_info.get_local_path(song_local_path);
							if (0==_tcscmp(song_local_path,L"1"))
							{
								///标示为下载歌曲
								query_song_info.set_down_update_song(1);
							}

							//插入已选，或播放该歌曲
							if (0==strncmp(recv_data+11,"1",1))
							{
								//优先
								play_or_insert_select_list(query_song_info,true,true);
							}
							else
							{
								play_or_insert_select_list(query_song_info,false,true);
							}
							//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
							refresh_screen_list();
							//重新显示上下首歌名
							show_song_name();

						}
					}
					else if (0 == strncmp(recv_data,"MEMBER_LIST",11))
					{
						//_tcscpy(member_list,L"MEMBER_LIST<list>");
						string_conv.multibyte_to_widechar(recv_data+11,conv_recv_data,sizeof(conv_recv_data));
						//解析录入m_member_manage
						parse_master_slave_data_vip_info(conv_recv_data);
					}
					else if (0==strncmp(recv_data,"PSELECTSONG",11))
					{
						//优先选择歌曲
						TCHAR song_suffix[256];

						//得到优先的歌曲下标
						memset(song_suffix,0x0,sizeof(song_suffix));
						string_conv.multibyte_to_widechar(recv_data+11,song_suffix,sizeof(song_suffix));

						flash_message_call_priority_select_song(song_suffix,true);
					}
					else if (0==strncmp(recv_data,"DSELECTSONG",11))
					{
						//删除选择歌曲
						TCHAR song_suffix[256];

						//得到删除的歌曲下标
						memset(song_suffix,0x0,sizeof(song_suffix));
						string_conv.multibyte_to_widechar(recv_data+11,song_suffix,sizeof(song_suffix));

						flash_message_call_delete_select_song(song_suffix,true);
					}
					else if (0==strncmp(recv_data,"TVSCROLLTEXT",12))
					{
						//电视上的滚动文字
						string_conv.multibyte_to_widechar(recv_data+12,conv_recv_data,sizeof(conv_recv_data));
						play_osd_text(conv_recv_data,OSD_RIGHT_TO_LEFT,1000);
					}
					else if (0==strncmp(recv_data,"SONGNAMEINFO",12))
					{
						//显示正播放和下一首信息
						string_conv.multibyte_to_widechar(recv_data+12,conv_recv_data,sizeof(conv_recv_data));
						flash_player_call_function(conv_recv_data);
					}
					else if (0==strncmp(recv_data,"RECL",4))
					{
						//录音列表
					}
					else if (0==strncmp(recv_data,"NEXTSONG",8))
					{
						//控制类
						enum PLAYER_PLAY_STATE player_play_state;
						char *semicolon = NULL;
						char syn_song_id[1024*50];
						TCHAR temp_song_id[1024];

						memset(syn_song_id,0x0,sizeof(syn_song_id));
						memset(temp_song_id,0x0,sizeof(temp_song_id));

						//转化为控制码
						sscanf(recv_data+8,"%d",&player_play_state);

						semicolon = strchr(recv_data,'$');
						if (semicolon)
						{
							//分隔符存在，需要同步已选歌曲数据
							strcpy(syn_song_id,semicolon+1);
							string_conv.multibyte_to_widechar(syn_song_id,temp_song_id,sizeof(temp_song_id));
							//进行同步
							syn_select_song(true,temp_song_id);
						}
						//设置播放器的播放状态
						m_video_play_manager.set_player_cur_state(player_play_state);
						m_video_play_manager.set_player_next_state(player_play_state);
						//播放下一个视频
						play_next_video();
					}
					else if (0 == strncmp(recv_data, "SYN_SELECT_SONG", 15))//同步已选列表
					{
						//控制类
						enum PLAYER_PLAY_STATE player_play_state;
						char *semicolon = NULL;
						char syn_song_id[1024*50];
						TCHAR temp_song_id[1024];

						memset(syn_song_id,0x0,sizeof(syn_song_id));
						memset(temp_song_id,0x0,sizeof(temp_song_id));

						//转化为控制码
						sscanf(recv_data+15,"%d",&player_play_state);

						semicolon = strchr(recv_data,'$');
						if (semicolon)
						{
							//分隔符存在，需要同步已选歌曲数据
							strcpy(syn_song_id,semicolon+1);
							string_conv.multibyte_to_widechar(syn_song_id,temp_song_id,sizeof(temp_song_id));
							//进行同步
							syn_select_song(true,temp_song_id);
						}
						//重新刷新列表
						refresh_screen_list();
					}
					else if(0==strncmp(recv_data,"PANELINFO",9))
					{
						//控制面板信息,发送过来的是xml语句
						string_conv.multibyte_to_widechar(recv_data+9,conv_recv_data,sizeof(conv_recv_data));
						//解析发送过来的xml字符串
						result = m_player_manager.parse_panel_list_xml(conv_recv_data);
						if (result)
						{
							//更新按钮状态
							update_flash_control_button();
						}
					}
					else if (0==strncmp(recv_data,"AUDIOINFO",9))
					{
						//音频和音调信息，发送过来的是xml语句
						string_conv.multibyte_to_widechar(recv_data+9,conv_recv_data,sizeof(conv_recv_data));
						//解析发送过来的xml字符串
						result = m_player_manager.parse_panel_list_xml(conv_recv_data);
						if (result)
						{
							//更新音量
							update_flash_control_button();
						}
					}
					else if (0==strncmp(recv_data,"CONTROL",7))
					{
						//控制类
						int control_code=0;

						//转化为控制码
						sscanf(recv_data+7,"%d",&control_code);
						//处理控制码
						flash_message_call_function(control_code,0,true);
					}
					//2015-2-9 11:12:31LTL
					else if (0==strncmp(recv_data, "SCORE", 5))
					{
						//控制面板信息,发送过来的是xml语句
						string_conv.multibyte_to_widechar(recv_data+5,conv_recv_data,sizeof(conv_recv_data));
						int index;
						swscanf(conv_recv_data, L"%d", &index);

						if (0 == index){
							m_show_score_in_screen = false;
						}else{
							m_show_score_in_screen = true;
						}
						//del by yzg
// 						m_player_manager.Set(SD_SET_SCORE_LINE_ONOFF, index);
// 						m_player_manager.set_show_score_line(m_show_score_in_screen);
						send_score_button_state(index);
					}
					else if (0==strncmp(recv_data,"SERVERDATA",10))
					{
						char open_close_info[256];

						memset(open_close_info,0x0,sizeof(open_close_info));
						strcpy(open_close_info,recv_data+10);
						//接收到主控机发送过来的开关房服务器数据
						//必须用sendmessage()函数
						SendMessage(DM_RECV_SERVER_DATA,(WPARAM)open_close_info,NULL);
					}
					else if (0==strncmp(recv_data, "TAPESONGINFO", 12))
					{
						memset(conv_recv_data,0x0,sizeof(conv_recv_data));
						string_conv.utf8_to_widechar(recv_data + 12,conv_recv_data,sizeof(conv_recv_data)/sizeof(TCHAR));
						//解析录音信息，保存到数据库
						result = save_record_info_to_db(conv_recv_data);
						if (result)
						{
							int page_index = m_flash_manage.get_last_page_index();
							if (page_recording == page_index)
							{
								//如果是录音页面，刷新
								refresh_screen_list(true);
							}
						}
						m_str_slave_recorder_song_id.clear();
					}
					else if (0==strncmp(recv_data, "dj", 2))
					{
						int index = -1;
						sscanf(recv_data, "dj:%d", &index);
						if (index == 0)
						{
							m_allow_play_dj = false;
						} 
						else if (index == 1)
						{
							m_allow_play_dj = true;
						}
					}
					else if (0==strncmp(recv_data, "record", 6))
					{
						TCHAR args[256] = {0x00};
						sscanf(recv_data, "record:%s", args);
						if (0==_tcscmp(args,L"1"))
						{
							if (0==m_record_type)
							{
								//如果是半自动录音
								flash_message_call_recorder_audio_type(L"1",false);
							}
							else
							{
								m_open_record_type = 1;
								m_is_recording = true;
							}
						}
						else if (1==_tcscmp(args,L"1"))
						{
							if (0==m_record_type)
							{
								//如果是半自动录音
								flash_message_call_recorder_audio_type(L"2",false);
							}
							else
							{
								m_open_record_type = 0;
								m_is_recording = false;
							}
						}

						set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);
					}
					//2015-2-9 18:12:18--LTL
					else if (0==strncmp(recv_data,"MOBILECODE",10))    //移动点歌验证码
					{
						char encode_data[256];
						TCHAR login_code[256];

						memset(encode_data,0x0,sizeof(encode_data));
						memset(login_code,0x0,sizeof(login_code));

						strcpy(encode_data,recv_data+10);
						if (0==strcmp(encode_data,""))     //没有验证码
						{
							memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));
						}
						else
						{
							//生成主控的移动验证码
							string_conv.multibyte_to_widechar(encode_data,login_code,sizeof(login_code));
							if (0!=_tcscmp(login_code,m_ipad_login_code))
							{
								memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));
								_tcscpy(m_ipad_login_code,login_code);
								if (0!=_tcscmp(m_ipad_login_code,L""))
								{
									memset(m_encode_picture_path,0x0,sizeof(m_encode_picture_path));
									swprintf(m_encode_picture_path,L"%s\\qr_picture\\ipad_encode.png",m_work_path);
									//qr_picture
									Generate_encode_picture(encode_data,m_encode_picture_path);

									zoom_image(m_encode_picture_path,120,120,m_encode_picture_path,L"image/png",25,25);

								}
							}
						}
					}else if (0 == strncmp(recv_data, "WECHATCODE", 10)) //微信点歌验证码
					{
						get_wechat_song_encode_number(recv_data + 10);
					}else if (0 == strncmp(recv_data, "SET_IDLESSE_INDEX&", 18))
					{
						m_video_play_manager.set_cur_idlesse_video_number(atoi(&recv_data[18]));
					}else if (0 == strncmp(recv_data, "video", 5))
					{
						string_conv.multibyte_to_widechar(&recv_data[5], conv_recv_data, sizeof(conv_recv_data));
						if (m_is_recording)
						{
							stop_recorder_audio(false,false,false);
						}			

						flash_message_call_switch_screen_pc(conv_recv_data, true);
					}else if (0==strncmp(recv_data,"DRECORDSONG",11))   //删除已录歌曲
					{
						//删除选择歌曲
						TCHAR song_number[256];

						//得到删除的歌曲下标
						memset(song_number,0x0,sizeof(song_number));
						string_conv.multibyte_to_widechar(recv_data+11,song_number,sizeof(song_number));
						flash_message_call_delete_recorder_song_by_id(song_number);
					}
					else if (0==strncmp(recv_data,"maibarule",9))
					{
						parse_arena_rule_info(recv_data+9,1,0);
					}
					else if (0 == strncmp(recv_data, "PDRAGSORTSONG", 13))//拖动排序已选列表
					{
						int nOrigin = 0, nDestination = 0;
						string_conv.multibyte_to_widechar(recv_data+13,conv_recv_data,sizeof(conv_recv_data));
						CString strTmp = conv_recv_data;
						int nPos = strTmp.Find(_T('|'));
						//获取起始位置，终止位置
						nOrigin = _wtoi(strTmp.Left(nPos).GetBuffer());
						nDestination = _wtoi(strTmp.Mid(nPos+1).GetBuffer());

						result = flash_message_call_drag_sort_select_song(nOrigin, nDestination, true);
					}
					else if (0 == strncmp(recv_data, "ENTER_ACTIVITY|", 15))//收到主控进入活动页面
					{
						int nPageCode = 0;
						string_conv.multibyte_to_widechar(recv_data+15,conv_recv_data,sizeof(conv_recv_data));
						nPageCode = _wtoi(conv_recv_data);
						
						result = ShowOrHideCoverPage(nPageCode, true);
						if (!result)
						{
							WriteLog(__FL__, L"被控端显示遮挡页面失败");
						}
					}
					else if (0 == strncmp(recv_data, "LEAVE_ACTIVITY|", 15))//收到主控离开活动页面
					{
						int nPageCode = 0;
						string_conv.multibyte_to_widechar(recv_data+15,conv_recv_data,sizeof(conv_recv_data));
						nPageCode = _wtoi(conv_recv_data);

						result = ShowOrHideCoverPage(nPageCode, false);
						if (!result)
						{
							WriteLog(__FL__, L"被控端显示遮挡页面失败");
						}
					}
				}
			}
			catch (...)
			{

			}
		}
		break;
	case DM_SAVE_U_DISK_SONG:   //拷贝歌曲到U盘
		{
			switch(lParam)
			{
			case 1:  //开始拷贝
				{
					flash_show_tip_message(66);
				}
				break;
			case 2:  //拷贝成功
				{
					flash_show_tip_message(52);
				}
				break;
			case 3:  //拷贝失败
				{
					flash_show_tip_message(53);
				}
				break;
			case 4:  //拷贝失败
				{
					flash_show_tip_message(116);
				}
				break;
			default:
				break;
			}
		}
		break;
	case DM_DOORPLATE_ROOM_INFO:  //门牌机发送过来的消息
		{
			if (m_doorplate_window_exist&&m_doorplate_init_success)
			{
				TCHAR request[1024];
				bool result=false;

				memset(request,0x0,sizeof(request));

				//组织字符串
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"set_room_info",(TCHAR *)lParam);
				if (result)
				{
					//发送给flash窗口
					m_doorplate_flash_player.CallFunction(request);
				}
			}
		}
		break;
	case DM_FOOD_HANDLE_MSG:   //特殊需求，发送窗口句柄
		{
			m_drinks_window_handle = (HWND)lParam;
		}
		break;
	case DM_REAL_DUMP_MESSAGE:   //真实架子鼓的消息
		{
			flash_message_call_function((int)wParam);
		}
		break;
	default:
		break;
	}

	return CWnd::WindowProc(message, wParam, lParam);
}

void Cflashktv10Wnd::FlashCallShockwaveflash(LPCTSTR request)
{
	// TODO: 在此处添加消息处理程序代码
	TCHAR command[1024];
	TCHAR args[2048];
	CParserXml parser_xml;
	bool result=false;

	try
	{
		memset(command,0x0,sizeof(command));
		memset(args,0x0,sizeof(args));

		if (_tcslen(request)>=(sizeof(args)/2))
		{
			return;
		}
		//记录日志
		//WriteLog(__FL__, request);
		//设置键盘焦点到本窗口
		//yzg		SetFocus();
		//解析消息
		result = parser_xml.parser_flash_request_xml(request,command,args);
		if (!result)
		{
			return;
		}

		if ((0==_tcscmp(command, L"flash")) && (0==_tcscmp(args, L"begin")))
		{
			//显示形象页
			show_screen_top_image();
		}
		else if ((0==_tcscmp(command, L"init")) && (0==_tcscmp(args, L"finished")))
		{
			if (!m_flash_screen_init_finish)
			{
				//flash初始化完成
				m_flash_screen_init_finish = true;

				WriteLog(__FL__, L"flash界面初始化完成");
				//发送检索面板图片给flash
				//send_query_panel_to_flash();
				//发送国旗图片给flash
				//send_national_flag_to_flash();
				//发送意见图片给flash
				//send_opinion_image_to_flash();
				//发送公司logo
				send_ktv_logo_to_flash();
				//发送屏切图片给flash
				send_pinqie_image_to_flash();

				//发码
				TCHAR args[1024] = {0x00};
				TCHAR request[2048] = {0x00};
				swprintf(args, L"<data><info startButton=\"1\" screen=\"%d\"/></data>", m_screen_to_flash_timer);
				bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"screen_to_flash",args);
				if (result)
				{
					//发送大帮助文件到flash
					flash_message_call_service(L"6");
					flash_player_call_function(request);
					m_creen_to_flash_show = true;
				}

				//告诉flash是否打开四音轨
				swprintf(args, L"<data><info open=\"0\"/></data>");
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"open_four_track",args);
				if (result)
				{
					flash_player_call_function(request);
				}

				send_accompany_original_button_state();

				//是否开启弹出框服务
				if (m_server_pop_up_window)
				{
					set_button_show_state(OPEN_SERVER_WINDOW, true);
				}
				if (m_inter_screen_mode != 0)
				{
					//互动场景屏模式
					flash_message_call_inter_screen_config();
				}
				// 创建弹幕
				if (m_soft_decode_window_child_exist && m_bWechatBarrageOpen)
				{
					create_wechat_interaction_wnd();
				}
				song_info video_information;
				TCHAR para[256];
				TCHAR karaoke[256];
				TCHAR vocal[256];
				TCHAR guid[256];
				int   karaoke_state = 1;
				int   vocal_state = 1;
				int   midi_guid_state = 1;
				int   vocal_guid_state = 1;

				memset(request, 0x0, sizeof(request));
				memset(para, 0x0, sizeof(para));
				memset(karaoke, 0x0, sizeof(karaoke));
				memset(vocal, 0x0, sizeof(vocal));
				memset(guid, 0x0, sizeof(guid));

				enum PLAYER_PLAY_STATE player_state = m_video_play_manager.get_player_cur_state();
				//得到正在播放的歌曲
				m_video_play_manager.get_playing_video(video_information);

				//判断歌曲是否存在导唱
				if((BEGIN_STATE==player_state)||(IDLESSE_STATE==player_state)||(END_STATE==player_state)||(PLAY_MUSIC_ENJOY==video_information.get_video_type()))
				{
					m_select_song_accompany_original = 3;  //原唱
					_tcscpy(para, L"<data><info karaoke=\"1\" vocal=\"1\" midi_guid=\"0\" vocal_guid=\"0\" /></data>");
				}
				else
				{
					video_information.get_channel_track(true, vocal);
					video_information.get_channel_track(false, karaoke);
					video_information.get_guid_track(guid);
					if (0 == _tcscmp(vocal, karaoke))
					{
						vocal_state = 0;
						vocal_guid_state = 0;

					}
					if (0 == _tcscmp(guid, L"0"))
					{
						midi_guid_state = 0;
						m_select_song_accompany_original = 1;  //原唱
					}
					else if(0 == _tcscmp(guid, L"5"))
					{
						karaoke_state = 0;
						m_select_song_accompany_original = 0;  //原唱
					}
					else
					{
						m_select_song_accompany_original = 1;  //原唱
					}
					_stprintf(para, L"<data><info karaoke=\"%d\" vocal=\"%d\" midi_guid=\"%d\" vocal_guid=\"%d\" /></data>",
						karaoke_state, vocal_state, midi_guid_state, vocal_guid_state);
				}
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"track_button_state", para);
				if (result)
				{
					flash_player_call_function(request);
				}
				send_accompany_original_button_state();

				TCHAR room_info_text[512];
				memset(room_info_text,0x0,sizeof(room_info_text));

				//得到包房信息
				result = get_room_info(room_info_text);
				if (result)
				{
					//组织字符串
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"send_room_info",room_info_text);
					if (result)
					{
						//发送给flash窗口
						flash_player_call_function(request);
					}
				}

#ifdef DAO_QI_MOVIE
				config_file_manager config;
				bool bflag = config.read_boolean(L"room", L"show_hide", false);
				if(bflag)
					MsgControlFunction(MMCMSG_HIDE);
#endif // DAO_QI_MOVIE
				//初始化完成发送消息
				PostMessage(DM_FLASH_INITIALIZATIONF_FINISH,NULL,NULL);
			}
		}
		else if(m_flash_screen_init_finish)
		{
			//flash界面初始化完成才响应界面发送过来的消息
			//处理消息
			flash_message_call(command,args);
		}
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call(const TCHAR *command,const TCHAR * args)
{
	try
	{
		bool result=false;
		TCHAR request[2048];

		memset(request, 0, sizeof(request));

		/*********************************保护操作***************************************/
		if ((0==_tcscmp(command,L"microhpone_volume")) || (0==_tcscmp(command,L"tone_value")))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<0.5)
			{
				update_flash_audio_info();
				//提示不要频繁调节音效值
				flash_show_tip_message(18);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}
		else if (0==_tcscmp(command,L"music_volume"))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<0.5)
			{
				//音乐音量要更新两个地方
				update_flash_control_button();
				update_flash_audio_info();
				//提示不要频繁调节音效值
				flash_show_tip_message(18);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}
		else if ((0==_tcscmp(command,L"pinyin"))||(0==_tcscmp(command,L"zhuyin"))||(0==_tcscmp(command,L"language"))||(0==_tcscmp(command,L"word_count")) ||(0==_tcscmp(command,L"ink")))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
			{
				set_button_highlight_state(false);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}
		else if ((0==_tcscmp(command,L"number"))||(0==_tcscmp(command,L"insert"))||(0==_tcscmp(command,L"person"))||(0==_tcscmp(command,L"preview"))||(0==_tcscmp(command,L"era")))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
			{
				set_button_highlight_state(false);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}
		else if ((0==_tcscmp(command,L"song_preview"))||(0==_tcscmp(command,L"video")) || (0==_tcscmp(command,L"video_transfer")) || (0==_tcscmp(command,L"game"))||(0==_tcscmp(command,L"place_intro")))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
			{
				set_button_highlight_state(false);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}
		else if ((0==_tcscmp(command,L"newsong"))||(0==_tcscmp(command,L"opera"))||(0==_tcscmp(command,L"theme"))||(0==_tcscmp(command,L"singer_type"))||(0==_tcscmp(command,L"file")))
		{
			double last_time = m_avoid_cut_timer.last_time();
			if (last_time<AVOID_CUT_MIN_TIME_LENGTH)
			{
				set_button_highlight_state(false);
				return;
			}
			//重新开始计时
			m_avoid_cut_timer.start();
		}

		bool bEnter_block = false; //因函数块超过128个，造成编译器错误，先用此方法救急
		/*********************************消息响应********************************/
		if ((0==_tcscmp(command,L"slave"))&&(0==_tcscmp(args,L"finished")))
		{
			TCHAR width[64];
			TCHAR request[1024];

			memset(width,0x0,sizeof(width));
			memset(request,0x0,sizeof(request));

			//写日志
			WriteLog(__FL__, L"演唱台的控制条初始化完成");
			//使用第三块屏
			swprintf(width,L"%d",m_third_display_width);

			//告诉吧台屏的宽度
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"swfwidth",width);
			if (result && m_slave_window_flash_player_exist)
			{
				m_slave_window_flash_player.BringWindowToTop();
				m_slave_window_flash_player.ShowWindow(SW_SHOW);
				//不用发送，自适应
				//	m_slave_window_flash_player.CallFunction(request);
				//更新一下按钮状态
				update_flash_control_button();
				send_light_button_state();
			}
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"WallPanel"))&&(0==_tcscmp(args,L"finished")))
		{
			//墙面板flash界面初始化完成
			//写日志
			WriteLog(__FL__, L"墙面板flash界面初始化完成");
			//初始化完成之后再显示
			m_wall_panel_flash_player.BringWindowToTop();
			m_wall_panel_flash_player.ShowWindow(SW_SHOW);
			//更新一下按钮状态
			update_flash_control_button();
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"doorplate_init"))&&(0==_tcscmp(args,L"finish")))
		{
			TCHAR room_info_text[512];

			memset(room_info_text,0x0,sizeof(room_info_text));

			//写日志
			WriteLog(__FL__, L"门牌机flash界面初始化完成");
			//设置成功标示
			m_doorplate_init_success=true;
			//得到包房信息
			result = get_room_info(room_info_text); //发送给主窗口
			if (result)
			{
				SendMessage(DM_DOORPLATE_ROOM_INFO,NULL,(LPARAM)room_info_text);
			}
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"drinks_init"))&&(0==_tcscmp(args,L"finish")))
		{
			TCHAR room_info_text[512];
			TCHAR request[1024];
			bool result=false;

			memset(room_info_text,0x0,sizeof(room_info_text));
			memset(request,0x0,sizeof(request));

			//写日志
			WriteLog(__FL__, L"内嵌酒水flash界面初始化完成");
			//得到包房信息
			result = get_room_info(room_info_text);
			if (result)
			{
				//组织字符串
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"set_room_info",room_info_text);
				if (result)
				{
					//发送给flash窗口
					m_drinks_flash_player.CallFunction(request);
				}
			}
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"AD_init"))&&(0==_tcscmp(args,L"finish")))
		{
			TCHAR room_info_text[512];
			TCHAR request[1024];
			bool result=false;

			memset(room_info_text,0x0,sizeof(room_info_text));
			memset(request,0x0,sizeof(request));

			//写日志
			WriteLog(__FL__, L"AD屏幕界面初始化完成");
			//得到包房信息
			result = get_room_info(room_info_text);
			if (result)
			{
				//组织字符串
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"set_room_info",room_info_text);
				if (result)
				{
					//发送给flash窗口
					m_AD_flash_player.CallFunction(request);
				}
			}
			bEnter_block = true;
		}else if (0==_tcscmp(command, L"picture_mv_end")) //秀秀mv初始化
		{
			if (0 == _tcscmp(args, L"0"))
			{
				m_nFlashFinishCnt++;
			}
			else if (0 == _tcscmp(args, L"1"))
			{
				m_nFlashFinishCnt++;
			}
			if (m_inter_screen_exist && m_use_soft_active_flash)
			{
				// 告诉flash 播放倒计时
				if (m_nFlashFinishCnt == 2)
				{
					//显示照片mv
					picture_mv_play_song(&m_piture_mv_songInfo, 0);
					m_bPictureMvFlashFinish = true;
				}
			}
			else if (m_inter_screen_exist)
			{
				if (m_nFlashFinishCnt == 1)
				{
					//显示照片mv
					picture_mv_play_song(&m_piture_mv_songInfo, 1);
					m_bPictureMvFlashFinish = true;
				}
			}
			else if (m_use_soft_active_flash)
			{
				if (m_nFlashFinishCnt == 1)
				{
					//显示照片mv
					picture_mv_play_song(&m_piture_mv_songInfo, 2);
					m_bPictureMvFlashFinish = true;
				}
			}
			//控制flash音量
			flash_message_call_flash_volume(page_picture_mv);
		}
		else if ((0==_tcscmp(command,L"InteractiveGamePage"))&&(0!=_tcscmp(args,L"")))  //互动游戏页码
		{
			memset(m_interactive_game_page,0x0,sizeof(m_interactive_game_page));
			_tcscpy(m_interactive_game_page,args);
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"drinks"))&&(0==_tcscmp(args,L"exit")))
		{
			//内嵌酒水退出
			hide_plug_in_drinks();
			page_change(page_homepage);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"page_jump"))  //页面跳转
		{
			int page_number=0;
			int page_args=0;
			if (args)
			{
				//得到页面标识码
				string_conversion str_con;
				char szargs[16] = {0x00};

				str_con.widechar_to_multibyte(args, szargs, 16);
				char *p = strrchr(szargs, ':');
				if (p == NULL)
				{
					swscanf(args,L"%d",&page_number);
				}else{
					swscanf(args,L"%d:%d",&page_number, &page_args);
				}

				//正在pk是，不让进入
				if (m_b_pk_connect && page_number == page_movieMeun)
				{
					flash_show_tip_message(L"正在歌曲互动交友中,此功能暂未开放,敬请等待....");
					return;
				}
				flash_message_call_page_jump(page_number, page_args);
			}
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"page"))&&(0==_tcscmp(args,L"finish")))   //页面动画完成
		{
			//处理屏幕视频
			pc_show_video_window();

			//设置排序方式
			//	_tcscpy(m_show_sort_mode,L"hot");
			//	update_sort_button_state();
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"free_hand"))
		{
			TCHAR data[MAX_PATH] = {0x00};
			swprintf(data,L"<data><info str=\"1\"/></data>");
			//欢迎词
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pop_page",data);
			if (result)
			{
				flash_player_call_function(request);
			}
		}
		else if (0==_tcscmp(command,L"pop_up_page"))  //显示弹出页面
		{
			show_pop_up_page(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"function"))
		{
			//功能处理函数
			int function_code=0;

			swscanf(args,L"%d",&function_code);
#ifdef DON_GUAN_K_PLUS
			m_song_light_lock = false;
#else
			if (function_code != 120 && function_code!=124 && function_code!=125)
			{
				m_song_light_lock = false;
			}			
#endif // DON_GUAN_K_PLUS

			//做一下预处理
			result = protect_control_operate(function_code);
			if (!result)
			{
				//不进行保护，就响应
				flash_message_call_function(function_code);
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"lock_song_light"))
		{
			//功能处理函数
			int function_code=0;

			swscanf(args,L"%d",&function_code);
			m_song_light_lock = true;

			//做一下预处理 
			result = protect_control_operate(function_code);
			if (!result)
			{
				//不进行保护，就响应
				flash_message_call_function(function_code);
			}
		}
		else if (0 == _tcscmp(command,L"unlock_song_light"))
		{
			m_song_light_lock = false;
			m_song_light_lock_value = -1;

			send_light_button_state();
		}
		else if (0 == _tcscmp(command,L"function_lock"))
		{
			//功能处理函数
			int function_code=0;

			swscanf(args,L"%d",&function_code);
			m_song_audio_effect_lock = true;
			m_lock_function_code_value = function_code;

			//做一下预处理 
			result = protect_control_operate(function_code);
			if (!result)
			{
				//不进行保护，就响应
				flash_message_call_function(function_code,0);
			}
			bEnter_block = true;
		} 
		else if (0==_tcscmp(command,L"unlock"))
		{
			m_song_audio_effect_lock = false;
			m_lock_function_code_value = -1;
			m_lock_audio_effect_value = -1;
			send_audio_effect_button_state();
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"video_rectangle"))   //PC视频窗口位置
		{
			int x_pos=0;
			int y_pos=0;
			int width=0;
			int height=0;
			bool result=false;

			//解析坐标字符串，得到坐标和高宽
			result = parse_coordinate_string(args,x_pos,y_pos,width,height);
			if (result)
			{
				m_video_left_top_x = x_pos;
				m_video_left_top_y = y_pos;
				m_video_right_button_x = x_pos+width;
				m_video_right_button_y = y_pos+height;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"handwriting_rectangle"))   //手写窗口位置
		{
			int x_pos=0;
			int y_pos=0;
			int width=0;
			int height=0;
			bool result=false;

			//解析坐标字符串，得到坐标和高宽
			result = parse_coordinate_string(args,x_pos,y_pos,width,height);
			if (result && m_handwriting_window_exist)
			{
				//移动手写窗口
				m_handwriting_window_left_x = x_pos;
				m_handwriting_window_top_y = y_pos;
				m_handwriting_window_right_x = x_pos+width;
				m_handwriting_window_bottom_y = y_pos+height;
				//改变手写板颜色
				change_handwriting_window_color();
				//改变手写窗口的位置
				move_handwriting_window_pos();
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"preview_rectangle"))    //预览窗口的位置
		{
			int x_pos=0;
			int y_pos=0;
			int width=0;
			int height=0;
			bool result=false;

			//解析坐标字符串，得到坐标和高宽
			result = parse_coordinate_string(args,x_pos,y_pos,width,height);
			if (result)
			{
				m_preview_left_top_x = x_pos;
				m_preview_left_top_y = y_pos;
				m_preview_right_bottom_x = x_pos+width;
				m_preview_right_bottom_y = y_pos+height;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"screen_show_rectangle"))      //屏切视频窗口的位置
		{
			int x_pos=0;
			int y_pos=0;
			int width=0;
			int height=0;
			bool result=false;

			//解析坐标字符串，得到坐标和高宽
			result = parse_coordinate_string(args,x_pos,y_pos,width,height);
			if (result)
			{
				m_switch_screen_left_top_x = x_pos;
				m_switch_screen_left_top_y = y_pos;
				m_switch_screen_right_button_x = x_pos+width;
				m_switch_screen_right_button_y = y_pos+height;
			}
			//游戏位置和屏切位置相同
			if (m_local_game_flash_player_exist)
			{
				//移动窗口到合适位置
				m_local_game_flash_player.MoveWindow(x_pos,y_pos,width,height,TRUE);
				m_local_game_flash_player.ShowWindow(SW_HIDE);
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"painting_rectangle"))  //绘图区域
		{
			int x_pos=0;
			int y_pos=0;
			int width=0;
			int height=0;
			bool result=false;

			//解析坐标字符串，得到坐标和高宽
			result = parse_coordinate_string(args,x_pos,y_pos,width,height);
			if (result)
			{
				m_painting_area_left_x = x_pos;
				m_painting_area_top_y = y_pos;
				m_painting_area_right_x = width;
				m_painting_area_bottom_y = height;
			}
			bEnter_block = true;
		}
		else if (m_find_dog_success && (0==_tcscmp(command,L"tone_value")))
		{
			//改变音调
			int tune=0;
			int music_volume=0;
			int microphone_volume=0;
			int src_tune=0;
			TCHAR send_data[1024];
			int adjust_count=0;

			memset(send_data,0x0,sizeof(send_data));

			swscanf(args,L"%d",&tune);

			if (2==m_master_slave_control_flag)
			{
				//被控机，传给主控机
				swprintf(send_data,L"TUNECHANGE%s",args);
				send_master_slave_data(send_data,NULL);

				return;
			}

			//得到原有的音量
			m_player_manager.get_volume_tune(music_volume,microphone_volume,src_tune);
			tune  = m_player_manager.change_tune(TUNE_SET_VALUE_FLAG,tune,m_control_change_tone);
			if (src_tune!=tune)
			{
				//音调已经变化
				update_flash_audio_info();
				//显示控制osd
				if (src_tune>tune)
				{
					//降调
					result = show_control_osd(CONTROL_OSD__TUNE_DOWN);
					//发送给中控盒
					adjust_count = src_tune-tune;
					if ((adjust_count>0)&&(!m_control_change_tone))
					{
						write_com_data(COM_SEND_TUNE_DOWN,adjust_count);
					}
				}
				else
				{
					//升调
					result = show_control_osd(CONTROL_OSD__TUNE_UP);
					//发送给中控盒
					adjust_count = tune-src_tune;
					if ((adjust_count>0)&&(!m_control_change_tone))
					{
						write_com_data(COM_SEND_TUNE_UP,adjust_count);
					}
				}
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
			}			
			bEnter_block = true;
		}
		else if (m_find_dog_success && (0==_tcscmp(command,L"music_volume")))  //调节转盘的音乐音量
		{
			PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
			if ((VIDEO_TYPE_SONG==tv_play_video_type)&&m_lock_public_video_volume &&(PLAY_SONG_TYPE_IDLESSE==video_type))
			{
				//flash界面初控制按钮始化
				update_flash_control_button();
				//更新声音信息
				update_flash_audio_info();
				//锁定空闲歌曲音量
				flash_show_tip_message(87);
				return;
			}

			int set_volume=0;
			int music_volume=0;
			int microphone_volume=0;
			int tune=0;
			TCHAR send_data[1024];
			int adjust_count=0;
			int music_volume_max=100;
			int music_volume_min=0;
			int music_volume_step=5;

			memset(send_data,0x0,sizeof(send_data));

			swscanf(args,L"%d",&set_volume);

			if (2==m_master_slave_control_flag)
			{
				//被控机，传给主控机
				swprintf(send_data,L"MUSICVOLUME%s",args);
				send_master_slave_data(send_data,NULL);
				//return;
			}
			//得到音乐音量的信息
			m_player_manager.get_music_volume_info(music_volume_max,music_volume_min,music_volume_step);
			//得到原有的音量
			m_player_manager.get_volume_tune(music_volume,microphone_volume,tune);
			//改变音量
			m_player_manager.change_music_volume(VOLUME_SET_FLAG,set_volume);
			//flash界面初控制按钮始化
			update_flash_control_button();
			//更新声音信息
			update_flash_audio_info();
			//显示控制osd
			if (m_adjust_amplifier_volume && (music_volume_max==music_volume)&&(set_volume>=music_volume_max))
			{
				//继续调整功放
				write_com_data(COM_SEND_MUSIC_VOLUME_UP);
			}
			else if(m_adjust_amplifier_volume && (music_volume_min==music_volume)&&(set_volume<=music_volume_min))
			{
				//继续调整功放
				write_com_data(COM_SEND_MUSIC_VOLUME_DOWN);
			}
			else if (music_volume>set_volume)
			{
				//音乐音量降低
				result = show_control_osd(CONTROL_OSD__VOLUME_DOWN);
				//发送给中控盒
				adjust_count = (music_volume-set_volume)/music_volume_step;
				if (m_adjust_amplifier_volume&&(adjust_count>0))
				{
					//如果调整功放发送给中控盒
					write_com_data(COM_SEND_MUSIC_VOLUME_DOWN,adjust_count);
				}
			}
			else
			{
				//音乐音量调高
				result = show_control_osd(CONTROL_OSD__VOLUME_UP);
				//发送给中控盒
				adjust_count = (set_volume-music_volume)/music_volume_step;
				if (m_adjust_amplifier_volume&&(adjust_count>0))
				{
					//如果调整功放发送给中控盒
					write_com_data(COM_SEND_MUSIC_VOLUME_UP,adjust_count);
				}
			}
			//电视上显示音量进度
			show_volume_bar_on_tv(MUSIC_VOLUMN_BAR);
			//启动控制osd播放时间的定时器
			set_control_osd_show_timer();
			//启动停止播放bmp图片的定时器
			set_bmp_picture_show_timer(5000);
			//音量变化时控制flash音量
			int page_code = m_flash_manage.get_last_page_index();
			flash_message_call_flash_volume(page_code);

			bEnter_block = true;
		}
		else if (m_find_dog_success && (0==_tcscmp(command,L"microhpone_volume")))  //调节转盘的麦克风音量
		{
			int set_volume=0;
			int music_volume=0;
			int microphone_volume=0;
			int tune=0;
			TCHAR send_data[1024];
			int adjust_count=0;
			int microphone_max=100;
			int microphone_min=0;
			int microphone_step=5;

			memset(send_data,0x0,sizeof(send_data));

			swscanf(args,L"%d",&set_volume);

			if (2==m_master_slave_control_flag)
			{
				//被控机，传给主控机
				swprintf(send_data,L"MICROPHONEVOLUME%s",args);
				send_master_slave_data(send_data,NULL);

				return;
			}
			//得到麦克音量的信息
			m_player_manager.get_microphone_volume_info(microphone_max,microphone_min,microphone_step);
			//得到原有的音量
			m_player_manager.get_volume_tune(music_volume,microphone_volume,tune);
			//改变音量
			m_player_manager.change_microphone_volume(VOLUME_SET_FLAG,set_volume);

			//更新声音信息
			update_flash_audio_info();
			if ((microphone_max==microphone_volume)&&(set_volume>=microphone_max))
			{
				//已经是最大值，继续调整功放
				write_com_data(COM_SEND_MICROPHONE_VOLUME_UP);
			}
			else if ((microphone_min==microphone_volume)&&(set_volume<=microphone_min))
			{
				//已经是最小值，继续调整功放
				write_com_data(COM_SEND_MICROPHONE_VOLUME_DOWN);
			}
			else if (microphone_volume>set_volume)
			{
				//麦克音量调低
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__MICROPHONE_VOLUME_DOWN);
				//发送给中控盒
				adjust_count = (microphone_volume-set_volume)/microphone_step;
				if (adjust_count>0)
				{
					write_com_data(COM_SEND_MICROPHONE_VOLUME_DOWN,adjust_count);
				}
			}
			else
			{
				//麦克音量调高
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__MICROPHONE_VOLUME_UP);
				//发送给中控盒
				adjust_count = (set_volume-microphone_volume)/microphone_step;
				if (adjust_count>0)
				{
					write_com_data(COM_SEND_MICROPHONE_VOLUME_UP,adjust_count);
				}
			}
			//启动控制osd播放时间的定时器
			set_control_osd_show_timer();
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"pinyin"))  //拼音点歌
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:          //歌名点歌
			case page_theme_song:          //主题点歌
			case page_new_theme_song:
			case page_class:          //分类点歌
			case page_singer_song:    //具体歌星歌曲列表
			case page_new_song:       //新歌页面
			case page_opera:          //戏曲页面
			case page_language:       //语种点歌
			case page_movie_song:     //影视金曲
			case page_era_song:       //年代金曲
			case page_search_song:    //搜索歌曲
			case page_pkjx:          //pk精选
			case page_word_count:   //字数点歌
			case page_hdmi:         //高清专区
			case page_write:           //手写点歌
			case page_fast_songs_slow_dance: //劲曲漫舞
			case page_sb_free_pk:		//自由PK
			case page_sb_ranking_polite://上榜有礼
			case page_sb_challenge_pk: //擂台pk
			case page_voice_china:     //中国好声音
			case page_yunadd_song:
				{
					flash_message_call_song_pinyin(song_select_expr,args);
				}
				break;
			case page_singer:         //歌星点歌
			case page_custom_singer:  //场所歌星
			case page_voice_china_singer:
				{
					flash_message_call_singer_pinyin(args);
				}
				break;
			case page_top_song:      //排行页面
				{
#ifdef DON_GUAN_K_PLUS
					if (m_language_button_number == 7)
					{
						flash_message_call_song_pinyin(song_select_expr,args);
					}
					else
					{
						flash_message_call_song_pinyin(top_song_select_expr,args);
					}
#else
					flash_message_call_song_pinyin(top_song_select_expr,args);
#endif

				}
				break;
			case page_movie:    //电影页面
			case page_concert:  //演唱会
			case page_place_video:  //场所视频
				{
					flash_message_call_movie_pinyin(args);
				}
				break;
			case page_member_song:  //会员歌曲页面
				{
					flash_message_call_member_song_pinyin(args);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"zhuyin"))   //台湾注音
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:          //歌名点歌
			case page_theme_song:          //主题点歌
			case page_new_theme_song:
			case page_class:          //分类点歌
			case page_singer_song:    //具体歌星歌曲列表
			case page_new_song:       //新歌页面
			case page_opera:          //戏曲页面
			case page_language:       //语种点歌
			case page_movie_song:     //影视金曲
			case page_era_song:       //年代金曲
			case page_word_count:   //字数点歌
			case page_hdmi:         //高清专区
			case page_fast_songs_slow_dance: //劲曲漫舞
			case page_sb_free_pk:		//自由PK
			case page_sb_ranking_polite://上榜有礼
			case page_sb_challenge_pk: //擂台pk
			case page_yunadd_song:
				{
					flash_message_call_song_query(song_select_expr,args,SONG_LANGUAGE_ZHUYIN);
				}
				break;
			case page_top_song:      //排行页面
				{
					flash_message_call_song_query(top_song_select_expr,args,SONG_LANGUAGE_ZHUYIN);
				}
				break;
			case page_movie:    //电影页面
			case page_concert:  //演唱会
			case page_place_video:  //场所视频
				{
					flash_message_call_movie_query(args,SONG_LANGUAGE_ZHUYIN);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"menggu"))   //蒙文
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:          //歌名点歌
			case page_theme_song:          //主题点歌
			case page_new_theme_song:
			case page_class:          //分类点歌
			case page_singer_song:    //具体歌星歌曲列表
			case page_new_song:       //新歌页面
			case page_opera:          //戏曲页面
			case page_language:       //语种点歌
			case page_movie_song:     //影视金曲
			case page_era_song:       //年代金曲
			case page_word_count:   //字数点歌
			case page_hdmi:         //高清专区
			case page_fast_songs_slow_dance: //劲曲漫舞
			case page_sb_free_pk:		//自由PK
			case page_sb_ranking_polite://上榜有礼
			case page_sb_challenge_pk: //擂台pk
				{
					flash_message_call_song_query(song_select_expr,args,SONG_LANGUAGE_MONGOLIA);
				}
				break;
			case page_top_song:      //排行页面
				{
					flash_message_call_song_query(top_song_select_expr,args,SONG_LANGUAGE_MONGOLIA);
				}
				break;
			case page_singer:     //歌星页面
			case page_voice_china_singer:
				{
					flash_message_call_singer_query(args,SONG_LANGUAGE_MONGOLIA);
				}
				break;
			case page_movie:      //电影页面
			case page_concert:  //演唱会
			case page_place_video:  //场所视频
				{
					flash_message_call_movie_query(args,SONG_LANGUAGE_MONGOLIA);
				}
				break;
			case page_proposal:    //电子调查
				{
					flash_message_call_mongolia_input_opinion(args);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"japanese"))  //日文
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}

			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:       //歌名点歌
			case page_language:    //语种点歌
			case page_singer_song: //歌星具体歌曲页面
			case page_search_song: //搜索歌曲
			case page_new_song:    //新歌推荐
			case page_theme_song:  //主题歌曲
			case page_new_theme_song:
			case page_opera:       //戏曲
			case page_pkjx:        //pk精选
			case page_hdmi:         //高清专区
			case page_write:
			case page_fast_songs_slow_dance: //劲曲漫舞
			case page_sb_free_pk:		//自由PK
			case page_sb_ranking_polite://上榜有礼
			case page_sb_challenge_pk: //擂台pk
			case page_movie_song:
				{
					flash_message_call_song_japanese(song_select_expr,args);
				}
				break;
			case page_top_song:  //歌曲排行
				{
					flash_message_call_song_japanese(top_song_select_expr,args);
				}
				break;
			case page_singer:    //歌星点歌
			case page_voice_china_singer:
				{
					flash_message_call_singer_japanese(args);
				}
				break;
			case page_movie:  //电影
			case page_place_video:  //场所视频
			case page_concert:     //演唱会
				{
					flash_message_call_movie_japanese(args);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"filter_song"))
		{
			flash_message_call_query_song_type(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"language"))  //语种查询
		{
			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}
			flash_message_call_language(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"language_page"))  //语种查询
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}
			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_language!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_language);
			}

			m_word_count_button_number = 0;
			m_song_version_button_number = 0;

			flash_message_call_language(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"language_topsong"))  //排行
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}
			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_top_song!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_top_song);
			}

			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
			flash_message_call_language(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"panelLanguage"))   //中日韩检索面板切换
		{
			int page_index=0;

			//得到页面
			page_index = m_flash_manage.get_last_page_index();
			if(0==_tcscmp(args,L"jap"))
			{
				//日文检索
				m_query_panel_language = SONG_LANGUAGE_JAPANESE;
			}
			else if (0==_tcscmp(args,L"korean"))
			{
				//韩文检索
				m_query_panel_language = SONG_LANGUAGE_KOREAN;
			}
			else
			{
				//中文检索
				m_query_panel_language = SONG_LANGUAGE_CHINESE;
			}
			switch(page_index)
			{
			case page_top_song:
				{
					if (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty())
					{
						//清空检索条件
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].operation_symbols = L" like \"";
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].wildcard = L"%\"";
						//重新检索
						song_query_two_show_data(top_song_select_expr);
					}
				}
				break;
			case page_singer:
			case page_voice_china_singer:
				{
					if (!singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.empty())
					{
						//清空检索条件
						singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].operation_symbols = L" like \"";
						singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
						singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].wildcard = L"%\"";
						//重新检索
						singer_query_show_data();
					}
				}
				break;
			case page_movie:
			case page_concert:  //演唱会
			case page_place_video:  //场所视频
			case page_member_song:
				break;
			default:
				{
					if (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty())
					{
						//清空检索条件
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].operation_symbols = L" like \"";
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
						song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].wildcard = L"%\"";
						//重新检索
						song_query_two_show_data(song_select_expr);
					}
				}
				break;
			}

			//m_word_count_button_number = 0;
			//m_song_version_button_number = 0;
			//清空语种查询的日语条件
			m_japanese_enlish_stroke.clear();
			//清空显示的字符
			show_letter_window(L"");
			bEnter_block = true;
		} 
		else if (0==_tcscmp(command,L"word_count"))  //字数查询
		{
			int page_index=0;

			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}

			page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:          //歌名点歌
			case page_theme_song:          //主题点歌
			case page_new_theme_song:
			case page_class:          //分类点歌
			case page_singer_song:    //具体歌星歌曲列表
			case page_new_song:       //新歌页面
			case page_opera:          //戏曲页面
			case page_language:       //语种点歌
			case page_movie_song:     //影视金曲
			case page_era_song:       //年代金曲
			case page_search_song:    //搜索歌曲
			case page_word_count:     //字数点歌
			case page_hdmi:         //高清专区
			case page_write:
			case page_fast_songs_slow_dance: //劲舞漫曲
			case page_voice_china:  //好声音
			case page_yunadd_song:
				{
					flash_message_call_song_word_count(song_select_expr,args);
				}
				break;
			case page_singer:         //歌星点歌
			case page_custom_singer:  //场所歌星
			case page_voice_china_singer:
				{
					flash_message_call_singer_word_count(args);
				}
				break;
			case page_top_song:    //排行页面
				{
					flash_message_call_song_word_count(top_song_select_expr,args);
				}
				break;
			case page_movie:   //电影查询
			case page_concert:  //演唱会
			case page_place_video:  //场所视频
				{
					flash_message_call_movie_word_count(args);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"query_board"))     //手写面板显示隐藏
		{
			flash_message_call_query_board_change(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,_T("ink")))     //选择手写识别的字
		{
			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}
			flash_message_call_select_recognize_word(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"recommend_number"))  //选推荐歌曲
		{
			//不分页面
			flash_message_call_recommend_select_song(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"number") || 0 == _tcscmp(command,L"down_song") || 0==_tcscmp(command,L"update_song"))  //选歌曲
		{
			if (!m_find_dog_success)
			{
				//没有找到加密狗
				if (0==_tcscmp(m_dog_tip_info,L""))
				{
					flash_show_tip_message(17);
				}
				else
				{
					flash_show_tip_message(m_dog_tip_info);
				}
				return;
			}
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房状态，不能选歌曲
				flash_show_tip_message(16);
				return;
			}

			int page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_title:        //歌名点歌页面
			case page_singer_song:  //具体歌星歌曲列表
			case page_lyric:        //歌词检索页面
			case page_theme_song:        //主题检索页面
			case page_new_theme_song:
			case page_class:        //分类点歌页面
			case page_top_song:     //排行页面
			case page_new_song:     //新歌页面
			case page_opera:        //戏曲页面
			case page_language:     //语种点歌
			case page_movie:        //电影页面
			case page_concert:      //演唱会
			case page_place_video:  //场所视频
			case page_member_song:  //会员歌曲页面
			case page_movie_song:   //影视金曲
			case page_era_song:     //年代金曲
			case page_number_song:  //编号点歌
			case page_search_song:  //搜索歌曲
			case page_write:        //手写点歌
			case page_pkjx:         //pk精选
			case page_hdmi:         //高清专区
			case page_word_count:   //字数点歌  
			case page_fast_songs_slow_dance: //劲舞漫曲
			case page_sb_challenge_pk:
			case page_sb_free_pk:
			case page_sb_ranking_polite:
			case page_voice_china:   //好声音
			case page_yunadd_song:
				{	
					//flash_message_call_select_song(args,false,false,false);
					if (0==_tcscmp(command,L"down_song"))
					{
						flash_message_call_select_song(args,false,false,false,1);
					}
					else if (0==_tcscmp(command,L"update_song"))
					{
						flash_message_call_select_song(args,false,false,false,2);
					}
					else
					{
						flash_message_call_select_song(args,false,false,false);
					}
				}
				break;
			case page_recording:    //录音页面
				{
					if (MYRECORDSHARE ==  m_request_song_type)
					{
						flash_message_call_maiba_song(args,false,false);
					}
					else
					{
						flash_message_call_select_song(args,true,false, false);
						//flash_message_call_recorder_select_song(args,false);
					}
				}
				break;
			case page_singed:      //已唱页面
				{
					flash_message_call_select_song(args,false,true,true);
				}
				break;
			case page_U_disk:    //U盘点歌页面
				{
					flash_message_call_U_disk_select_song(args);
				}
				break;
			case page_dekaron_maiba:  //挑战麦霸
				{
					//设置挑战麦霸点歌
					m_request_arena_one_song = true;
					_tcscpy(m_request_arena_song_id,args);

					flash_message_call_dekaron_song(args,false,false);
				}
				break;
			case page_kala_share:     //K歌分享
			case page_find_maiba:	 //发现麦霸
				{
					//代表是点歌
					m_request_arena_one_song = true;
					_tcscpy(m_request_arena_song_id,args);
					flash_message_call_get_web_select_song(args);


					//flash_message_call_maiba_song(args,false,false);
				}
				break;
			case page_baidu_music:
			case page_qq_music:
			case page_kugou_music:
			case page_kuwo_music:
				{
					flash_message_call_music_enjoy(page_index, args);
				}
				break;
			case page_trend_list://潮流榜单
				{
					flash_message_call_trend_list(page_index, args);
				}
				break;
			default:
				break;
			}
			////
			refresh_screen_list();
			if (page_index != page_listen_knowledge_song)
			{
				// 刷新互动场景屏歌星图片
				flash_message_call_singer_pic();
			}
			// 刷新互动场景屏节目图片
			flash_message_call_program_pic();
			///////*/
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"song_number"))
		{
			//编号选歌曲
			if (!m_find_dog_success)
			{
				//没有找到加密狗
				if (0==_tcscmp(m_dog_tip_info,L""))
				{
					flash_show_tip_message(17);
				}
				else
				{
					flash_show_tip_message(m_dog_tip_info);
				}
				return;
			}
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房状态，不能选歌曲
				flash_show_tip_message(16);
				return;
			}
			//2015-3-18 15:44:47---add--by---LTL
			if(m_user_select_song)
			{
				//用户选择过歌曲之后，清空所有查询条件
				clear_query_condition_by_page();
				//改变标示
				m_user_select_song = false;
			}
			flash_message_call_number_select_song(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"insert_select_song"))  //优先已选列表
		{
			if (!m_find_dog_success)
			{
				//没有找到加密狗
				if (0==_tcscmp(m_dog_tip_info,L""))
				{
					flash_show_tip_message(17);
				}
				else
				{
					flash_show_tip_message(m_dog_tip_info);
				}
				return;
			}
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房状态，不能选歌曲
				flash_show_tip_message(16);
				return;
			}

			flash_message_call_priority_select_song(args,false);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"insert"))    //优先歌曲
		{
			if (!m_find_dog_success)
			{
				//没有找到加密狗
				if (0==_tcscmp(m_dog_tip_info,L""))
				{
					flash_show_tip_message(17);
				}
				else
				{
					flash_show_tip_message(m_dog_tip_info);
				}
				return;
			}
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房状态，不能选歌曲
				flash_show_tip_message(16);
				return;
			}

			int page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_selected:    //选择歌曲列表
				{ 
					//TODO:歌曲列表优先
					//判断是否给对方优先歌曲同步
					if (m_b_pk_connect)
					{
						//发送消息给连接的ip
						TCHAR send_ip[256];
						song_info song_info_class;
						TCHAR song_id[128]; 
						TCHAR send_priority_song[256];
						TCHAR postion[10];
						int number = 0;
						int row = 0;
						int cur_page_number = 0;
						int toatl_page_count = 0;
						memset(song_id,0x0,sizeof(song_id));
						memset(send_ip,0x0,sizeof(send_ip));
						memset(send_priority_song,0x0,sizeof(send_priority_song));	
						memset(postion,0x0,sizeof(postion));


						//得到选择的编号
						swscanf(args,L"%d",&number);

						if (0 != _tcscmp(m_pk_invitationIP,L""))
						{
							_tcscpy(send_ip,m_pk_invitationIP);
						}
						if (0 != _tcscmp(m_pk_acceptIP,L""))
						{
							_tcscpy(send_ip,m_pk_acceptIP);
						}
						//得到当前歌曲的绝对位置
						//得到当前的页数
						m_video_play_manager.get_page_row_info(row,cur_page_number,toatl_page_count,SHOW_SELECT_SONG);
						number += (cur_page_number - 1) * 9;
						swprintf(postion,L"%d",number);
						_tcscpy(send_priority_song,_T("priority_song2"));
						_tcscat(send_priority_song,postion); 

						connect_inviation(send_ip,send_priority_song);  //优先歌曲
					}

					//照片mv歌曲做处理
					if(m_st_picture_mv_vec.size() > 0)
					{
						song_info songinfo;
						TCHAR szSongID[MAX_PATH] = {0x0};
						TCHAR szChange_song_id[MAX_PATH] = {0x00};
						m_video_play_manager.get_select_song_information(songinfo, _ttoi(args), false);

						vector<ST_PICTURE_MV*>::iterator it = m_st_picture_mv_vec.begin();
						while(it != m_st_picture_mv_vec.end())
						{
							ST_PICTURE_MV *spm = *it;

							spm->songInfo.get_song_id(szSongID);
							songinfo.get_song_id(szChange_song_id);

							if (_tcscmp(szSongID ,szChange_song_id) == 0)
							{
								m_st_picture_mv_vec.erase(it);
								m_st_picture_mv_vec.insert(m_st_picture_mv_vec.begin(), spm);
								break;
							}
							it++;
						}
					}

					flash_message_call_priority_select_song(args,false);
				}
				break;
			case page_title:        //歌名点歌
			case page_singer_song:  //具体歌星歌曲页面
			case page_lyric:        //歌词检索页面
			case page_theme_song:        //主题检索页面
			case page_new_theme_song:
			case page_class:        //分类点歌
			case page_top_song:     //排行页面
			case page_new_song:     //新歌页面
			case page_opera:        //戏曲页面
			case page_language:     //语种点歌
			case page_member_song:  //会员歌曲页面
			case page_recording:    //录音页面
			case page_movie:        //电影页面
			case page_concert:      //演唱会
			case page_place_video:  //场所视频
			case page_movie_song:   //影视金曲
			case page_era_song:     //年代金曲
			case page_number_song:  //编号点歌
			case page_search_song:  //搜索歌曲
			case page_write:        //手写点歌
			case page_pkjx:         //pk精选
			case page_word_count:   //字数点歌
			case page_hdmi:         //高清专区
			case page_fast_songs_slow_dance: //迪曲漫舞
			case page_sb_ranking_polite: //我要参加 - 上榜有礼
			case page_sb_free_pk:		 //我要参加 - 自由pk
			case page_sb_challenge_pk:	 //我要参加 - 擂台pk
			case page_voice_china:     //好声音
			case page_yunadd_song:
				{
					flash_message_call_select_song(args,true,false,false);
#ifdef SAN_JI_SMART_HOME_SYSTEM
					//立即播放  
					flash_message_call_function(SONG_NEXT);
#endif
				}
				break;
			case page_singed:     //已唱页面
				{
					flash_message_call_select_song(args,true,true,false);
#ifdef SAN_JI_SMART_HOME_SYSTEM
					//立即播放  
					flash_message_call_function(SONG_NEXT);
#endif
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"drag_sort_select_song"))//拖动排序已选歌曲
		{
			if (!m_find_dog_success)
			{
				//没有找到加密狗
				if (0==_tcscmp(m_dog_tip_info,L""))
				{
					flash_show_tip_message(17);
				}
				else
				{
					flash_show_tip_message(m_dog_tip_info);
				}
				return;
			}
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房状态，不能选歌曲
				flash_show_tip_message(16);
				return;
			}
			int nOrigin = 0, nDestination = 0;
			swscanf(args, L"%d|%d", &nOrigin, &nDestination);

			int page_index = m_flash_manage.get_last_page_index();
			if (page_index == page_selected)
			{
				flash_message_call_drag_sort_select_song(nOrigin, nDestination, false);
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"person"))    //收藏
		{

			if (m_member_already_login)
			{
				if (m_member_song_count>=MEMBER_MAX_SONG_COUNT)
				{
					//提示会员歌曲数已经达到最大值
					flash_show_tip_message(27);
				}
				else
				{
					//如果会员已经登录加入到会员歌曲中
					flash_message_call_person_song(args,false);
				}
			}
			else
			{
				//没有登录，做提示
				flash_show_tip_message(26);
			}

			/*
			if (-1 == m_activate_vip_button)
			{
			//没有登录，做提示
			flash_show_tip_message(26);
			}
			else
			{
			//进行收藏
			flash_message_call_person_song(args,false);
			}
			*/
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"flowers"))
		{
			if (-1 == m_activate_vip_button)
			{
				//没有登录，做提示
				flash_show_tip_message(120);
			}
			else
			{
				//献花
				flash_message_call_flowers_song(args,false);
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"preview"))    //预览歌曲
		{
			//歌曲预览
			if (!g_dog_open_function.preview)
			{
				//没有开通预览功能
				flash_show_tip_message(30);
				return;
			}
			if (VIDEO_TYPE_LOBBY_LIVE==pc_play_video_type)
			{
				//如果现在是大厅直播，不能进行预览，切换到歌曲视频
				switch_screen_play_song_video();
			}
			//预览该歌曲
			flash_message_call_preview_song(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"delete"))   //删除歌曲
		{
			//删除已选歌曲中的歌曲
			//flash_message_call_delete_select_song(args);
			//return;

			int page_index = m_flash_manage.get_last_page_index();
			switch(page_index)
			{
			case page_selected:  //已选歌曲页面
				{
					//判断是否给对方删除歌曲
					if (m_b_pk_connect)
					{
						//发送消息给连接的ip
						TCHAR send_ip[256];
						song_info song_info_class;
						TCHAR song_id[128]; 
						TCHAR send_delete_song[256];
						TCHAR postion[10];
						int number = 0;
						int row = 0;
						int cur_page_number = 0;
						int toatl_page_count = 0;
						memset(song_id,0x0,sizeof(song_id));
						memset(send_ip,0x0,sizeof(send_ip));
						memset(send_delete_song,0x0,sizeof(send_delete_song));	
						memset(postion,0x0,sizeof(postion));


						//得到选择的编号
						swscanf(args,L"%d",&number);

						if (0 != _tcscmp(m_pk_invitationIP,L""))
						{
							_tcscpy(send_ip,m_pk_invitationIP);
						}
						if (0 != _tcscmp(m_pk_acceptIP,L""))
						{
							_tcscpy(send_ip,m_pk_acceptIP);
						}

						//得到当前歌曲的绝对位置
						//得到当前的页数
						m_video_play_manager.get_page_row_info(row,cur_page_number,toatl_page_count,SHOW_SELECT_SONG);
						number += (cur_page_number - 1) * 9;
						swprintf(postion,L"%d",number);
						_tcscpy(send_delete_song,_T("delete_songs_1"));
						_tcscat(send_delete_song,postion); 


						connect_inviation(send_ip,send_delete_song);  //删除歌曲
					}
					//删除已选歌曲中的歌曲
					flash_message_call_delete_select_song(args);
				}
				break;
			case page_recording:  //录音页面
			case page_sb_ranking_polite: //我要参加-上榜有礼
			case page_sb_free_pk:		//我要参加-自由PK
			case page_sb_challenge_pk:	//我要参加-擂台PK
				{
					flash_message_call_delete_recorder_song(m_delete_record_idx.c_str());
				}
				break;
			case page_member_song:   //会员歌曲页面
				{
					//删除私房歌曲
					flash_message_call_delete_person_song(args);
					//flash_message_call_delete_private_song(args);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"DelSelSong"))
		{
			//删除已选歌曲中的歌曲
			flash_message_call_delete_select_song(args);
			bEnter_block = true;
		}
		//else if (0==_tcscmp(command,L"selectedsongswitch"))
		//{
		//对已选择的歌曲进行交换位置
		//	flash_message_call_select_song_switch(args);
		//bEnter_block = true;
		//}
		else if (0==_tcscmp(command,L"pagenum"))
		{
			//通过滑动条改变页数
			flash_message_call_change_show_page(args);
			//改成线程方式
			//memset(m_thread_para,0x0,sizeof(m_thread_para));
			//_tcscpy(m_thread_para,args);
			//AfxBeginThread(Cflashktv10Wnd::query_data_thread,this);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"song_preview"))    //预览页面控制键码
		{
			//预览控制
			flash_message_call_preview_control(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"preview_position"))   //预览快进快退
		{
			flash_message_call_preview_change_play_pos(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"maiba_dearon"))   //挑战麦霸
		{
			//args(maiba_page:maiba_number) 高亮:页码 
			flash_message_call_maiba(MAIBA_DEKARON,args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"maiba_share"))  //K歌分享
		{
			flash_message_call_maiba(MAIBA_SHARE,args);  
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"maiba_find"))  //发现麦霸
		{
			flash_message_call_maiba(MAIBA_FIND,args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"flip_over_select_song"))  //上下页操作已选
		{

			int page_flip_flag=0;
			int page_operate_type=0;
			int page_index=0;

			//得到页操作码
			swscanf(args,L"%d:%d",&page_flip_flag,&page_operate_type);
			//得到当前页索引
			page_index = m_flash_manage.get_last_page_index();
			if (PAGE_UP==page_flip_flag)     //上一页
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,PRE_PAGE_OPERATE,page_operate_type); 
			}
			else if (PAGE_DOWN==page_flip_flag)  //下一页
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,NEXT_PAGE_OPERATE,page_operate_type);

			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"flip_over"))     //上下页操作
		{
			int page_flip_flag=0;
			int page_operate_type=0;
			int page_index=0;

			int page_count=0;

			//得到页操作码
			swscanf(args,L"%d:%d",&page_flip_flag,&page_operate_type);

			page_count = m_db_query.get_total_page_count();

			//得到当前页索引
			page_index = m_flash_manage.get_last_page_index();
			if (PAGE_UP==page_flip_flag)     //上一页
			{
				switch(page_index)
				{
				case page_title:        //歌名点歌
				case page_singer_song:  //具体歌星歌曲页面
				case page_lyric:        //歌词检索页面
				case page_theme_song:        //主题检索页面
				case page_new_theme_song:
				case page_class:        //分类点歌
				case page_new_song:     //新歌页面
				case page_opera:        //戏曲页面
				case page_language:     //语种点歌
				case page_movie_song:   //影视金曲
				case page_era_song:     //年代金曲
				case page_number_song:  //编号点歌
				case page_search_song:  //搜索歌曲
				case page_write:        //手写点歌
				case page_pkjx:
				case page_word_count:   //字数点歌
				case page_hdmi:         //高清专区
				case page_fast_songs_slow_dance: //劲舞漫曲
				case page_sb_ranking_polite:
				case page_sb_free_pk:
				case page_sb_challenge_pk:
				case page_voice_china:     //好声音
				case page_yunadd_song:
					{
						song_pre_next_page_change(song_select_expr,PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_top_song:  //排行页面
					{
#ifdef DON_GUAN_K_PLUS
						if (m_language_button_number == 7)
						{
							song_pre_next_page_change(song_select_expr,PRE_PAGE_OPERATE,page_operate_type);
						}else{
							song_pre_next_page_change(top_song_select_expr,PRE_PAGE_OPERATE,page_operate_type);
						}
#else
						song_pre_next_page_change(top_song_select_expr,PRE_PAGE_OPERATE,page_operate_type);
#endif // DON_GUAN_K_PLUS
					}
					break;
				case page_singer:        //歌星列表
				case page_custom_singer: //场所歌星
				case page_voice_china_singer:
					{
						singer_pre_next_page_change(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_selected:   //已选页面
					{
						show_select_or_sing_song(SHOW_SELECT_SONG,PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_dekaron_maiba:  //挑战麦霸
					{
						show_recorder_arena_song(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_singed:   //已唱页面
					{
						show_select_or_sing_song(SHOW_SING_SONG,PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_U_disk:    //U盘播歌页面
					{
						U_disk_song_pre_next_page(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_movie:    //电影页面
				case page_concert:  //演唱会
				case page_place_video:  //场所视频
					{
						movie_pre_next_page_change(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_member_song:  //会员歌曲页面
					{
						member_song_pre_next_page_change(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_recording:  //录音页面
					{
						song_recorder_pre_next_page_change(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_pk:  //pk会员列表
					{
						send_pk_three_screen_data(PRE_PAGE_OPERATE,page_operate_type);
						//record_pk_current_page(PRE_PAGE_OPERATE);
					}
					break;
				case page_challenge_star:
					{
						// 页码信息
						flash_message_call_challenge_star_page_info(PRE_PAGE_OPERATE, false);
						flash_message_call_challenge_star_song(PRE_PAGE_OPERATE, false);
					}
					break;
				case page_across_pass://百秒夺奖-闯关夺宝
					{
						flash_message_call_select_pass_song_pc(PRE_PAGE_OPERATE, false);
					}
					break;
				case page_video_show:
					{
						m_video_show_current_page--;
						int nCount = m_st_video_show_vec.size();
						int page_count = nCount/m_video_show_count_page;
						if (nCount%m_video_show_count_page > 0)
							page_count++;

						if(m_video_show_current_page == 0)
							m_video_show_current_page = page_count;

						show_row_and_page_count(L"true", nCount, page_count, m_video_show_current_page);

						TCHAR RequestEx[2048*10] = {0x00};
						result = m_flash_manage.make_request(RequestEx,sizeof(RequestEx)/sizeof(TCHAR),L"video_show", make_video_show_flash_list(m_video_show_current_page).c_str());
						if (result)
						{
							try
							{
								int nRet = flash_player_call_function(RequestEx);
							}
							catch(...)
							{

							}
						}
					}
					break;
				default:
					break;
				}
			}
			else if (PAGE_DOWN==page_flip_flag)  //下一页
			{				
				switch(page_index)
				{
				case page_title:        //歌名点歌
				case page_singer_song:  //具体歌星歌曲页面
				case page_lyric:        //歌词检索页面
				case page_theme_song:        //主题检索页面
				case page_new_theme_song:
				case page_class:        //分类点歌
				case page_new_song:     //新歌页面
				case page_opera:        //戏曲页面
				case page_language:     //语种点歌
				case page_movie_song:   //影视金曲
				case page_era_song:     //年代金曲
				case page_number_song:  //编号点歌
				case page_search_song:  //搜索歌曲
				case page_write:        //手写点歌
				case page_pkjx:
				case page_word_count:   //字数点歌
				case page_hdmi:         //高清专区
				case page_fast_songs_slow_dance: //劲舞漫曲
				case page_sb_ranking_polite:
				case page_sb_free_pk:
				case page_sb_challenge_pk:
				case page_voice_china: //好声音
				case page_yunadd_song:
					{
						song_pre_next_page_change(song_select_expr,NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_top_song:  //排行页面
					{
#ifdef DON_GUAN_K_PLUS
						if (m_language_button_number == 7)
						{
							song_pre_next_page_change(song_select_expr,NEXT_PAGE_OPERATE,page_operate_type);
						}else{
							song_pre_next_page_change(top_song_select_expr,NEXT_PAGE_OPERATE,page_operate_type);
						}
#else
						song_pre_next_page_change(top_song_select_expr,NEXT_PAGE_OPERATE,page_operate_type);
#endif // DON_GUAN_K_PLUS
					}
					break;
				case page_singer:  //歌星列表
				case page_custom_singer:  //场所歌星
				case page_voice_china_singer:
					{ 
						singer_pre_next_page_change(NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_selected:   //已选页面
					{
						show_select_or_sing_song(SHOW_SELECT_SONG,NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_singed:   //已唱页面
					{
						show_select_or_sing_song(SHOW_SING_SONG,NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_dekaron_maiba:  //挑战麦霸
					{
						show_recorder_arena_song(PRE_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_U_disk:    //U盘播歌页面
					{
						U_disk_song_pre_next_page(NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_movie:    //电影页面
				case page_concert:  //演唱会
				case page_place_video:  //场所视频
					{
						movie_pre_next_page_change(NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_member_song:  //会员歌曲页面
					{
						member_song_pre_next_page_change(NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_recording:  //录音页面
					{
						song_recorder_pre_next_page_change(NEXT_PAGE_OPERATE,page_operate_type);
					}
					break;
				case page_pk:
					{
						send_pk_three_screen_data(NEXT_PAGE_OPERATE,page_operate_type);
						//record_pk_current_page(PRE_PAGE_OPERATE);
					}
					break;
				case page_challenge_star:
					{
						// 页码信息
						flash_message_call_challenge_star_page_info(NEXT_PAGE_OPERATE, false);

						flash_message_call_challenge_star_song(NEXT_PAGE_OPERATE, false);
					}
					break;
				case page_across_pass://百秒夺奖-闯关夺宝
					{
						flash_message_call_select_pass_song_pc(NEXT_PAGE_OPERATE, false);
					}
					break;
				case page_video_show: //视频秀场
					{
						m_video_show_current_page++;
						int nCount = m_st_video_show_vec.size();
						int page_count = nCount/m_video_show_count_page;
						if (nCount%m_video_show_count_page > 0)
							page_count++;

						if ((m_video_show_current_page - page_count) == 1)
						{
							m_video_show_current_page = 1;
						}

						show_row_and_page_count(L"true", nCount, page_count, m_video_show_current_page);

						TCHAR RequestEx[2048*10] = {0x00};
						result = m_flash_manage.make_request(RequestEx,sizeof(RequestEx)/sizeof(TCHAR),L"video_show", make_video_show_flash_list(m_video_show_current_page).c_str());
						if (result)
						{
							try
							{
								int nRet = flash_player_call_function(RequestEx);
							}
							catch(...)
							{

							}
						}
					}
					break;
				default:
					break;
				}
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"singer"))   //选择歌星的歌曲
		{
			if (_tcscmp(args, L"head") == 0)
			{
				song_info video_info;
				TCHAR singer_name[256] = {0x00};
				m_video_play_manager.get_playing_video(video_info);
				if(!video_info.get_singer_name(singer_name))
				{
					return;
				}
				//改变页面
				result = page_change(page_singer_song);
				if(!result)
				{
					return;
				}

				//根据歌星名字显示歌星歌曲和资料
				result = show_singer_song_introduction(singer_name,NULL,NULL);

				TCHAR request[1024];
				TCHAR singer_info[1024] = {0x00};
				swprintf(singer_info,L"<data><info singer_name=\"%s\" /></data>",singer_name);

				memset(request,0x0,sizeof(request));
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"singer_name_info",singer_info);
				if (result)
				{
					flash_player_call_function(request);
				}
			}else{
				//对歌曲列表中的歌星进行处理
				int page_index = 0;

				page_index = m_flash_manage.get_last_page_index();
				switch(page_index)
				{
				case page_singer:         //歌星列表
				case page_custom_singer:  //场所歌星
				case page_voice_china_singer:
					{
						//歌星选择，进入该歌星的歌曲页面
						flash_message_call_singer_select(args);
					}
					break;
				case page_selected: //选择歌曲页面
					{
						flash_message_call_select_sing_page_to_singer(args,true);
					}
					break;
				case page_singed: //已唱歌曲页面
					{
						flash_message_call_select_sing_page_to_singer(args,false);
					}
					break;
				case page_title:    //歌名点歌
				case page_lyric:    //歌词检索页面
				case page_theme_song:    //主题检索页面
				case page_new_theme_song:
				case page_class:    //分类点歌
				case page_new_song: //新歌页面
				case page_opera:    //戏曲页面
				case page_language: //语种点歌
				case page_top_song: //排行页面
				case page_movie_song:     //影视金曲
				case page_era_song:       //年代金曲
				case page_number_song:  //编号点歌
				case page_search_song:  //搜索歌曲
				case page_write:        //手写点歌
				case page_word_count:   //字数点歌
				case page_hdmi:         //高清专区
				case page_fast_songs_slow_dance: //劲曲漫舞
				case page_voice_china: //好声音
					{
						flash_message_call_song_singer(args);
					}
					break;
				default:
					break;
				}
			}			
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"singer_type"))  //歌星类型分类
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_singer!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_singer);
			}
			flash_message_call_singer_region(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"singer_clear_all"))
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_singer!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_singer);
			}
			flash_message_call_singer_clear_all(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"singer_sex"))
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_singer!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_singer);
			}
			flash_message_call_singer_sex_ex(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"SelectedSong"))
		{
			if (0==_tcscmp(args,L"mess"))   //已选打乱
			{
				//打乱已选歌曲
				m_video_play_manager.mess_selected_song();
				//更新选择歌曲数目
				update_select_song_count();

				//重新显示
				refresh_screen_list();
				//更新显示的下首歌曲名字
				show_song_name();

				if (m_b_pk_connect)
				{
					int nTotalSong = 0;
					TCHAR selectMessage[2048];
					TCHAR song_id[256];
					TCHAR song_xml[256];
					TCHAR send_ip[256];
					song_info song_information;
					std::wstring select_song_xml; 

					memset(send_ip,0x0,sizeof(send_ip));

					if (0 != _tcscmp(m_pk_invitationIP,L""))
					{
						_tcscpy(send_ip,m_pk_invitationIP);
					}
					if (0 != _tcscmp(m_pk_acceptIP,L""))
					{
						_tcscpy(send_ip,m_pk_acceptIP);
					}
					memset(selectMessage,0x0,sizeof(selectMessage));

					//得到当前已选的歌曲列表
					nTotalSong = m_video_play_manager.get_select_song_count();
					//<item song_id=\"%s\"/>"
					select_song_xml += L"disrupt_song<song_list>";
					for (int i = 0; i < nTotalSong; i++)
					{	
						memset(song_id,0x0,sizeof(song_id));
						memset(song_xml,0x0,sizeof(song_xml));

						m_video_play_manager.get_select_song_information(song_information,i,false);
						song_information.get_song_id(song_id);
						swprintf(song_xml,L"<item song_id=\"%s\"/>",song_id);

						select_song_xml += song_xml;
					}
					select_song_xml += L"</song_list>";

					swprintf(selectMessage,L"%s",select_song_xml.c_str());
					connect_inviation(send_ip,selectMessage);
				}

			}
			else if (0==_tcscmp(args,L"clear"))    //清空已选歌曲
			{
				if (m_b_pk_connect)
				{
					//发送消息给连接的ip
					TCHAR send_ip[256];
					memset(send_ip,0x0,sizeof(send_ip));

					if (0 != _tcscmp(m_pk_invitationIP,L""))
					{
						_tcscpy(send_ip,m_pk_invitationIP);
					}
					if (0 != _tcscmp(m_pk_acceptIP,L""))
					{
						_tcscpy(send_ip,m_pk_acceptIP);
					}

					connect_inviation(send_ip,L"clearAllSong");  //清空歌曲
				}
				m_video_play_manager.clear_select_song(false);
				//更新选择歌曲数目
				update_select_song_count();
			}
			//重新显示
			refresh_screen_list();
			//更新显示的下首歌曲名字
			show_song_name();				
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"handwriting_language"))   //改变手写识别的语言
		{
			flash_message_call_change_handwriting_language(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"wechatSong"))
		{
			if (_tcscmp(args, L"0") == 0) //微信
			{
				page_change(page_wechat);
			}else if (_tcscmp(args, L"1") == 0) //麦霸APP
			{
				page_change(page_encode);
			}else if (_tcscmp(args, L"2") == 0) //手机推送
			{
				page_change(page_phone_push);
			}
			flash_message_call_encode(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"theme"))     //分类点歌
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (((0 == _tcscmp(args,L"1")) || (0 == _tcscmp(args,L"2"))) && !m_allow_play_dj)
			{
				//不允许播放dj，只有输入密码才可以
				//flash_message_call_page_jump(page_system_manager);
				//弹出对话框
				//show_pop_up_dj_window();
				flash_show_tip_message(122);
				flash_message_call_function(PAGE_BACK);
				m_page_allow_back=false;
				return;
			}
			if (page_theme_song!=page_index && page_fast_songs_slow_dance!=page_index)
			{
				//不是分类页面首先跳转到分类页面
				page_change(page_theme_song);
			}
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;

			flash_message_call_theme(args);
			if (m_song_show_video_picture)
			{
				pc_show_video_window();
			}
			else
			{
				hide_sub_window();
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"era"))   //年代点歌
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_era_song!=page_index)
			{
				//不是年代金曲页面首先跳转到年代金曲页面
				page_change(page_era_song);
			}
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
			flash_message_call_era(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"classification"))   //新的主题点歌
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_new_theme_song!=page_index)
			{
				//不是主题页面首先跳转到主题页面
				page_change(page_new_theme_song);
			}
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
			flash_message_call_new_theme(args);
			if (m_song_show_video_picture)
			{
				pc_show_video_window();
			}
			else
			{
				hide_sub_window();
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"SongVersion"))    //歌曲版本
		{
			flash_message_call_song_version(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"SingerSex"))   //歌星性别
		{
			flash_message_call_singer_sex(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opera"))    //戏曲
		{
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_opera!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_opera);
			}
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
			flash_message_call_opera(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"newsong"))  //新歌
		{
			//新歌，分为本月，本级，本年
			int page_index=0;

			//得到最后一页索引
			page_index = m_flash_manage.get_last_page_index();
			if (page_new_song!=page_index)
			{
				//不是戏曲页面首先跳转到戏曲页面
				page_change(page_new_song);
			}			
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
			flash_message_call_new_song(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"drinks"))   //启动外挂酒水
		{
			//2010-12-16 modify
			if (0==_tcscmp(args,L"ccDrinks"))
			{
				//发送键盘码值 酒水
				::PostMessage(m_drinks_window_handle,WM_KEYDOWN,30002,0);
			}
			else if (0==_tcscmp(args,L"ccPublicRelation"))
			{
				//发送键盘码值 公关
				::PostMessage(m_drinks_window_handle,WM_KEYDOWN,30006,0);
			}
			else
			{
				if ((CLOSE_ROOM_STATE==m_pc_state)||m_precheckout_state)
				{
					//关房状态，不允许使用酒水
					flash_show_tip_message(65);
				}
				else
				{
					flash_message_call_drinks();
				}
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"place_intro"))     //场所介绍
		{
			flash_message_call_service(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"page_to_skin"))  //换肤
		{
			change_flash_skin(args);
			bEnter_block = true;
		}

		/*
		else if (0==_tcscmp(command,L"game"))       //选择游戏
		{
		play_select_game(args);
		}*/
#ifdef DON_GUAN_K_PLUS
		else if (0==_tcscmp(command,L"select_song_tip"))  //选歌提示
		{
			flash_message_call_select_song_tip(args);

		}
#endif // DON_GUAN_K_PLUS
		/*
		//改变歌曲显示方式
		else if (0==_tcscmp(command,L"change_card"))    //卡片方式
		{
		//改变标示
		m_song_show_mode = SONG_SHOW_MODE_CARD;
		//重新显示数据
		change_song_show_mode(args);
		//更新排序按钮状态
		update_sort_button_state();
		}
		else if (0==_tcscmp(command,L"change_list"))   //列表方式
		{
		//改变标示
		m_song_show_mode = SONG_SHOW_MODE_LIST;
		//重新显示数据
		change_song_show_mode(args);
		//播放图片广告
		play_pc_AD_picture();
		//更新排序按钮状态
		update_sort_button_state();
		}*/
		else if (0==_tcscmp(command,L"show_video_tip"))
		{
			show_error_tip(127, L"show_video_tip");
			m_video_index = args;
			bEnter_block = true;
		}
		//视频转播
		else if (0==_tcscmp(command,L"video"))   //PC上切换视频
		{
#ifdef DALIAN_MATSA_EK_PLUS
			if (_tcscmp(m_video_index.c_str(), L"2") == 0)
			{
				return;
			}
#endif
			TCHAR send_data[MAX_PATH] = {0x00};
			swprintf(send_data,L"video%s",m_video_index.c_str());
			//发送给被控机
			send_master_slave_data(send_data,NULL);	

			if (m_is_recording)
			{
				//停止录音 ZHEN 2013-10-18 add
				stop_recorder_audio(false,false,false);
			}
			//yzg add 2015年6月25日
			//平台音乐osd关闭
			stop_music_enjoy_osd();
			//销毁挑战大咖控件
			if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
			{
				delete m_StarTransparentWnd;
				m_StarTransparentWnd = NULL;
				//全屏显示flash时，还原视频窗口位置
				if (m_activity_wnd_full_screen)
				{
					if (m_show_activity_wnd == 0 || m_inter_screen_mode == 0 || m_inter_screen_mode == 1)
					{
						m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
					}
					else
					{
						m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
					}
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
			{
				delete m_StarSoftTransparentWnd;
				m_StarSoftTransparentWnd = NULL;
			}
			m_nFlashFinishCnt = 0;
			m_bChallengeStarFinish = false;
			m_b_challenge_begin = false;
			m_b_challenging = false;
			//秀秀MV窗口销毁
			destroy_picture_mv_wnd();
			send_master_slave_cover_iamge_data(false, page_picture_mv);

			flash_message_call_switch_screen_pc(m_video_index.c_str(),true);

			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"video_transfer"))    //视频同步到电视
		{
			if (m_html_ctrl_exist/* && m_html_ctrl.IsWindowVisible()*/)
			{
				m_html_ctrl.ShowWindow(SW_HIDE);
				m_html_ctrl.UpdateWindow();
				m_show_html_ctrl = false;
			}
			video_synchro_to_TV(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"film"))    //电影详情页
		{
			if (CLOSE_ROOM_STATE==m_pc_state)
			{
				flash_show_tip_message(65);
				return;
			}
			result = page_change(page_movie_detail);
			if (result)
			{
				//显示数据
				m_film_manager.m_strfilm_id_current = args;
				movie_query_detail_data();
			}

			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"film_number"))    //电影点播
		{
			flash_message_call_select_film();
			if (m_film_manager.PlayCount())
			{
				WriteLog(__FL__, L"电影播放次数＋1");
			}
			else
			{
				WriteLog(__FL__, L"电影播放次数＋1失败");
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"record"))   //录音
		{
			/*
			flash_message_call_recorder_audio(args);
			if (0==_tcscmp(args,L"1"))   //歌曲录音
			{
			m_need_record_flag = true;
			}
			else if (0==_tcscmp(args,L"2"))  //停止录音
			{
			m_need_record_flag = false;
			}

			set_button_show_state(TAPE_BUTTON_STATE,m_need_record_flag);
			*/	

			song_info playing_song_info;
			enum PLAY_SONG_TYPE song_type;
			if (0==_tcscmp(args,L"1"))
			{
				//取消静音处理
				result = DealMuteState(true);

				result = m_video_play_manager.get_playing_video(playing_song_info);
				if (result)
				{
					song_type = playing_song_info.get_video_type();
					if (PLAY_SONG_TYPE_SELECT_SONG==song_type)
					{
						show_control_osd(CONTROL_OSD__RECORD);
					}
				}

				if (0==m_record_type)
				{
					//如果是半自动录音
					flash_message_call_recorder_audio_type(L"1",false);
				}
				else
				{
					m_open_record_type = 1;
					m_is_recording = true;
				}
				m_need_record_flag = true;
			}
			else if (1==_tcscmp(args,L"1"))
			{
#ifdef DON_GUAN_K_PLUS
				stop_control_osd_logo();
#endif // DON_GUAN_K_PLUS
				if (0==m_record_type)
				{
					//如果是半自动录音
					flash_message_call_recorder_audio_type(L"2",false);
				}
				else
				{
					m_open_record_type = 0;
					m_is_recording = false;
				}
				m_need_record_flag = false;
			}

			set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);

			TCHAR send_data[1024] = {0x00};
			swprintf(send_data, L"record:%s", args);
			if (1==m_master_slave_control_flag)
			{
				//主控机
				send_master_slave_data(send_data,NULL);
			}
			else if (2==m_master_slave_control_flag)
			{
				//被控机，客户点击的
				send_master_slave_data(send_data,NULL);
			}

			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"sys_manager"))   //系统管理
		{
			flash_message_call_system_manager(args);
			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"diy_painting")) && (0==_tcscmp(args,L"1")))  //发布绘画到电视   
		{
			show_drawing_image_to_tv();
			bEnter_block = true;
		}
		//录音
		else if (0==_tcscmp(command,L"save"))   //保存录音音频到U盘
		{
			if (m_have_device_insert)
			{
				if (m_is_saving_audio)
				{
					//防止同时拷贝多个录音音频到U盘
					flash_show_tip_message(50);
				}
				else
				{
					//开始保存
					swscanf(args,L"%d",&m_select_save_song_number);


					AfxBeginThread(Cflashktv10Wnd::save_data_to_U_disk_thread,this);
				}
			}
			else
			{
				//没有插入U盘进行提示
				flash_show_tip_message(51);
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"upload"))   //上传录音音频到服务器上
		{
			flash_message_call_submit_recorder_song(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"share"))    //分享录音文件到网络
		{
			flash_message_call_share_recorder_audio(args, false);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"web_share"))  //发现麦霸分享
		{
			//代表是点歌
			m_request_arena_one_song = false;
			_tcscpy(m_request_arena_song_id,args);

			//发送请求数据
			flash_message_call_get_web_select_song(args);
			bEnter_block = true;

		}
		else if (0 == _tcscmp(command,L"area_share"))   //分享麦霸pk歌曲
		{
			//设置为当前为分享
			m_request_arena_one_song = false;
			_tcscpy(m_request_arena_song_id,args);

			flash_message_call_dekaron_song(args,false,false);
			bEnter_block = true;
		} 
		//多语言
		else if (0==_tcscmp(command,L"multi_lang")) //改变界面语言
		{
			flash_message_call_change_language(args);
			bEnter_block = true;
		}
		//会员s
		else if (0==_tcscmp(command,L"vip_manage"))   //会员管理
		{
			flash_message_call_member_manager(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"input_phone"))  //验证激活
		{
			//验证激活窗口
			swscanf(args,L"%d",&m_member_input_type);
			//显示到flash界面上
			switch(m_member_input_type)
			{
			case 1:  //输入电话号码
				{
					show_member_manager_input_text(m_member_input_type,m_memeber_phone_number);
				}
				break;
			case 2:  //短信验证码
				{
					show_member_manager_input_text(m_member_input_type,m_phone_check_code);
				}
				break;
			case 3:  //登录密码
				{
					show_member_manager_input_text(m_member_input_type,m_member_password);
				}
				break;
			case 4:  //再次输入密码
				{
					show_member_manager_input_text(m_member_input_type,m_member_ok_password);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"input_type"))   //要输入的内容类型，会员编号还是密码
		{
			int member_type;
			swscanf(args,L"%d",&member_type);

			m_member_input_type = member_type;

			//显示到flash界面上
			switch(member_type)
			{
			case 1:  //输入会员号
				{
					show_member_manager_input_text(member_type,m_member_name);
				}
				break;
			case 2:  //输入会员密码
				{
					if (m_member_manage_state == 3)
					{
						show_member_manager_input_text(member_type,m_member_old_password);
					}else{
						show_member_manager_input_text(member_type,m_member_password);
					}
				}
				break;
			case 3: 
				{
					if (m_member_manage_state == 2) //会员注册
					{
						show_member_manager_input_text(member_type,m_member_ok_password);
					}else if (m_member_manage_state == 3) //会员修改密码
					{
						show_member_manager_input_text(member_type,m_member_password);
					}					
				}
				break;
			case 4: 
				{
					show_member_manager_input_text(member_type,m_member_ok_password);
				}
				break;
			default:
				break;
			}
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"vip_activate"))  //会员激活
		{
			m_pre_activate_vip_button = m_activate_vip_button;

			swscanf(args,L"%d",&m_activate_vip_button);

			//得到当前是否登录
			if (MEMBER_FLAG_LOGIN != m_memeber_manage[m_activate_vip_button].get_login_flags())
			{
				//没有登录
				//flash_show_tip_message(L"没有登录K友账号,请登录");
				//跳转登录页面
				flash_message_call_page_jump(page_maiba_login);
				return;
			}
			else
			{
				//去网络请求数据，当前数据
				int page_index = m_flash_manage.get_last_page_index();

				//登录成功
				if(page_index == page_member_song)
				{
					//请求会员歌曲私房歌曲
					flash_message_call_maiba(PRIVATE_SONG,L"0:1");
				}
				else if (page_index == page_find_maiba)
				{
					//请求我的收藏
					flash_message_call_maiba(MAIBA_FIND,L"4:1");

					m_request_song_type = MYCOLLECTION;
				}
				else if (page_index == page_recording)
				{
					//请求我的分享
					flash_message_call_maiba(MAIBA_SHARE,L"1:1");
					m_request_song_type = MYRECORDSHARE;
				}

				set_flash_button_state(L"vip_activate_button",m_activate_vip_button);
			}	
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"login_flags"))   //登录成功，或者关闭框
		{
			int login_flags = 0;
			swscanf(args,L"%d",&login_flags);
			//判断是哪个页面
			if (login_flags)
			{
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"phone_check"))  //手机号验证
		{
			int phone_number = 0;
			swscanf(args,L"%d",&phone_number);
			TCHAR request_data[1024];
			memset(request_data,0x0,sizeof(request_data));

			int len = 0;
			if (0 == phone_number)  //验证
			{
				len = _tcslen(m_memeber_phone_number);
				//发送给服务器
				if (len<11)
				{
					member_register_dialog_page_jump(L"register_jump",L"请填写11位手机号",false);
					return;
				}

				member_register_dialog_page_jump(L"register_jump",L"",true);

				swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/MEMBERPHONE?phone=%s",m_memeber_phone_number);

				//发送手机号给盒子 请求验证码
				thread_send_to_box_tcp_function(request_data,18007);			

				//跳转到下一页发的数据
				change_member_manage_state(MEMBER_REGISTER_PHONE);
				//发送数据
				show_member_manager_input_text(1,m_memeber_phone_number);
			}
			else if (1 == phone_number)  //下一步
			{
				member_register_dialog_page_jump(L"register_jump",L"",true);

				//改变登录状态
				change_member_manage_state(MEMBER_REGISTER_STATE);

				//显示手机号
				show_member_manager_input_text(1,m_memeber_phone_number);
				show_member_manager_input_text(2,m_phone_check_code);
				show_member_manager_input_text(3,m_member_password);
				show_member_manager_input_text(4,m_member_ok_password);
				//设置激活框
				m_member_input_type = 2;

			}
			else if (2 == phone_number)  //重新发送
			{
				//member_register_dialog_page_jump(L"",false);

				//从新发送请求验证码
				swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/MEMBERPHONE?phone=%s",m_memeber_phone_number);

				//发送手机号给盒子 请求验证码
				thread_send_to_box_tcp_function(request_data,18007);		
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"close_login"))  //关闭登录的对话框
		{
			int number = 0; 

			swscanf(args,L"%d",&number);	

			//得到当前激活会员
			int active_memeber = -1;
			m_activate_vip_button = m_pre_activate_vip_button;

			active_memeber = m_memeber_manage[m_activate_vip_button].get_login_flags();
			if (MEMBER_FLAG_LOGIN_NO == active_memeber || MEMBER_FLAG_REGISTRATION == active_memeber)
			{
				//m_activate_vip_button = m_pre_activate_vip_button;
			}
			else
			{
			}

			if (1 == number)   //
			{

			}
			else if (2 == number)  //成功
			{

			}

			clear_all_member_show_info();
			//关闭
			member_register_dialog_page_jump(L"close_login_dialog",L"",true);

			set_flash_button_state(L"vip_activate_button",m_activate_vip_button);

			//set_flash_button_state(L"maiba_number_button",m_maiba_number_button);
			if (0 == m_maiba_number_button && (page_recording==m_flash_manage.get_last_page_index()))
			{
				flash_message_call_maiba(MAIBA_SHARE,L"0:1");
			}

			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"vip_login"))  //会员登录
		{
			flash_message_call_member_login(args);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"vip_sign_out"))  //会员退出
		{
			int sign_out_number = 0;
			TCHAR data[256];
			TCHAR member_nick[256];
			memset(data,0x0,sizeof(data));
			memset(member_nick,0x0,sizeof(member_nick));

			swscanf(args,L"%d",&sign_out_number);
			if (sign_out_number < 0 || sign_out_number >= 5)
			{
				return;
			}

			m_member_sign_out_number = sign_out_number;

			m_memeber_manage[sign_out_number].get_nick_name(member_nick);

			swprintf(data,L"<data><info tip_mess=\"%s\"/></data>",member_nick);
			//弹出对话框
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pop_sign_out_window",data);
			if (result)
			{
				flash_player_call_function(request);
			}


			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"sign_out"))
		{
			int sign_out = 0;
			swscanf(args,L"%d",&sign_out);

			if (0 == sign_out)
			{
				//退出会员
				m_memeber_manage[m_member_sign_out_number].initialized_variables();

				m_activate_vip_button = -1;
			}
			else
			{

			}


			set_flash_button_state(L"vip_activate_button",m_activate_vip_button);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"Set_VIP"))  //PK会员登陆框
		{
			//args 0 1 2 3 del 
			//接收到命令后，直接返回值个flash
			int pk_number = 0;

			memset(request,0x0,sizeof(request));
			int nLen = _tcslen(args);

			swscanf(args,L"%d",&pk_number);

			switch(pk_number)
			{
			case 0:   //登陆框焦点
				{
					TCHAR data[1024];
					memset(data,0x0,sizeof(data));
					m_pk_textbox_focus = 0;
					swprintf(data,L"<data><info textbox=\"%d\" text=\"%s\" /></data>",m_pk_textbox_focus,m_pk_name );
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_manage_text",data);

					if (result)
					{
						flash_player_call_function(request);
					}
				}
				break;
			case 1:   //密码焦点
				{
					TCHAR data[1024];
					m_pk_textbox_focus =  1;
					TCHAR show_data[256];

					memset(data,0x0,sizeof(data));
					memset(show_data,0x0,sizeof(show_data));


					for (int i=0;i<_tcslen(m_pk_password);i++)    //密码显示星号
					{
						_tcscat(show_data,L"*");
					}

					swprintf(data,L"<data><info textbox=\"%d\" text=\"%s\" /></data>",m_pk_textbox_focus,show_data);
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_manage_text",data);

					if (result)
					{
						flash_player_call_function(request);
					}
				}
				break;
			case 2:    //选择男
				{
					//组织字符串
					m_pk_menber_sex = 1;
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_sex_select",_T("1"));
					if (result)
					{
						flash_player_call_function(request);
					}
				}
				break;
			case 3:   //选择女
				{
					m_pk_menber_sex = 2;
					//组织字符串
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_sex_select",_T("2"));
					flash_player_call_function(request);
				}
				break; 
			default:   
				break;
			}

			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"Set_VIP_number")) //发送选择数字命令
		{
			//args 0-9

			TCHAR data[1024];
			TCHAR show_data[256];

			memset(show_data,0x0,sizeof(show_data));
			memset(data,0x0,sizeof(data));
			memset(request,0x0,sizeof(request));

			int number=0;
			int len=0;

			if (NULL==args)
			{
				return;
			}

			swscanf(args,L"%d",&number);

			switch(number)
			{
			case 0:
			case 1: 
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
				{
					if (0 == m_pk_textbox_focus)
					{
						if (_tcslen(m_pk_name) < 10)
						{
							_tcscat(m_pk_name,args);
						}
						_tcscpy(show_data,m_pk_name);
					}
					else if(1 == m_pk_textbox_focus)
					{
						_tcscat(m_pk_password,args);
						for (int i=0;i<_tcslen(m_pk_password);i++)    //密码显示星号
						{
							_tcscat(show_data,L"*");
						}
					}
				}
				break;
			case 10:  //回删
				{	
					if (0 == m_pk_textbox_focus)
					{ 
						//_tcscpy(show_data,m_member_name);
						len = _tcslen(m_pk_name);
						if (len > 0)
						{
							_tcsncpy(show_data,m_pk_name,len - 1);
						}
						_tcscpy(m_pk_name,show_data);

					}
					else if(1 == m_pk_textbox_focus)
					{
						len = _tcslen(m_pk_password);
						if (len > 0)
						{
							_tcsncpy(show_data,m_pk_password,len - 1);
						}
						_tcscpy(m_pk_password,show_data);
						memset(show_data,0x0,sizeof(show_data));
						for (int i=0;i<_tcslen(m_pk_password);i++)    //密码显示星号
						{
							_tcscat(show_data,L"*");
						}

					}
				}
				break;
			default:
				break;
			}			
			swprintf(data,L"<data><info textbox=\"%d\" text=\"%s\" /></data>",m_pk_textbox_focus,show_data);
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_manage_text",data);
			if (result)
			{
				flash_player_call_function(request);
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"Set_VIP_Enter"))  //发送确认命令
		{
			//判断是否连接
			//args enter跳转页面
			if ((0==_tcscmp(m_pk_name,L""))||(0==_tcscmp(m_pk_password,L"")))
			{
				flash_show_tip_message(13);
				return;
			}

			m_pk_login_member = true;

			send_pk_data_to_server(1);  //发送数据给服务器

			flash_message_call_page_jump(page_pk);

			TCHAR data[256];
			memset(data,0x0,sizeof(data));

			swprintf(data,L"%s",g_all_language[98].c_str());

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
			if (result)
			{
				flash_player_call_function(request);
			}

			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"send_invitation"))  //发送邀请命令时
		{
			TCHAR data[1024];
			int nCurrentPos = 0;
			memset(m_pk_invitationIP,0x0,sizeof(m_pk_invitationIP));

			memset(data,0x0,sizeof(data));
			memset(request,0x0,sizeof(request));

			//判断自己是否在pk中
			if (0 == _tcscmp(m_pk_information.nstatus,_T("正在pk...")))
			{
				flash_show_tip_message(95);
				return;
			}

			int number=0;
			if (NULL==args)
			{
				return;
			}
			swscanf(args,L"%d",&number);  //0----7

			////发一个提示信息给flash pk_invite_member_send
			/*swprintf(data,L"<data><info textbox=\"\" text=\"\" /></data>");*/
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",_T("你的邀请已发出,请等待....."));
			if (result)
			{
				flash_player_call_function(request);
			}


			//得到总数的第几个
			nCurrentPos = (m_pk_page_num - 1) * 9 + number;

			//得到当前邀请的IP
			_tcscpy(m_pk_invitationIP,m_send_member_data[nCurrentPos].ipaddress);
			m_pk_invitationPort = m_send_member_data[nCurrentPos].nPort;

			m_b_pk_invitation = true;

			//发送邀请给对方
			send_date_to_invitation();

			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"popup_pk_accept"))  //弹出PK对话框
		{
			int number=0;
			TCHAR data[1024];
			memset(data,0x0,sizeof(data));
			if (NULL==args)
			{
				return;
			}
			swscanf(args,L"%d",&number); 
			switch(number)
			{
			case 0:  //接收对方邀请
				{
					//清空当前已选列表
					m_video_play_manager.clear_select_song(false);
					//更新选择歌曲数目
					update_select_song_count();

					//设置播放器的播放状态,为空闲状态
					m_video_play_manager.set_player_cur_state(IDLESSE_STATE);
					m_video_play_manager.set_player_next_state(IDLESSE_STATE);

					m_b_pk_connect = true;
					accept_invitation(1);
					TCHAR data[256];
					memset(data,0x0,sizeof(data));

					swprintf(data,L"%s",g_all_language[99].c_str());

					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
					if (result)
					{
						flash_player_call_function(request);
					}

					//杀死定时器
					if (show_pk_accept_window_time_identifier)
					{
						KillTimer(show_pk_accept_window_time_identifier);
						show_pk_accept_window_time_identifier = 0;
					}

				}

				break;
			case 1: //取消
				{
					m_b_pk_connect = false;
					m_b_pk_invitation = false;
					accept_invitation(0);
					TCHAR data[256];
					memset(data,0x0,sizeof(data));

					swprintf(data,L"%s",g_all_language[98].c_str());
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
					if (result)
					{
						flash_player_call_function(request);
					}

					//杀死定时器
					if (show_pk_accept_window_time_identifier)
					{
						KillTimer(show_pk_accept_window_time_identifier);
						show_pk_accept_window_time_identifier = 0;
					}
				}
				break;
			default:
				break;
			}

			//在电视上显示pk提示
			m_pk_info_show_pc = false;
			memset(m_pk_info_tip_msg,0x0,sizeof(m_pk_info_tip_msg));
			show_song_name();

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"popup_pk_dialog",_T("pk_HIDE"));
			if (result)
			{
				flash_player_call_function(request);
			}

			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"pk_song")) //发送点歌
		{
			//发送消息给连接的ip
			TCHAR send_ip[256];
			memset(send_ip,0x0,sizeof(send_ip));
			if (m_b_pk_connect)
			{
				if (0 != _tcscmp(m_pk_invitationIP,L""))
				{
					_tcscpy(send_ip,m_pk_invitationIP);
				}
				if (0 != _tcscmp(m_pk_acceptIP,L""))
				{
					_tcscpy(send_ip,m_pk_acceptIP);
				}

				connect_inviation(send_ip,L"pk_song");
			}

			flash_message_call_page_jump(page_pkjx);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command,L"pk_quit"))  //退出,注销
		{
			//发送退出命令给服务器
			m_pk_login_member = false;
			m_b_pk_invitation = false;
			//	m_b_pk_connect = false;
			send_pk_data_to_server(0);  //发送退出命令给服务器

			WriteLog(__FL__, L"自己退出或者注销PK登录状态!");

			if (m_b_pk_connect)
			{
				//是连接状态,通知对方改状态
				if (0 != _tcscmp(m_pk_invitationIP,L""))
				{
					connect_inviation(m_pk_invitationIP,L"quit");
				}

				if (0 != _tcscmp(m_pk_acceptIP,L""))
				{
					connect_inviation(m_pk_acceptIP,L"quit");
				}

				m_b_pk_connect = false;

				//发送消息给盒子停止发送流
				send_data_to_video_box_stop(m_pk_local_video_ip);

				//关闭视频
				m_player_manager.Live_Close(0);
				m_player_manager.Live_Close(1);

				//关闭视频OSD图片
				m_player_manager.stop_bmp_osd();
			}

			_tcscpy(m_pk_name,L"");
			_tcscpy(m_pk_password,L"");

			flash_message_call_page_jump(page_homepage);

			bEnter_block = true;
		}
		else if ((0==_tcscmp(command,L"txtscroll"))&&(0==_tcscmp(args,L"over")))
		{
			TCHAR system_msg[1024];

			memset(system_msg,0x0,sizeof(system_msg));

			//界面上的消息滚动完成之后，给下一次的滚动信息
			if ((m_msg_welcome_scroll_count>0)&&(0!=_tcscmp(m_msg_welcome,L"")))
			{
				//显示消息文本
				show_text_on_flash(m_msg_welcome);
				m_msg_welcome_scroll_count--;
			}
			else if((FLASH_WELCOME_TYPE_CLIENT==m_welcome_text_type)&&(0!=_tcscmp(m_dog_welcome,L"")))
			{
				//正在显示客户欢迎词，该显示狗欢迎词，滚动信息增加房间号
				show_text_on_flash(m_dog_welcome);
				m_welcome_text_type = FLASH_WELCOME_TYPE_DOG;
			}
			else if ((FLASH_WELCOME_TYPE_DOG==m_welcome_text_type)&&(0!=_tcscmp(m_client_welcome,L"")))
			{
				show_text_on_flash(m_client_welcome);
				m_welcome_text_type = FLASH_WELCOME_TYPE_CLIENT;
			}
			else
			{
				//默认显示信息，滚动信息增加房间号
				_tcscpy(system_msg,L"欢迎光临阳光视翰KTV场所");
				show_text_on_flash(system_msg);
				if (FLASH_WELCOME_TYPE_CLIENT==m_welcome_text_type)
				{
					m_welcome_text_type = FLASH_WELCOME_TYPE_DOG;
				}
				else
				{
					m_welcome_text_type = FLASH_WELCOME_TYPE_CLIENT;
				}
			}
			bEnter_block = true;
		}
		//快进\快退
		else if (0==_tcscmp(command,L"progress"))
		{
			if ((!m_is_recording)&&(!m_show_score_in_screen))
			{
				//录音和评分时不允许快进快退
				double last_time = m_seek_video_timer.last_time();
				if (last_time>PLAY_VIDEO_MIN_TIME_LENGTH)
				{
					m_seek_video_timer.start();
					//改变视频播放位置
					set_video_play_pos(args);
				}
			}
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command, L"imageFace"))
		{
			TCHAR image_path[256];

			memset(image_path,0x0,sizeof(image_path));

			swprintf(image_path,L"%s\\face\\%s.png",m_work_path,args);

			//主被控
			if (m_master_slave_control_flag == 2)
			{
				//被控机，客户点击的，发送控制码给主控机
				TCHAR data[1024];

				memset(data,0x0,sizeof(data));
				//转化成字符串
				swprintf(data, L"imageFace:%s",args);
				//发送控制码
				send_master_slave_data(data, NULL);
			}

			//显示图片到电视
			show_image_to_tv(image_path);
			bEnter_block = true;
		}
		else if (0 == _tcscmp(command, L"imageBarrage"))
		{
			TCHAR image_path[256];

			memset(image_path,0x0,sizeof(image_path));

			swprintf(image_path,L"%s\\Barrage\\%s.png",m_work_path,args);

			//主被控
			if (m_master_slave_control_flag == 2)
			{
				//被控机，客户点击的，发送控制码给主控机
				TCHAR data[1024];

				memset(data,0x0,sizeof(data));
				//转化成字符串
				swprintf(data, L"imageBarrage:%s",args);
				//发送控制码
				send_master_slave_data(data, NULL);
			}

			//显示图片到电视
			show_image_to_tv(image_path);
			bEnter_block = true;
		}
		//定制歌曲
		else if (0 == _tcscmp(command,L"custom_song"))  //定制的歌曲名称
		{
			flash_message_call_custom_tip_message(args);
			bEnter_block = true;			
		}
		else if (0 == _tcscmp(command,L"submit_song"))  //提交歌曲
		{
			flash_message_call_submit_custom_song(args);
			bEnter_block = true;
		}
		//电子调查
		else if (0==_tcscmp(command,L"opinion1"))   //意见调查
		{
			flash_message_call_survey_result(0,args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion2"))   //意见调查
		{
			flash_message_call_survey_result(1,args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion3"))   //意见调查
		{
			flash_message_call_survey_result(2,args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion4"))   //意见调查
		{
			flash_message_call_survey_result(3,args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion5"))   //意见调查
		{
			flash_message_call_survey_result(4,args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion6"))    //书写意见
		{
			flash_message_call_surver_tip_message(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion7"))   //书写电话号码
		{
			flash_message_call_surver_tip_message(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"opinion"))  //提交意见和重写
		{
			flash_message_call_submit_opinion(args);
			bEnter_block = true;
		}
		else if (0==_tcscmp(command,L"phone"))  //书写联系方式
		{
			int index_page=m_flash_manage.get_last_page_index();
			if (index_page == page_custom_song)
			{
				flash_message_call_custom_phone(args);
			}
			else
			{
				flash_message_call_write_phone(args);
			}
			bEnter_block = true;
		}

		if (!bEnter_block)
		{
			flash_message_call_ex(command, args);
		}		

		//测机专用
		/*	else if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state)&&(0==_tcscmp(command,L"first")))
		{
		//测试列表优先
		flash_message_call_test_priority(args);
		}
		else if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state) && (0==_tcscmp(command,L"test")) && (0==_tcscmp(args,L"start")))
		{
		//把测试歌曲，全部放到已选中
		flash_message_call_save_test_song();
		//进入开始测试，手工方式
		m_video_play_manager.set_player_cur_state(TEST_SONG_STATE);
		}
		else if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state) && (0==_tcscmp(command,L"test_finish")))
		{
		//确认测试结果
		if (auto_test_timer_identifier)
		{
		KillTimer(auto_test_timer_identifier);
		auto_test_timer_identifier=0;
		}
		result = flash_message_call_save_test_result(args);
		if (result)
		{
		m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"tooltip",L"确认测试结果成功，请上传");
		m_test_flash_player.CallFunction(request);
		}
		else
		{
		m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"tooltip",L"确认测试结果失败，请重来");
		m_test_flash_player.CallFunction(request);
		}
		}
		else if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state)&&(0!=_tcscmp(command,L"")) && (0==_tcscmp(args,m_ktv_test_password.c_str())))
		{
		//测试验证通过
		if (0==_tcscmp(m_ktv_test_number,L""))
		{
		//记下工号
		_tcscpy(m_ktv_test_number,command);
		//返回密码通过的消息
		m_test_flash_player.CallFunction(L"<invoke name=\"passwordPL\" returntype=\"xml\"><arguments><true/></arguments></invoke>");
		}
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"test")) && (0==_tcscmp(args,L"quit")))
		{
		//退出测机功能
		if (auto_test_timer_identifier)
		{
		KillTimer(auto_test_timer_identifier);
		auto_test_timer_identifier=0;
		}
		//修改标志位，表示不使用测机中
		m_use_test_function = false;
		//隐藏测机界面
		m_test_flash_player.SetWindowPos(&CWnd::wndNoTopMost,0,0,0,0,SWP_NOSIZE|SWP_NOMOVE|SWP_SHOWWINDOW);
		m_test_flash_player.ShowWindow(SW_HIDE);
		//清空测机数据
		m_video_play_manager.clear_select_song(true);
		//设置状态为开机状态
		m_video_play_manager.set_player_cur_state(BEGIN_STATE);
		m_video_play_manager.set_player_next_state(BEGIN_STATE);
		//发送切歌曲码
		WriteLog(__FL__, L"测机完成，播放空闲歌曲");
		flash_message_call_function(SONG_NEXT);
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"test_result")) && (0==_tcscmp(args,L"upload")))
		{
		//测试结果上传
		TCHAR upload_path[256];
		TCHAR local_path[256];
		TCHAR request[1024];

		memset(upload_path,0x0,sizeof(upload_path));
		memset(local_path,0x0,sizeof(local_path));
		memset(request,0x0,sizeof(request));

		if (auto_test_timer_identifier)
		{
		KillTimer(auto_test_timer_identifier);
		auto_test_timer_identifier=0;
		}

		if (m_server_path.empty())
		{
		//服务器路径为空，上传失败
		flash_show_tip_message(8);
		}
		else
		{
		swprintf(upload_path,L"%s\\test_result\\%s.ini",m_server_path.c_str(),m_show_room_name);
		swprintf(local_path,L"%s\\test_result.ini",m_work_path);
		if (PathFileExists(local_path))
		{
		BOOL ret = CopyFile(local_path,upload_path,FALSE);
		if (!ret)
		{
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"tooltip",L"上传失败，请检查服务器路径和网络");
		if (result)
		{
		m_test_flash_player.CallFunction(request);
		}
		}
		else
		{
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"tooltip",L"上传成功");
		if (result)
		{
		m_test_flash_player.CallFunction(request);
		//删除本地测试结果
		DeleteFile(local_path);
		}
		}
		}
		else
		{
		//不存在
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"tooltip",L"测试结果不存在，请先确认测试结果");
		if (result)
		{
		m_test_flash_player.CallFunction(request);
		}
		}
		}
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"test")) && (0==_tcscmp(args,L"auto")))
		{
		//自动测试，启动定时期自动测试
		if (auto_test_timer_identifier)
		{
		KillTimer(auto_test_timer_identifier);
		auto_test_timer_identifier=0;
		}
		m_auto_test_number=1;
		auto_test_timer_identifier = SetTimer(AUTO_TEST_TIMER_EVENT_ID,5000,NULL);
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"test")) && (0==_tcscmp(args,L"again")))
		{
		//重新测试
		if (auto_test_timer_identifier)
		{
		KillTimer(auto_test_timer_identifier);
		auto_test_timer_identifier=0;
		}
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"listsong")) && (0==_tcscmp(args,L"finish")))
		{
		//测试的歌曲列表初始化完成，添加测试列表
		test_song_query_show_data();
		//设置焦点
		m_test_flash_player.SetFocus();
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"testresult")) && (0==_tcscmp(args,L"finish")))
		{
		//正式开始测试
		m_start_test=true;
		//测试页面初始化完成，开始测试
		WriteLog(__FL__, L"开始播放第一首测机歌曲");
		flash_message_call_function(SONG_NEXT);
		//设置焦点
		m_test_flash_player.SetFocus();
		}
		else if (m_use_test_function && (0==_tcscmp(command,L"playpos")))
		{
		//改变播放位置，即快进，快退
		long play_pos=0;
		long total_time_length=0;
		long play_time_length=0;

		total_time_length = m_player_manager.get_total_time_length();
		swscanf(args,L"%d",&play_pos);
		play_time_length = total_time_length*play_pos/100;
		m_player_manager.seek(play_time_length);
		}
		else if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state))
		{
		//默认就是错误
		//测试登录界面错误
		m_test_flash_player.CallFunction(L"<invoke name=\"passwordPL\" returntype=\"xml\"><arguments><false/></arguments></invoke>");
		}*/
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_ex(const TCHAR *command,const TCHAR *args)
{
	bool result;
	//系统信息
	if (0==_tcscmp(command,L"sysInfo"))   //系统信息
	{
		change_system_info(args);
	}
	else if (0==_tcscmp(command,L"keyboard"))  //系统信息的键盘输入
	{
		system_info_keyboard_input(args);
	}
	//互动游戏
	else if (0==_tcscmp(command,L"game_code"))
	{
		int keybd_code=0;

		swscanf(args,L"%d",&keybd_code);

		send_keybd_code_to_game(keybd_code);
	}else if (0==_tcscmp(command,L"sort"))   //排序方式
	{
		if (0==_tcscmp(args,L"ABC"))
		{
			//设置排序方式
			_tcscpy(m_show_sort_mode,L"hot");
			update_sort_button_state();
		}
		else
		{
			//设置排序方
			_tcscpy(m_show_sort_mode,L"pinyin");
			update_sort_button_state();
		}
		//刷新列表
		refresh_screen_list(true);
	}
	else if (0==_tcscmp(command, L"character")) //视频交友-改变角色
	{
		int index;
		swscanf(args, L"%d", &index);
		m_video_dating_info.ncharacter = index;
		send_server_video_dating_data((video_dating_status)m_video_dating_info.nstatus);

		send_video_dating_info_to_flash();
	}
	else if (0==_tcscmp(command, L"not_disturb")) //视频交友-免打扰
	{
		switch(m_video_dating_info.nstatus)
		{
		case 0:
			{
				m_video_dating_info.nstatus = 2;
				send_server_video_dating_data((video_dating_status)m_video_dating_info.nstatus);
			}
			break;
		case 2:
			{
				m_video_dating_info.nstatus = 0;
				send_server_video_dating_data((video_dating_status)m_video_dating_info.nstatus);
			}
			break;
		}							
	}
	else if (0==_tcscmp(command, L"send_invaitation_tip"))
	{
		//如果当前状态是在忙碌或者免打扰状态 则不能发送视频
		if (m_video_dating_info.nstatus == VD_NOTDISTURB || m_video_dating_info.nstatus == VD_BUSY)
		{
			return;
		}
		int index;
		swscanf(args, L"%d", &index);
		m_vd_send_idx = (m_vd_page_num - 1) * 9 + index;

		TCHAR request[1024];
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));

		memset(request,0x0,sizeof(request));
		m_video_dating_accept_info = m_server_video_dating_data[m_vd_send_idx];
		swprintf(data,L"<data><info tip=\"%s\"/></data>", m_video_dating_accept_info.name);
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"send_invaitation_tip",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	else if (0==_tcscmp(command, L"send_invaitation")) //视频交友-发送邀请
	{
		TCHAR szIp[32] = {0x00};
		if (m_vd_send_idx < 0)
		{
			return;
		}		
		_tcscpy(szIp, m_video_dating_accept_info.ip);
		if(_tcscmp(szIp, L"") == 0)
		{
			return;
		}
		connect_video_dating(szIp, L"send");

		//改状态
		send_server_video_dating_data(VD_BUSY);
	}
	else if (0==_tcscmp(command, L"accept_video_dating")) //视频交友-接收别人的邀请
	{
		TCHAR szIp[32] = {0x00};
		swscanf(args, L"%d", &m_vd_send_idx);
		if (m_vd_send_idx < 0)
		{
			return;
		}
		_tcscpy(szIp, m_video_dating_accept_info.ip);
		if(_tcscmp(szIp, L"") == 0)
		{
			return;
		}
		//发给对面的ip，我接受了视频
		connect_video_dating(m_video_dating_accept_info.ip,L"accept");

		accept_vd_invitation(1);
		//改状态
		send_server_video_dating_data(VD_BUSY);

		TCHAR request[1024];
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));

		memset(request,0x0,sizeof(request));
		m_video_dating_accept_info = m_server_video_dating_data[m_vd_send_idx];
		swprintf(data,L"<data><info tip=\"%s\"/></data>", m_video_dating_accept_info.name);
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"begin_video",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	else if (0==_tcscmp(command, L"quit_video_dating")) //视频交友-接收别人的邀请
	{
		TCHAR szIp[32] = {0x00};
		if (m_vd_send_idx < 0)
		{
			return;
		}
		_tcscpy(szIp, m_video_dating_accept_info.ip);
		if(_tcscmp(szIp, L"") == 0)
		{
			return;
		}

		//改状态
		send_server_video_dating_data(VD_IDLE);

		//关闭视频
		m_player_manager.Live_Close(0);
		m_player_manager.Live_Close(1);

		//关闭视频OSD图片
		m_player_manager.stop_bmp_osd();

		connect_video_dating(szIp, L"quit");

		TCHAR request[1024];
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));

		memset(request,0x0,sizeof(request));
		m_video_dating_accept_info = m_server_video_dating_data[m_vd_send_idx];
		swprintf(data,L"<data><info tip=\"\"/></data>");
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"begin_video",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	else if (0==_tcscmp(command, L"refuse_video_dating")) //视频交友-拒绝别人的邀请
	{
		TCHAR szIp[32] = {0x00};
		if (m_vd_send_idx < 0)
		{
			return;
		}
		_tcscpy(szIp, m_video_dating_accept_info.ip);
		if(_tcscmp(szIp, L"") == 0)
		{
			return;
		}
		connect_video_dating(szIp, L"refuse");

		//改状态
		send_server_video_dating_data(VD_IDLE);
	}else if (0==_tcscmp(command, L"html_rectangle"))
	{
		int x_pos=0;
		int y_pos=0;
		int width=0;
		int height=0;
		bool result=false;

		//解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args,x_pos,y_pos,width,height);
		if (result && m_handwriting_window_exist)
		{
			//移动WebBrowse
			m_html_ctrl.MoveWindow(x_pos, y_pos, width, height);
		}
	}
	else if (0==_tcscmp(command, L"html_is_show")) //是否显示娱乐新闻
	{
		if (0==_tcscmp(args,L"true"))
		{
			config_file_manager config_file;
			std::wstring szUrl = config_file.read_string(L"server",L"entertainment_news",L"");
			m_html_ctrl.Navigate2(szUrl.c_str());
			m_html_ctrl.BringWindowToTop();
			m_html_ctrl.ShowWindow(SW_SHOW);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = true;
		}else{
			if (m_show_html_ctrl)
			{
				m_html_ctrl.ShowWindow(SW_HIDE);
				m_html_ctrl.UpdateWindow();
				m_show_html_ctrl = false;
			}				
		}
	}
	else if (0==_tcscmp(command, L"drink_html")) //是否显示酒水的网页
	{
		if (0==_tcscmp(args,L"true"))
		{
			config_file_manager config_file;
			std::wstring szUrl = config_file.read_string(L"drinks",L"drink_url",L"");
			m_html_ctrl.Navigate2(szUrl.c_str());
			m_html_ctrl.BringWindowToTop();
			m_html_ctrl.ShowWindow(SW_SHOW);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = true;
		}else{
			if (m_show_html_ctrl)
			{
				m_html_ctrl.ShowWindow(SW_HIDE);
				m_html_ctrl.UpdateWindow();
				m_show_html_ctrl = false;
			}				
		}
	}
	else if (0 == _tcscmp(command, L"consume_html"))//是否显示消费查询的网页
	{
		if (0 == _tcscmp(args,L"true"))
		{
			config_file_manager config_file;
			std::wstring szUrl = config_file.read_string(L"drinks",L"consume_url",L"");
			m_html_ctrl.Navigate2((szUrl.c_str()));
			m_html_ctrl.BringWindowToTop();
			m_html_ctrl.ShowWindow(SW_SHOW);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = true;
		}else{
			if (m_show_html_ctrl)
			{
				m_html_ctrl.ShowWindow(SW_HIDE);
				m_html_ctrl.UpdateWindow();
				m_show_html_ctrl = false;
			}
		}
	}
	else if (0==_tcscmp(command, L"i_want_participate")) //参赛歌曲
	{
		int participate_number = -1;
		char szargs[256] = {0x00};
		string_conversion str_con;
		str_con.widechar_to_multibyte(args, szargs, 256);
		int args_number = -1;
		int guid_number = -1;

		char *pargs = strrchr(szargs, '@');
		if (pargs)
		{
			sscanf(szargs, "%d@%d", &args_number, &guid_number);
		}else{
			sscanf(szargs, "%d", &args_number);
		}

		if (args_number == 0) //参赛歌曲
		{
			if (m_song_show_video_picture)
			{
				pc_show_video_window();
			}
			participate_number = 0;
			set_flash_button_state(L"particpate_button",participate_number);
			flash_message_call_song_sort_song();				
		}else if (args_number == 1) //分享歌曲
		{
			TCHAR szGetSongID[1024];
			switch (guid_number)
			{
			case 0:
				swprintf(szGetSongID, L"GetSongID{\"RoomID\":\"%s\",\"activity_id\":\"%s\"}", m_show_room_name, m_maiba_rule_arena_info[0].activity_id);
				break;
			case 1:
				swprintf(szGetSongID, L"GetSongID{\"RoomID\":\"%s\",\"activity_id\":\"%s\"}", m_show_room_name, m_maiba_rule_arena_info[1].activity_id);
				break;
			case 2:
				swprintf(szGetSongID, L"GetSongID{\"RoomID\":\"%s\",\"activity_id\":\"%s\"}", m_show_room_name, m_maiba_rule_arena_info[2].activity_id);
				break;
			}
			//2015-6-19 14:26:24---小视屏窗口会把分享操作步骤遮挡
			if (m_song_show_video_picture)
			{
				m_screen_show_window.show_window(false);
			}
			participate_number = 1;
			set_flash_button_state(L"particpate_button",participate_number);

			REQUEST_BOX_DATA *request_box_data = new REQUEST_BOX_DATA;

			_tcscpy(request_box_data->request_data,szGetSongID);
			request_box_data->nPort = 6666;
			request_box_data->pThis = this;
			AfxBeginThread(send_server_msg_tcp_thread,request_box_data);
		}else if (args_number == 2) //擂台PK 参赛歌曲
		{
			if (m_song_show_video_picture)
			{
				pc_show_video_window();
			}
			participate_number = 0;
			set_flash_button_state(L"particpate_button",participate_number);
			song_query_show_data_by_id(song_select_expr, true, m_maiba_rule_arena_info[1].song_id);
		}
	}else if (0==_tcscmp(command, L"close_screen"))
	{
		TCHAR args[1024] = {0x00};
		TCHAR request[2048] = {0x00};
		swprintf(args, L"<data><info startButton=\"1\" screen=\"0\"/></data>");
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"screen_to_flash",args);
		flash_player_call_function(request);
		m_screen_to_flash_timer = true;

		m_creen_to_flash_show = false;
		pc_show_video_window();

		//2015-6-11 17:47:34---LTL---开始K歌时显示小视频和娱乐新闻
		int page_index=0;
		//得到目前页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (page_yule_news==page_index||page_index == page_drinks||page_index==page_consumer)
		{
			m_html_ctrl.ShowWindow(SW_SHOW);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = true;
		}
	}else if(0==_tcscmp(command, L"msg_delete_recorder_song")){
		song_info song_info_class;
		int index;
		TCHAR song_name[64] = {0x00};
		swscanf(args, L"%d", &index);
		m_delete_record_idx = args;

		//得到歌曲的信息
		m_query_song_manager.get_song_info(index, song_info_class);
		//得到歌手名字
		result = song_info_class.get_song_name(song_name);
		if (!result)
		{
			return;
		}
		record_delete_show_error_tip(125, 126, song_name);
	}else if(0==_tcscmp(command, L"score")){

		song_info current_song;
		m_player_manager.get_playing_video(current_song);
		int song_sort = current_song.get_song_sort();
		int maiba_pk = (song_sort>>2)&0x01;//是否是评分歌曲

		int index;
		TCHAR send_data[256];
		memset(send_data, 0x0, sizeof(send_data));

		//被控机，传给主控机
		swprintf(send_data, L"SCORE%s",args);
		send_master_slave_data(send_data, NULL);

		swscanf(args, L"%d", &index);

		if (0 == index)
		{
			m_show_score_in_screen = false;
			send_score_button_state(0);
			//停止播放评分图片osd
			m_player_manager.stop_score_osd();
		}
		else if (1 == index)
		{
			m_show_score_in_screen = true;
			if (maiba_pk == 1)
			{
				if (!m_is_open_four_track)
				{
					flash_message_call_function(SONG_ACCOMPANY);
				}
				else
				{
					flash_message_call_function(ENTER_GUIDE_SONG);
					flash_message_call_function(EXIT_GUIDE_SONG);
				}
			}
			send_score_button_state(1);
		}
		//del by yzg
//		m_player_manager.Set(SD_SET_SCORE_LINE_ONOFF, index);
//		m_player_manager.set_show_score_line(m_show_score_in_screen);
	}
	else if (0==_tcscmp(command, L"dlna")) //是否开启DLNA功能
	{
		//防止频繁切换
		double last_time = m_cut_song_timer.last_time();
		if (last_time<PLAY_VIDEO_MIN_TIME_LENGTH)
		{
			return;
		}
		//重新开始计时
		m_cut_song_timer.start();
		if (_tcscmp(args, L"0") == 0) //关闭DLNA功能
		{
			if (_tcscmp(m_GxShine_dll[1], L"") != 0)
			{
				//关闭DLNA功能
				if(!m_PluginsEx.OnClickEx(m_GxShine_dll[1], false))
				{
					WriteLog(__FL__, L"关闭DLNA功能失败!");
				}
				m_is_open_dlna = false;
			}
		}
		else if (_tcscmp(args, L"1") == 0) //开启DLNA功能
		{
			TCHAR szDllPath[MAX_PATH] = {0x00};
			//DLNADLL
			swprintf(szDllPath, L"%s\\GXShine\\DNLAControl_Plugins.dll", m_work_path);
			_tcscpy(m_GxShine_dll[1], szDllPath);
			m_PluginsEx.inital(szDllPath);

			if (_tcscmp(m_GxShine_dll[1], L"") != 0)
			{
				//默认开启DLNA功能
				if(!m_PluginsEx.OnClickEx(m_GxShine_dll[1], true))
				{
					WriteLog(__FL__, L"开启DLNA功能失败!");
				}
				m_is_open_dlna = true;
			}			
		}

		TCHAR data[MAX_PATH] = {0x00};
		TCHAR command[256] = {0x00};
		TCHAR request[1024];
		config_file_manager con_file;

		std::wstring wifi;
		std::wstring wifi_password;
		wifi = con_file.read_string(L"ipad",L"wifi",L"");
		wifi_password = con_file.read_string(L"ipad",L"wifi_password",L"");

		swprintf(data,L"<data><info wifi=\"%s\" wifi_password=\"%s\" dlna=\"%d\"/></data>",
			wifi.c_str(),wifi_password.c_str(), m_is_open_dlna ? 1 : 0);
		_tcscpy(command, L"phone_push_info");

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	else if (0==_tcscmp(command, L"send_dlna_tv"))
	{
		PlayDLNAFunction();

		m_player_manager.preview_close();
		if (m_preview_window_exist)
		{
			m_preview_window.show_window(false);
		}
		flash_message_call_function(PAGE_BACK);
	}
	else if (0==_tcscmp(command, L"dlna_preview_rect"))
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		//解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args,x_pos,y_pos,width,height);
		if (result)
		{
			m_dlna_preview_left_top_x = x_pos;
			m_dlna_preview_left_top_y = y_pos;
			m_dlna_preview_right_bottom_x = x_pos+width;
			m_dlna_preview_right_bottom_y = y_pos+height;
		}
	}
	else if (0==_tcscmp(command,L"consume"))
	{
		if (CLOSE_ROOM_STATE==m_pc_state)
		{
			//关房状态，不允许使用消费查询
			flash_show_tip_message(65);
		}
		else
		{
			flash_message_call_consume();
		}
	}
#ifdef VICE_SCREEN_GUANGXI
	else if (0 == _tcscmp(command, L"vice_screen") && 0 == _tcscmp(args, L"vice_screen_end"))
	{
		int n = 0;
		/*m_vice_screen_flash_player.BringWindowToTop();
		m_vice_screen_flash_player.Play();
		m_vice_screen_flash_player.ShowWindow(SW_SHOW);*/
	}else if (0 == _tcscmp(command, L"videoRect")) //副屏的边框
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		//解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args,x_pos,y_pos,width,height);
		if (result)
		{
			m_vice_screen_left_top_x = x_pos;
			m_vice_screen_left_top_y = y_pos;
			m_vice_screen_right_button_x = x_pos+width;
			m_vice_screen_right_button_y = y_pos+height;
		}
	}
#endif // VICE_SCREEN_GUANGXI
	else if (0==_tcscmp(command,L"film_type"))    //电影类型按钮
	{
		m_film_manager.m_npage_index = 0;
		m_film_manager.m_encodation_type = (FILM_TYPE)_wtoi(args);
		movie_query_show_data();
	}
	else if (0==_tcscmp(command,L"film_country"))    //电影地区按钮
	{
		m_film_manager.m_npage_index = 0;
		m_film_manager.m_encodation_country = (FILM_COUNTRY)_wtoi(args);
		movie_query_show_data();
	}
	else if (0==_tcscmp(command,L"film_order_by"))    //电影排序按钮
	{
		m_film_manager.m_encodation_orderby = (FILM_ORDER_BY)_wtoi(args);
		movie_query_show_data();
	}
	else if (0==_tcscmp(command,L"film_zan"))	//电影好评按钮//yzg 2015-5-28 14:34:12
	{
		TCHAR szMsg[256] = {0x00};
		if (m_nFilePraiseCnt > 0)
		{
			swprintf(szMsg, L"您还有 %d 次电影好评机会哦！", --m_nFilePraiseCnt);
			flash_show_tip_message(szMsg);
		}
		else
		{
			swprintf(szMsg, L"抱歉，您的电影好评机会已用完！");
			flash_show_tip_message(szMsg);
			return;
		}

		if( m_film_manager.PraiseFile() )
		{
			if (!movie_query_detail_data())
				WriteLog(__FL__, L"组织电影信息XML失败");
		}
		else
			WriteLog(__FL__, L"电影好评失败！");
		WriteLog(__FL__, L"电影好评完成");
	}
	else if (0==_tcscmp(command,L"single_video_rect"))//单视频模式视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			//视频窗口位置
			m_rt_master.left =  x_pos;
			m_rt_master.top =  y_pos;
			m_rt_master.right = m_rt_master.left + width;
			m_rt_master.bottom = m_rt_master.top + height;
			if (m_activity_wnd_full_screen)//Flash全屏显示
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd.left = 0;
				m_rtRelativeActivityWnd.top = 0;
				m_rtRelativeActivityWnd.right = m_rt_flash_player.Width();
				m_rtRelativeActivityWnd.bottom = m_rt_flash_player.Height();
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd = m_rt_flash_player;
			}
			else
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd = m_rt_master;
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd.left = m_inter_screen_manager.m_inter_screen_info.n_x + x_pos;
				m_rtAbsoluteActivityWnd.top = m_inter_screen_manager.m_inter_screen_info.n_y + y_pos;
				m_rtAbsoluteActivityWnd.right = m_rtAbsoluteActivityWnd.left + width;
				m_rtAbsoluteActivityWnd.bottom = m_rtAbsoluteActivityWnd.top + height;
			}
		}
		// 显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		show_wnd_info(0, 1, true);
	}
	else if (0==_tcscmp(command,L"double_master_video_rect"))// 双视频模式左视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			m_rt_master.left =  x_pos;
			m_rt_master.top =  y_pos;
			m_rt_master.right = m_rt_master.left + width;
			m_rt_master.bottom = m_rt_master.top + height;
			if (m_activity_wnd_full_screen)//Flash全屏显示
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd.left = 0;
				m_rtRelativeActivityWnd.top = 0;
				m_rtRelativeActivityWnd.right = m_rt_flash_player.Width();
				m_rtRelativeActivityWnd.bottom = m_rt_flash_player.Height();
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd = m_rt_flash_player;
			}
			else
			{
				if (m_show_activity_wnd == 0)
				{
					//活动flash相对场景屏位置
					m_rtRelativeActivityWnd = m_rt_master;
					//活动flash绝对位置
					m_rtAbsoluteActivityWnd.left = m_inter_screen_manager.m_inter_screen_info.n_x + x_pos;
					m_rtAbsoluteActivityWnd.top = m_inter_screen_manager.m_inter_screen_info.n_y + y_pos;
					m_rtAbsoluteActivityWnd.right = m_rtAbsoluteActivityWnd.left + width;
					m_rtAbsoluteActivityWnd.bottom = m_rtAbsoluteActivityWnd.top + height;
				}
			}
		}
		// 显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		show_wnd_info(0, 1, true);
	}
	else if (0==_tcscmp(command,L"double_slave_video_rect"))// 双视频模式右视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			m_rt_slave.left = x_pos;
			m_rt_slave.top = y_pos;
			m_rt_slave.right = m_rt_slave.left + width;
			m_rt_slave.bottom = m_rt_slave.top + height;
			if (m_activity_wnd_full_screen)//Flash全屏显示
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd.left = 0;
				m_rtRelativeActivityWnd.top = 0;
				m_rtRelativeActivityWnd.right = m_rt_flash_player.Width();
				m_rtRelativeActivityWnd.bottom = m_rt_flash_player.Height();
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd = m_rt_flash_player;
			}
			else
			{
				if (m_show_activity_wnd == 1)
				{
					//活动flash相对场景屏位置
					m_rtRelativeActivityWnd = m_rt_slave;
					//活动flash绝对位置
					m_rtAbsoluteActivityWnd.left = m_inter_screen_manager.m_inter_screen_info.n_x + x_pos;
					m_rtAbsoluteActivityWnd.top = m_inter_screen_manager.m_inter_screen_info.n_y + y_pos;
					m_rtAbsoluteActivityWnd.right = m_rtAbsoluteActivityWnd.left + width;
					m_rtAbsoluteActivityWnd.bottom = m_rtAbsoluteActivityWnd.top + height;
				}
			}
		}
		// 显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		show_wnd_info(0, 1, false);
	}
	else if (0==_tcscmp(command,L"assist_master_video_rect"))// 单辅助视频模式左视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			m_rt_master.left =  x_pos;
			m_rt_master.top =  y_pos;
			m_rt_master.right = m_rt_master.left + width;
			m_rt_master.bottom = m_rt_master.top + height;
			if (m_activity_wnd_full_screen)//Flash全屏显示
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd.left = 0;
				m_rtRelativeActivityWnd.top = 0;
				m_rtRelativeActivityWnd.right = m_rt_flash_player.Width();
				m_rtRelativeActivityWnd.bottom = m_rt_flash_player.Height();
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd = m_rt_flash_player;
			}
			else
			{
				if (m_show_activity_wnd == 0)
				{
					//活动flash相对场景屏位置
					m_rtRelativeActivityWnd = m_rt_master;
					//活动flash绝对位置
					m_rtAbsoluteActivityWnd.left = m_inter_screen_manager.m_inter_screen_info.n_x + x_pos;
					m_rtAbsoluteActivityWnd.top = m_inter_screen_manager.m_inter_screen_info.n_y + y_pos;
					m_rtAbsoluteActivityWnd.right = m_rtAbsoluteActivityWnd.left + width;
					m_rtAbsoluteActivityWnd.bottom = m_rtAbsoluteActivityWnd.top + height;
				}
			}
		}
		// 显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		show_wnd_info(0, 1, true);
	}
	else if (0==_tcscmp(command,L"assist_slave_video_rect"))// 单辅助视频模式右视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			m_rt_slave.left = x_pos;
			m_rt_slave.top = y_pos;
			m_rt_slave.right = m_rt_slave.left + width;
			m_rt_slave.bottom = m_rt_slave.top + height;
			if (m_activity_wnd_full_screen)//Flash全屏显示
			{
				//活动flash相对场景屏位置
				m_rtRelativeActivityWnd.left = 0;
				m_rtRelativeActivityWnd.top = 0;
				m_rtRelativeActivityWnd.right = m_rt_flash_player.Width();
				m_rtRelativeActivityWnd.bottom = m_rt_flash_player.Height();
				//活动flash绝对位置
				m_rtAbsoluteActivityWnd = m_rt_flash_player;
			}
			else
			{
				if (m_show_activity_wnd == 1)
				{
					//活动flash相对场景屏位置
					m_rtRelativeActivityWnd = m_rt_slave;
					//活动flash绝对位置
					m_rtAbsoluteActivityWnd.left = m_inter_screen_manager.m_inter_screen_info.n_x + x_pos;
					m_rtAbsoluteActivityWnd.top = m_inter_screen_manager.m_inter_screen_info.n_y + y_pos;
					m_rtAbsoluteActivityWnd.right = m_rtAbsoluteActivityWnd.left + width;
					m_rtAbsoluteActivityWnd.bottom = m_rtAbsoluteActivityWnd.top + height;
				}
			}
		}
		// 显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		show_wnd_info(0, 1, false);
	}
	else if (0 == _tcscmp(command, L"inter_screen") && 0 == _tcscmp(args, L"inter_screen_begin"))
	{
		// 互动场景屏模式
		//		flash_message_call_inter_screen_config();
	}
	else if (0 == _tcscmp(command, L"inter_screen") && 0 == _tcscmp(args, L"inter_screen_end"))
	{
		// 发送互动场景屏展示信息给flash
		result = flash_message_call_show_inter_screen(0);
	}
	else if (0 == _tcscmp(command, L"challenge_star_begin"))
	{
		bool bChallengeStarBegin = true;
	}
	else if (0 == _tcscmp(command, L"challenge_star_end"))
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nFlashFinishCnt++;
		}
		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 告诉flash 播放倒计时
			if (m_nFlashFinishCnt == 2)
			{
				result = flash_message_call_challenge_count_down();
				m_bChallengeStarFinish = true;
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nFlashFinishCnt == 1)
			{
				result = flash_message_call_challenge_count_down(1);
				m_bChallengeStarFinish = true;
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nFlashFinishCnt == 1)
			{
				result = flash_message_call_challenge_count_down(2);
				m_bChallengeStarFinish = true;
			}
		}
		//控制flash音量
		flash_message_call_flash_volume(page_challenge_star);
	}
	else if (0 == _tcscmp(command, L"challenge_exit"))//退出挑战
	{
		flash_message_call_function(PAGE_BACK);
		if (!m_b_challenging)
		{
			// 广告字幕
			if (m_inter_screen_manager.IsMember(L"701", 1))
			{
				flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
			}	
		}
	}
	else if (0 == _tcscmp(command, L"challenge_yes"))//开始挑战
	{
		// 正在挑战中，直接显示成绩
		int nIndex = 0;
		swscanf(args, L"%d", &nIndex);

		//
		m_b_challenge_begin = true;
		//全局索引
		m_nChallengeIndex = nIndex + m_page_show_row_count*(m_nCurrentChallengeSongPage-1);

		//关闭视频
		m_player_manager.close_video_file();
		//强制切换伴唱
		flash_message_call_function(SONG_ACCOMPANY);
		//向被控端发送遮挡图片消息
		send_master_slave_cover_iamge_data(true, page_challenge_star);
		//销毁秀秀MV窗口
		destroy_picture_mv_wnd();
		//记录当前活动页面码
		m_nCurPageCode = page_challenge_star;

		if (m_b_challenging)
		{
			int score = 0;
			bool bSuccess = true;
			string_conversion str_conv;
			char szscore[256] = {0x00};

			if (m_nCurrentTotalScore == 0)
				score = 0;
			else
				score = m_nCurrentTotalScore/m_lyric_total_sentences/* + (m_nCurrentTotalScore/m_lyric_total_sentences == 0)?1:0*/;

			str_conv.widechar_to_multibyte(m_vec_challenge_star_info[m_nChallengeIndex].goal_score, szscore, 256);

			if (atoi(szscore) > score)
				bSuccess = false;
			if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
			{
				m_StarTransparentWnd->SetWindowStyle(NULL, 255);
				m_StarTransparentWnd->MoveWindow(m_rtAbsoluteActivityWnd.left, m_rtAbsoluteActivityWnd.top, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
				m_StarTransparentWnd->MoveFlashWindow(CRect(0,0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height()));
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
			{
				m_StarSoftTransparentWnd->SetWindowStyle(NULL, 255);
				m_StarSoftTransparentWnd->MoveWindow(m_rt_soft_activity.left, m_rt_soft_activity.top, m_rt_soft_activity.Width(), m_rt_soft_activity.Height());
				m_StarSoftTransparentWnd->MoveFlashWindow(CRect(0,0, m_rt_soft_activity.Width(), m_rt_soft_activity.Height()));
			}
			// 显示结果动画
			result = flash_message_call_start_result(bSuccess);
		}
		else
		{
			// 创建挑战大咖透明flash窗口
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				TCHAR path[256] = {0x00};
				if (m_inter_screen_exist)
					swprintf(path,L"%s\\%s\\Main1.swf",m_work_path, g_folder_name[42]);	
				else
					swprintf(path,L"%s\\%s\\Main.swf",m_work_path, g_folder_name[42]);	
				CRect rtStarFlash(0,0,m_sencond_display_width, m_sencond_display_height);
				if (m_StarSoftTransparentWnd != NULL)
				{
					delete m_StarSoftTransparentWnd;
					m_StarSoftTransparentWnd = NULL;
				}
				m_StarSoftTransparentWnd = new CTransparentWnd;
				PlayScreenFlash(m_StarSoftTransparentWnd, &m_soft_decode_window_child, path, m_rt_soft_activity, rtStarFlash, SCREEN_FLASH_WND_ID, CHALLENGE_STAR_SOFT_PLAYER_ID);

				m_StarSoftTransparentWnd->m_pFlash->put_ScaleMode(2);//可缩放，适应窗口
				m_StarSoftTransparentWnd->SetWindowStyle(NULL, 255);
				m_StarSoftTransparentWnd->SetWindowPos(&CWnd::wndTopMost,m_rt_soft_activity.left,m_rt_soft_activity.top,m_rt_soft_activity.Width(),m_rt_soft_activity.Height(),NULL);
				m_StarSoftTransparentWnd->ShowWindow(SW_SHOW);
				m_StarSoftTransparentWnd->m_pFlash->ShowWindow(SW_SHOW);
			}
			if (m_inter_screen_exist)
			{
				/// 创建挑战大咖透明flash窗口
				TCHAR path[256] = {0x0};
				swprintf(path,L"%s\\%s\\Main.swf",m_work_path, g_folder_name[42]);	
				CRect rtStarFlash(0,0,m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
				if (m_StarTransparentWnd != NULL)
				{
					delete m_StarTransparentWnd;
					m_StarTransparentWnd = NULL;
				}
				m_StarTransparentWnd = new CTransparentWnd;
				PlayScreenFlash(m_StarTransparentWnd, &m_inter_screen_window, path, m_rtAbsoluteActivityWnd, rtStarFlash, SCREEN_FLASH_WND_ID, CHALLENGE_STAR_PLAYER_ID);
				if (m_activity_wnd_full_screen)
				{
					if (m_show_activity_wnd == 0 || m_inter_screen_mode == 0 || m_inter_screen_mode == 1)
					{
						m_master_show_window.MoveWindow(0, 0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
					}
					else
					{
						m_slave_show_window.MoveWindow(0, 0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
					}
				}
				m_StarTransparentWnd->m_pFlash->put_ScaleMode(2);//可缩放，适应窗口
				m_StarTransparentWnd->SetWindowStyle(NULL, 255);
				m_StarTransparentWnd->MoveWindow(m_rtAbsoluteActivityWnd.left, m_rtAbsoluteActivityWnd.top, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
				m_StarTransparentWnd->MoveFlashWindow(CRect(0,0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height()));
				m_StarTransparentWnd->ShowWindow(SW_SHOW);
				m_StarTransparentWnd->m_pFlash->ShowWindow(SW_SHOW);
			}
			m_b_challenging = true;
		}
	}
	else if (0 ==_tcscmp(command, L"challenge_star_finish"))//挑战大咖结束码
	{
		if (0 ==_tcscmp(args, L"success"))//成功flash结束
		{
			if (m_b_challenge_begin)
			{
				// 告诉flash 播放倒计时
				result = flash_message_call_challenge_count_down();
			}
			else//不继续挑战切歌
			{
				flash_message_call_function(SONG_NEXT);
				m_nFlashFinishCnt = 0;
				m_bChallengeStarFinish = false;
				m_nCurPageCode = 0;
				// 广告字幕
				if (m_inter_screen_manager.IsMember(L"701", 1))
				{
					flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
				}
			}
		}
		else if (0 ==_tcscmp(args, L"fail"))	//失败flash结束
		{
			if (m_b_challenge_begin)
			{
				// 告诉flash 播放倒计时
				result = flash_message_call_challenge_count_down();
			}
			else//不继续挑战切歌
			{
				flash_message_call_function(SONG_NEXT);
				m_nFlashFinishCnt = 0;
				m_bChallengeStarFinish = false;
				m_nCurPageCode = 0;
				// 广告字幕
				if (m_inter_screen_manager.IsMember(L"701", 1))
				{
					flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
				}
			}
		}
		else if (0 ==_tcscmp(args, L"count_down"))	//倒计时flash结束
		{
			m_nCurrentScore = 0;
			m_nCurrentTotalScore = 0;
			m_nSingCount = 0;

			if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
			{
				m_StarTransparentWnd->SetWindowStyle(NULL, 180);
				m_StarTransparentWnd->MoveWindow(m_rtAbsoluteActivityWnd.left, m_rtAbsoluteActivityWnd.top, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height()*3/5);
				m_StarTransparentWnd->MoveFlashWindow(CRect(0,0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height()));
				m_StarTransparentWnd->ShowWindow(SW_SHOW);
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
			{
				m_StarSoftTransparentWnd->SetWindowStyle(NULL, 180);
				m_StarSoftTransparentWnd->MoveWindow(m_rt_soft_activity.left, m_rt_soft_activity.top, m_rt_soft_activity.Width(), m_rt_soft_activity.Height()*3/5);
				m_StarSoftTransparentWnd->ShowWindow(SW_SHOW);
			}

			//跳转到挑战页面
			result = flash_message_call_challenging();
			//默认分数0
			flash_message_call_challenging_score(m_nCurrentScore);
			//开始挑战
			result = start_challenge_star(m_nChallengeIndex, args);
			if (!result)
			{
				if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
				{
					m_StarTransparentWnd->MoveWindow(0,0,0,0);
				}
				if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
				{
					m_StarSoftTransparentWnd->MoveWindow(0,0,0,0);
				}
				m_b_challenging = false;
				m_b_challenge_begin = false;
				flash_message_call_function(SONG_NEXT);
				// 广告字幕

				return;
			}
			if (m_inter_screen_manager.IsMember(L"701", 1))
			{
				flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
			}
			m_b_challenge_begin = false;
		}
	}
	else if (0 ==_tcscmp(command, L"seize_prize_star_begin"))
	{
	}
	else if (0 ==_tcscmp(command, L"seize_prize_star_end"))//百秒flash初始化完成
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nFlashFinishCnt++;
		}
		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 大屏幕切换
			if (m_nFlashFinishCnt == 2)
			{
				flash_message_call_main_pass_tv();
				m_bAcrossPassFlashFinish = true;
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nFlashFinishCnt == 1)
			{
				flash_message_call_main_pass_tv(1);
				m_bAcrossPassFlashFinish = true;
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nFlashFinishCnt == 1)
			{
				flash_message_call_main_pass_tv(2);
				m_bAcrossPassFlashFinish = true;
			}
		}
		//控制flash音量
		flash_message_call_flash_volume(page_across_pass);

	}
	else if (0 ==_tcscmp(command, L"across_pass_video_rect"))//百秒夺奖视频位置
	{
		int x_pos=0, y_pos=0, width=0, height=0;
		bool result=false;

		// 解析坐标字符串，得到坐标和高宽
		result = parse_coordinate_string(args, x_pos, y_pos, width, height);
		if (result)
		{
			//计算宽高
			float wRate = 0, hRate = 0;	//缩放比例
			int rateWidth = 0, rateHeight = 0;//缩放后宽高
			//场景屏上视频位置
			wRate = (float)((float)m_rtRelativeActivityWnd.Width()/(float)m_rt_flash_player.Width());
			hRate = (float)((float)m_rtRelativeActivityWnd.Height()/(float)m_rt_flash_player.Height());
			rateWidth = width * wRate;
			rateHeight = height * hRate;
			m_rtPassVideoWnd.left = m_rtRelativeActivityWnd.left + x_pos * wRate;
			m_rtPassVideoWnd.top = m_rtRelativeActivityWnd.top + y_pos * hRate;
			m_rtPassVideoWnd.right = m_rtPassVideoWnd.left + rateWidth;
			m_rtPassVideoWnd.bottom = m_rtPassVideoWnd.top + rateHeight;
			//软解屏上视频位置
			m_rtPassVideoWndSoft.left = x_pos;
			m_rtPassVideoWndSoft.top = y_pos;
			m_rtPassVideoWndSoft.right = m_rtPassVideoWndSoft.left + width;
			m_rtPassVideoWndSoft.bottom = m_rtPassVideoWndSoft.top + height;
		}
	}
	else if (0 ==_tcscmp(command, L"exit_across_pass"))//退出百秒夺奖
	{
		m_bInPageAcrossPass = false;
		// pc界面返回
		flash_message_call_function(PAGE_BACK);
		//向被控端发送遮挡图片消息
		send_master_slave_cover_iamge_data(false, page_across_pass);
		// tv上切换
		falsh_message_call_exit_across_pass_tv();
		//
		if (m_bAcrossPassing)
		{
			m_player_manager.close_video_file();
			if (m_inter_screen_exist)
			{
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.ShowWindow(SW_HIDE);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.ShowWindow(SW_HIDE);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash )
			{
				m_soft_decode_window_child.ShowWindow(SW_HIDE);
			}
			//正在挑战的关卡改变状态
			m_vec_pass[m_nCurPassIndex].SetState(UN_ACROSS);
			//播放结果
			flash_message_call_across_pass_result(false);
		}
		else
		{
			//给flash发码停止定时器
			//显示视屏窗口
			if (m_inter_screen_exist)
			{
				if (m_bAcrossPassFlashPlayerExist)
				{
					m_AcrossPassFlashPlayer.DestroyWindow();
					m_bAcrossPassFlashPlayerExist = false;
				}
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
					m_master_show_window.ShowWindow(SW_SHOW);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
					m_slave_show_window.ShowWindow(SW_SHOW);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash )
			{
				if (m_bAcrossPassSoftFlashPlayerExist)
				{
					m_AcrossPassSoftFlashPlayer.DestroyWindow();
					m_bAcrossPassSoftFlashPlayerExist = false;
				}
				m_soft_decode_window_child.MoveWindow(0, 0, m_sencond_display_width, m_sencond_display_height);
				m_soft_decode_window_child.ShowWindow(SW_SHOW);
			}
			m_nFlashFinishCnt = 0;
			m_bAcrossPassFlashFinish = false;
			//切歌
			flash_message_call_function(SONG_NEXT);
			m_nCurPageCode = 0;
			m_nCurrentScore = 0;
			m_nCurrentTotalScore = 0;
			m_nSingCount = 0;
		}
		m_bAcrossPassing = false;
		// 广告字幕
		if (m_inter_screen_manager.IsMember(L"701", 1))
		{
			flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
		}
	}
	else if (0 ==_tcscmp(command, L"across_pass_cancel"))
	{
		if (!m_bAcrossPassing)
		{
			flash_message_call_main_pass_tv();
			//
			if (m_inter_screen_exist)
			{
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.ShowWindow(SW_HIDE);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.ShowWindow(SW_HIDE);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_soft_decode_window_child.ShowWindow(SW_HIDE);
			}
		}
	}
	else if (0 ==_tcscmp(command, L"across_pass_reset"))
	{
		int nSize = m_vec_pass.size();
		m_vec_pass[0].SetState(READY_ACROSS);
		for(int i=1; i<nSize; ++i)
		{
			m_vec_pass[i].SetState(UN_ACROSS);
		}
		//
		m_player_manager.close_video_file();
		if (m_inter_screen_exist)
		{
			if (m_show_activity_wnd == 0)
			{
				m_master_show_window.ShowWindow(SW_HIDE);
			}
			else if (m_show_activity_wnd == 1)
			{
				m_slave_show_window.ShowWindow(SW_HIDE);
			}
		}
		if (m_soft_decode_window_exist && m_use_soft_active_flash)
		{
			m_soft_decode_window_child.ShowWindow(SW_HIDE);
		}
		if (m_bAcrossPassing)
		{
			flash_message_call_across_pass_result(false);
		}
		else
		{
			//pc端状态变化
			flash_message_call_main_pass_pc();
			//tv端
			flash_message_call_main_pass_tv();
		}
		m_bAcrossPassing = false;
	}
	else if (0 ==_tcscmp(command, L"select_pass"))//点击关卡按钮
	{
		if (!m_bAcrossPassFlashFinish)
		{
			flash_show_tip_message(L"资源正在加载，请耐心等待！");
			return;
		}
		// 关卡索引
		swscanf(args, L"%d", &m_nCurPassIndex);

		result = flash_message_call_select_pass_song_pc(FIRST_PAGE_OPERATE, true);
		if (!m_bAcrossPassing)
		{
			if (m_inter_screen_exist)
			{
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.ShowWindow(SW_HIDE);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.ShowWindow(SW_HIDE);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_soft_decode_window_child.ShowWindow(SW_HIDE);
			}
		}
	}
	else if (0 ==_tcscmp(command, L"pass_song_next_page"))
	{
		// 关卡索引
		int nIndex = 0;
		swscanf(args, L"%d", &nIndex);
		result = flash_message_call_pass_song_next_page_pc(nIndex);
		if (!m_bAcrossPassing)
		{
			result = flash_message_call_pass_next_page_tv();
		}
	}
	else if (0 ==_tcscmp(command, L"start_across_pass"))
	{
		if (m_bAcrossPassing)
		{
			m_player_manager.close_video_file();
			if (m_inter_screen_exist)
			{
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.ShowWindow(SW_HIDE);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.ShowWindow(SW_HIDE);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_soft_decode_window_child.ShowWindow(SW_HIDE);
			}
		}
		// pc端界面变换
		flash_message_call_start_pass_pc();
		if (m_vec_pass[m_nCurPassIndex].GetState() != ACROSS_SUCCESS)
		{
			// tv端界面变换//倒计时
			flash_message_call_pass_count_down();
		}
	}
	else if (0 ==_tcscmp(command, L"across_pass_finish"))
	{
		if (0 ==_tcscmp(args, L"count_down"))//百秒夺奖倒计时结束
		{
			if (m_inter_screen_exist)
			{
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.ShowWindow(SW_SHOW);
					m_master_show_window.MoveWindow(m_rtPassVideoWnd.left,m_rtPassVideoWnd.top,m_rtPassVideoWnd.Width(),m_rtPassVideoWnd.Height());
					m_master_show_window.BringWindowToTop();
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.ShowWindow(SW_SHOW);
					m_slave_show_window.MoveWindow(m_rtPassVideoWnd.left,m_rtPassVideoWnd.top,m_rtPassVideoWnd.Width(),m_rtPassVideoWnd.Height());
					m_slave_show_window.BringWindowToTop();
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_soft_decode_window_child.ShowWindow(SW_SHOW);
				m_soft_decode_window_child.MoveWindow(m_rtPassVideoWndSoft.left,m_rtPassVideoWndSoft.top,m_rtPassVideoWndSoft.Width(),m_rtPassVideoWndSoft.Height());
				m_soft_decode_window_child.BringWindowToTop();
			}
			
			result = start_pass_tv();

			result = flash_message_call_start_pass_tv();

			m_bAcrossPassing = true;
		}
		else if (0 ==_tcscmp(args, L"success"))
		{
			m_bAcrossPassing = false;

			if (!m_bInPageAcrossPass)
			{
				//给flash发码停止定时器
				//显示视屏窗口
				if (m_inter_screen_exist)
				{
					if (m_show_activity_wnd == 0)
					{
						m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
						m_master_show_window.ShowWindow(SW_SHOW);
					}
					else if (m_show_activity_wnd == 1)
					{
						m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
						m_slave_show_window.ShowWindow(SW_SHOW);
					}
				}
				if (m_soft_decode_window_exist && m_use_soft_active_flash)
				{
					m_soft_decode_window_child.MoveWindow(0, 0, m_sencond_display_width, m_sencond_display_height);
					m_soft_decode_window_child.ShowWindow(SW_SHOW);
				}
				//切歌
				flash_message_call_function(SONG_NEXT);
			}
			else
			{
				//PC上刷新关卡状态
				flash_message_call_main_pass_pc();
				if (!m_bAcrossPassing)
				{
					//TV上显示主页面
					flash_message_call_main_pass_tv();
				}
				//
				if (m_inter_screen_exist)
				{
					if (m_show_activity_wnd == 0)
					{
						m_master_show_window.ShowWindow(SW_HIDE);
					}
					else if (m_show_activity_wnd == 1)
					{
						m_slave_show_window.ShowWindow(SW_HIDE);
					}
				}
				if (m_soft_decode_window_exist && m_use_soft_active_flash)
				{
					m_soft_decode_window_child.ShowWindow(SW_HIDE);
				}
			}
//#ifdef DALIAN_MATSA_EK_PLUS
			if (!m_bAPGetAward && m_nCurPassIndex == (m_nTotalPassCount-1))
			{
//#endif
				WriteLog(__FL__, L"发送百秒夺奖奖励信息");
				//给盒子发送成功信息
				REQUEST_BOX_DATA *request_box_data = new REQUEST_BOX_DATA;
				TCHAR requse_data[1024] = {0x00};
				swprintf(requse_data,L"SONG_RECORDER_YK{\"activity_id\":\"%s\",\"song_id\":\"%s\",\"song_name\":\"%s\",\"singer_name\":\"%s\",\"video_path\":\"\",\"culture_code\":\"\",\"wave_path\":\"\",\"start_time\":\"\",\"datetime\":\"\",\"is_share\":\"0\",\"room_name\":\"%s\",\"score\":\"1\",\"user_name\":\"\",\"nick_name\":\"\",\"wave_exist\":\"0\",\"pk_flags\":\"%d\",\"song_language\":\"\",\"song_version\":\"\",\"member_pic\":\"\" }",
					m_maiba_rule_arena_info[4].activity_id, m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].song_id, m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].song_name,
					m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].singer_name, m_show_room_name, m_nCurPassIndex+1); 

				_tcscpy(request_box_data->request_data, requse_data);
				request_box_data->nPort = 6666;
				request_box_data->pThis = this;
				AfxBeginThread(send_data_to_maiba_rule_thread, request_box_data);
//#ifdef DALIAN_MATSA_EK_PLUS
				//设置已获取奖励的标志为true
				m_bAPGetAward = true;
			}
//#endif
		}
		else if (0 ==_tcscmp(args, L"fail"))
		{
			m_bAcrossPassing = false;
			if (!m_bInPageAcrossPass)
			{
				if (m_inter_screen_exist)
				{
					//显示视屏窗口
					if (m_show_activity_wnd == 0)
					{
						m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
						m_master_show_window.ShowWindow(SW_SHOW);
					}
					else if (m_show_activity_wnd == 1)
					{
						m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
						m_slave_show_window.ShowWindow(SW_SHOW);
					}
				}
				if (m_soft_decode_window_exist && m_use_soft_active_flash)
				{
					m_soft_decode_window_child.MoveWindow(0, 0, m_sencond_display_width, m_sencond_display_height);
					m_soft_decode_window_child.ShowWindow(SW_SHOW);
				}
				//切歌
				flash_message_call_function(SONG_NEXT);
			}
			else
			{
				//PC上刷新关卡状态
				flash_message_call_main_pass_pc();
				if (!m_bAcrossPassing)
				{
					//TV上显示主页面
					flash_message_call_main_pass_tv();
				}
				//
				if (m_inter_screen_exist)
				{
					if (m_show_activity_wnd == 0)
					{
						m_master_show_window.ShowWindow(SW_HIDE);
					}
					else if (m_show_activity_wnd == 1)
					{
						m_slave_show_window.ShowWindow(SW_HIDE);
					}
				}
				if (m_soft_decode_window_exist && m_use_soft_active_flash)
				{
					m_soft_decode_window_child.ShowWindow(SW_HIDE);
				}
			}

			//给盒子发送失败信息
			REQUEST_BOX_DATA *request_box_data = new REQUEST_BOX_DATA;
			TCHAR requse_data[1024] = {0x00};
			swprintf(requse_data,L"SONG_RECORDER_YK{\"activity_id\":\"%s\",\"song_id\":\"%s\",\"song_name\":\"%s\",\"singer_name\":\"%s\",\"video_path\":\"\",\"culture_code\":\"\",\"wave_path\":\"\",\"start_time\":\"\",\"datetime\":\"\",\"is_share\":\"0\",\"room_name\":\"%s\",\"score\":\"0\",\"user_name\":\"\",\"nick_name\":\"\",\"wave_exist\":\"0\",\"pk_flags\":\"%d\",\"song_language\":\"\",\"song_version\":\"\",\"member_pic\":\"\" }",
				m_maiba_rule_arena_info[4].activity_id, m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].song_id, m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].song_name,
				m_vec_pass[m_nCurPassIndex].m_vec_song[m_nCurSongIndex].singer_name, m_show_room_name, m_nCurPassIndex+1); 

			_tcscpy(request_box_data->request_data, requse_data);
			request_box_data->nPort = 6666;
			request_box_data->pThis = this;
			AfxBeginThread(send_data_to_maiba_rule_thread, request_box_data);
		}
	}
	else if (0==_tcscmp(command, L"across_pass_result"))//挑战结果
	{
		m_player_manager.close_video_file();
		if (m_inter_screen_exist)
		{
			if (m_show_activity_wnd == 0)
			{
				m_master_show_window.ShowWindow(SW_HIDE);
			}
			else if (m_show_activity_wnd == 1)
			{
				m_slave_show_window.ShowWindow(SW_HIDE);
			}
		}
		if (m_soft_decode_window_exist && m_use_soft_active_flash)
		{
			m_soft_decode_window_child.ShowWindow(SW_HIDE);
		}

		if (_tcscmp(args, L"successful") == 0)
		{
			//设置当前关卡的状态
			m_vec_pass[m_nCurPassIndex].SetState(ACROSS_SUCCESS);
			//设置下一关的状态
			int nIndex = m_nCurPassIndex;
			if (++nIndex <= m_nTotalPassCount-1)
			{
				m_vec_pass[nIndex].SetState(READY_ACROSS);
			}
			flash_message_call_across_pass_result(true);
		}
		else if (_tcscmp(args, L"failure") == 0)
		{
			m_vec_pass[m_nCurPassIndex].SetState(READY_ACROSS);

			flash_message_call_across_pass_result(false);
		}
	}
	else if (0==_tcscmp(command, L"video_show_data"))
	{
		//防止频繁切换
		double last_time = m_cut_song_timer.last_time();
		if (last_time<PLAY_VIDEO_MIN_TIME_LENGTH)
		{
			return;
		}
		//重新开始计时
		m_cut_song_timer.start();
		//挑战大咖设置为false
		m_b_challenging = false;
		if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
		{
			m_StarTransparentWnd->MoveWindow(0,0,0,0);
			m_StarTransparentWnd->ShowFlashWindow(SW_HIDE);
		}
		if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
		{
			m_StarSoftTransparentWnd->MoveWindow(0,0,0,0);
			m_StarSoftTransparentWnd->ShowFlashWindow(SW_HIDE);
		}
		//销毁秀秀MV窗口
		destroy_picture_mv_wnd();

		flash_message_call_function(SONG_PAUSE);

		/***********************************爱秀直播************************************/						
		/*先销毁窗口*/
		//DestroyAxBrowse();
		/************************************爱秀直播-end************************************/

		int page_count = 0;
		switch(m_interface_type)
		{
		case SCREEN_TYPE_HORIZON:
			{
				page_count = 10;
			}
			break;
		case SCREEN_TYPE_VERTICAL:
			{
				page_count = 9;
			}
			break;
		}

		int index = 0;
		if ((m_video_show_current_page - 1) >= 1)
			index += (m_video_show_current_page - 1)*page_count;
		index +=  _ttoi(args);

		TCHAR szUrl[2048] = {0x00};
		swprintf(szUrl, L"http://ktv.ishow.cn/%s/%s", m_st_video_show_vec[index]->showroomid, m_st_video_show_vec[index]->roomid);
		
		TCHAR szMsg[2048] = {0x00};
		swprintf(szMsg, L"current page is : %d, index is : %s, url is : %s", m_video_show_current_page, args, szUrl);
		WriteLog(__FL__, szMsg);
		string_conversion str_conn;
		char szcUrl[2048] = {0x00};
		str_conn.widechar_to_multibyte(szUrl, szcUrl, sizeof(szcUrl));
		/*创建浏览器*/
		SetAxBrowseUrl(szUrl);

		//向被控端发送遮挡图片消息
		send_master_slave_cover_iamge_data(true, page_video_show);
	}
	else if (0==_tcscmp(command, L"listen_control")) //听音识曲
	{
		TCHAR data[MAX_PATH] = {0x00}, reward[256] = {0x00};
		TCHAR command[256] = {0x00};
		TCHAR request[1024];

		if (!m_bListenSongFlashFinish)
		{
			flash_show_tip_message(L"资源正在加载，请耐心等待！");
			return;
		}
		//参数1：开始活动 2：选关 3：退出活动
		if (_tcscmp(args, L"1") == 0) //开始闯关
		{
			//发送码值到前端
			swprintf(data,L"<data><info open=\"1\"/></data>");
			_tcscpy(command, L"open_listen"); //开始闯关大页面关闭
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
			}
			if (m_listen_reward_vec.size() > 0)
			{
				_tcscpy(reward, m_listen_reward_vec[m_iCurrent_pass].c_str());
			}
			//发送码值到前端
			swprintf(data,L"<data><info drop=\"%d\" reward=\"%s\"/></data>", m_iCurrent_pass, reward);
			_tcscpy(command, L"drop_number"); //掉下数字
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}			
		}
		else if (_tcscmp(args, L"2") == 0) //选关
		{
			//发送码值到前端
			swprintf(data,L"<data><info click=\"%d\" time=\"%d\"/></data>", m_iCurrent_pass, m_iCount_down);
			_tcscpy(command, L"click_number"); //点击当前关
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
			m_listen_song_lock.lock();

			song_info songinfo = m_vec_listen_song_info.at(m_iCurrent_pass);

			m_listen_song_lock.unlock();

			songinfo.set_flash_page_code(page_listen_knowledge_song);

			bool bRet = false;
			//得到目前系统所处的状态
			enum PLAYER_PLAY_STATE player_state = m_video_play_manager.get_player_cur_state();
			//如果正在播放用户点的歌曲，那么把该歌曲放到已选歌曲中
			bRet = m_video_play_manager.add_select_song(songinfo, true);
			if (!bRet)
			{
				return ;
			}
			//改变播放器的状态
			bRet = m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);
			//更新选择的歌曲数目
			bRet = update_select_song_count();
			//切歌
			flash_message_call_function(SONG_NEXT);
			//play_or_insert_select_list(songinfo,false);
		}else if(_tcscmp(args,	L"3") == 0){ //失败后重新开始
			m_iCount_down = 30;
			flash_message_call_listen_know_song(1);
			flash_message_call_listen_know_song(0);
			copy_listen_song_info();
			AfxBeginThread(Cflashktv10Wnd::query_listen_song_info_tmp_thread, this);

			//发送码值到前端
			swprintf(data,L"<data><info init=\"1\"/></data>");
			_tcscpy(command, L"listen_init"); //点击当前关
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
			//发送码值到前端
			swprintf(data,L"<data><info open=\"1\"/></data>");
			_tcscpy(command, L"open_listen"); //开始闯关大页面关闭
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
			}
			if (m_listen_reward_vec.size() > 0)
			{
				_tcscpy(reward, m_listen_reward_vec[m_iCurrent_pass].c_str());
			}
			//发送码值到前端
			swprintf(data,L"<data><info drop=\"%d\" reward=\"%s\"/></data>", m_iCurrent_pass, reward);
			_tcscpy(command, L"drop_number"); //掉下数字
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
		}else if (_tcscmp(args,	L"0") == 0) //退出活动
		{
			//发送码值到前端
			swprintf(data,L"<data><info restart=\"true\"/></data>");
			_tcscpy(command, L"listen_restart"); //是否重新开始
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
			}
		}else if (_tcscmp(args, L"4") == 0)
		{
			if (m_inter_screen_exist)
			{
				m_listen_flash_page_tv.ShowWindow(SW_HIDE); //如果退出活动，电视端怎关闭
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_listen_flash_page_tv_soft.ShowWindow(SW_HIDE);
			}

			//发送码值到前端
			swprintf(data,L"<data><info init=\"1\"/></data>");
			_tcscpy(command, L"listen_init"); //初始化
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}

			flash_message_call_function(SONG_NEXT);
			//返回前一个页面
			flash_message_call_function(PAGE_BACK);
			//销毁窗口
			destroy_listen_song();
			//向被控端发送遮挡图片消息
			send_master_slave_cover_iamge_data(false, page_listen_knowledge_song);
		}else if (_tcscmp(args, L"5") == 0) //抢答
		{
			show_listen_question_answer();
		}
	}
	else if (0==_tcscmp(command, L"listen_music_end"))
	{
		show_listen_question_answer();
	}
	else if (0==_tcscmp(command, L"listen_answer"))//听音识曲 - 选中答案
	{
		TCHAR data[MAX_PATH] = {0x00};
		TCHAR command[256] = {0x00};
		TCHAR request[1024];

		if (_ttoi(args) == m_listen_answer_index) //等于答案
		{
			swprintf(data,L"<data><info answer=\"1\" index=\"%d\"/></data>", m_iCurrent_pass);
			_tcscpy(command, L"listen_answer");

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
			TCHAR song_id[256]={0x00}, song_name[256]={0x00},singer_name[256]={0x00};
			song_info songinfo = m_vec_listen_song_info.at(m_iCurrent_pass);

			songinfo.get_song_id(song_id);
			songinfo.get_song_name(song_name);
			songinfo.get_singer_name(singer_name);
			//发送获奖信息
//#ifdef DALIAN_MATSA_EK_PLUS
			//最后一关设置奖励，且只发送一次领奖信息
			if (!m_bLSGetAward && m_iCurrent_pass == (m_nListenPassCount- 1))
			{
//#endif
				WriteLog(__FL__, L"发送听音识曲奖励信息");
				//给盒子发送成功信息
				REQUEST_BOX_DATA *request_box_data = new REQUEST_BOX_DATA;
				TCHAR requse_data[1024] = {0x00};
				swprintf(requse_data,L"SONG_RECORDER_YK{\"activity_id\":\"%s\",\"song_id\":\"%s\",\"song_name\":\"%s\",\"singer_name\":\"%s\",\"video_path\":\"\",\"culture_code\":\"\",\"wave_path\":\"\",\"start_time\":\"\",\"datetime\":\"\",\"is_share\":\"0\",\"room_name\":\"%s\",\"score\":\"1\",\"user_name\":\"\",\"nick_name\":\"\",\"wave_exist\":\"0\",\"pk_flags\":\"%d\",\"song_language\":\"\",\"song_version\":\"\",\"member_pic\":\"\" }",
					m_maiba_rule_arena_info[5].activity_id, song_id, song_name, singer_name, m_show_room_name, m_iCurrent_pass+1); 

				_tcscpy(request_box_data->request_data, requse_data);
				request_box_data->nPort = 6666;
				request_box_data->pThis = this;
				AfxBeginThread(send_data_to_maiba_rule_thread, request_box_data);
//#ifdef DALIAN_MATSA_EK_PLUS
				m_bLSGetAward = true;
			}
//#endif
		}else //回答错误
		{
			swprintf(data,L"<data><info answer=\"0\" index=\"%d\"/></data>", m_iCurrent_pass);
			_tcscpy(command, L"listen_answer");

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
		}		
	}else if (0==_tcscmp(command, L"listen_drop"))
	{
		WriteLog(__FL__, L"listen_drop");
		TCHAR data[MAX_PATH] = {0x00}, reward[256] = {0x00};
		TCHAR command[256] = {0x00};
		TCHAR request[1024];

		if (m_iCurrent_pass == m_nListenPassCount-1) return;

		m_iCurrent_pass++; //回答正确，则开始下一关
		if (m_listen_reward_vec.size() > 0)
		{
			_tcscpy(reward, m_listen_reward_vec[m_iCurrent_pass].c_str());
		}

		//发送码值到前端
		swprintf(data,L"<data><info drop=\"%d\" reward=\"%s\"/></data>", m_iCurrent_pass, reward);
		_tcscpy(command, L"drop_number"); //掉下数字
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
		if (result)
		{
			flash_player_call_function(request);
			listen_flash_call_function(request);
			listen_flash_soft_call_function(request);
		}
	}
	else if (0==_tcscmp(command, L"listen_select"))
	{
		TCHAR data[MAX_PATH] = {0x00};
		TCHAR command[256] = {0x00};
		TCHAR request[1024];

		//发送码值到前端
		swprintf(data,L"<data><info select=\"%s\"/></data>", args);
		_tcscpy(command, L"listen_select");
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
		if (result)
		{
			listen_flash_call_function(request);
			listen_flash_soft_call_function(request);
		}
	}else if (0==_tcscmp(command, L"soundhound_end")) //听音识曲-初始化完毕发送码
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nFlashFinishCnt++;
		}
		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 告诉flash 播放倒计时
			if (m_nFlashFinishCnt == 2)
			{
				flash_message_call_listen_know_song(0);
				flash_message_call_listen_know_song(1);
				m_bListenSongFlashFinish = true;
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nFlashFinishCnt == 1)
			{
				flash_message_call_listen_know_song(1);
				m_bListenSongFlashFinish = true;
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nFlashFinishCnt == 1)
			{
				flash_message_call_listen_know_song(0);
				m_bListenSongFlashFinish = true;
			}
		}
		//控制flash音量
		flash_message_call_flash_volume(page_listen_knowledge_song);
	}
	else if (0 == _tcscmp(command, L"active_game_end"))
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nFlashFinishCnt++;
		}
		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 告诉flash 播放倒计时
			if (m_nFlashFinishCnt == 2)
			{
				//tv端页面信息
				flash_message_call_active_game_tv();
				//玩家信息
				flash_message_call_player_info();
				m_bActiveGameFlashFinish = true;
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nFlashFinishCnt == 1)
			{
				//tv端页面信息
				flash_message_call_active_game_tv(1);
				//玩家信息
				flash_message_call_player_info(1);
				m_bActiveGameFlashFinish = true;
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nFlashFinishCnt == 1)
			{
				flash_message_call_active_game_tv(2);
				flash_message_call_player_info(2);
				m_bActiveGameFlashFinish = true;
			}
		}
		//控制flash音量
		flash_message_call_flash_volume(page_active_game);
	}
	else if (0 ==_tcscmp(command, L"active_game_exit"))
	{
		m_bActiveGaming = false;
		m_nPlayerCount = 0;
		m_nPlayerIndex = 0;
		m_nDiceNumber = 0;
		m_vecGamePlayer.clear();
		// pc界面返回
		flash_message_call_function(PAGE_BACK);
		//向被控端发送遮挡图片消息
		send_master_slave_cover_iamge_data(false, page_active_game);
		// 向游戏服务器发送游戏退出消息
		char szTmp[256] = {0x00}, szIp[256] = {0x00};
		string_conversion str_conv;
		str_conv.widechar_to_multibyte(m_room_ip, szIp, sizeof(szIp));
		sprintf(szTmp, "ACTIVE_GAME_EXIT:%s", szIp);
		send_master_slave_data_udp(NULL, szTmp, 0, m_szActiveGameIp, 6514);

		if (m_inter_screen_exist)
		{
			m_active_game_flash_player.ShowWindow(SW_HIDE);
			//显示视屏窗口
			if (m_show_activity_wnd == 0)
			{
				m_master_show_window.ShowWindow(SW_SHOW);
			}
			else if (m_show_activity_wnd == 1)
			{
				m_slave_show_window.ShowWindow(SW_SHOW);
			}
		}
		if (m_soft_decode_window_exist && m_use_soft_active_flash)
		{
			m_active_game_soft_flash_player.ShowWindow(SW_HIDE);
		}
		//切歌
		flash_message_call_function(SONG_NEXT);

		if (m_active_game_flash_player_exist)
		{
			m_active_game_flash_player.DestroyWindow();
			m_active_game_flash_player_exist = false;
		}
		if (m_soft_decode_window_exist && m_active_game_soft_flash_player_exist)
		{
			m_active_game_soft_flash_player.DestroyWindow();
			m_active_game_soft_flash_player_exist = false;
		}
		m_nFlashFinishCnt = 0;
		m_bActiveGameFlashFinish = false;
		m_nCurPageCode = 0;
		// 广告字幕
		if (m_inter_screen_manager.IsMember(L"701", 1))
		{
			flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
		}
	}
	else if (0 ==_tcscmp(command, L"dice_result_end"))//摇骰子结果动画结束
	{
		char szTmp[256] = {0x00}, szIp[256] = {0x00};
		string_conversion str_conv;
		str_conv.widechar_to_multibyte(m_room_ip, szIp, sizeof(szIp));
		sprintf(szTmp, "DICE_RESULT_END:%s", szIp);
		send_master_slave_data_udp(NULL, szTmp, 0, m_szActiveGameIp, 6514);
	}
	else if (0==_tcscmp(command, L"score_video_finish"))//评分动画flash初始化完成
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nFlashFinishCnt++;
		}

		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 告诉flash 播放倒计时
			if (m_nFlashFinishCnt == 2)
			{
				m_bScoreFlashFinish = true;
				flash_message_call_score_tv(/*m_shine_total_score*/m_nCurrentScore, m_score_similarity, m_score_stability, m_score_intact);
				m_nCurrentScore = 0;
				m_nCurrentTotalScore = 0;
				m_nSingCount = 0;
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nFlashFinishCnt == 1)
			{
				m_bScoreFlashFinish = true;
				flash_message_call_score_tv(/*m_shine_total_score*/m_nCurrentScore, m_score_similarity, m_score_stability, m_score_intact);
				m_nCurrentScore = 0;
				m_nCurrentTotalScore = 0;
				m_nSingCount = 0;
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nFlashFinishCnt == 1)
			{
				m_bScoreFlashFinish = true;
				flash_message_call_score_tv(/*m_shine_total_score*/m_nCurrentScore, m_score_similarity, m_score_stability, m_score_intact);
				m_nCurrentScore = 0;
				m_nCurrentTotalScore = 0;
				m_nSingCount = 0;
			}
		}
	}
	else if (0==_tcscmp(command, L"score_video_end"))//评分动画播放结束
	{
		if(!m_bScoring)
		{	
			return;
		}
		else
		{
			m_bScoring = false;
			m_nCurrentScore = 0;
			m_nCurrentTotalScore = 0;
			m_nSingCount = 0;
		}
		flash_message_call_function(SONG_NEXT);
	}
	else if (0==_tcscmp(command, L"full_screen_finished"))
	{
		InitFlashByExe();
	}
	else if (0 == _tcscmp(command, L"wechat_barrage_finish"))//弹幕flash初始化结束
	{
		if (0 == _tcscmp(args, L"0"))
		{
			m_nBarrageFlashFinishCnt++;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_nBarrageFlashFinishCnt++;
		}
		if (m_inter_screen_exist && m_use_soft_active_flash)
		{
			// 告诉flash 播放倒计时
			if (m_nBarrageFlashFinishCnt == 2)
			{
				m_bWechatInteractionFlashFinish = true;
				//启动显示弹幕的线程
				AfxBeginThread(Cflashktv10Wnd::show_wechat_barrage_info_thread, this);	
			}
		}
		else if (m_inter_screen_exist)
		{
			if (m_nBarrageFlashFinishCnt == 1)
			{
				m_bWechatInteractionFlashFinish = true;
				//启动显示弹幕的线程
				AfxBeginThread(Cflashktv10Wnd::show_wechat_barrage_info_thread, this);	
			}
		}
		else if (m_use_soft_active_flash)
		{
			if (m_nBarrageFlashFinishCnt == 1)
			{
				m_bWechatInteractionFlashFinish = true;
				//启动显示弹幕的线程
				AfxBeginThread(Cflashktv10Wnd::show_wechat_barrage_info_thread, this);	
			}
		}
	}
	else if (0 == _tcscmp(command, L"wechat_barrage_open"))//弹幕开关
	{
		if (0 == _tcscmp(args, L"0"))
		{
			result = flash_message_call_wechat_barrage_open(false);
			if (result)
			{
				//销毁弹幕窗口
				destroy_wechat_interaction_wnd();
			}
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			result = flash_message_call_wechat_barrage_open(true);
			if (result)
			{
				if (m_bWechatBarrageOpen)
				{
					//创建弹幕窗口
					create_wechat_interaction_wnd();
				}
			}
		}
	}
	else if (0 == _tcscmp(command, L"wechat_barrage_mode"))// 弹幕显示模式
	{
		if (0 == _tcscmp(args, L"0"))
		{
			result = flash_message_call_wechat_barrage_mode(0);
			if (result)
			{
			}
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			result = flash_message_call_wechat_barrage_mode(1);
			if (result)
			{
			}
		}
	}
	else if (0 == _tcscmp(command, L"wechat_gift_finish"))//微信-礼物flash初始化完成
	{
		m_bWechatGiftFlashFinish = true;
		//启动显示礼物的线程
		AfxBeginThread(Cflashktv10Wnd::show_wechat_gift_info_thread, this);	
	}
	else if (0 == _tcscmp(command, L"wechat_gift_play_over"))//微信-礼物中礼物动画或失败动画播放完成
	{
		m_wechat_gift_lock.lock();
		if (!m_deque_wechat_message.empty())
		{
			m_deque_wechat_message.pop_front();
		}
		m_bWechatGiftSending = false;
		m_wechat_gift_lock.unlock();
	}
	else if (0 == _tcscmp(command, L"mightlike"))//"你可能喜欢"开关
	{
		if(0 == _tcscmp(args, L"0"))
		{
			m_bMightLike = false;
		}
		else if (0 == _tcscmp(args, L"1"))
		{
			m_bMightLike = true;
		}
		bool result = flash_message_call_might_like_button(m_bMightLike);
	}
	else if (0 == _tcscmp(command, L"daoqi"))
	{
		MOVIE_MSG_CONTROL MMCtrl;
		ZeroMemory(&MMCtrl, sizeof(MOVIE_MSG_CONTROL));
		MMCtrl.head = HEAD_FLAG;
		MMCtrl.mmt = MMT_DIAITAL_MSG;
		MMCtrl.mmc = MMCMSG_SHOW;
		SendDaoQiSystemMsg(&MMCtrl);
		MsgControlFunction(MMCMSG_HIDE);
	}
	else if(0==_tcscmp(command, L"flash_exception_log"))
	{
		TCHAR szMsg[1024*100] = {0x00};
		swprintf(szMsg, L"flash_exception_log :【%s】", args);
		WriteLog(__FL__, szMsg);
	}else if(0==_tcscmp(command, L"flash_msg_log"))
	{
		TCHAR szMsg[1024*100] = {0x00};
		swprintf(szMsg, L"flash_msg_log :【%s】", args);
		WriteLog(__FL__, szMsg);
	}
	//falsh_message_call_ex()---end
}

void Cflashktv10Wnd::send_video_dating_info_to_flash()
{
	TCHAR request[1024];
	TCHAR data[1024];
	memset(data,0x0,sizeof(data));

	memset(request,0x0,sizeof(request));
	swprintf(data,L"<data><info name=\"%s\" state=\"%d\" character=\"%d\"/></data>",
		m_video_dating_info.name, m_video_dating_info.nstatus, m_video_dating_info.ncharacter);
	bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"video_dating_info",data);
	if (result)
	{
		flash_player_call_function(request);
	}
}

void Cflashktv10Wnd::flash_message_call_page_jump(int page_number, bool allow_repeat/* =false */)
{
	try
	{
		bool result=false;
		int page_index=0;

		//if(!m_find_dog_success&&(page_system_manager!=page_number))
		//{
		//找不到加密狗，不能进入其他页面，系统管理页面除外
		//flash_show_tip_message(17);
		//	return;
		//}
		//if((CLOSE_ROOM_STATE==m_pc_state)&&(page_system_manager!=page_number)&&(page_homepage!=page_number))
		//{
		//	//关房中，只能停留在首页
		//	flash_show_tip_message(65);
		//	return;
		//}

		if (m_audio_effect_window.IsWindowVisible())
		{
			//显示调音台的时候，不允许显示其他页面
			return;
		}
		//得到目前页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (!allow_repeat && (page_index==page_number) && page_index != page_maiba_login)
		{
			return;
		}
		if ((CLOSE_ROOM_STATE==m_pc_state)&&(page_assist==page_index))
		{
			//关房状态，辅助页面的功能不允许使用
			flash_show_tip_message(65);
			return;
		}
		if ((CLOSE_ROOM_STATE==m_pc_state)&&(page_video==page_number))
		{
			//关房状态，不允许进入屏切页面
			flash_show_tip_message(65);
			return;
		}
		/*
		if ((CLOSE_ROOM_STATE==m_pc_state)&&(page_jewel_box==page_number))
		{
		//关房状态，不允许进入屏切页面
		flash_show_tip_message(65);
		return;
		}*/

		//跳转页面时，进行设置当前处于没有请求网络歌曲
		switch(page_number)
		{
		case page_homepage:       //首页
			{
				page_change(page_homepage);
			}
			break;
		case page_karaoke_home:   //卡拉OK
			{
				page_change(page_karaoke_home);
			}
			break;
		case page_secondary_song: //歌曲二级页面
			{
				page_change(page_secondary_song);
			}
			break;
		case page_search_song:    //搜歌页面
			{
				result = page_change(page_search_song);
				if (result)
				{
					//显示数据
					song_query_show_data(song_select_expr,true,true);
					//发送检索条件
					send_query_condition_text_to_flash();
				}
			}
			break;		
		case page_title:          //歌名点歌
			{
				result = page_change(page_title);
				if (result)
				{
					//显示数据
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_hdmi:			//高清专区
			{
				result = page_change(page_hdmi);
				if (result)
				{
					//song_query_show_data(song_select_expr);
					flash_message_call_file_format(L"1");
				}
			}
			break;
		case page_kalaok_pk:  //麦霸pk
			{
				if (!m_exist_arena_song)
				{
					flash_show_tip_message(104);

					return;
				}
				result = page_change(page_kalaok_pk);
				if (result)
				{
					song_query_show_data(song_select_expr,true,true);

					//L"208号房间刚刚唱了【精忠报国】(原唱屠洪刚)最终得分93分!唱得太给力了!是歌星来了吗?"
					flash_message_call_place_notice();
					flash_message_call_room_name_ranking(); 
				}
			}
			break;
		case  page_home_song:  //首页点播歌曲
			{
				result = page_change(page_home_song);
				if (result)
				{}
			}
			break;
		case  page_enterainment:  //首页的娱乐活动
			{
				result = page_change(page_enterainment);
				if (result)
				{}
			}
			break;
		case  page_place_raiders:  //首页的场所攻略
			{
				result = page_change(page_place_raiders);
				if (result)
				{}
			}
			break;
		case  page_aider_function:  //首页辅助功能
			{
				result = page_change(page_aider_function);
				if (result)
				{}
			}
			break;
		case page_kala_share:     //K歌分享
			{
				result = page_change(page_kala_share);
				if (result)
				{
					m_maiba_number_button = 0;
					//向服务器请求数据
					flash_message_call_maiba(MAIBA_SHARE,L"0:1");
				}
			}
			break;
		case page_dekaron_maiba:  //挑战麦霸
			{
				if (!m_use_area_pk)
				{
					flash_show_tip_message(118);

					return;
				}
				result = page_change(page_dekaron_maiba);
				if (result)
				{
					m_maiba_number_button = 0;
					flash_message_call_maiba(MAIBA_DEKARON,L"0:1");
				}
			}
			break;
		case page_find_maiba:	 //发现麦霸
			{
				if (!m_use_find_maiba_pk)
				{
					flash_show_tip_message(118);

					return;
				}
				result = page_change(page_find_maiba);
				if (result)
				{
					m_maiba_number_button = 0;
					flash_message_call_maiba(MAIBA_FIND,L"0:1");
				}
			}
			break;
		case page_maiba_login:  //K友登录
			{
				TCHAR request[1024];
				TCHAR data[1024];
				memset(data,0x0,sizeof(data));

				memset(request,0x0,sizeof(request));

				swprintf(data,L"<data><info flags=\"0\"/></data>");
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pop_member_window",data);
				if (result)
				{
					flash_player_call_function(request);
				}


				m_member_input_type = 1;
				change_member_manage_state(MEMBER_LOGIN_STATE);
				//清空用户名和密码 
				clear_all_member_show_info();

				show_member_manager_input_text(1,m_member_name);
				show_member_manager_input_text(2,m_member_password);

			}
			break;
		case page_maiba_register:  //K友注册
			{
				TCHAR request[1024];
				TCHAR data[1024];
				memset(data,0x0,sizeof(data));

				memset(request,0x0,sizeof(request));

				swprintf(data,L"<data><info flags=\"1\" /></data>");
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pop_member_window",data);
				if (result)
				{
					flash_player_call_function(request);
				}

				m_member_input_type = 1;
				change_member_manage_state(MEMBER_REGISTER_PHONE);
				clear_all_member_show_info();					
				show_member_manager_input_text(1,m_memeber_phone_number);
			}
			break;
		case page_write:    //手写点歌
			{
				result = page_change(page_write);
				if (result)
				{
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_singer:         //歌星点歌
			{
				result = page_change(page_singer);
				if (result)
				{
					m_voice_singer = false;
					singer_query_show_data();
				}
			}
			break;
		case page_custom_singer:   //客户自定义的歌星
			{
				result = page_change(page_custom_singer);
				if (result)
				{
					singer_query_show_data();
				}
			}
			break;
		case page_number_song:     //编号点歌
			{
				result = page_change(page_number);
				if (result)
				{
					//显示数据
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_lyric:          //歌词点歌
			{
				result = page_change(page_lyric);
				if (result)
				{
					//显示数据
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_theme:       //主题点歌
			{
				result = page_change(page_theme);
			}
			break;
		case page_theme_song:    //主题点歌
			{
				result = page_change(page_theme_song);
				if (result)
				{
					flash_message_call_new_theme(L"0");
				}
			}
			break;
		case page_new_theme_song:
			{
				result = page_change(page_new_theme_song);
				if (result)
				{
					flash_message_call_new_theme(L"0");
				}
			}
			break;
		case page_entertainment_programme://娱乐节目
			{
				result = page_change(page_entertainment_programme);
			}
			break;
		case page_class:    //分类点歌
			{
				result = page_change(page_class);
				if (result)
				{
#ifdef DON_GUAN_K_PLUS
#else
					//显示数据
					flash_message_call_theme(L"0");
#endif // DON_GUAN_K_PLUS
				}
			}
			break;
		case page_top_song:       //金曲排行
			{
				result = page_change(page_top_song);
				if (result)
				{
					//显示数据
					result = song_query_show_data(top_song_select_expr,true,true);
					if (!result)
					{
						//发送空数据
						clear_show_list();
					}
				}
			}
			break;
		case page_new_song:       //新歌推荐
			{
				result = page_change(page_new_song);
				if (result)
				{
					//默认显示本月新歌
					flash_message_call_new_song(L"1");
				}
			}
			break;
		case page_opera:          //经典戏曲
			{
				result = page_change(page_opera);
				if (result)
				{
					//显示数据
					flash_message_call_opera(L"0");
				}
			}
			break;
		case page_language:       //语种点歌
			{
				result = page_change(page_language);
				if (result)
				{
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_movie_song:     //影视金曲
			{
				result = page_change(page_movie_song);
				if (result)
				{
					flash_message_call_theme(L"9");
				}
			}
			break;
		case page_era_song:       //年代金曲
			{
				result = page_change(page_era_song);
				if (result)
				{
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_word_count:   //字数点歌
			{
				result = page_change(page_word_count);
				if (result)
				{
					song_query_show_data(song_select_expr,true,true);
				}
			}
			break;
		case page_voice_china:    //好声音
			{
				//获取点击秀立方时显示歌星or歌曲配置
				if (0==_tcscmp(m_vc_show_song_or_singer,L"0"))
				{
					result = page_change(page_voice_china);
					{
						song_query_show_data_by_sql_server();
						flash_message_call_voice_china();
					}
				} 
				else if(0==_tcscmp(m_vc_show_song_or_singer,L"1"))
				{
					result = page_change(page_voice_china_singer);
					if (result)
					{
						m_voice_singer = true;
						song_query_show_data_by_sql_server();
						singer_query_show_data();
					}
				}
			}
			break;
		case page_assist:         //辅助功能
			{
				result = page_change(page_assist);
			}
			break;
		case page_ktvExplain:   //场所攻略
			{
				page_change(page_ktvExplain);
			}
			break;
		case page_introduce:      //场所介绍
			{
				result = page_change(page_introduce);
				if (result)
				{
					flash_message_call_service(L"1");
				}
			}
			break;
		case page_help:            //帮助
			{
				result = page_change(page_help);
				if (result)
				{
					flash_message_call_service(L"4");
				}
			}
			break;
		case page_room:   //使用说明
			{
				result = page_change(page_room);
				if (result)
				{
					flash_message_call_service(L"2");
				}
			}
			break;
		case page_fire:   //消防图解
			{
				result = page_change(page_fire);
				if (result)
				{
					flash_message_call_service(L"3");
				}
			}
			break;
		case page_guide:   //消防指南
			{
				result = page_change(page_guide);
				if (result)
				{
					flash_message_call_service(L"5");
				}
			}
			break;
		case page_drinks: //酒水
			{
				result = page_change(page_drinks);
				if(result)
				{
					//发送数据歌flash,
					flash_message_call_read_drinks_data();
				}
			}
			break;
		case page_consumer: //消费查询
			{
				result = page_change(page_consumer);
			}
			break;
		case page_pk_manager:   //pk登录
			{
				//判断是否开房了
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能进行pk
					flash_show_tip_message(104);

					page_change(page_homepage);
					return;
				}

				if (2==m_master_slave_control_flag)
				{
					//
					flash_show_tip_message(96);
				}
				else if (false == m_open_pk)
				{
					flash_show_tip_message(97);
				}
				else
				{
					if (m_pk_login_member)   //如果是登录状态
					{
						flash_message_call_page_jump(page_pk);  //转到邀请页面
						//send_pk_data_to_server(1);  //发送数据给服务器
					}
					else
					{
						result = page_change(page_pk_manager);
						if (result)
						{
							TCHAR request[2048];
							TCHAR data[1024];
							memset(request,0x0,sizeof(request));
							memset(data,0x0,sizeof(data)); 
							swprintf(data,L"<data><info textbox=\"1\" text=\"\" /></data>");
							result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_manage_text",data);
							if (result)
							{
								flash_player_call_function(request);
							}

							swprintf(data,L"<data><info textbox=\"0\" text=\"\" /></data>");
							result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_manage_text",data);
							if (result)
							{
								flash_player_call_function(request);
							}

							m_pk_textbox_focus = 0;
							//设置默认为男
							result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_sex_select",_T("1"));
							if (result)
							{
								m_pk_menber_sex = 1;
								flash_player_call_function(request);
							}
						}
					}
				}	
			}
			break;
		case page_pk:       //pk邀请页面
			{

				result = page_change(page_pk);
				if (result)
				{
					//发送三屏数据
					_sleep(1000);
					send_pk_three_screen_data(CUR_PAGE_OPERATE,0);                    					
				}

			}
			break;
		case page_pk_receive:     //pk接收邀请页面
			{
				page_change(page_pk_receive);
			}
			break;
		case page_pkjx:  //pk精选
			{
				result = page_change(page_pkjx); 
				//发数据
				if (result)
				{
					flash_message_call_theme(L"4");
				}
			}
			break;
		case page_wechat:  //微信点歌
			{
				//判断是否开房了
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(102);

					//page_change(page_homepage);
					return;
				}
				result = page_change(page_wechat);

				//发数据
				if (result)
				{
					m_wechat_button_number = 1;
					//发图片和文字
					flash_message_call_wechat();
				}

			}
			break;
		case page_encode:   //移动点歌
			{
				//判断是否开房了
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(102);

					page_change(page_homepage);
					return;
				}
				//modify:2012-9-4 Yangzhenglun 增加是否启用移动点歌屏蔽跳转页面
				if (!m_use_mobile_vod)
				{
					flash_show_tip_message(103);

					page_change(page_homepage);
					return;
				}

				result = page_change(page_encode);
				//发数据
				if (result)
				{ 
					//发图片和文字
					flash_message_call_encode(L"0");
				}
			}
			break;
		case page_selected:       //已选歌曲
			{
				result = page_change(page_selected);
				if (result)
				{
					//显示数据
					show_select_or_sing_song(SHOW_SELECT_SONG,FIRST_PAGE_OPERATE,0);
				}
			}
			break;
		case page_singed:         //已唱歌曲
			{
				result = page_change(page_singed);
				if (result)
				{
					//显示数据
					show_select_or_sing_song(SHOW_SING_SONG,FIRST_PAGE_OPERATE,0);
				}
			}
			break;
		case page_game:           //娱乐游戏
			{
				result = page_change(page_game);
				if (result)
				{
					//播放第一个游戏
					play_select_game(L"1");
				}
			}
			break;
		case page_movieMeun:    //电影二级页面
			{
				page_change(page_movieMeun);
			}
			break;
		case page_movie:          //电影列表页
			{
				if (!m_play_movie_password.empty()&&!m_allow_play_movie)
				{
					//输入正确密码之后才能播放。
					page_change(page_system_manager);
					break;
				}

#ifdef DAO_QI_MOVIE
				MOVIE_MSG_CONTROL MMCtrl;
				ZeroMemory(&MMCtrl, sizeof(MOVIE_MSG_CONTROL));
				MMCtrl.head = HEAD_FLAG;
				MMCtrl.mmt = MMT_DIAITAL_MSG;
				MMCtrl.mmc = MMCMSG_SHOW;
				SendDaoQiSystemMsg(&MMCtrl);
				MsgControlFunction(MMCMSG_HIDE);
#else
				result = page_change(page_movie);
				if (result)
				{
					//复位页面并显示
					m_film_manager.Init(&m_sql_server_db);
					m_film_video_button_state = 1;
					movie_query_show_data();
				}
#endif // DAO_QI_MOVIE
			}
			break;
		case page_movie_detail:		//电影详情页
			{
				if (!m_play_movie_password.empty()&&!m_allow_play_movie)
				{
					//输入正确密码之后才能播放。
					page_change(page_system_manager);
					break;
				}
				result = page_change(page_movie);
				if (result)
				{
					movie_query_detail_data();
				}
			}
			break;
		case page_concert:  //演唱会
			{
				result = page_change(page_concert);
				if (result)
				{
					flash_message_call_movie_story(L"14",false);
				}
			}
			break;
		case page_place_video:  //场所视频
			{
				result = page_change(page_place_video);
				if (result)
				{
					flash_message_call_movie_story(L"15",false);
				}
			}
			break;
		case page_recording:      //录音管理
			{
				result = page_change(page_recording);
				if (result)
				{
					m_maiba_number_button = 0;
					song_recorder_query_show_data();
					//song_recorder_query_all_show_data();
				}
			}
			break;
		case page_video:          //视频转播
			{
				if (!m_screen_show_video)
				{
					//不显示屏切窗口，不能进入屏切页面
					break;
				}
				result = page_change(page_video);
				m_screen_show_window.show_window(true);
				if (result)
				{
					m_film_video_button_state = 2;
					show_tv_picture_path(m_tv_show_count);
					//显示提示文字
					show_video_page_tip_msg();
				}
			}
			break;
		case page_U_disk:         //U盘播歌
			{
				result = page_change(page_U_disk);
				if (result)
				{
					//显示U盘歌曲
					show_U_disk_song();
				}
			}
			break;
		case page_proposal:        //意见调查
			{
				result = page_change(page_proposal);
				if (result)
				{
					page_proposal_clear();
				}
			}
			break;
		case page_member_manager: //会员管理
			{

				if (m_member_already_login)
				{
					//已经登录，直接跳转到会员歌曲页面
					result = page_change(page_member_song);
					if(result)
					{
						//显示会员歌曲
						member_song_query_show_data();
					}
				}
				else
				{
					//否则，会员管理页面
					result = page_change(page_member_manager);
					if (result)
					{
						/*
						m_member_input_type = 1;
						show_member_manager_input_text(m_member_input_type,L"");
						*/
						//默认是登录状态
						change_member_manage_state(MEMBER_LOGIN_STATE);
					}
				}
			}
			break;
		case page_member_song:    //会员歌曲
			{
				//判断是否开房了
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能进行pk
					flash_show_tip_message(105);

					page_change(page_homepage);
					return;
				}

				result = page_change(page_member_song);
				if (result)
				{
					//得到当前是否登录
					if (MEMBER_FLAG_LOGIN != m_memeber_manage[m_activate_vip_button].get_login_flags())
					{						 
						//没有登录 
						m_activate_vip_button = 0;
						flash_message_call_page_jump(page_maiba_login);
					}
					else 
					{ 
						flash_message_call_maiba(PRIVATE_SONG,L"0:1");	 
					}
				}

				/*
				result = page_change(page_member_song);
				if (result)
				{

				}*/
			}
			break;
		case page_painting:       //绘画
			{
				result = page_change(page_painting);
			}
			break;
		case page_system_manager: //系统管理
			{
				result = page_change(page_system_manager);
				if (result)
				{
					//清空输入的密码
					m_input_code.clear();
					show_system_manage_code(L"");

					//设置系统信息和版本
					//set_system_version_date();
				}
			}
			break;
		case page_preview:        //预览视频
			{
				result = page_change(page_preview);
			}
			break;
		case page_singer_song:    //具体歌星的歌曲列表页面
			{
				result = page_change(page_singer_song);
				if (result)
				{
				}
			}
			break;
		case page_change_skin:  //换肤
			{
				result = page_change(page_change_skin);
			}
			break;
		case page_jewel_box: //百宝箱
			{
				result = page_change(page_jewel_box);
				if (result)
				{
					set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);
					set_button_show_state(SCORE_BUTTON_STATE,m_is_scoring);
				}
			}
			break;
		case page_earth:   //导航页面
			{
				page_change(page_earth);
			}
			break;
		case page_custom_song: //定制歌曲
			{
				result = page_change(page_custom_song);
				if (result)
				{
					page_custom_clear();
				}
			}
			break;
		case page_fast_songs_slow_dance: //迪曲劲舞
			{
				if (!m_allow_play_dj)
				{
					flash_show_tip_message(122);
					break;
				}
				result = page_change(page_fast_songs_slow_dance);
				if (result)
				{
#ifdef DON_GUAN_K_PLUS
					flash_message_call_theme(L"13");
#else
					flash_message_call_theme(L"1");
#endif // DON_GUAN_K_PLUS

				}
			}
			break;
		case page_home_theme_song: //首页主题点歌
			{
				result = page_change(page_home_theme_song);				
			}
			break;
		case page_music_enjoy:   //音乐欣赏
			{
				result = page_change(page_music_enjoy);
			}
			break;
		case page_baidu_music:	//百度音乐
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入百度音乐");
					return;
				}
				result = page_change(page_baidu_music);
				if (result)
				{
					song_query_show_data_json(page_baidu_music);
				}
			}
			break;
		case page_qq_music:		//qq音乐
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入QQ音乐");
					return;
				}
				result = page_change(page_qq_music);
				if (result)
				{
					song_query_show_data_json(page_qq_music);
				}
			}
			break;
		case page_kugou_music:	//酷狗音乐
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入酷狗音乐");
					return;
				}
				result = page_change(page_kugou_music);
				if (result)
				{
					song_query_show_data_json(page_kugou_music);
				}
			}
			break;
		case page_kuwo_music:	//酷我音乐
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入酷我音乐");
					return;
				}
				result = page_change(page_kuwo_music);
				if (result)
				{
					song_query_show_data_json(page_kuwo_music);
				}
			}
			break;
		case page_yule_news: //娱乐新闻
			{
				result = page_change(page_yule_news);
			}
			break;
		case page_language_change: //缺歌登记
			{
				result = page_change(page_language_change);
			}
			break;
		case page_singing_contest: //演唱比赛
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入演唱比赛");
					return;
				}
				result = page_change(page_singing_contest);
				if (result)
				{
					/*if(m_set_free_pk)
					parse_arena_rule_info("1", 1, 1);
					if(m_set_dekaron_pk)
					parse_arena_rule_info("1", 2, 1);
					if(m_set_ranking_plite)
					parse_arena_rule_info("1", 3, 1);*/
				}
			}
			break;
		case page_video_dating: //视频交友
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入视频交友");
					return;
				}
				if (!m_video_dating_show)
				{
					//未开通视频交友功能
					flash_show_tip_message(L"未开通视频交友功能，请联系管理员!");
					return;
				}
				result = page_change(page_video_dating);
				if (result)
				{
					//查询出所有的朋友
					send_vd_three_screen_data(CUR_PAGE_OPERATE,0);
					send_video_dating_info_to_flash();
				}
			}
			break;
		case  page_sb_ranking_polite: //我要参加 - 上榜有礼
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入上榜有礼");
					return;
				}
				result = page_change(page_sb_ranking_polite);
				if (result)
				{
					set_flash_button_state(L"particpate_button",0);
					flash_message_call_song_sort_song();					
				}
			}
			break;
		case  page_sb_free_pk: //我要参加 - 自由PK
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入自由PK");
					return;
				}
				result = page_change(page_sb_free_pk);
				if (result)
				{
					set_flash_button_state(L"particpate_button",0);
					flash_message_call_song_sort_song();
				}
			}
			break;
		case  page_sb_challenge_pk: //我要参加 - 擂台pk
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入擂台pk");
					return;
				}
				result = page_change(page_sb_challenge_pk);
				if (result)
				{
					set_flash_button_state(L"particpate_button",0);
					song_query_show_data_by_id(song_select_expr, true, m_maiba_rule_arena_info[1].song_id);
				}
			}
			break;
		case page_free_pk_view_list: //自由pk-查看榜单
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能查看榜单");
					return;
				}
				result = page_change(page_free_pk_view_list);
				if (result)
				{
					TCHAR szrp[MAX_PATH] = {0x00};
					swprintf(szrp, L"0:1");
					flash_message_call_maiba(MAIBA_DEKARON, szrp);
				}
			}
			break;
		case page_challenge_pk_view_list: //擂台pk - 查看榜单
			{
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能查看榜单");
					return;
				}
				result = page_change(page_challenge_pk_view_list);
				if (result)
				{
					TCHAR szrp[MAX_PATH] = {0x00};
					swprintf(szrp, L"1:1");
					flash_message_call_maiba(MAIBA_DEKARON, szrp);
				}
			}
			break;
		case page_close_clear_msg:
			result = page_change(page_close_clear_msg);
			break;
		case page_yunadd_song:
			{
				result = page_change(page_yunadd_song);
				if (result)
				{
					flash_message_call_cloud_song();
				}
			}
			break;
		case page_trend_list://潮流榜单
			{
				result = page_change(page_trend_list);
				if (result)
				{
					flash_message_call_trend_list_data(page_trend_list);
				}
			}
			break;
		case page_challenge_star://挑战大咖
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入挑战大咖");
					return;
				}
				result = page_change(page_challenge_star);
				if (result)
				{
					//显示挑战大咖界面
					flash_message_call_challenge_star();

					// 字幕
					if (m_inter_screen_manager.IsMember(L"702", 1))
					{
						flash_message_call_activity_caption(m_inter_screen_caption.challenge_star_info);
					}
				}
			}
			break;
		case page_across_pass://百秒夺奖（闯关夺宝）
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入百秒夺奖");
					return;
				}
				//正在进行挑战大咖时，要先结束挑战
				if (m_b_challenging)
				{
					flash_show_tip_message(L"请点击[切歌]结束挑战大咖，才可参与此活动！");
					return;
				}
				result = copy_pass_info();
				if (!result)
				{
					flash_show_tip_message(L"暂未设置该活动信息，请联系服务人员！");
					break;
				}
				result = page_change(page_across_pass);
				if (result)
				{
					if (m_vec_pass.size() == 0)
					{
						flash_show_tip_message(L"没有关卡信息，请联系服务人员！");
						break;
					}
					//挑战大咖设置为false
					m_b_challenging = false;
					m_bInPageAcrossPass = true;
					//关闭视频
					m_player_manager.close_video_file();
					//向被控端发送遮挡图片消息
					send_master_slave_cover_iamge_data(true, page_across_pass);
					//销毁秀秀MV窗口
					destroy_picture_mv_wnd();
					//记录当前活动页面码
					m_nCurPageCode = page_across_pass;

					if (m_soft_decode_window_exist && m_use_soft_active_flash)
					{
						if (m_StarSoftTransparentWnd != NULL)
						{
							m_StarSoftTransparentWnd->MoveWindow(0,0,0,0);
							m_StarSoftTransparentWnd->ShowFlashWindow(SW_HIDE);
						}
						////创建闯关夺宝透明flash窗口
						TCHAR path[256];
						memset(path,0x0,sizeof(path));

						if (m_inter_screen_exist)
							swprintf(path,L"%s\\%s\\Main1.swf",m_work_path, g_folder_name[43]);
						else
							swprintf(path,L"%s\\%s\\Main.swf",m_work_path, g_folder_name[43]);
						CRect rtPassFlash(0,0,m_sencond_display_width,m_sencond_display_height);
						m_bAcrossPassSoftFlashPlayerExist = m_AcrossPassSoftFlashPlayer.Create(NULL,WS_CHILD|WS_CLIPSIBLINGS|WS_CLIPCHILDREN,rtPassFlash,&m_soft_decode_window, ACROSS_PASS_SOFT_PLAYER_ID);
						if (m_bAcrossPassSoftFlashPlayerExist)
						{
							WriteLog(__FL__, L"百秒夺奖flash创建成功");
							m_AcrossPassSoftFlashPlayer.LoadMovie(0, path);
							m_AcrossPassSoftFlashPlayer.put_ScaleMode(2);
							m_AcrossPassSoftFlashPlayer.put_BackgroundColor(0);
							m_AcrossPassSoftFlashPlayer.ShowWindow(SW_SHOW);
							m_AcrossPassSoftFlashPlayer.BringWindowToTop();
						}
					}
					if (m_inter_screen_exist)
					{
						if (m_StarTransparentWnd != NULL)
						{
							m_StarTransparentWnd->MoveWindow(0,0,0,0);
							m_StarTransparentWnd->ShowFlashWindow(SW_HIDE);
						}
						if (m_inter_screen_window_exist)
						{
							m_bAcrossPassFlashPlayerExist = m_AcrossPassFlashPlayer.Create(NULL,WS_CHILD|WS_CLIPSIBLINGS|WS_CLIPCHILDREN,m_rtRelativeActivityWnd,&m_inter_screen_window,ACROSS_PASS_PLAYER_ID);
							if (m_bAcrossPassFlashPlayerExist)
							{
								WriteLog(__FL__, L"百秒夺奖flash创建成功");
								TCHAR path[256] = {0x0};
								swprintf(path,L"%s\\%s\\Main.swf",m_work_path, g_folder_name[43]);
								m_AcrossPassFlashPlayer.LoadMovie(0, path);
								m_AcrossPassFlashPlayer.put_ScaleMode(2);
								m_AcrossPassFlashPlayer.put_BackgroundColor(0);
								m_AcrossPassFlashPlayer.ShowWindow(SW_SHOW);
								m_AcrossPassFlashPlayer.BringWindowToTop();
							}
						}
						////////////////////*/
					}
// 					//强制切换伴唱
// 					flash_message_call_function(SONG_ACCOMPANY);
					//进入界面先发送关卡个数
					flash_message_call_across_pass_count();
					// pc端进入界面
					flash_message_call_main_pass_pc();

					// 字幕
					if (m_inter_screen_manager.IsMember(L"702", 1))
					{
						flash_message_call_activity_caption(m_inter_screen_caption.across_pass_info);
					}
				}
			}
			break;
		case page_video_show: //视频秀场
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入视频秀场");
					return;
				}
				result = page_change(page_video_show);
				if (result)
				{
					//控制flash音量
					flash_message_call_flash_volume(page_video_show);

					m_screen_show_window.show_window(false);
					//启动线程，下载图片
					AfxBeginThread(uVideoShowDownFileThread, this, NULL);				
				}
			}
			break;
		case page_listen_knowledge_song: //听音识曲
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				//像服务管理程序请求information
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入听音识曲");
					return;
				}
				//正在进行挑战大咖时，要先结束挑战
				if (m_b_challenging)
				{
					flash_show_tip_message(L"请点击[切歌]结束挑战大咖，才可参与此活动！");
					return;
				}
				if (m_listen_reward_vec.size() != m_nListenPassCount || m_vec_listen_song_info_temp.size() != m_nListenPassCount)
				{
					flash_show_tip_message(L"该活动暂未开放，请稍等！");
					return;
				}
				result = page_change(page_listen_knowledge_song);
				if (result)
				{
					//向被控端发送遮挡图片消息
					send_master_slave_cover_iamge_data(true, page_listen_knowledge_song);
					//销毁秀秀MV窗口
					destroy_picture_mv_wnd();

					create_listen_song();

					m_nCurPageCode = page_listen_knowledge_song;
					m_screen_show_window.show_window(false);
					
					//如果是在爱秀直播，则关闭爱秀直播
					if (m_video_show_exist)
					{
						DestroyAxBrowse();
					}

					copy_listen_song_info();
					AfxBeginThread(Cflashktv10Wnd::query_listen_song_info_tmp_thread, this);
				}
			}
			break;
		case page_picture_mv: //照片MV
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入秀秀MV");
					return;
				}
				//正在进行挑战大咖时，要先结束挑战
				if (m_b_challenging)
				{
					flash_show_tip_message(L"请点击[切歌]结束挑战大咖，才可参与此活动！");
					return;
				}
				result = page_change(page_picture_mv);
				if (result)
				{
					m_screen_show_window.show_window(false);

					TCHAR szwQRUrl[2048] = {0x00};
					char szQRUrl[2048] = {0x00};
					TCHAR szLocalPath[MAX_PATH] = {0x00};

					swprintf(szwQRUrl, L"http://%s/?ip=%s", m_picture_mv_server_ip.c_str(), m_room_ip);
					string_conversion str_conn;
					str_conn.widechar_to_multibyte(szwQRUrl, szQRUrl, sizeof(szQRUrl));

					swprintf(szLocalPath,L"%s\\qr_picture\\picture_mv.png",m_work_path);

					Generate_encode_picture(szQRUrl,szLocalPath);

					zoom_image(szLocalPath,145,145,szLocalPath,L"image/png",20,20);

					TCHAR data[MAX_PATH] = {0x00};
					TCHAR command[256] = {0x00};
					TCHAR request[1024];

					//发送码值到前端
					swprintf(data,L"<data><info path=\"%s\"/></data>", szLocalPath);
					_tcscpy(command, L"picture_mv_qr");
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
					if (result)
					{
						flash_player_call_function(request);
					}
				}
			}
			break;
		case page_active_game://互动游戏
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态，不能选歌曲
					flash_show_tip_message(L"关房中，不能进入互动游戏");
					return;
				}
				//正在进行挑战大咖时，要先结束挑战
				if (m_b_challenging)
				{
					flash_show_tip_message(L"请点击[切歌]结束挑战大咖，才可参与此活动！");
					return;
				}
				result = page_change(page_active_game);
				if (result)
				{
					//向被控端发送遮挡图片消息
					send_master_slave_cover_iamge_data(true, page_active_game);
					//关闭视频
					m_player_manager.close_video_file();

					//挑战大咖设置为false
					m_b_challenging = false;
					//销毁秀秀MV窗口
					destroy_picture_mv_wnd();
					m_nCurPageCode = page_active_game;
					if (m_soft_decode_window_exist && m_use_soft_active_flash)
					{
						if (m_StarSoftTransparentWnd != NULL)
						{
							m_StarSoftTransparentWnd->MoveWindow(0,0,0,0);
							m_StarSoftTransparentWnd->ShowFlashWindow(SW_HIDE);
						}
						////互动游戏 - - 软解电视上的flash显示
						TCHAR path[256];
						memset(path,0x0,sizeof(path));

						if (m_inter_screen_exist)
							swprintf(path, L"%s\\active_game_interface\\Main1.swf", m_work_path);
						else
							swprintf(path, L"%s\\active_game_interface\\Main.swf", m_work_path);
						m_active_game_soft_flash_player_exist = m_active_game_soft_flash_player.Create(NULL,WS_CHILD,CRect(0,0,m_sencond_display_width,m_sencond_display_height),&m_soft_decode_window,ACTIVE_GAME_SOFT_PLAYER_ID);
						if (m_active_game_soft_flash_player_exist)
						{
							if (PathFileExists(path))
							{
								m_active_game_soft_flash_player.LoadMovie(0, path);
								m_active_game_soft_flash_player.ShowWindow(SW_SHOW);
								m_active_game_soft_flash_player.put_ScaleMode(2);
								m_active_game_soft_flash_player.BringWindowToTop();
							}
						}
					}
					if (m_inter_screen_exist)
					{
						if (m_StarTransparentWnd != NULL)
						{
							m_StarTransparentWnd->MoveWindow(0,0,0,0);
							m_StarTransparentWnd->ShowFlashWindow(SW_HIDE);
						}
						////互动游戏 - - 场景屏上的flash显示
						m_active_game_flash_player_exist = m_active_game_flash_player.Create(NULL,WS_CHILD,m_rtRelativeActivityWnd,&m_inter_screen_window,ACTIVE_GAME_PLAYER_ID);
						if (m_active_game_flash_player_exist)
						{
							TCHAR path[256];
							memset(path,0x0,sizeof(path));

							swprintf(path, L"%s\\active_game_interface\\Main.swf", m_work_path);
							if (PathFileExists(path))
							{										
								m_active_game_flash_player.LoadMovie(0, path);
								m_active_game_flash_player.ShowWindow(SW_SHOW);
								m_active_game_flash_player.put_ScaleMode(2);
								m_active_game_flash_player.BringWindowToTop();
							}
						}
						////////////////////*/
					}
				}
			}
			break;
		case page_wechat_barrage:// 微信互动-弹幕
			{
				//被控端此功能不可用
				if (m_master_slave_control_flag == 2)
				{
					flash_show_tip_message(L"此功能在被控机不可用，请您在主控机使用。");
					return;
				}
				if (CLOSE_ROOM_STATE==m_pc_state)
				{
					//关房状态
					flash_show_tip_message(L"关房中，不能进入弹幕");
					return;
				}
				result = page_change(page_wechat_barrage);
				if (result)
				{
					// 弹幕二维码路径
					result = flash_message_call_wechat_barrage_pic_path();
					// 弹幕开启标志
					result = flash_message_call_wechat_barrage_open(m_bWechatBarrageOpen);
					// 弹幕显示模式
					result = flash_message_call_wechat_barrage_mode(m_nWechatBarrageMode);

				}
			}
			break;
		default:
			break;
		}
#ifndef DON_GUAN_K_PLUS
		if (m_song_show_video_picture)
		{
			pc_show_video_window();
		}
#endif

	}

	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::page_change_init(void)
{
	try
	{
		int page_index=0;
		TCHAR request[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));

		//得到当前页码索引
		page_index = m_flash_manage.get_last_page_index();
		//隐藏手写
		if (m_handwriting_window_exist && m_handwriting_window.IsWindowVisible())
		{
			m_handwriting_window.ShowWindow(SW_HIDE);
			m_show_handwriting_window = false;
		}

#ifdef DON_GUAN_K_PLUS
		if (m_show_handwriting_window)
		{
			m_show_handwriting_window = false;
			m_handwriting_window_show_hide = false;
		}
#endif //DON_GUAN_K_PLUS

		//隐藏娱乐新闻
		if (m_html_ctrl_exist/* && m_html_ctrl.IsWindowVisible()*/)
		{
			m_html_ctrl.ShowWindow(SW_HIDE);
			m_html_ctrl.UpdateWindow();
			m_show_html_ctrl = false;
		}
		//清空所有查询条及手写
		clear_all_query_condition();
		//默认语言改成简体中文
		m_query_panel_language = SONG_LANGUAGE_CHINESE;

		if ((page_preview==page_index) && m_preview_window_exist)
		{
			//预览页面，关闭预览
			m_player_manager.preview_close();
			m_preview_window.show_window(false);
		}
		//如果复选框显示中，就隐藏
		if (m_check_window_state)
		{
			//杀死定时器
			KillTimer(hide_check_window_timer_identifier);
			hide_check_window_timer_identifier=0;
			//隐藏复选窗口
			show_check_window(false);
		}

		m_user_select_song = false;
		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::page_change(int page_code,bool page_init)
{
	try
	{
		TCHAR request[1024];
		bool result=false;
		int pre_page_index=0;

		memset(request,0x0,sizeof(request));

		if (page_init)  //页面返回已经初始化过了，此处就不用再初始化了
		{
			//保存查询条件副本
			save_data_copy();
			//保存了副本就允许返回
			m_page_allow_back=true;
			//页面改变之前做初始化
			page_change_init();
		}

		//保存前一页索引
		pre_page_index = m_flash_manage.get_last_page_index();
		if (page_video == pre_page_index)
		{
			//回到播放歌曲
			//switch_screen_play_song_video();
		}
		//改变页面存储上一次页面的值
		change_repeat_select_song(pre_page_index);

		switch (page_code)
		{
		case page_karaoke_home:  //卡拉oK首页
		case page_language:      //语种查询
			//case page_singer:        //歌星查询
		case page_class:         //类别查找
			//case page_title:         //拼音搜索
		case page_hdmi:         //高清专区
			{
				//显示已选列表的数据
				show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		default:
			break;
		}
		//页面改变
		page_change_function(page_code);

		if ((page_homepage==pre_page_index)||(page_assist==pre_page_index))
		{
			//如果前一页是首页或者辅助功能，换页之后，需要发送滚动信息
			flash_message_call(L"txtscroll",L"over");
			//更新播放进度
			set_play_progress_bar_pos();
		}

		//如果返回到活动页面，则在次发一次码
		if (page_code == page_singing_contest)
		{
			if(m_set_free_pk)
				parse_arena_rule_info_ex("1", 1);
			if(m_set_dekaron_pk)
				parse_arena_rule_info_ex("1", 2);
			if(m_set_ranking_plite)
				parse_arena_rule_info_ex("1", 3);

			// 			// 活动展示
			// 			//if (m_inter_screen_manager.IsMember(L"601", 2, true))
			// 			{
			// 				flash_message_call_activity();
			// 			}
		}

		//隐藏视频窗口，动画完成之后，在显示
		//hide_sub_window(); 
		if (page_code != page_video && page_code != page_singer_song && page_code != page_member_song && page_code != page_member_manager)
		{
			hide_sub_window();
		}
		//清空显示的页码
		/*	result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"page_info",L"<data><pageinfo total=\"\" pagenum=\"\"/></data>");
		if (result)
		{
		flash_player_call_function(request);
		}*/

		//播放图片广告
		play_pc_AD_picture();
		//告知flash显示已选还是已唱
		inform_flash_show_select_or_sing_text(page_code);
		//显示帮助信息
		//show_help_info();
		//是否显示音效、灯光、气氛子窗口
		//show_control_sub_window();
		if (page_init)
		{
			//设置高亮按钮状态
			set_button_highlight_state(true);
		}
		//设置排序方式	
		if (page_singer==page_code||page_voice_china_singer==page_code)
		{
			_tcscpy(m_show_sort_mode,L"hot");
		}
		else
		{
			//_tcscpy(m_show_sort_mode,L"pinyin");
			_tcscpy(m_show_sort_mode, m_show_sort_init_mode.c_str());
		}
		//update_sort_button_state();

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::page_change_function(int page_code)
{
	try
	{
		TCHAR request[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));

		//初始化页码，改变页面
		result = m_flash_manage.page_change(request,sizeof(request)/sizeof(TCHAR),page_code,g_flash_use_language,m_song_show_mode);

		if (!result)
		{
			return false;
		}
		flash_player_call_function(request);

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::play_next_video(void)
{
	try
	{
		song_info video_info;
		int result=false;
		TCHAR ad_path[256];
		string_conversion string_conv;
		bool ad_result=false;
		int page_number=0;
		TCHAR send_data[1024*50];
		enum PLAYER_PLAY_STATE player_next_state;
		TCHAR syn_song_id[1024*50];
		TCHAR song_id[256];
		int link_server_number=0;

		TCHAR szVoiceWavePath[256] = {0x00};
		TCHAR szMusicWavePath[256] = {0x00};

		memset(ad_path,0x0,sizeof(ad_path));
		memset(send_data,0x0,sizeof(send_data));
		memset(syn_song_id,0x0,sizeof(syn_song_id));

		if (m_bScoring)
		{
// 			m_bScoring = false;
			return true;
		}
		//得到播放器的下一个状态
		player_next_state = m_video_play_manager.get_player_next_state();
		if (1==m_master_slave_control_flag)
		{
			//主控机，播放下一首发送给被控机
			//选择的歌曲数大于0，同步歌曲
			result = get_select_song_number(syn_song_id);
			if (result && (0!=_tcscmp(syn_song_id,L"")))
			{
				//同步已选歌曲
				swprintf(send_data,L"NEXTSONG%d$%s",player_next_state,syn_song_id);
			}
			else
			{
				//发送给被控机当前空闲歌曲的索引
				int index = m_video_play_manager.get_cur_idlesse_video_number(); //空闲的索引
				swprintf(send_data, L"SET_IDLESSE_INDEX&%d", index);
				//发送给被控机
				send_master_slave_data(send_data,NULL);

				//没有已选歌曲就不用同步
				swprintf(send_data,L"NEXTSONG%d",player_next_state);
			}
			//发送给被控机
			send_master_slave_data(send_data,NULL);
		}
		else if(2==m_master_slave_control_flag)
		{
			//被控机
			set_flash_button_state(L"video_button", 0);
			m_video_button_number = 0;
		}

		if (m_nCurPageCode != page_picture_mv && m_nCurPageCode != page_challenge_star 
			&& m_nCurPageCode != page_listen_knowledge_song && m_nCurPageCode != page_across_pass)
		{
			/*add by yzg 2015-10-27
			//由于分数过低，通过配置提高评分分数
			*/
			if (m_nCurrentScore>0 && m_nCurrentScore<=50)
			{
				m_nCurrentScore += m_nCurrentScore*m_nScoreIncreaseRate/100;
			}
			else if (m_nCurrentScore>50 && m_nCurrentScore<=80)
			{
				m_nCurrentScore += (100 - m_nCurrentScore)*m_nScoreIncreaseRate/100;
			}
			if (m_nCurrentScore >= 98)
			{
				m_nCurrentScore = 98;
			}
		}

		//播放下一首歌曲时，停止录音
		int iflag = 0;
		if (m_is_recording)
		{
			iflag = stop_recorder_audio(false,true,false);
		}

//yzgtest
		if (/*(m_soft_load_score_flash_success||m_load_score_flash_success) &&*/ m_show_score_in_screen)
		{
			//显示评分结果视频
			result = compute_socre_result();
			if (result)
			{
				result = play_score_video();
				if (result)
				{
					return true;
				}
			}
		}
//*/
		if (video_info.get_flash_page_code() == page_video_show)
		{
			DestroyAxBrowse();
		}
		//得到下一个要播放的视频
		video_info.initialized_variables();
		result = m_video_play_manager.get_next_play_video(video_info,culture_video_ad,play_culture_video_ad);
		if (0==result)
		{
			//播放文化部的广告视频或图片
			if (AD_TYPE_PICTURE == culture_video_ad->nTypename_id)
			{
				WriteLog(__FL__, L"播放文化部的广告图片出错");
				//图片
				return false;
			}
			else 
			{
				//视频
				ad_result = string_conv.multibyte_to_widechar(culture_video_ad->szFilePath,ad_path,sizeof(ad_path));
				if (ad_result)
				{
					m_player_manager.set_ad_video_file(ad_path);
				}	
			}
		}
		else if (1==result)
		{
			CTime cur_time = CTime::GetCurrentTime();
			//更新选择的歌曲数目
			result = update_select_song_count();

			//设置要播放的视频给播放器控件
			link_server_number = m_link_server_number;

			//保存上次的录音
			_tcscpy(szMusicWavePath, m_music_wave_path);
			_tcscpy(szVoiceWavePath, m_voice_wave_path);

			memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
			memset(m_voice_wave_path,0x0,sizeof(m_voice_wave_path));

			memset(song_id,0x0,sizeof(song_id));
			video_info.get_song_id(song_id);

			int song_sort = video_info.get_song_sort();
			int maiba_pk = (song_sort>>2)&0x01;
			if (m_open_record_type && video_info.get_video_type() != PLAY_TV)    //增加判断 FOR ZHEN 2013-05-29
			{
				swprintf(m_music_wave_path,L"%s\\log\\shplayer-%02d%02d%02d.log",m_work_path,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
				if ((m_set_free_pk || m_set_ranking_plite) && maiba_pk == 1)
				{
					//只要开启自由pk，都保存到服务器路径
					swprintf(m_voice_wave_path,L"%s\\%s-%02d%02d%02d.wav",m_recorder_web_dir.c_str(),m_show_room_name,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
				} 
				else if (m_set_dekaron_pk  && maiba_pk == 1)
				{
					//如果只有擂台pk时，只有歌曲id相同的才能保存到服务器上
					if (0 == _tcscmp(song_id,m_maiba_rule_arena_info[1].song_id)) 
					{
						swprintf(m_voice_wave_path,L"%s\\%s-%02d%02d%02d.wav",m_recorder_web_dir.c_str(),m_show_room_name,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
					}
					else
					{
						swprintf(m_voice_wave_path,L"%s\\%s-%02d%02d%02d.wav",m_recorder_dir.c_str(),m_show_room_name,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
					}	
				}
				else
				{
					swprintf(m_voice_wave_path,L"%s\\%s-%02d%02d%02d.wav",m_recorder_dir.c_str(),m_show_room_name,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
				}
			}

			int page_from = video_info.get_flash_page_code();
			//设置曾辉的秀秀mv打开歌词
			if (page_from == page_picture_mv)
			{
				//涉及到歌词位置问题，先移动视频窗口
				if (m_inter_screen_exist)
				{
					if (m_activity_wnd_full_screen)
					{
						if (m_show_activity_wnd == 0 || m_inter_screen_mode == 0 || m_inter_screen_mode == 1)
						{
							m_master_show_window.MoveWindow(0, 0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
						}
						else
						{
							m_slave_show_window.MoveWindow(0, 0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
						}
					}
				}

				m_player_manager.Set(SD_SET_KSC_FILEPATH, (long)m_ksc_lyrics_path.c_str()); //设置ksc文件路径
				m_player_manager.Set(SD_SET_KSC_TEXT_BOLD, 1); //字体启用粗体
				m_player_manager.Set(SD_SET_KSC_TEXT_Y_POS, 90);//垂直位置
				if (m_inter_screen_exist)
				{
					config_file_manager config_file;

					//是否在演唱台端显示控制osd
					result = config_file.read_boolean(L"control",L"slave_window_show_osd",false);
					if (result || !m_soft_decode_window_exist)
					{
						float wRate, hRate;
						wRate = (float)((float)m_rtRelativeActivityWnd.Width()/(float)m_rt_flash_player.Width());
						hRate = (float)((float)m_rtRelativeActivityWnd.Height()/(float)m_rt_flash_player.Height());
						
						m_player_manager.Set(SD_SET_KSC_TEXT_X_POS, 20*wRate);//起始位置
						m_player_manager.Set(SD_SET_KSC_TEXT_Y_POS, 120*hRate);//垂直位置
						m_player_manager.Set(SD_SET_KSC_TEXT_WIDTH, (m_rt_flash_player.Width()-40)*wRate);//宽度
						m_player_manager.Set(SD_SET_KSC_TEXT_HEIGHT, 64*hRate);//高度
					}
				}
			}else{
				m_player_manager.Set(SD_SET_KSC_FILEPATH, (long)m_work_path); //设置空的ksc文件路径，设置为空，关闭歌词
			}
			if (page_from == page_picture_mv || page_from == page_sb_ranking_polite || 
				page_from == page_sb_free_pk || page_from == page_sb_challenge_pk)
			{
				if (m_show_score_in_screen)
				{
					m_player_manager.stop_score_osd();
				}
			}
			//yzg 2015-5-26 16:21:07
			if (video_info.get_video_type() == PLAY_SONG_TYPE_SELECT_SONG)
			{
				//当前歌曲的推荐歌曲
				memset(m_recommedn_song_id,0x0,sizeof(m_recommedn_song_id));
				_tcscpy(m_recommedn_song_id,song_id);
				m_bBubble = false;
				AfxBeginThread(Cflashktv10Wnd::query_recommend_song_thread,(LPVOID)this);
			}
			PLAY_SONG_TYPE type = video_info.get_video_type();
			if (type == PLAY_DLNA_VIDEO)
			{
				result = m_player_manager.set_video_file(video_info, m_lpDlna_url_data->szUrl);
				//mp3歌词osd停用
				stop_music_enjoy_osd();
			}//切歌时音乐欣赏原伴唱处理
			else if (type == PLAY_MUSIC_ENJOY)
			{
				// 得到当前歌曲的音轨，原唱true；伴唱false
				bool bchannel = m_player_manager.get_channel();
				song_info current_song_info;
				memset(&current_song_info, 0x0, sizeof(song_info));

				m_player_manager.get_playing_video(current_song_info);
				if(m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)
				{
					BOOL VoiceCancel = FALSE;
					HRESULT hr = m_IRTCOMAPI_20068->VistaGetVoiceCancelEnabled(m_ulIndex, &VoiceCancel);
					if(S_OK == hr)
					{
						if (current_song_info.get_video_type() == PLAY_SONG_TYPE_IDLESSE)
						{
							//第一首歌播平台音乐时，设为伴唱
							m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, TRUE);
						}
						if (bchannel)// 上首歌为原唱
						{
							if (m_player_manager.get_channel_memory())
							{
								// 若为伴唱则改为原唱
								if(VoiceCancel)
									m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, FALSE);
							}
							else
								m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, TRUE);
						}
						else
						{
							if (m_player_manager.get_channel_memory())
							{
								// 若为原唱则改为伴唱
								if(!VoiceCancel)
									m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, TRUE);
							}
						}
					}
				}
				//mp3歌词osd停用
				stop_music_enjoy_osd();
				result = m_player_manager.set_video_file(video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
				TCHAR tcSongCloudPath[256] = {0x0};
				if (video_info.get_song_relative_path(tcSongCloudPath))
				{
					string_conversion str_conv;
					char cLyricpath[256] = {0};
					str_conv.widechar_to_multibyte(tcSongCloudPath,cLyricpath,sizeof(cLyricpath));
					string strSongCloudPath(cLyricpath);
					string::size_type   nPos(0);   

					while((nPos=strSongCloudPath.find("mp3")) != strSongCloudPath.npos)
					{
						strSongCloudPath.replace(nPos, 3, "lrc");
					}
					int nMusicType = 0;
					if ((nPos=strSongCloudPath.find("qq")) != strSongCloudPath.npos)
						nMusicType = 0;
					else if ((nPos=strSongCloudPath.find("baidu")) != strSongCloudPath.npos)
						nMusicType = 1;
					else if ((nPos=strSongCloudPath.find("kuwo")) != strSongCloudPath.npos)
						nMusicType = 2;
					else if ((nPos=strSongCloudPath.find("kugou")) != strSongCloudPath.npos)
						nMusicType = 3;
					m_lyricManager.readLyric(strSongCloudPath, nMusicType);
				}
				if(m_lyricManager.m_nLyriclineNum > 0 && result)
				{
					show_music_enjoy_lyric_timer_identifier = SetTimer(SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID, 0, NULL);
					if (m_lyricManager.m_nLyricIndex == 0)
					{
						m_music_enjoy_lyric_timer.start();
						m_timerMusicEnjoy.start();
						m_dMusicEnjoySpace = 0;
					}
				}
			}
			else
			{
				//切歌时，若音乐欣赏中设置了伴唱
				//则将音乐欣赏中的设置切回原唱(防止非平台音乐受影响)
				InitKaraoke();
				result = m_player_manager.set_video_file(video_info,link_server_number,m_music_wave_path,m_voice_wave_path,m_is_scoring);
				if (!result)
				{
					if (video_info.get_flash_page_code() == page_picture_mv)
					{
						//全屏显示flash时，还原视频窗口位置
						if (m_activity_wnd_full_screen)
						{
							if (m_show_activity_wnd == 0 || m_inter_screen_mode == 0 || m_inter_screen_mode == 1)
							{
								m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
							}
							else
							{
								m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
							}
						}
					}
				}
				stop_music_enjoy_osd();
			}

			if (iflag == 1)
			{
				//删除上次的录音文件
				if (PathFileExists(szMusicWavePath))
				{
					DeleteFile(szMusicWavePath);
				}
				if (PathFileExists(szVoiceWavePath))
				{
					DeleteFile(szVoiceWavePath);
				}
			}

			if (!result)
			{
				WriteLog(__FL__, L"设置视频文件出错");
				/*
				//播放失败
				TCHAR song_id_log[256]; 
				memset(song_id_log,0x0,sizeof(song_id_log));
				video_info.get_song_id(song_id_log); 
				WriteLog(__FL__, song_id_log);

				memset(song_id_log,0x0,sizeof(song_id_log));
				video_info.get_video_path(song_id_log);
				WriteLog(__FL__, song_id_log);
				*/
				//播放下一首时，选择歌曲已经改变，需要重新刷屏，防止预约顺序错误
				refresh_screen_list();

				return false;
			}
			//成功，改变服务器连接编号
			change_link_server_number(link_server_number);

			//播放下一首时，选择歌曲已经改变，需要重新刷屏，防止预约顺序错误
			refresh_screen_list();	
			/////
			int page_index = m_flash_manage.get_last_page_index();
			if (page_index != page_listen_knowledge_song)
			{
				// 刷新互动场景屏歌星图片
				flash_message_call_singer_pic();
			}
			// 刷新互动场景屏节目图片
			flash_message_call_program_pic();//*/
		}
		else
		{
			WriteLog(__FL__, L"得不到下一个要播放的视频文件");
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::send_master_slave_data(TCHAR *wide_data,char *multile_data,int data_len)
{
	try
	{
		config_file_manager config_file;
		string_conversion str_conv;
		std::wstring server_ip;
		int send_len=0; 

		if (1==m_master_slave_control_flag)
		{
			//主控机，发送给被控机
			for (int m=0;m<SLAVE_COMPUTER_MAX_COUNT;m++)
			{
				//被控机，发送给主控机
				if (0==strcmp(m_slave_control_ip[m],""))
				{
					//如果服务器IP等于本机器IP，不发送，防止自发自收消息
					continue;
				}
				send_master_slave_data_udp(wide_data,multile_data,data_len,m_slave_control_ip[m],6512);
#ifdef SLAVE_NO_PLAY_VIDEO
				//send_master_slave_data_udp(wide_data,multile_data,data_len,m_slave_control_ip[m],6513);
#endif
			}
		}
		else if(2==m_master_slave_control_flag)
		{
			//被控机，发送给主控机
#ifndef SLAVE_NO_PLAY_VIDEO
			if (0==strcmp(m_master_control_ip,m_send_room_ip))
			{
				//如果服务器IP等于本机器IP，不发送，防止自发自收消息
				return false;
			}
#endif
			send_master_slave_data_udp(wide_data,multile_data,data_len,m_master_control_ip,6511);
		}

		return true;
	}
	catch (...)
	{

	}
	//解锁
	m_send_master_slave_lock.unlock();
	return false;
}

void Cflashktv10Wnd::send_light_control_udp(LINGHT_CONTROL light_control_data)
{
	try
	{
		// 创建套节字
		SOCKET send_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
		if(send_socket == INVALID_SOCKET)
		{
			//解锁
			return;
		} 

		//off TIME_WAIT
		struct linger zeroLinger;	
		zeroLinger.l_onoff = 1;	
		zeroLinger.l_linger = 5;

		setsockopt(send_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger	,sizeof(zeroLinger));

		int m_nSendTimeout = 6000;
		//set send timeout
		setsockopt(send_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

		// 也可以在这里调用bind函数绑定一个本地地址
		// 否则系统将会自动安排

		// 填写远程地址信息
		sockaddr_in servAddr; 
		servAddr.sin_family = AF_INET;
		servAddr.sin_port = htons(7788);

		// 注意，这里要填写服务器程序所在机器的IP地址
		// 如果你的计算机没有联网，直接使用127.0.0.1即可
		servAddr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");

		//发送数据
		int nRecv = ::sendto(send_socket, (char*)&light_control_data, sizeof(LINGHT_CONTROL),0,(sockaddr *)&servAddr,sizeof(servAddr));
		if(nRecv > 0)
		{
			//发送数据成功
		}
		// 关闭套节字
		::closesocket(send_socket);

		return;
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::send_master_slave_data_udp(TCHAR *wide_data,char *multile_data,int data_len,char *ip,u_short port)
{
	try
	{
		config_file_manager config_file;
		string_conversion str_conv;
		std::wstring server_ip;
		int send_len=0;
		char send_message[1024*100];

		// 创建套节字
		SOCKET send_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
		if(send_socket == INVALID_SOCKET)
		{
			//解锁
			m_send_master_slave_lock.unlock();
			return false;
		}
		//加锁
		m_send_master_slave_lock.lock();
		//off TIME_WAIT
		struct linger zeroLinger;	
		zeroLinger.l_onoff = 1;	
		zeroLinger.l_linger = 5;

		setsockopt(send_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger,sizeof(zeroLinger));

		int m_nSendTimeout = 6000;
		//set send timeout
		setsockopt(send_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

		// 也可以在这里调用bind函数绑定一个本地地址
		// 否则系统将会自动安排

		// 填写远程地址信息
		sockaddr_in servAddr; 
		servAddr.sin_family = AF_INET;
		servAddr.sin_port = htons(port);

		// 注意，这里要填写服务器程序所在机器的IP地址
		// 如果你的计算机没有联网，直接使用127.0.0.1即可
		servAddr.sin_addr.S_un.S_addr = inet_addr(ip);

		//发送数据
		memset(send_message,0x0,sizeof(send_message));
		if (NULL!=wide_data)
		{
			//宽字节
			str_conv.widechar_to_multibyte(wide_data,send_message,sizeof(send_message));
		}
		else if (NULL!=multile_data)
		{
			//多字节
			strcpy(send_message,multile_data);
		}
		if (data_len<=0)
		{
			//没有给出长度，就算
			send_len = (int)strlen(send_message);
		}
		else
		{
			send_len = data_len;
		}
		int nRecv = ::sendto(send_socket, send_message, send_len,0,(sockaddr *)&servAddr,sizeof(servAddr));
		if(nRecv > 0)
		{
			//发送数据成功
		}
		// 关闭套节字
		::closesocket(send_socket);

		//解锁
		m_send_master_slave_lock.unlock();

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::refresh_screen_list(bool requery)
{
	try
	{
		int page_index=0;
		int song_count=0;
		int select_song_count=0;
		int sing_song_count=0;

		//得到当前页索引
		page_index = m_flash_manage.get_last_page_index();
		//得到目前的行数
		song_count = m_db_query.get_total_row_count();
		select_song_count = m_video_play_manager.get_select_song_count();
		sing_song_count = m_video_play_manager.get_sing_song_count();

		switch(page_index)
		{
		case page_singed:  //已唱页面
			{
				if (sing_song_count<0)
				{
					return true;
				}
			}
			break;
		case page_selected:  //已选页面
			{
				if (select_song_count<0)
				{
					return true;
				}
			}
			break;
		default:
			break;
		}
		switch(page_index)
		{
		case page_title:        //歌名点歌
		case page_singer_song:  //具体歌星歌曲页面
		case page_lyric:        //歌词检索页面
		case page_theme_song:        //主题检索页面
		case page_new_theme_song:
		case page_class:        //分类点歌
		case page_new_song:     //新歌页面
		case page_opera:        //戏曲页面
		case page_language:     //语种点歌
		case page_movie_song:   //影视金曲
		case page_era_song:     //年代金曲
		case page_number_song:  //编号点歌
		case page_search_song:  //搜索歌曲
		case page_write:        //手写点歌
		case page_pkjx:
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
		case page_fast_songs_slow_dance: //劲曲漫舞
		case page_sb_ranking_polite: //我要参加-上榜有礼
		case page_sb_free_pk:		//我要参加-自由PK
		case page_sb_challenge_pk:	//我要参加-擂台PK
		case page_voice_china:  //好声音
		case page_yunadd_song:
			{
				if (requery)
				{
					//重新检索
					song_pre_next_page_change(song_select_expr,CUR_PAGE_OPERATE,0);
				}
				else
				{
					refresh_song_screen_list();
				}
			}
			break;
		case page_top_song:     //排行页面
			{
				if (requery)
				{
					//重新检索
					song_pre_next_page_change(top_song_select_expr,CUR_PAGE_OPERATE,0);
				}
				else
				{
					refresh_song_screen_list();
				}
			}
			break;
		case page_movie:        //电影页面
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
			{
				if (requery)
				{
					movie_pre_next_page_change(CUR_PAGE_OPERATE,0);
				}
				else
				{
					refresh_movie_screnn_list();
				}
			}
			break;
		case page_member_song:  //会员歌曲页面
			{
				//需要查询数据库
				member_song_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_selected:  //已选页面
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_singed:   //已唱页面
			{
				show_select_or_sing_song(SHOW_SING_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_U_disk:    //U盘播歌页面
			{
				U_disk_song_pre_next_page(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_recording:   //录音歌曲页面
			{
				m_str_slave_recorder_song_id.clear();
				song_recorder_query_show_data();
				//song_recorder_query_all_show_data();
			}
			break;
		case page_singer:  //歌星页面
		case page_voice_china_singer:
			{
				singer_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_karaoke_home:  //卡拉OK页面
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_baidu_music:
		case page_qq_music:
		case page_kugou_music:
		case page_kuwo_music:
			{
				//发码给flash
				flash_message_call_music_enjoy_data(page_index, false);
			}
			break;
		case page_trend_list:
			{
				flash_message_call_trend_list_data(page_index, false);
			}
			break;
		default:
			break;
		}
		//刷新互动场景屏信息
		flash_message_call_selected_song_list();
		return true;
	}
	catch (...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::refresh_song_screen_list(void)
{
	try
	{
		TCHAR request[10240*10];
		std::wstring song_list_xml;
		bool result=false;
		int page_index=0;

		memset(request,0x0,sizeof(request));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//重新组织xml字符串
		result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
		if (!result || song_list_xml.empty())
		{
			return false;
		}
		//重新上屏
		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
		if (result)
		{
			flash_player_call_function(request);
		}

		//刷新已选列表	
		//show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
		return true;
	}
	catch (...)
	{

	}
	return false;
}


bool Cflashktv10Wnd::refresh_movie_screnn_list(void)
{
	try
	{
		TCHAR request[10240];
		std::wstring movie_list_xml;
		bool result=false;
		int page_index=0;

		memset(request,0x0,sizeof(request));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//重新组织xml字符串
		result = m_query_song_manager.make_movie_list_xml(movie_list_xml,m_video_play_manager,m_page_show_row_count);
		if (!result || movie_list_xml.empty())
		{
			return false;
		}
		//重新上屏
		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),movie_list_xml.c_str(),true,page_index,0,m_song_show_mode);
		if (result)
		{
			flash_player_call_function(request);
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::show_select_or_sing_song(enum SHOW_SONG_LIST_TYPE song_type,enum PAGE_OPERATE page_operate,int page_operate_type)
{
	try
	{
		std::wstring song_list_xml;
		TCHAR request[30720];
		bool result=false;
		int row=0;
		int cur_page_number=0;
		int page_count=0;
		int page_index=0;
		bool refresh_list=true;

		memset(request,0x0,sizeof(request));	

		//组织xml字符串
		result = m_video_play_manager.make_song_list_xml(song_list_xml,song_type,page_operate,m_song_show_mode,page_index);
		if (!result)
		{
			return false;
		}
		//根据页操作，决定是否刷新屏幕
		if ((FIRST_PAGE_OPERATE==page_operate)||(CUR_PAGE_OPERATE==page_operate))
		{
			refresh_list = true;
		}
		else
		{
			refresh_list = false;
		}

		if (SHOW_SELECT_SONG == song_type)
		{
			page_index = page_selected;
		}
		else
		{
			page_index = page_singed;
		}
		//得到页行信息
		result = m_video_play_manager.get_page_row_info(row,cur_page_number,page_count,song_type);
		if (!result)
		{
			return false;
		}
		//示行页信息
		show_row_and_page_count(L"true",row,page_count,cur_page_number);

		//组织xml语句
		result = m_flash_manage.make_select_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,page_index,page_operate_type,m_song_show_mode);
		if (result)
		{
			flash_player_call_function(request);
		}

		//提示
		if (row<=0)
		{
			switch(song_type)
			{
			case SHOW_SELECT_SONG:  //已选歌曲
				{
					//没有已选歌曲进行提示
					flash_show_tip_message(9);
				}
				break;
			case SHOW_SING_SONG:   //已唱歌曲
				{
					//没有已唱歌曲进行提示
					flash_show_tip_message(10);
				}
				break;
			default:
				break;
			}
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::flash_show_maiba_song()
{
	try
	{

	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::show_recorder_arena_song(enum PAGE_OPERATE page_operate,int page_operate_type, int maibaType)
{
	try
	{
		std::wstring song_list_xml;
		TCHAR request[10240];
		bool result=false;
		int row=0;
		int cur_page_number=0;
		int page_count=0;
		int page_index=0;
		bool refresh_list=true;


		memset(request,0x0,sizeof(request));

		//得到最后一页的索引
		page_index = m_flash_manage.get_last_page_index();

		//组织xml字符串
		result = make_recorder_arena_song_list_xml(song_list_xml,page_operate);

		if (!result)
		{
			return false;
		}
		//根据页操作，决定是否刷新屏幕
		if ((FIRST_PAGE_OPERATE==page_operate)||(CUR_PAGE_OPERATE==page_operate))
		{
			refresh_list = true;
		}
		else
		{
			refresh_list = false;
		}

		if (page_index == page_free_pk_view_list || page_index == page_challenge_pk_view_list)
		{
			//显示行页信息
			show_row_and_page_count(L"true",m_maiba_song_list_count,m_maiba_total_page_number,m_maiba_current_page_number);

			//组织xml语句
			result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,page_index,page_operate_type);

			if (result)
			{
				flash_player_call_function(request);
			}
		}		
#ifdef VICE_SCREEN_GUANGXI
		//发送到副屏
		if (m_vice_screen_flash_player_exist)
		{
			if (maibaType == 0)
			{
				result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,L"vice_screen_free",page_operate_type);
				m_vice_screen_flash_player.CallFunction(request);
			}else if (maibaType == 1)
			{
				result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,L"vice_screen_area",page_operate_type);
				m_vice_screen_flash_player.CallFunction(request);
			}
		}
#endif // VICE_SCREEN_GUANGXI
		//发送到互动场景屏
		if (m_inter_screen_flash_player_exist)
		{
			if (maibaType == 0)
			{
				result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,L"602_1",page_operate_type);
				m_inter_screen_flash_player.CallFunction(request);
			}else if (maibaType == 1)
			{
				result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),refresh_list,L"602_2",page_operate_type);
				m_inter_screen_flash_player.CallFunction(request);
			}
		}

		//得到页行信息 
		if (!result)
		{
			return false;
		}


		//提示
		if (m_maiba_song_list_count<=0)
		{
			//没有已选歌曲进行提示
			//flash_show_tip_message(9);
		}
	}
	catch (...)
	{

	}

	return false;
}


bool Cflashktv10Wnd::make_recorder_arena_song_list_xml(std::wstring& song_list_xml,enum PAGE_OPERATE page_operate)
{
	try
	{
		TCHAR song_show_info[1024];
		int start_suffix=0;
		int end_suffix=0;
		int page_number=0;
		int song_number=0;
		bool result=false;
		int picture_number=0;
		int song_sort = 0;
		int score_flower = 0;  //1.示花， 2.分数

		if(m_maiba_song_list_count <=0)
		{
			//没有数据
			return false;
		}
		//产生0-132的随即数
		picture_number = rand() / (RAND_MAX / 133 + 1);

		if (FREEPK == m_request_song_type)
		{
			//自由pk
			score_flower = 2;
		}
		else if (AREAPK == m_request_song_type)
		{
			//擂台pk
			score_flower = 2;
		}
		else
		{
			song_list_xml += L"<song_list></song_list>"; 
			return false;
		}

		//改变页码
		switch(page_operate)
		{
		case FIRST_PAGE_OPERATE: //第一页
			{
				m_maiba_current_page_number=1;
				m_maiba_total_page_number = m_maiba_song_list_count/m_page_show_row_count+(m_maiba_song_list_count%m_page_show_row_count?1:0);	 
			}
			break;
		case PRE_PAGE_OPERATE:
			{
				m_maiba_current_page_number--;
				if (m_maiba_current_page_number<=0)
				{
					m_maiba_current_page_number = m_maiba_total_page_number;
				}
			}
			break;
		case NEXT_PAGE_OPERATE:
			{
				m_maiba_current_page_number++;
				if (m_maiba_current_page_number>m_maiba_total_page_number)
				{
					m_maiba_current_page_number=1;
				}
			}
			break;
		case CUR_PAGE_OPERATE:
			{
				//显示当前页，页码不变
				m_maiba_total_page_number = m_maiba_song_list_count/m_page_show_row_count+(m_maiba_song_list_count%m_page_show_row_count?1:0);

				if (m_maiba_total_page_number>m_maiba_total_page_number)
				{
					m_maiba_total_page_number = m_maiba_total_page_number;
				}
				if (m_maiba_total_page_number<1)
				{
					m_maiba_total_page_number = 1;
				}
			}
			break;
		default:
			return false;
		}

		//组织xml字符串

		//组织前一页了
		song_list_xml += L"<song_list>";
		//组织当前页
		page_number = m_maiba_current_page_number;
		start_suffix = (page_number-1)*m_page_show_row_count;
		if (start_suffix<0)
		{
			start_suffix = 0;
		}
		//end_suffix = page_number*m_page_show_row_count-1;
		end_suffix = page_number*m_page_show_row_count;
		if (end_suffix>=m_maiba_song_list_count)
		{
			end_suffix = m_maiba_song_list_count-1;
		}
		for (int i=start_suffix;i<=end_suffix;i++)
		{
			memset(song_show_info,0x0,sizeof(song_show_info));

			//swprintf(song_show_info,L"<item song_id=\"%s\" member_addr=\"C:\\123.jpg\" song_name=\"%s\" singer_name=\"%s\" score=\"%s\" flowers_count=\"1000\" color=\"%s\" />",
			//m_maiba_song_list[i].song_id,/*m_maiba_song_list[i].member_addr,*/m_maiba_song_list[i].song_name,m_maiba_song_list[i].singer_name,m_maiba_song_list[i].score,m_default_song_row_color.c_str()/*,m_maiba_song_list[i].flowers_count*/);
			swprintf(song_show_info,L"<item voice_id=\"%s\" song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\"  member_pic=\"%s\" listen_count=\"\" flowers_count=\"\" color=\"%s\" score_flower=\"%d\" room_name=\"%s\"/>",
				m_maiba_song_list[i].voice_id,m_maiba_song_list[i].song_id,m_maiba_song_list[i].song_name,m_maiba_song_list[i].nick_name,m_maiba_song_list[i].score,m_maiba_song_list[i].member_pic,/*m_maiba_song_list[i].listen_count,m_maiba_song_list[i].flowers_count,*/m_default_song_row_color.c_str(),score_flower, m_maiba_song_list[i].room_name);

			song_list_xml += song_show_info; 
		}
		song_list_xml += L"</song_list>"; 
		//下一页  

		return true;

	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::start_recorder_audio(void)
{
	try
	{

		config_file_manager config_file;
		CTime cur_time;
		TCHAR song_id[128];
		TCHAR song_name[128];
		TCHAR song_language[256];
		song_info cur_song_info;
		bool result=false;
		TCHAR recorder_datetime[64];
		TCHAR song_path[256];
		TCHAR song_version[256];
		int nVersion=0;

		memset(song_id,0x0,sizeof(song_id));
		memset(song_name,0x0,sizeof(song_name));
		memset(recorder_datetime,0x0,sizeof(recorder_datetime));
		memset(song_path,0x0,sizeof(song_path));
		memset(song_language,0x0,sizeof(song_language));
		memset(song_version,0x0,sizeof(song_version));

		if (!m_recorder_dir.empty())
		{
			result = m_video_play_manager.get_playing_video(cur_song_info);
			if (result)
			{
				cur_song_info.get_song_id(song_id);
				cur_song_info.get_song_name(song_name);
				cur_time = CTime::GetCurrentTime();
				cur_song_info.get_song_version(song_version,nVersion);
				cur_song_info.get_song_language(song_language);

				//memset(m_tape_mp3_name,0x0,sizeof(m_tape_mp3_name));
				//if (1==m_tape_mode)  //程序混音模式
				//{
				//	swprintf(m_tape_mp3_name,L"%04d%02d%02d%02d%02d%02d-%s-%s-%s",cur_time.GetYear(),cur_time.GetMonth(),   \
				//		cur_time.GetDay(),cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond(),m_show_room_name,song_id,song_name);
				//}

				//开始录音
				//m_tape_audio.StartTape(recorder_path);
				PLAY_SONG_TYPE song_type = cur_song_info.get_video_type();
				if (song_type == PLAY_SONG_TYPE_SELECT_SONG)
				{
					//显示控制osd 修改2014-04-16 默认录音，不显示osd
					result = show_control_osd(CONTROL_OSD__RECORD);
				}				
				//记录正在录音的歌曲信息
				m_song_recorder = cur_song_info;
				m_player_manager.get_playing_song_video_path(song_path);
				m_song_recorder.set_recorder_video_path(song_path);
				m_song_recorder.set_recorder_wave_path(m_voice_wave_path);
				m_song_recorder.set_recorder_start_time(0);
				m_song_recorder.set_language(song_language);
				memset(song_version,0x0,sizeof(song_version));
				swprintf(song_version,L"%d",nVersion);
				m_song_recorder.set_song_version(song_version);
				//保留原歌曲ID
				memset(song_id,0x0,sizeof(song_id));
				m_song_recorder.get_song_id(song_id);
				m_song_recorder.set_culture_code(song_id);   //用于存储原歌曲编号
				//修改录音歌曲ID
				memset(song_id,0x0,sizeof(song_id));
				m_record_audio_number++;
				swprintf(song_id,L"%s%02d%02d%02d",m_show_room_name,cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
				m_song_recorder.set_song_id(song_id);
				//录音时间
				swprintf(recorder_datetime,L"%04d-%02d-%02d %02d:%02d:%02d",cur_time.GetYear(),cur_time.GetMonth(),cur_time.GetDay(),cur_time.GetHour(),cur_time.GetMinute(),cur_time.GetSecond());
				m_song_recorder.set_recorder_datatime(recorder_datetime);
				//设置按钮状态 ZHEN 2013-09-06
				set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);
			}
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}

int Cflashktv10Wnd::stop_recorder_audio(bool play_next,bool MixerAudio,bool play_finish)
{
	try
	{
		TCHAR song_id[256];
		TCHAR wave_path[256];
		TCHAR datetime[256];
		int start_time=0;
		struct __timeb64 timebuffer;
		int play_time=0;
		TCHAR mixer_log[256];
		int iflag = 0;

		memset(song_id,0x0,sizeof(song_id));
		memset(wave_path,0x0,sizeof(wave_path));
		memset(datetime,0x0,sizeof(datetime));

		//所有的osd停止播放
		stop_control_osd_logo();

		if (m_is_recording)
		{
			m_is_recording=false;
			//设置按钮状态 ZHEN 2013-09-06
			set_button_show_state(TAPE_BUTTON_STATE,m_is_recording);
			//如果正在录音就停止
			m_tape_audio.StopTape();
			//停止控制osd播放
			//stop_control_osd_logo();
			//刷新列表，播放下一首的时候，在刷新。
			//refresh_screen_list();
			if (play_finish)
			{
				//正常播放完毕时，是总的长度
				play_time = m_play_song_total_time;   //只要大于60就行
			}
			else
			{
				play_time = m_player_manager.get_play_time_length();
			}

			if (play_time<60 || (1==m_tape_mode&&play_time>420))   //暂停或播放时长小于60秒的，不保存录音
			{
				if (PathFileExists(m_voice_wave_path))
				{
					DeleteFile(m_voice_wave_path);
				}
				if (PathFileExists(m_music_wave_path))
				{
					DeleteFile(m_music_wave_path);
				}

				if (play_next)
				{
					//录音结束，播放下一首歌曲
					flash_message_call_function(SONG_NEXT);
				}

				iflag = 1;

				//memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
				//memset(m_voice_wave_path,0x0,sizeof(m_voice_wave_path));

				WriteLog(__FL__, L"暂停或播放时长小于60秒的，不保存录音,或者混合伴奏大于420秒");
				return iflag;
			}

			if (1==m_tape_mode)   //需要软件混合伴奏
			{
				m_song_recorder.get_song_id(song_id);
				m_song_recorder.get_wave_path(wave_path);
				WriteLog(__FL__, L"-------获得保存文件路径:%s", wave_path);
				
				m_song_recorder.get_recorder_datetime(datetime);
				start_time = m_song_recorder.get_recorder_start_time();
				//得到当前时间
				_ftime64(&timebuffer);
				if (MixerAudio) 
				{
					RECORD_SONG_INFO wave_info;

					//分配一个结构体
					//wave_info = new RECORD_SONG_INFO;
					//初始化
					memset(&wave_info,0x0,sizeof(RECORD_SONG_INFO));
					_tcscpy(wave_info.SongID,song_id);
					_tcscpy(wave_info.VoiceWavePath,wave_path);
					//m_song_recorder.set_recorder_wave_path(L"");
					_tcscpy(wave_info.DateTime,datetime);
					_tcscpy(wave_info.MusicWavePath,m_music_wave_path);
					wave_info.DurationTime = timebuffer.time-start_time;  //持续时间
					memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
					//把录音文件后缀改成mp3
					wave_path[_tcslen(wave_path)-4] = '\0';
					_tcscpy(wave_info.mp3Path, wave_path); //合成mp3使用
					_tcscat(wave_path,L".mp3");
					m_song_recorder.set_recorder_wave_path(wave_path);

					//合成音频
					m_wav_info_deque.push_back(wave_info);
					memset(mixer_log,0x0,sizeof(mixer_log));
					swprintf(mixer_log,L"添加到队列中进行合成 SongID=%s， wave_path = %s",wave_info.SongID, wave_path);
					WriteLog(__FL__, mixer_log);
				}
				else
				{
					if (PathFileExists(wave_path))
					{
						DeleteFile(wave_path);
					}
					if (PathFileExists(m_music_wave_path))
					{
						DeleteFile(m_music_wave_path);
					}

					iflag = 1;

					//memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
					//memset(m_voice_wave_path,0x0,sizeof(m_voice_wave_path));
					//删除录音音频
					if (play_next)
					{
						//录音结束，播放下一首歌曲
						flash_message_call_function(SONG_NEXT);
					}

					WriteLog(__FL__, L"MixerAudio为false，打出的日志");

					return iflag;
				}
			}
			PLAY_SONG_TYPE pst = m_player_manager.get_playing_video_type();

			PLAYER_PLAY_STATE state = m_video_play_manager.get_player_cur_state();			

			if (pst == PLAY_SONG_TYPE_SELECT_SONG && state == PLAY_SONG_STATE && m_master_slave_control_flag != 2)
			{				
				//把录音信息录入到数据库中
				insert_recorder_song_into_database();

				//发送给移动设备
				send_tape_song_to_pad();
			}else{
				TCHAR log[256] = {0x00};
				swprintf(log, L"录音文件插入数据库，当前歌曲状态PLAY_SONG_TYPE:%d, PLAYER_PLAY_STATE:%d", (int)pst, (int)state);
				WriteLog(__FL__, log);
			}

			//清空
			memset(m_music_wave_path,0x0,sizeof(m_music_wave_path));
			memset(m_voice_wave_path,0x0,sizeof(m_voice_wave_path));
			int page_index = m_flash_manage.get_last_page_index();
			if (page_recording==page_index)
			{
				//显示第一页
				song_recorder_query_show_data();
				//song_recorder_query_all_show_data();
			}
			if (play_next)
			{
				//录音结束，播放下一首歌曲
				flash_message_call_function(SONG_NEXT);
			}
			//显示录音歌曲数
			send_tape_audio_count_to_flash();
		}

		return iflag;
	}
	catch (...)
	{

	}
	return 0;
}
//
//void Cflashktv10Wnd::stop_control_osd_logo(void)
//{
//	try
//	{
//		//停止播放控制osd
//		bool m_record_playback=false;
//		//图片
//		m_player_manager.stop_control_osd();
//		//文字
//		m_player_manager.play_control_text_osd(L"",RGB(0,0,0),1200,90);
//		//停止播放bmp osd
//		//m_player_manager.stop_bmp_osd();
//		m_player_manager.stop_ad_logo_osd(nLayerADBKLogo);
//		//把发送给前置机的信息拷贝到发送结构体中
//		//copy_precomputer_send_info(PROMPT_BOX_TYPE);
//
//		if (m_is_recording)
//		{
//			//如果正在录音，显示录音osd
//			show_control_osd(CONTROL_OSD__RECORD);
//		}
//		else if (!m_player_manager.is_playing())
//		{
//			//暂停状态
//			show_control_osd(CONTROL_OSD__PAUSE);
//		}
//		else if (m_player_manager.is_mute())
//		{
//			//静音
//			show_control_osd(CONTROL_OSD__VOLUME_MUTE);
//		}
//		else if (m_record_playback)
//		{
//			//录音回放
//			show_control_osd(CONTROL_OSD__PLAYBACK);
//		}
//		else if (m_enter_guide_song && m_show_guide_osd)
//		{
//			//显示导唱
//			show_control_osd(CONTROL_OSD__ENTER_AUTO_SONG);
//		}
//	}
//	catch (...)
//	{
//
//	}
//
//	return;
//}

void Cflashktv10Wnd::stop_control_osd_logo(void)
{
	try
	{
		song_info Video_info;
		bool result=false;
		bool m_record_playback=false;
		TCHAR wave_path[256];

		memset(wave_path,0x0,sizeof(wave_path));

		//停止播放控制osd
		//图片
		m_player_manager.stop_control_osd();
		//文字 
		m_player_manager.play_control_text_osd(L"",RGB(0,0,0),1200,90);
		//停止播放bmp osd
		if (!m_show_song_tip_osd)
		{
			m_player_manager.stop_bmp_osd();
		}
		m_player_manager.stop_ad_logo_osd(nLayerADBKLogo);
		//把发送给前置机的信息拷贝到发送结构体中
		//copy_precomputer_send_info(PROMPT_BOX_TYPE);

		//得到正播放视频
		m_player_manager.get_playing_video(Video_info);

		//设置录音文件
		PLAY_SONG_TYPE song_type = Video_info.get_video_type();
		if (PLAY_SONG_TYPE_RECORDER_SONG==song_type)
		{
			//如果是录的歌曲，要同时播放录音
			result = Video_info.get_wave_path(wave_path);
			if (result)
			{
				m_record_playback = true;
			}            
		}
		//2015-2-7 10:58:55LTL
		if (m_is_recording&&song_type==PLAY_SONG_TYPE_SELECT_SONG)
		{
#ifdef DON_GUAN_K_PLUS
			//如果正在录音，显示录音osd,2014-04-16 修改不显示osd
			show_control_osd(CONTROL_OSD__RECORD);
#endif // DON_GUAN_K_PLUS
			//2015年6月5日14:46:13---LTL
			show_control_osd(CONTROL_OSD__RECORD);
		}
		else if (!m_player_manager.is_playing())
		{
			//暂停状态
			show_control_osd(CONTROL_OSD__PAUSE);
		}
		else if (m_player_manager.is_mute())
		{
			//静音
			show_control_osd(CONTROL_OSD__VOLUME_MUTE);
		}
		else if (m_record_playback)
		{
			//录音回放
			show_control_osd(CONTROL_OSD__PLAYBACK);
		}
		else if (m_enter_guide_song && m_show_guide_osd)
		{
			//显示导唱
			show_control_osd(CONTROL_OSD__ENTER_AUTO_SONG);
		}

		//显示音乐欣赏的osd-------By_v.cai_2015/02/09 16:29
		if (Video_info.get_music_enjoy() == 1)
		{
			set_music_enjoy_osd();
		}

	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::insert_recorder_song_into_database(void)
{
	try
	{
		TCHAR sql[1024];
		TCHAR song_id[128];
		TCHAR song_name[128];
		TCHAR singer_name[64];
		TCHAR video_path[256];
		TCHAR culture_code[128];
		TCHAR wave_path[256];
		int start_time=0;
		TCHAR datetime[64];
		bool result=false;
		file wave_file;
		DWORD file_size=0;
		TCHAR data[1024];
		TCHAR user_name[256];  //用户名
		TCHAR nick_name[256];  //昵称
		TCHAR activity_id[256];
		TCHAR song_language[256];
		TCHAR song_version[256];
		TCHAR membe_pic[256];
		int nVersion = 0;

		memset(song_id,0x0,sizeof(song_id));
		memset(song_name,0x0,sizeof(song_name));
		memset(singer_name,0x0,sizeof(singer_name));
		memset(video_path,0x0,sizeof(video_path));
		memset(culture_code,0x0,sizeof(culture_code));
		memset(wave_path,0x0,sizeof(wave_path));
		memset(datetime,0x0,sizeof(datetime));
		memset(data,0x0,sizeof(data));
		memset(user_name,0x0,sizeof(user_name));
		memset(activity_id,0x0,sizeof(activity_id));
		memset(song_language,0x0,sizeof(song_language));
		memset(song_version,0x0,sizeof(song_version));
		memset(membe_pic,0x0,sizeof(membe_pic));
		memset(nick_name,0x0,sizeof(nick_name));

		memset(sql,0x0,sizeof(sql));

		m_song_recorder.get_song_id(song_id);
		m_song_recorder.get_song_name(song_name);
		m_song_recorder.get_singer_name(singer_name);
		m_song_recorder.get_video_path(video_path);
		m_song_recorder.get_culture_code(culture_code);
		m_song_recorder.get_wave_path(wave_path);
		start_time = m_song_recorder.get_recorder_start_time();
		m_song_recorder.get_recorder_datetime(datetime);
		m_song_recorder.get_song_language(song_language);
		m_song_recorder.get_song_version(song_version,nVersion);

		file_size = wave_file.get_file_size(wave_path);

		if (-1 == m_activate_vip_button)
		{
			_tcscpy(user_name,L"");
			_tcscpy(membe_pic,L"");
			_tcscpy(nick_name,L"");
		}
		else
		{
			//得到当前的用户名 
			m_memeber_manage[m_activate_vip_button].get_user_name(user_name);
			m_memeber_manage[m_activate_vip_button].get_user_head(membe_pic);
			m_memeber_manage[m_activate_vip_button].get_nick_name(nick_name);
		}

		/*	if ((file_size>RECORDER_AUDIO_MIN_FILE_SIZE) && (0!=_tcscmp(song_id,L"")) && (0!=_tcscmp(song_name,L"")))
		{*/
		//录音文件比较大，就录入录音数据库
		swprintf(sql,L"INSERT OR REPLACE INTO song_recorder(song_id,song_name,singer_name,video_path,culture_code,wave_path,start_time,datetime,score) VALUES (\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,\"%s\",\"%d\")",song_id,song_name,singer_name,video_path,culture_code,wave_path,start_time,datetime,/*m_shine_total_score*/m_nCurrentScore);
		result = m_db_query.exec_sql(sql);
		if (!result)
		{
			WriteLog(__FL__, L"录音歌曲插入失败！！");
			WriteLog(__FL__, sql);
		} 

		memset(data,0x0,sizeof(data));

		//发送录音文件给服务器  Message&SONG_RECORDER;song_id:song_name:singer_name:video_path:culture_code:wave_path:start_time:datetime:is_share:room_name:score:user_name:wave_exist:pk_flags:member_pic
		//										      歌曲id：歌曲名称：歌星姓名：歌曲路径：culture_code：wave路径：开始时间：录音时间，是否共享：包房名称：分数：用户名称：路径是否存在：pk的标示：会员图片名称	  

		swprintf(data,L"Message&SONG_RECORDER;%s&%s&%s&%s&%s&%s&%d&%s&0&%s&%d&%s&0&1$END",
			song_id,song_name,singer_name,video_path,culture_code,wave_path,start_time,datetime,m_show_room_name,/*m_shine_total_score*/m_nCurrentScore,user_name);

		//通过udp协议发送给服务程序
		send_data_to_service_udp(data);

		//通过TCP发送给统计程序
		if (0 != strcmp(m_set_maiba_rule_ip,"") && (m_set_free_pk||m_set_dekaron_pk||m_set_ranking_plite/*||m_set_challenge_star||m_set_across_pass*/) && /*m_shine_total_score*/m_nCurrentScore != 0)
		{
			memset(data,0x0,sizeof(data));
			CString  wave_path_jsoin;
			CString  video_path_jsoin;
			CString  pic_path_jsoin;
			wave_path_jsoin = wave_path;
			video_path_jsoin = video_path;
			pic_path_jsoin = membe_pic;
			wave_path_jsoin.Replace(L"\\",L"\\\\");
			video_path_jsoin.Replace(L"\\",L"\\\\");
			pic_path_jsoin.Replace(L"\\",L"\\\\");			

			if (m_set_dekaron_pk)
			{
				TCHAR szTmp[1024] = {0x00};
				wcscat(szTmp, L",");
				wcscat(szTmp, m_maiba_rule_arena_info[1].song_id);

				memset(activity_id,0x0,sizeof(activity_id));

				TCHAR *pID = wcsrchr(szTmp, L',');
				while(pID)
				{
					if (_tcscmp(culture_code, &pID[1]) == 0)
					{
						_tcscpy(activity_id,m_maiba_rule_arena_info[1].activity_id);
						WriteLog(__FL__, L"发送录音文件信息到服务器，此录音为擂台pk活动");
						break;
					}
					pID[0] = '\0';
					pID = wcsrchr(szTmp, L',');
				}
			}

			if (_tcscmp(activity_id, L"") == 0)
			{
				if (m_set_ranking_plite)
				{
					_tcscpy(activity_id,m_maiba_rule_arena_info[2].activity_id);
					WriteLog(__FL__, L"发送录音文件信息到老王，此录音为上榜有礼活动");
				}else if (m_set_free_pk)
				{
					_tcscpy(activity_id,m_maiba_rule_arena_info[0].activity_id);
					WriteLog(__FL__, L"发送录音文件信息到老王，此录音为自由pk活动");
				}
				// 				else if (m_set_challenge_star)
				// 				{
				// 					_tcscpy(activity_id,m_maiba_rule_arena_info[3].activity_id);
				// 					WriteLog(__FL__, L"发送录音文件信息到老王，此录音为挑战大咖活动");
				// 				}else if (m_set_across_pass)
				// 				{
				// 					_tcscpy(activity_id,m_maiba_rule_arena_info[4].activity_id);
				// 					WriteLog(__FL__, L"发送录音文件信息到老王，此录音为百秒夺奖活动");
				// 				}
			}

			swprintf(data,L"SONG_RECORDER_YK{\"activity_id\":\"%s\",\"song_id\":\"%s\",\"song_name\":\"%s\",\
						   \"singer_name\":\"%s\",\"video_path\":\"%s\",\"culture_code\":\"%s\",\"wave_path\":\"%s\",\
						   \"start_time\":\"%d\",\"datetime\":\"%s\",\"is_share\":\"0\",\"room_name\":\"%s\",\
						   \"score\":\"%d\",\"user_name\":\"%s\",\"nick_name\":\"%s\",\"wave_exist\":\"0\",\"pk_flags\":\"0\",\"song_language\":\"%s\",\"song_version\":\"%s\",\"member_pic\":\"%s\" }",activity_id,
						   song_id,song_name,singer_name,video_path_jsoin.GetBuffer(0),culture_code,wave_path_jsoin.GetBuffer(0),start_time,datetime,m_show_room_name,
						   /*m_shine_total_score*/m_nCurrentScore,user_name,nick_name,song_language,song_version,pic_path_jsoin.GetBuffer(0)); 

			//send_msg_to_set_maiba_rule(data);

			//AfxBeginThread(send_data_to_maiba_rule_thread,data);
			REQUEST_BOX_DATA *request_rule_data = new REQUEST_BOX_DATA;
			request_rule_data->pThis = this;
			_tcscpy(request_rule_data->request_data,data);
			AfxBeginThread(send_data_to_maiba_rule_thread,request_rule_data);
		}
		//}
		//else
		//{
		//	//如果录音文件比较小，既刚开始录，就直接删除
		//	DeleteFile(wave_path);
		//}		
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_function(int function_code,int lpara,bool recv_msg)
{
	try
	{
		bool result=false;
		TCHAR log[256];

		memset(log,0x0,sizeof(log));

		//记录操作码
		swprintf(log,L"操作码:%d",function_code);
		WriteLog(__FL__, log);

		//不是接受的消息，并且启动了主被控就发送
		if (!recv_msg && ((1==m_master_slave_control_flag)||(2==m_master_slave_control_flag)))
		{
			send_master_slave_control_code(function_code);
		}

		//新平台微信音量控制
		if (function_code >= MUSIC_VOLUME_MIN && function_code <= MUSIC_VOLUME_MAX)
		{
			TCHAR szMusic_volume[16] = {0x00};
			swprintf(szMusic_volume, L"%d", function_code - 700);
			flash_message_call(L"music_volume", szMusic_volume);
		}

		switch(function_code)
		{
		case RETURN_SELECT_SONG:  //从视频屏保返回点歌界面
			{
				pc_show_video_window();
			}
			break;
			//呼叫服务
		case CALL_ATTENDANT: //呼叫服务员
			{
#ifdef MONGOLIA_VERSION   //蒙古版
				TCHAR software_path[256];
				DWORD process_id=0;

				memset(software_path,0x0,sizeof(software_path));
				swprintf(software_path,L"%s\\service.exe",m_work_path);
				start_plug_in_process(software_path,SW_SHOW,process_id);
#else
				if (m_pc_allow_cancel_service)
				{
					//允许取消呼叫
					if (m_call_service_state)
					{
						m_click_service_button_number = -1;
						//呼叫服务状态，取消呼叫
						cancel_call_service();
					}
					else					
					{
						//没有呼叫服务状态，改成呼叫服务状态
						send_request_service(7,L"服务员");
					}
				}
				else
				{
					//只能呼叫服务
					send_request_service(7,L"服务员");
				}
#endif
			}
			break;
		case CALL_PR_MANAGER: //公关经理
			{
				send_request_service(1,L"公关经理");
			}
			break;
		case CALL_ACOUSTICS_ENGINEER: //音响师
			{
				send_request_service(2,L"调音");
			}
			break;
		case CALL_CLEANER: //保洁员
			{
				send_request_service(0,L"清洁");
			}
			break;
		case CALL_DUTY_MANAGER: //值班经理
			{
				send_request_service(5,L"值班经理");
			}
			break;
		case CALL_ORDER_DINNER: //点餐
			{
				send_request_service(8,L"点餐");
			}
			break;
		case CALL_CUP:        //杯子
			{
				send_request_service(6,L"杯子");
			}
			break;
		case CALL_PAY_MONEY: //买单
			{
				send_request_service(3,L"买单");
			}
			break;
		case CALL_CONSULTION: //咨询
			{
				send_request_service(4,L"咨询");
			}
			break;
		case CALL_CANCEL:   //取消服务
			{
				m_click_service_button_number = -1;
				cancel_call_service();
			}
			break;
			//歌曲控制功能
		case SONG_NEXT:       //下一首
			{
				bool result=false;
				enum PLAYER_PLAY_STATE player_state;
				m_video_button_number = 0;
				if (VIDEO_TYPE_TV == tv_play_video_type)
				{
					//显示预览
					pc_play_video_type = VIDEO_TYPE_SONG;
					tv_play_video_type = VIDEO_TYPE_SONG;
					set_flash_button_state(L"video_button", 0);
					pc_show_video_window();
				}

				//如果是在爱秀直播，则关闭爱秀直播
				if (m_video_show_exist)
				{
					//取消暂停
					flash_message_call_function(SONG_PLAY);
					DestroyAxBrowse();
					//向被控端发送遮挡图片消息
					send_master_slave_cover_iamge_data(false, page_video_show);
					m_video_show_exist = FALSE;
				}

				song_info songInfo;
				m_player_manager.get_playing_video(songInfo);
				//照片mv - 隐藏
				if (songInfo.get_flash_page_code() == page_picture_mv) //要切到下首歌，则删除当前歌曲照片mv
				{
					//根据当前歌曲的guid删除指针
					vector<ST_PICTURE_MV*>::iterator it = m_st_picture_mv_vec.begin();
					while(it != m_st_picture_mv_vec.end())
					{
						if((*it)->guid == m_picture_mv_curr_guid)
						{
							int idx = it - m_st_picture_mv_vec.begin();
							delete m_st_picture_mv_vec.at(idx);
							m_st_picture_mv_vec.erase(it);
							break;
						}
						else
							it++;
					}
					//向被控端发送遮挡图片消息
					send_master_slave_cover_iamge_data(false, page_picture_mv);
				}
				//取消静音处理
				result = DealMuteState(m_cancel_mute);

// 				if (VIDEO_TYPE_SONG!=tv_play_video_type)
// 				{
// 				//只有电视播放歌曲时，控制按钮才起作用
// 				//WriteLog(__FL__, L"只有歌曲视频允许切换，其他视频不允许切换");
// 				break;
// 				}				

				PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
				if (PLAY_MSG_VIDEO_FIRE_ALARYM==video_type)
				{
					//火警视频不能切掉
					break;
				}

				if (m_b_pk_connect&&!recv_msg)
				{
					TCHAR send_ip[256];
					memset(send_ip,0x0,sizeof(send_ip));
					if (0 != _tcscmp(m_pk_invitationIP,L""))
					{
						_tcscpy(send_ip,m_pk_invitationIP);
					}
					if (0 != _tcscmp(m_pk_acceptIP,L""))
					{
						_tcscpy(send_ip,m_pk_acceptIP);
					}

					connect_inviation(send_ip,_T("cut_song"));
				}

				if ((0==m_master_slave_control_flag)||(1==m_master_slave_control_flag) || recv_msg)
				{
					if (!m_play_song_before_open_room&&(CLOSE_ROOM_STATE==m_pc_state)&&(m_play_song_count_after_close_room>=m_song_count_after_close_room))
					{
						//开房之前不允许播放歌曲，那么关房之后，播放完规定的歌曲就停止播放
						m_player_manager.stop();
						return;
					}

					//关房之后，允许播放几首歌曲
					player_state = m_video_play_manager.get_player_cur_state();
					if ((CLOSE_ROOM_STATE==m_pc_state)&&(PLAY_SONG_STATE==player_state))
					{
						WriteLog(__FL__, L"播放关房歌曲");
						//关房状态下，如果还是在播放
						if ((-1==m_song_count_after_close_room) || (m_play_song_count_after_close_room>=m_song_count_after_close_room))
						{
							//如果是-1，表示立即切掉当前歌曲
							//设定播放状态
							m_video_play_manager.set_player_cur_state(END_STATE);
							m_video_play_manager.set_player_next_state(END_STATE);
						}
						m_play_song_count_after_close_room++;
					}

					if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state))
					{	
						//测试下一首歌曲
						m_video_play_manager.set_test_song_play_order(true);
					}
					//如果不继续挑战，则隐藏flash
					if (m_b_challenging && !m_b_challenge_begin)
					{
						int score = 0;
						bool success = true;
						char szscore[256] = {0x00};
						string_conversion str_conv;
						//关闭视频
						m_player_manager.close_video_file();

						m_nCurrentTotalScore = 0;
						str_conv.widechar_to_multibyte(m_vec_challenge_star_info[m_nChallengeIndex].goal_score, szscore, 256);
						if (m_nCurrentScore < atoi(szscore))
							success = false;

						if (m_inter_screen_exist && m_StarTransparentWnd != NULL)
						{
							m_StarTransparentWnd->SetWindowStyle(NULL, 255);
							m_StarTransparentWnd->MoveWindow(m_rtAbsoluteActivityWnd.left, m_rtAbsoluteActivityWnd.top, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height());
							m_StarTransparentWnd->MoveFlashWindow(CRect(0,0, m_rtAbsoluteActivityWnd.Width(), m_rtAbsoluteActivityWnd.Height()));
						}
						if (m_soft_decode_window_exist && m_use_soft_active_flash && m_StarSoftTransparentWnd != NULL)
						{
							m_StarSoftTransparentWnd->SetWindowStyle(NULL, 255);
							m_StarSoftTransparentWnd->MoveWindow(m_rt_soft_activity.left, m_rt_soft_activity.top, m_rt_soft_activity.Width(), m_rt_soft_activity.Height());
							m_StarSoftTransparentWnd->MoveFlashWindow(CRect(0,0, m_rt_soft_activity.Width(), m_rt_soft_activity.Height()));
						}
						//发送挑战结果
						result = flash_message_call_start_result(success);

						m_b_challenging = false;
						m_b_challenge_begin = false;
						//向被控端发送遮挡图片消息
						send_master_slave_cover_iamge_data(false, page_challenge_star);
						return;
					}
					//播放歌曲
					result = play_next_video();
					if (!result)
					{
						//至少循环一次
						player_state = PLAY_SONG_STATE;
						while(PLAY_SONG_STATE==player_state)
						{
							//打开失败
							WriteLog(__FL__, L"自动播放下一个视频");
							//得到播放器的当前状态
							player_state = m_video_play_manager.get_player_cur_state();
							result = play_next_video();
							if (result)
							{
								break;
							}
						}
					}

					if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
					{
						//测机状态下，发送信息
						send_test_song_info();
					}
					m_replay=false;
				}
				else if (2==m_master_slave_control_flag)
				{
					//被控机，客户点击的，发送控制码给主控机
					char data[1024];

					memset(data,0x0,sizeof(data));
					//转化成字符串
					sprintf(data,"CONTROL%d",SONG_NEXT);
					//发送控制码
					send_master_slave_data(NULL,data);
				}
			}
			break;
		case SONG_REPLAY:        //重唱
			{
				bool result=false;

				if (VIDEO_TYPE_SONG!=tv_play_video_type)
				{
					//只有电视播放歌曲时，控制按钮才起作用
					break;
				}
				if ((0==lpara)&&m_is_recording) //参数等1表示录音回放
				{
					//正在录音不能重唱
					if (0 == m_record_type)
					{
						WriteLog(__FL__, L"评分完成后提示001");
						if (m_master_slave_control_flag!=2)
						{
							flash_show_tip_message(55);
						}
						break;
					}
					//正在录音不能重唱
					//flash_show_tip_message(55);
					//break;
				}
				else if (1==lpara)  //参数等1表示录音回放
				{
#ifndef ONLY_PLAY_KARAOKE_TRACK   //只播放原唱，永远都是欣赏状态
					result = m_player_manager.is_enjoyment();
					if (result)
					{
						//如果是欣赏状态，取消欣赏状态  2014-05-21 修改， 原伴唱记忆，不知道原因
						//m_player_manager.change_enjoyment_state();
					}
#endif
				}
				//取消静音处理
				result = DealMuteState(true);
				//同步重唱
				if (m_b_pk_connect&&!recv_msg)
				{
					TCHAR send_ip[256];
					memset(send_ip,0x0,sizeof(send_ip));
					if (0 != _tcscmp(m_pk_invitationIP,L""))
					{
						_tcscpy(send_ip,m_pk_invitationIP);
					}
					if (0 != _tcscmp(m_pk_acceptIP,L""))
					{
						_tcscpy(send_ip,m_pk_acceptIP);
					}
					connect_inviation(send_ip,_T("replay_song"));
				}
				//音乐欣赏时的歌词处理
				if (m_player_manager.get_playing_video_type() == PLAY_MUSIC_ENJOY)
				{
					//原伴唱处理
					if(m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)
					{
						BOOL VoiceCancel = FALSE;
						HRESULT hr = m_IRTCOMAPI_20068->VistaGetVoiceCancelEnabled(m_ulIndex, &VoiceCancel);
						if(S_OK == hr)
						{
							//若不记忆。则都改为伴唱
							if (!m_player_manager.get_channel_memory())
							{
								m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, TRUE);
							}
						}
					}
					//停用歌词osd
					stop_music_enjoy_osd();

					song_info video_info;
					if( m_player_manager.get_playing_video(video_info) )
					{
						TCHAR tcSongCloudPath[256] = {0x0};
						if (video_info.get_song_relative_path(tcSongCloudPath))
						{
							string_conversion str_conv;
							char cLyricpath[256] = {0};
							str_conv.widechar_to_multibyte(tcSongCloudPath,cLyricpath,sizeof(cLyricpath));
							string strSongCloudPath(cLyricpath);
							string::size_type   nPos(0);   

							while((nPos = strSongCloudPath.find("mp3")) != strSongCloudPath.npos)
							{
								strSongCloudPath.replace(nPos, 3, "lrc");
							}
							int nMusicType = 0;
							if ((nPos=strSongCloudPath.find("qq")) != strSongCloudPath.npos)
								nMusicType = 0;
							else if ((nPos=strSongCloudPath.find("baidu")) != strSongCloudPath.npos)
								nMusicType = 1;
							else if ((nPos=strSongCloudPath.find("kuwo")) != strSongCloudPath.npos)
								nMusicType = 2;
							else if ((nPos=strSongCloudPath.find("kugou")) != strSongCloudPath.npos)
								nMusicType = 3;
							m_lyricManager.readLyric(strSongCloudPath, nMusicType);
						}
					}

					if(m_lyricManager.m_nLyriclineNum > 0)
					{
						show_music_enjoy_lyric_timer_identifier = SetTimer(SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID, 0, NULL);
						m_music_enjoy_lyric_timer.start();
						m_timerMusicEnjoy.start();
						m_dMusicEnjoySpace = 0;
					}
				}
				result = m_player_manager.replay(m_music_wave_path,m_voice_wave_path,true);
				if (!result)
				{
					//重新播放失败
				}
				if (!result)
				{
					//重新播放失败
				}

				m_replay=true;
			}
			break;
		case SONG_PREVIOUS:        //上一首
			{
				if (m_use_test_function && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测试上一首歌曲
					m_video_play_manager.set_test_song_play_order(false);
				}
				//播放歌曲
				result = play_next_video();
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
		case SONG_ACCOMPANY_ORIGINAL: //伴唱或原唱
			{
				bool channel=false;

				if (VIDEO_TYPE_SONG!=tv_play_video_type)
				{
					//只有电视播放歌曲时，控制按钮才起作用
					break;
				}
				if (m_is_recording)
				{
					//正在录音不能切换原伴唱
					//flash_show_tip_message(55);
					//break;
				}
				//add by yzg 2015-12-25
				//活动或者评分时不可切换为原唱
				channel = m_player_manager.get_channel();
				if (!channel)
				{
					song_info current_song_info;
					m_player_manager.get_playing_video(current_song_info);
					int song_sort = current_song_info.get_song_sort();
					int maiba_pk = (song_sort>>2)&0x01;//是否是评分歌曲
					//得到最后一页的索引
					int page_index = m_flash_manage.get_last_page_index();
					int page_from = current_song_info.get_flash_page_code();
					if (page_index == page_across_pass || page_index == page_listen_knowledge_song
						|| page_index == page_active_game || m_b_challenging || page_from == page_sb_ranking_polite
						|| page_from == page_sb_free_pk || page_from == page_sb_challenge_pk || (m_show_score_in_screen&&maiba_pk))
					{
						break;
					}
				}
				//add end
				//取消静音处理
				result = DealMuteState(true);
				//改变音轨
				m_player_manager.change_channel();
				//flash界面初控制按钮始化
				update_flash_control_button();
				//显示控制osd
				channel = m_player_manager.get_channel();
				if (channel)
				{
#ifdef AUTO_OPEN_GUID  //ZHEN 2013-09-14
					//关闭导唱音轨 2013-07-16添加，开启原唱，自动关闭导唱
					exit_enter_guid_song(false);
#endif
					//原唱
					result = show_control_osd(CONTROL_OSD__CHANNEL_KALAOK);
				}
				else
				{
#ifdef AUTO_OPEN_GUID  //ZHEN 2013-09-14
					//启用导唱音轨 2013-07-16添加，进入伴唱后，自动切换为导唱
					exit_enter_guid_song(true);
#endif
					//伴唱
					result = show_control_osd(CONTROL_OSD__CHANNEL_ACCOMPANY);
				}
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();

				//设置欣赏按钮状态
				set_button_show_state(ENJOY_BUTTON_STATE,false);
			}
			break;
			// yzg 2015年5月25日09:35:32
		case SONG_ORIGINAL:          //原唱
			{
				song_info current_song_info;

				m_player_manager.get_playing_video(current_song_info);
				int song_sort = current_song_info.get_song_sort();
				int maiba_pk = (song_sort>>2)&0x01;//是否是评分歌曲
	
				//得到最后一页的索引
				int page_index = m_flash_manage.get_last_page_index();
				int page_from = current_song_info.get_flash_page_code();
				if (page_index == page_across_pass || page_index == page_listen_knowledge_song
					|| page_index == page_active_game || m_b_challenging || page_from == page_sb_ranking_polite
					|| page_from == page_sb_free_pk || page_from == page_sb_challenge_pk || (m_show_score_in_screen&&maiba_pk))
				{
					break;
				}

				int music_enjoy = current_song_info.get_music_enjoy();
				// 音乐欣赏平台
				if (music_enjoy == 1)
				{
					if (m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)//可用
					{
						HRESULT hr = m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, FALSE);
						if ((HRESULT)hr >= 0)
						{
							//伴唱，改为原唱
							flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
						}
					}
				}
				else//其他平台
				{
					//播放其他平台音乐时，判断声卡是否被音乐欣赏平台切换为伴唱
					//是的话则切回原唱
					InitKaraoke();

					result = m_player_manager.get_channel();

					//退出导唱
					m_player_manager.exit_guid_song();

					if (!result || m_player_manager.get_guid_channel() == 1)
					{
						m_player_manager.set_guid_channel(0);
						//伴唱，改为原唱
						flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
					}
				}
				m_select_song_accompany_original = 3; //原唱
				send_accompany_original_button_state();
			}
			break;
		case SONG_ACCOMPANY:        //伴唱
			{
				song_info current_song_info;
				m_player_manager.get_playing_video(current_song_info);

				int music_enjoy = current_song_info.get_music_enjoy();
				// 音乐欣赏平台
				if (music_enjoy == 1)
				{
					if (m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)
					{
						HRESULT hr = m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, TRUE);
						if ((HRESULT)hr >= 0)
						{
							//原唱，改为伴唱
							flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
						}
					}
				}
				else//其他平台
				{
					//播放其他平台音乐时，判断声卡是否被音乐欣赏平台切换为伴唱
					//是的话则切回原唱
					InitKaraoke();

					result = m_player_manager.get_channel();

					//退出导唱
					m_player_manager.exit_guid_song();

					if (result || m_player_manager.get_guid_channel() == 1)
					{
						m_player_manager.set_guid_channel(0);
						//原唱，改为伴唱
						flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
					}
					show_control_osd(CONTROL_OSD__CHANNEL_ACCOMPANY);
				}
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				m_select_song_accompany_original = 1;  //原版伴奏
				send_accompany_original_button_state();
			}
			break;
			// end yzg
		case SONG_ENJOYMERT:    //欣赏
			{
				bool channel=false;

				if (VIDEO_TYPE_SONG!=tv_play_video_type)
				{
					//只有电视播放歌曲时，控制按钮才起作用
					break;
				}

				if ((0==m_master_slave_control_flag)||(1==m_master_slave_control_flag))
				{
					//主控机
#ifdef SHANXI_LUYIN_ENJOY
					result = m_player_manager.is_enjoyment();
					if (!result)
					{
						//改变欣赏状态,同时改变原伴唱和音轨
						result = m_player_manager.change_enjoyment_state();
						//flash界面初控制按钮始化
						update_flash_control_button();
						//显示控制OSD
						show_control_osd(CONTROL_OSD__APPRECIATE);
						//设置欣赏按钮状态
						set_button_show_state(ENJOY_BUTTON_STATE,true);
					}
#else
					//改变欣赏状态,同时改变原伴唱和音轨
					result = m_player_manager.change_enjoyment_state();
					//flash界面初控制按钮始化
					update_flash_control_button();

					//显示控制osd
					channel = m_player_manager.get_channel();
					if (channel)
					{
						//原唱
						result = show_control_osd(CONTROL_OSD__CHANNEL_KALAOK);
					}
					else
					{
						//伴唱
						result = show_control_osd(CONTROL_OSD__CHANNEL_ACCOMPANY);
					}
					//启动控制osd播放时间的定时器
					set_control_osd_show_timer();
#endif
				}
				else if (2==m_master_slave_control_flag)
				{
					//被控机，客户点击的，发送控制码给主控机
					send_master_slave_control_code(SONG_ENJOYMERT);
				}
			}
			break;
		case SONG_PLAY_PAUSE:      //播放或暂停
			{
				song_info video_info;

				if (VIDEO_TYPE_SONG!=tv_play_video_type)
				{
					//只有电视播放歌曲时，控制按钮才起作用
					break;
				}
				//得到播放暂停状态
				result = m_player_manager.is_playing();
				if (result&&m_is_recording)
				{
					//正在录音不能暂停
					//flash_show_tip_message(55);
					//break;
					//录音允许暂停 ZHEN 2013-10-20
					flash_show_tip_message(112);
					//停止录音
					stop_recorder_audio(false,false,false);
				}
				if (result&&m_is_scoring)
				{
					result = m_player_manager.get_playing_video(video_info);
					if (result&&(PLAY_SONG_TYPE_SELECT_SONG==video_info.get_video_type())&&(3==video_info.get_song_sort()))
					{
						//正在评分不能暂停
						//flash_show_tip_message(98);
						//break;

						//评分允许暂停 ZHEN 2013-10-20
						flash_show_tip_message(111);
					}
					m_player_manager.stop_score_osd();
				}

				PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
				if (PLAY_MSG_VIDEO_FIRE_ALARYM==video_type)
				{
					flash_show_tip_message(L"正在播放火警提示，不允许暂停");
					break;
				}

				//同步暂停
				if (m_b_pk_connect&&!recv_msg)
				{
					TCHAR send_ip[256];
					memset(send_ip,0x0,sizeof(send_ip));
					if (0 != _tcscmp(m_pk_invitationIP,L""))
					{
						_tcscpy(send_ip,m_pk_invitationIP);
					}
					if (0 != _tcscmp(m_pk_acceptIP,L""))
					{
						_tcscpy(send_ip,m_pk_acceptIP);
					}
					connect_inviation(send_ip,_T("stop_song"));
				}

				if ((m_select_environment_button_number>=0)&&(m_select_environment_button_number<=3))
				{
					//暂停时播放环境音，在开始的时候停止播放
					play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_CLOSE,false);
				}
				
				int page_code = m_flash_manage.get_last_page_index();
				switch(page_code)
				{
				case page_video_show: case page_listen_knowledge_song:
				case page_active_game:
					break;
				default:
					{
						bool mute = m_player_manager.is_mute();
						if(m_player_manager.is_playing()) //播放状态
						{
							if (!mute)
							{
								//静音设置
								flash_message_call_function(SONG_MUTE_UNMUTE);
							}					
						}else{
							if (mute)
							{
								//静音设置
								flash_message_call_function(SONG_MUTE_UNMUTE);
							}
						}

						Sleep(200);
					}
					break;
				}				

				//暂停或播放
				m_player_manager.play_or_pause();
				//flash界面初控制按钮始化
				update_flash_control_button();
				//显示osd
				result = m_player_manager.is_playing();
				if (result)
				{
					//正在播放
					stop_control_osd_logo();
					//音乐欣赏歌词处理
					if (m_player_manager.get_playing_video_type() == PLAY_MUSIC_ENJOY)
					{
						if (m_lyricManager.m_nLyriclineNum > 0)
						{
							show_music_enjoy_lyric_timer_identifier = SetTimer(SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID, 0, NULL);
							m_music_enjoy_lyric_timer.start();
							m_timerMusicEnjoy.start();
							m_dMusicEnjoySpace = 0;
						}
					}
					//发送给中控盒 2013-03-11 ZLG
					write_com_data(COM_SEND_PLAYER_PLAY);
					//
					change_light_state(0);
					//设置灯光高亮按钮状态
					send_light_button_state();
				}
				else
				{
					if (0==lpara)
					{
						//m_player_manager.stop_bmp_osd();
						//默认情况下，显示暂停osd
						result = show_control_osd(CONTROL_OSD__PAUSE);
					}
					if (0 != show_music_enjoy_lyric_timer_identifier)
					{
						//音乐欣赏歌词处理
						if (m_player_manager.get_playing_video_type() == PLAY_MUSIC_ENJOY)
						{
							m_music_enjoy_lyric_timer.pause();
							show_music_enjoy_lyric_timer_identifier = 0;
							m_dLyricLastTime = m_lyricManager.m_dLasttime;
							KillTimer(SHOW_MUSIC_ENJOY_LYRIC_TIME_EVENT_ID);
						}
					}
					//发送给中控盒 2013-03-11 ZLG
					write_com_data(COM_SEND_PLAYER_PAUSE);
					//
					change_light_state(2);
				}
			}
			break;
		case SONG_PLAY:                   //播放
			{
				result = m_player_manager.is_playing();
				if (!result)
				{
					//暂停，就开始播放
					flash_message_call_function(SONG_PLAY_PAUSE);
				}
			}
			break;
		case SONG_PAUSE:                  //暂停
			{
				result = m_player_manager.is_playing();
				if (result)
				{
					//播放，就开始暂停
					flash_message_call_function(SONG_PLAY_PAUSE);
				}
			}
			break;
		case SONG_MUTE_UNMUTE:        //静音/还原
			{
				bool mute=false;

				if (m_is_recording)
				{
					//录音不能静音
					WriteLog(__FL__, L"评分完成提示002");
					flash_show_tip_message(55);
					break;
				}

				//静音设置
				m_player_manager.mute();
				//显示控制osd
				mute = m_player_manager.is_mute();
				if (mute)
				{
					//静音
					m_player_manager.stop_bmp_osd();
					result = show_control_osd(CONTROL_OSD__VOLUME_MUTE);
					if (m_is_recording)
					{
						//静音，停止录音
						//增加提示
						flash_show_tip_message(113);
						stop_recorder_audio(false,false,false);

					}
					//改变音量
					m_player_manager.change_music_volume(VOLUME_SET_FLAG,0);
					//
					change_light_state(1);
				}
				else
				{
					//取消静音
					stop_control_osd_logo();
					int music_volume = 0;
					m_player_manager.get_card_amplifier_volume_temp(music_volume);
					//改变音量
					m_player_manager.change_music_volume(VOLUME_SET_FLAG, music_volume);
					//更新声音信息
					update_flash_audio_info();
					//
					change_light_state(0);
					//设置灯光高亮按钮状态
					send_light_button_state();
				}
				//flash界面初控制按钮始化
				update_flash_control_button();
				//静音时控制flash音量
				int page_code = m_flash_manage.get_last_page_index();
				flash_message_call_flash_volume(page_code);
			}
			break;
		case SONG_MUTE:      //静音
			{
				result = m_player_manager.is_mute();
				if (!result)
				{
					//非静音状态，改成静音
					flash_message_call_function(SONG_MUTE_UNMUTE);
				}
			}
			break;
		case SONG_UNMUTE:    //取消静音
			{
				result = m_player_manager.is_mute();
				if (result)
				{
					//静音状态，改成非静音
					flash_message_call_function(SONG_MUTE_UNMUTE);
				}
			}
			break;
		case PAGE_BACK:  //页面返回
			{
				int last_page_index=0;
				int pre_page_index=0;
				bool result=false;

				//当前页面索引
				last_page_index = m_flash_manage.get_last_page_index();
				if (page_homepage==last_page_index || page_enterainment==last_page_index 
					|| page_place_raiders==last_page_index || page_aider_function==last_page_index
					|| page_home_song==last_page_index )
				{
					//提示目前是首页
					break;
				}
				//页面改变之前要进行初始化
				page_change_init();
				while(1)
				{
					//前一页面索引
					pre_page_index = m_flash_manage.get_pre_page_index();
					if (-1==pre_page_index)
					{
						return;
					}
					else if (!m_member_already_login&&page_member_song == pre_page_index)
					{
						continue;
					}
					else if (!m_member_already_login&&(page_member_song==pre_page_index))
					{
						//如果是会员歌曲页面并且已经退出会员，就返回到更前一级
						continue;
					}
					else if (m_member_already_login && (page_member_manager==pre_page_index))
					{
						//已经登录就不能再返回到会员管理页面了
						continue;
					}
					else if (m_pk_login_member && (page_pk_manager==pre_page_index))
					{
						continue;
					}
					else if (last_page_index==pre_page_index)
					{
						continue;
					}
					else if ((page_maiba_login == pre_page_index) || (page_maiba_register == pre_page_index))
					{
						continue;
					}
					else if ((page_system_manager==pre_page_index)||(page_preview==pre_page_index)||(page_system_info==pre_page_index))
					{
						continue;
					}
					else
					{
						break;
					}
					//前一页面索引
					pre_page_index = m_flash_manage.get_pre_page_index();
					if (-1==pre_page_index)
					{
						return;
					}
					else if (!m_member_already_login&&(page_member_song==pre_page_index))
					{
						//如果是会员歌曲页面并且已经退出会员，就返回到更前一级
						continue;
					}
					else if (m_member_already_login && (page_member_manager==pre_page_index))
					{
						//已经登录就不能再返回到会员管理页面了
						continue;
					}
					else if (m_pk_login_member && (page_pk_manager==pre_page_index))
					{
						continue;
					}
					else if (last_page_index==pre_page_index)
					{
						continue;
					}
					else if ((page_system_manager==pre_page_index)||(page_preview==pre_page_index)||(page_system_info==pre_page_index))
					{
						continue;
					}
					else if (page_singer_song==pre_page_index)
					{
						continue;
					}
					else if (page_singer_song==last_page_index)
					{
						break;
					}
					else if (/*(pre_page_index==page_language) || */(pre_page_index==page_singer) || (pre_page_index==page_class)||
						(pre_page_index==page_title)||(pre_page_index==page_word_count) ||(pre_page_index==page_voice_china_singer))
					{
						pre_page_index = page_karaoke_home;
					}
					else
					{
						break;
					}
				}

				//改变页面
				result = page_change(pre_page_index,false);
				if (!result)
				{
					break;
				}
				if  (pre_page_index == page_sb_ranking_polite ||
					pre_page_index == page_sb_free_pk)
				{
					set_flash_button_state(L"particpate_button",0);
					flash_message_call_song_sort_song();					
					break;
				}else if (pre_page_index == page_sb_challenge_pk)
				{
					set_flash_button_state(L"particpate_button",0);
					song_query_show_data_by_id(song_select_expr, true, m_maiba_rule_arena_info[1].song_id);					
					break;
				}
				if (pre_page_index != page_member_song)
				{

					//恢复保存的副本
					resume_data_copy();
					TCHAR phoneargs[1024] = {0x00};
					if (pre_page_index==page_wechat)
					{
						_tcscpy(phoneargs,L"0");
						flash_message_call_encode(phoneargs);
						//set_flash_button_state(L"encode_button",1);
					}
					if (pre_page_index==page_encode)
					{
						_tcscpy(phoneargs,L"1");
						flash_message_call_encode(phoneargs);
						//set_flash_button_state(L"encode_button",2);
					}
					if (pre_page_index==page_phone_push)
					{
						set_flash_button_state(L"encode_button",3);
					}
				}

				//if (SCREEN_TYPE_VERTICAL==m_interface_type)
				{
					//清空所有的数据
					//clear_query_condition_by_page_and_init(true);
					//m_page_allow_back = false;

					if (m_page_allow_back)
					{
						//允许返回
						//m_page_allow_back = false;
						//得到总行数和页数

						//由于flash不记录，
						switch(pre_page_index)
						{
						case page_title:        //歌名点歌
						case page_singer_song:  //具体歌星歌曲页面
						case page_lyric:        //歌词检索页面
						case page_theme_song:   //主题检索页面
						case page_new_theme_song:
						case page_class:        //分类点歌
						case page_new_song:     //新歌页面
						case page_opera:        //戏曲页面
						case page_language:     //语种点歌
						case page_movie_song:   //影视金曲
						case page_era_song:     //年代金曲
						case page_number_song:  //编号点歌
						case page_search_song:  //搜索歌曲
						case page_write:        //手写点歌
						case page_word_count:   //字数点歌
						case page_fast_songs_slow_dance: //劲舞漫曲
						case page_voice_china:  //好声音
						case page_yunadd_song:
							{
								song_pre_next_page_change(song_select_expr,CUR_PAGE_OPERATE,0);		
							}
							break;
						case page_top_song:     //排行页面
							{
								song_pre_next_page_change(top_song_select_expr,CUR_PAGE_OPERATE,0);
							}
							break;
						case page_selected:   //已选页面
							{
								show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
							}
							break;
						case page_singed:   //已唱页面
							{
								show_select_or_sing_song(SHOW_SING_SONG,CUR_PAGE_OPERATE,0);
							}
							break;
						case page_introduce:   //场所介绍
							{
								flash_message_call_service(L"1");
							}
							break;
						case page_room:           //包厢使用手册
							{
								flash_message_call_service(L"2");
							}
							break;
						case page_fire:           //消防图解
							{
								flash_message_call_service(L"3");
							}
							break;
						case page_guide:          //消防指南
						case page_help:
							{
								flash_message_call_service(L"4");
							}
							break;
						case page_U_disk:    //U盘播歌页面
							{
								U_disk_song_pre_next_page(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_movie:    //电影页面
						case page_concert:  //演唱会
						case page_place_video:  //场所视频
							{
								movie_pre_next_page_change(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_member_song:  //会员歌曲页面
							{
								member_song_pre_next_page_change(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_singer:         //歌星页面
						case page_custom_singer:  //场所歌星
						case page_voice_china_singer:
							{
								singer_pre_next_page_change(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_member_manager:  //会员管理页面
							break;
						case page_recording:   //录音页面
							{
								song_recorder_pre_next_page_change(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_trend_list:
							{
								flash_message_call_trend_list_data(page_trend_list, false);
							}
							break;
						case page_video_show://重新显示数据
							{
								m_video_show_current_page = 1; //当前页为第一页
								//设置下载路径
								TCHAR szLocalPicPath[MAX_PATH] = {0x00};
								TCHAR szTmpDir[MAX_PATH] = {0x00};
								char szLPP[MAX_PATH] = {0x00};
								GetTempPath(MAX_PATH, szTmpDir);
								swprintf(szLocalPicPath, L"%s\\videoshow.json", szTmpDir);
								string_conversion str_conn;
								str_conn.widechar_to_multibyte(szLocalPicPath, szLPP, sizeof(szLPP));
								WriteLog(__FL__, L"begin download video show data.");
								//if(down("http://live.ispeak.cn/api/ktv/onlineanchor?key=p91Yg6oB4Lu3!2Fb", szLPP) == 0) //下载成功
								int iret = m_http_obj.download_file("http://live.ispeak.cn/api/ktv/onlineanchor?key=p91Yg6oB4Lu3!2Fb", szLocalPicPath);
								if(iret == 0)
								{
									WriteLog(__FL__, L"download video show data finish. is path:");
									WriteLog(__FL__, szLocalPicPath);
									parse_video_show_data(szLocalPicPath);
								}
							}
							break;
						default:
							break;
						}
					}
					else
					{
						//显示第一页
						switch(pre_page_index)
						{
						case page_title:        //歌名点歌
						case page_singer_song:  //具体歌星歌曲页面
						case page_lyric:        //歌词检索页面
						case page_theme_song:        //主题检索页面
						case page_new_theme_song:
						case page_class:        //分类点歌
						case page_new_song:     //新歌页面
						case page_opera:        //戏曲页面
						case page_language:     //语种点歌
						case page_movie_song:     //影视金曲
						case page_era_song:       //年代金曲
						case page_number_song:  //编号点歌
						case page_write:        //手写点歌
						case page_word_count:   //字数点歌 
							{
								song_query_show_data(song_select_expr);
							}
							break;
						case page_top_song:     //排行页面
							{
								song_query_show_data(top_song_select_expr);
							}
							break;
						case page_selected:   //已选页面
							{
								//show_select_or_sing_song(SHOW_SELECT_SONG,FIRST_PAGE_OPERATE,0);
								show_select_or_sing_song(SHOW_SELECT_SONG,FIRST_PAGE_OPERATE,0);
							}
							break;
						case page_singed:   //已唱页面
							{
								//show_select_or_sing_song(SHOW_SING_SONG,FIRST_PAGE_OPERATE,0);
								show_select_or_sing_song(SHOW_SING_SONG,FIRST_PAGE_OPERATE,0);
							}
							break;
						case page_introduce:   //场所介绍
							{
								flash_message_call_service(L"1");
							}
							break;
						case page_room:           //包厢使用手册
							{
								flash_message_call_service(L"2");
							}
							break;
						case page_fire:           //消防图解
							{
								flash_message_call_service(L"3");
							}
							break;
						case page_guide:          //消防指南
							{
								flash_message_call_service(L"4");
							}
							break;
						case page_U_disk:    //U盘播歌页面
							{
								U_disk_song_pre_next_page(CUR_PAGE_OPERATE,0);
							}
							break;
						case page_movie:    //电影页面
						case page_concert:  //演唱会
						case page_place_video:  //场所视频
							{
								movie_query_show_data();
							}
							break;
						case page_member_song:  //会员歌曲页面
							{
								member_song_query_show_data();
							}
							break;
						case page_singer:         //歌星页面
						case page_custom_singer:  //场所歌星
						case page_voice_china_singer:
							{
								singer_query_show_data();
							}
							break;
						case page_member_manager:  //会员管理页面
							break;
						case page_recording:   //录音页面
							{
								song_recorder_query_show_data();
								//song_recorder_query_all_show_data();
							}
							break;
						case page_hdmi:			//高清专区
							{
								flash_message_call_file_format(L"1");
							}
							break;
						case page_kala_share:     //K歌分享
							{
								//向服务器请求数据
								flash_message_call_maiba(MAIBA_SHARE,L"0:1");
							}
							break;
						case page_dekaron_maiba:  //挑战麦霸
							{
								flash_message_call_maiba(MAIBA_DEKARON,L"0:1");
							}
							break;
						case page_find_maiba:	 //发现麦霸
							{
								flash_message_call_maiba(MAIBA_FIND,L"0:1");
							}
							break;
						case page_encode:   //移动点歌
							{
								flash_message_call_encode(L"0");
							}
							break;
						default:
							break;
						}
					}
				}
				if (m_song_show_video_picture)
				{
					pc_show_video_window();
				}
				//设置高亮按钮状态
				set_button_highlight_state(false);
				//2015-6-24 13:21:19--ltl
#ifdef DON_GUAN_K_PLUS
				if (pre_page_index==page_movie)
				{
					set_flash_button_state(L"film_video_button",1);
				}else if (pre_page_index==page_video)
				{
					set_flash_button_state(L"film_video_button",2);
				}
#endif
			}
			break;
			//调音
		case MUSIC_VOLUME_UP: //音乐的音量加
			{
				PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
				if ((VIDEO_TYPE_SONG==tv_play_video_type)&&m_lock_public_video_volume &&(PLAY_SONG_TYPE_IDLESSE==video_type))
				{
					//锁定空闲歌曲音量
					flash_show_tip_message(87);
					break;
				}
				result = m_player_manager.change_music_volume(VOLUME_UP_FLAG);
				//flash界面初控制按钮始化
				update_flash_control_button();
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__VOLUME_UP);
				//电视上显示音量进度

				//2012-10-25 删除,防止影响视频PK
				show_volume_bar_on_tv(MUSIC_VOLUMN_BAR);

				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				if (m_adjust_amplifier_volume)
				{
					//int music_volume_max=0;
					//int music_volume_min=0;
					//int music_volume_step=0;

					//得到音乐音量的信息
					//m_player_manager.get_music_volume_info(music_volume_max,music_volume_min,music_volume_step);
					//发送给中控盒
					write_com_data(COM_SEND_MUSIC_VOLUME_UP,m_send_volumn_amplifier_code_count);
				}
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
				//音量变化时控制flash音量
				int page_code = m_flash_manage.get_last_page_index();
				flash_message_call_flash_volume(page_code);
			}
			break;
		case MUSIC_VOLUME_DOWN: //音乐的音量减
			{
				PLAY_SONG_TYPE video_type = m_player_manager.get_playing_video_type();
				if (m_lock_public_video_volume &&(PLAY_SONG_TYPE_IDLESSE==video_type))
				{
					//锁定空闲歌曲音量
					flash_show_tip_message(87);
					break;
				}
				result = m_player_manager.change_music_volume(VOLUME_DOWN_FLAG);
				//flash界面初控制按钮始化
				update_flash_control_button();
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__VOLUME_DOWN);
				//电视上显示音量进度

				//2012-10-25 删除,防止影响视频PK
				show_volume_bar_on_tv(MUSIC_VOLUMN_BAR);

				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				if (m_adjust_amplifier_volume)
				{
					//int music_volume_max=0;
					//int music_volume_min=0;
					//int music_volume_step=0;

					//得到音乐音量的信息
					//m_player_manager.get_music_volume_info(music_volume_max,music_volume_min,music_volume_step);
					//发送给中控盒
					write_com_data(COM_SEND_MUSIC_VOLUME_DOWN,m_send_volumn_amplifier_code_count);
				}
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
				//音量变化时控制flash音量
				int page_code = m_flash_manage.get_last_page_index();
				flash_message_call_flash_volume(page_code);
			}
			break;
		case MICROPHONE_VOLUME_UP:  //麦克风的音量加
			{
				int microphone_volume=0;
				int micro_volume_max=0;
				int micro_volume_min=0;
				int micro_volume_step=0;

				//改变麦克风的音量
				microphone_volume = m_player_manager.change_microphone_volume(VOLUME_UP_FLAG);
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__MICROPHONE_VOLUME_UP);
				//电视上显示音量进度

				//2012-10-25 删除,防止影响视频PK
				show_volume_bar_on_tv(MIC_VOLUMN_BAR);

				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				//得到麦克音量的信息
				m_player_manager.get_microphone_volume_info(micro_volume_max,micro_volume_min,micro_volume_step);
				//发送给中控盒
				write_com_data(COM_SEND_MICROPHONE_VOLUME_UP,m_send_volumn_amplifier_code_count);
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
		case MICROPHONE_VOLUME_DOWN://麦克风的音量减
			{
				int microphone_volume=0;
				int micro_volume_max=0;
				int micro_volume_min=0;
				int micro_volume_step=0;

				//改变麦克风的音量
				microphone_volume = m_player_manager.change_microphone_volume(VOLUME_DOWN_FLAG);
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__MICROPHONE_VOLUME_DOWN);
				//电视上显示音量进度

				//2012-10-25 删除,防止影响视频PK
				show_volume_bar_on_tv(MIC_VOLUMN_BAR);

				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				//得到麦克音量的信息
				m_player_manager.get_microphone_volume_info(micro_volume_max,micro_volume_min,micro_volume_step);
				//发送给中控盒
				write_com_data(COM_SEND_MICROPHONE_VOLUME_DOWN,m_send_volumn_amplifier_code_count);
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
		case TUNE_UP: //音调增加
			{
				int tune=0;

				//改变音调
				tune  = m_player_manager.change_tune(TUNE_UP_FLAG,0,m_control_change_tone);
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__TUNE_UP);
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				if (!m_control_change_tone)
				{
					//发送给中控盒
					write_com_data(COM_SEND_TUNE_UP);
				}
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
		case TUNE_DOWN: //音调减低
			{
				int tune=0;

				//改变音调
				tune  = m_player_manager.change_tune(TUNE_DOWN_FLAG,0,m_control_change_tone);
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__TUNE_DOWN);
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				if (!m_control_change_tone)
				{
					//发送给中控盒
					write_com_data(COM_SEND_TUNE_DOWN);
				}
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
		case TUNE_ORIGINAL: //原调
			{
				int tune=0;

				//改变音调
				tune  = m_player_manager.change_tune(TUNE_ORIGINAL_FLAG,0,m_control_change_tone);
				//更新声音
				update_flash_audio_info();
				//显示控制osd
				result = show_control_osd(CONTROL_OSD__TUNE_ORIGINAL);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer();
				if (!m_control_change_tone)
				{
					//发送给中控盒
					write_com_data(COM_SEND_TUNE_STANDARD);
				}
				if (m_use_test_function && m_start_test && (CLOSE_ROOM_STATE==m_pc_state))
				{
					//测机状态下，发送信息
					send_test_song_info();
				}
			}
			break;
			//气氛
		case ATMOSPHERE_APPLAUSE:  //鼓掌
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_APPLAUSE);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer();
			}
			break;
		case ATMOSPHERE_CHEER:  //欢呼
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_CHEER);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer();
				
// 				m_player_manager.close_video_file();
// 				show_score_video_flash();
// 				set_screen_flash_timer(10000);
			}
			break;
		case ATMOSPHERE_OUTCRY:  //催眠
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_OUTCRY);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer();
			}
			break;
		case ATMOSPHERE_WHISTLE:  //狂汗
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_WHISTLE);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_HAOZAN:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_HAOZAN);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_SHIHUA:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_SHIHUA);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_XIANHUA:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_XIANHUA);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_TUXUE:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_TUXIE);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_FEIWEN:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_FEIWEN);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_XINSUI:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_XINSUI);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_HAIXIU:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_HAIXIU);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case ATMOSPHERE_ZADAN:
			{
				play_atmosphere_audio(function_code);
				//显示控制osd
				result = show_control_osd(CONTROL_OSD_ATMOSPHERE_ZADAN);
				//启动定时器5秒之后，停止播放该控制osd
				set_control_osd_show_timer(); 
			}
			break;
		case LYRIC_LINK:                //歌词接龙
			{
				if (m_start_lyric_link)
				{
					//结束歌词接龙
					if (show_bmp_picture_timer_identifier)
					{
						//杀死定时器
						KillTimer(show_bmp_picture_timer_identifier);
						show_bmp_picture_timer_identifier=0;
					}
					//停止播放bmp osd
					m_player_manager.stop_bmp_osd();
					//设置标示
					m_start_lyric_link = false;
				}
				else
				{
					//开始歌词接龙
					TCHAR path[256];

					memset(path,0x0,sizeof(path));
					if (m_soft_decode_window_exist)
					{
						//软解
						if (m_sencond_display_width>=1280)
						{
							swprintf(path,L"%s\\%s\\lyric_bar_1280.bmp",m_work_path,g_folder_name[6]);
						}
						else
						{
							swprintf(path,L"%s\\%s\\lyric_bar_1000.bmp",m_work_path,g_folder_name[6]);
						}
					}
					else
					{
						//硬解
						swprintf(path,L"%s\\%s\\lyric_bar_720.bmp",m_work_path,g_folder_name[6]);
					}
					//显示图片
					show_picture_on_tv(path,OSDAlignmentBottom,10000,true,false);
				}
			}
			break;
			//架子鼓
		case ATMOSPHERE_DRUM_KIT_LEFT_FRUM1:   //左一鼓
		case ATMOSPHERE_DRUM_KIT_LEFT_CYMBAL1: //左一镲
		case ATMOSPHERE_DRUM_KIT_LEFT_CYMBAL2: //左二镲
		case ATMOSPHERE_DRUM_KIT_RIGHT_CYMBAL2://右二镲
		case ATMOSPHERE_DRUM_KIT_RIGHT_CYMBAL1://右一镲
		case ATMOSPHERE_DRUM_KIT_PRE_FRUM:     //前大鼓
		case ATMOSPHERE_DRUM_KIT_LEFT_FRUM2:   //左二鼓
		case ATMOSPHERE_DRUM_KIT_RIGHT_FRUM2:  //右二鼓
		case ATMOSPHERE_DRUM_KIT_RIGHT_FRUM1:  //右一鼓
		case ATMOSPHERE_DRUM_KIT_MIDDLE_FRUM:  //中间鼓
		case ATMOSPHERE_PIANO_BLACK1:          //钢琴黑键（左起，共15个）
		case ATMOSPHERE_PIANO_BLACK2:
		case ATMOSPHERE_PIANO_BLACK3:
		case ATMOSPHERE_PIANO_BLACK4:
		case ATMOSPHERE_PIANO_BLACK5:
		case ATMOSPHERE_PIANO_BLACK6:
		case ATMOSPHERE_PIANO_BLACK7:
		case ATMOSPHERE_PIANO_BLACK8:
		case ATMOSPHERE_PIANO_BLACK9:
		case ATMOSPHERE_PIANO_BLACK10:
		case ATMOSPHERE_PIANO_BLACK11:
		case ATMOSPHERE_PIANO_BLACK12:
		case ATMOSPHERE_PIANO_BLACK13:
		case ATMOSPHERE_PIANO_BLACK14:
		case ATMOSPHERE_PIANO_BLACK15:
		case ATMOSPHERE_PIANO_WHITE1:         //钢琴白键（左起，共21个）
		case ATMOSPHERE_PIANO_WHITE2:
		case ATMOSPHERE_PIANO_WHITE3:
		case ATMOSPHERE_PIANO_WHITE4:
		case ATMOSPHERE_PIANO_WHITE5:
		case ATMOSPHERE_PIANO_WHITE6:
		case ATMOSPHERE_PIANO_WHITE7:
		case ATMOSPHERE_PIANO_WHITE8:
		case ATMOSPHERE_PIANO_WHITE9:
		case ATMOSPHERE_PIANO_WHITE10:
		case ATMOSPHERE_PIANO_WHITE11:
		case ATMOSPHERE_PIANO_WHITE12:
		case ATMOSPHERE_PIANO_WHITE13:
		case ATMOSPHERE_PIANO_WHITE14:
		case ATMOSPHERE_PIANO_WHITE15:
		case ATMOSPHERE_PIANO_WHITE16:
		case ATMOSPHERE_PIANO_WHITE17:
		case ATMOSPHERE_PIANO_WHITE18:
		case ATMOSPHERE_PIANO_WHITE19:
		case ATMOSPHERE_PIANO_WHITE20:
		case ATMOSPHERE_PIANO_WHITE21:
			{
				//播放乐器按键对应的声音
				play_atmosphere_audio(function_code);
			}
			break;
			//音效
		case AUDIO_EFFECT_STANDARD:  //标准
			{
				change_audio_effect(AUDIO_EFFECT_STANDARD);
			}
			break;
		case AUDIO_EFFECT_THEATER:  //剧场
			{
				change_audio_effect(AUDIO_EFFECT_THEATER);
			}
			break;
		case AUDIO_EFFECT_PROFESSIONAL:  //唱将
			{
				change_audio_effect(AUDIO_EFFECT_PROFESSIONAL);
			}
			break;
		case AUDIO_EFFECT_MAGIC:  //魔音
			{
				change_audio_effect(AUDIO_EFFECT_MAGIC);
			}
			break;
		case AUDIO_EFFECT_RESERVE1: //自动
			{
				change_audio_effect(AUDIO_EFFECT_RESERVE1);
			}
			break;
		case AUDIO_EFFECT_RESERVE2: //自动
			{
				change_audio_effect(AUDIO_EFFECT_RESERVE2);
			}
			break;
			//音乐音效
		case MUSIC_SOUND_STANDARD:  //音乐音效标准
			{
				change_music_sound(MUSIC_SOUND_STANDARD);
			}
			break;
		case MUSIC_SOUND_THEATER:  //音乐音效剧场
			{
				change_music_sound(MUSIC_SOUND_THEATER);
			}
			break;
		case MUSIC_SOUND_PROFESSIONAL:  //音乐音效唱将
			{
				change_music_sound(MUSIC_SOUND_PROFESSIONAL);
			}
			break;
		case MUSIC_SOUND_MAGIC:  //音乐音效魔音
			{
				change_music_sound(MUSIC_SOUND_MAGIC);
			}
			break;
		case MUSIC_SOUND_RESERVE1:  //音乐音效自动
			{
				change_music_sound(MUSIC_SOUND_RESERVE1);
			}
			break;
		case MUSIC_SOUND_RESERVE2:  //音乐音效预留
			{
				change_music_sound(MUSIC_SOUND_RESERVE2);
			}
			break;
		case MUSIC_SOUND_RESERVE3:  //音乐音效预留
			{
				change_music_sound(MUSIC_SOUND_RESERVE3);
			}
			break;
		case MUSIC_SOUND_RESERVE4:  //音乐音效预留
			{
				change_music_sound(MUSIC_SOUND_RESERVE4);
			}
			break;
			//环境音
		case ENVIRONMENT_AUDIO_CLOSE:  //关闭环境音
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_CLOSE);
			}
			break;
		case ENVIRONMENT_AUDIO_MEETING:  //会议
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_MEETING);
			}
			break;
		case ENVIRONMENT_AUDIO_AIRPORT:  //飞机场
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_AIRPORT);
			}
			break;
		case ENVIRONMENT_AUDIO_ROAD:  //马路上
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_ROAD);
			}
			break;
		case ENVIRONMENT_AUDIO_STATION:  //火车站
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_STATION);
			}
			break;
		case ENVIRONMENT_AUDIO_MAHJONG:  //麻将
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_MAHJONG);
			}
			break;
		case ENVIRONMENT_AUDIO_RAIN:  //下雨中
			{
				play_environment_audio(FLASH_SEND_ENVIRONMENT_AUDIO_RAIN);
			}
			break;
			//灯光
		case LIGHT_OPEN:   //灯光  全开
			{
				change_room_light(FLASH_SEND_LIGHT_OPEN,recv_msg);
			}
			break;
		case LIGHT_CLOSE:  //灯光 关闭
			{
				change_room_light(FLASH_SEND_LIGHT_CLOSE,recv_msg);
			}
			break;
		case LIGHT_STANDARD:  //灯光 标准
			{
				change_room_light(FLASH_SEND_LIGHT_STANDARD,recv_msg);
			}
			break;
		case LIGHT_BACKGROUND:  //灯光 背景
			{
				change_room_light(FLASH_SEND_LIGHT_BACKGROUND,recv_msg);
			}
			break;
		case LIGHT_STAGE:  //灯光 舞台
			{
				change_room_light(FLASH_SEND_LIGHT_STAGE,recv_msg);
			}
			break;
		case LIGHT_SCINTILLATION:  //灯光 屏闪
			{
				change_room_light(FLASH_SEND_LIGHT_SCINTILLATION,recv_msg);
			}
			break;
		case LIGHT_OPEN1:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT1,recv_msg);
			}
			break;
		case LIGHT_OPEN2:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT2,recv_msg);
			}
			break;
		case LIGHT_OPEN3:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT3,recv_msg);
			}
			break;
		case LIGHT_OPEN4:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT4,recv_msg);
			}
			break;
		case LIGHT_OPEN5:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT5,recv_msg); 
			}
			break;
		case LIGHT_OPEN6:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT6,recv_msg);
			}
			break;
		case LIGHT_OPEN7:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT7,recv_msg);
			}
			break;
		case LIGHT_OPEN8:   //灯光1
			{
				change_room_light(FLASH_SEND_LIGHT8,recv_msg);
			}
			break;
			//空调
		case AIR_CONDITION_STRONG:       //空调强
		case AIR_CONDITION_MID:          //空调中
		case AIR_CONDITION_WEAK:         //空调弱
		case AIR_CONDITION_CLOSE:        //空调关闭
		case DISCHARGE_AIR_FUNCTION:     //排风
			{
				change_air_condition_function(function_code);
			}
			break;
		case SHOW_DRAW_IMAG:          //显示绘制的图片
			{
				TCHAR image_path[256];

				memset(image_path,0x0,sizeof(image_path));

				swprintf(image_path,L"%s\\draw_image.bmp",m_work_path);
				//显示图片到电视
				show_image_to_tv(image_path);
			}
			break;
		case ENTER_GUIDE_SONG:        //进入导唱   旋律导唱
			{
				if (!m_is_open_four_track)
				{
					break;
				}
				bool result=false;
				song_info  playing_song;
				TCHAR guid_track[256];

				memset(guid_track, 0x0, sizeof(guid_track));

				PLAYER_PLAY_STATE state = m_video_play_manager.get_player_cur_state();
				if ((VIDEO_TYPE_SONG!=tv_play_video_type)||(PLAY_SONG_STATE!=state))
				{
					flash_show_tip_message(85);
					return;
				}
				result = m_player_manager.is_mute();
				if (result)
				{
					//静音状态，改成非静音
					flash_message_call_function(SONG_MUTE_UNMUTE);
				}
				m_player_manager.get_playing_video(playing_song);
				playing_song.get_guid_track(guid_track);
				if (0 == _tcscmp(guid_track, L"3"))
				{
					//得到当前是否是原唱
					result = m_player_manager.get_channel();
					if (result)
					{
						//原唱，改为伴唱
						flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
					}
					//设置导唱音轨
					m_player_manager.enter_guid_song(true);
				}
				else if (0 == _tcscmp(guid_track, L"5"))
				{
					//伴奏包含了旋律
					//得到当前是否是原唱
					result = m_player_manager.get_channel();
					if (result)
					{
						//原唱，改为伴唱
						flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
					}
					m_player_manager.exit_guid_song();
				}
				else if (0 == _tcscmp(guid_track, L"8"))
				{
					/*
					//原版唱都静音
					//得到当前是否是原唱
					result = m_player_manager.get_channel();
					if (result)
					{
						m_player_manager.change_channel();
					}
					*/
					m_player_manager.change_channel(3);

					//设置导唱音轨
					m_player_manager.enter_guid_song(true);
				}

				//显示控制OSD
				show_control_osd(CONTROL_OSD__ENTER_AUTO_SONG);
				//设置按钮高亮状态
				//set_guid_song_button_state(true);
				set_button_show_state(GUID_BUTTON_STATE,true);
				//进入导唱
				m_enter_guide_song = false;
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				m_show_guide_osd = true;
				m_select_song_accompany_original = 0; //主旋伴奏
				send_accompany_original_button_state();
			}
			break;
		case EXIT_GUIDE_SONG:        //退出导唱(人声导唱）
			{
				if (!m_is_open_four_track)
				{
					break;
				}
				bool result=false;
				song_info  playing_song;
				TCHAR guid_track[256];

				memset(guid_track, 0x0, sizeof(guid_track));

				PLAYER_PLAY_STATE state = m_video_play_manager.get_player_cur_state();
				if ((VIDEO_TYPE_SONG!=tv_play_video_type)||(PLAY_SONG_STATE!=state))
				{
					flash_show_tip_message(85);
					return;
				}
				result = m_player_manager.is_mute();
				if (result)
				{
					//静音状态，改成非静音
					flash_message_call_function(SONG_MUTE_UNMUTE);
				}
				m_player_manager.get_playing_video(playing_song);
				playing_song.get_guid_track(guid_track);

				//得到当前是否是原唱
				result = m_player_manager.get_channel();
				if (result)
				{
					//原唱，改为伴唱
					flash_message_call_function(SONG_ACCOMPANY_ORIGINAL);
				}
				//m_player_manager.exit_guid_song();
				m_player_manager.enter_guid_song(false);

				//显示控制OSD
				show_control_osd(CONTROL_OSD__EXIT_AUTO_SONG);
				//设置按钮高亮状态
				//set_guid_song_button_state(true);
				set_button_show_state(GUID_BUTTON_STATE,true);
				//进入导唱
				m_enter_guide_song = false;

				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				m_show_guide_osd = false;
				m_select_song_accompany_original = 2; //人声导唱
				send_accompany_original_button_state();
			}
			break;
			/*
			case EXIT_GUIDE_SONG:        //退出导唱
			{

			m_player_manager.exit_guid_song();
			//显示控制OSD
			show_control_osd(CONTROL_OSD__EXIT_AUTO_SONG);
			//启动定时器，隐藏控制OSD
			set_control_osd_show_timer();
			//取消按钮高亮状态
			//set_guid_song_button_state(false);
			//取消按钮高亮状态
			set_button_show_state(GUID_BUTTON_STATE,false);
			//退出导唱
			m_enter_guide_song = false;

			m_show_guide_osd = false;
			m_select_song_accompany_original = 2; //人声导唱
			send_accompany_original_button_state();
			}
			break;
			*/
		case OPEN_SCORE:    //打开评分
			{
				if (SCORE_SYSTEM_SHINE==m_use_score_system)
				{
					m_is_scoring = true; 
					//打开评分
					m_player_manager.open_score(m_use_score_system,true);
					//改变按钮状态
					set_button_show_state(SCORE_BUTTON_STATE,m_is_scoring);
					//显示控制OSD
					show_control_osd(CONTROL_OSD_SCORE_OPEN);
					//启动定时器，隐藏控制OSD
					set_control_osd_show_timer();
				}
			}
			break;
		case CLOSE_SCORE:   //关闭评分
			{
				if (SCORE_SYSTEM_SHINE==m_use_score_system)
				{
					m_is_scoring = false;
					//关闭评分
					m_player_manager.open_score(m_use_score_system,false);
					//改变按钮状态
					set_button_show_state(SCORE_BUTTON_STATE,m_is_scoring);
					//显示控制OSD
					show_control_osd(CONTROL_OSD_SCORE_CLOSE);
					//启动定时器，隐藏控制OSD
					set_control_osd_show_timer();
				}
			}
			break;
		case LIGHT_AUTO_SWITCH: //灯光自动开关
			{
				song_info video_information;
				//得到正在播放的歌曲
				m_video_play_manager.get_playing_video(video_information);
				m_song_light_lock = false;
				int light_control = video_information.get_light_control_set();
default_auto_light:
				switch(light_control)
				{
				case 0:    //灯光 全关
					{
						write_com_data(COM_SEND_LIGHT_CLOSE);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT_CLOSE);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"0");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 全关");
					}
					break;
				case 1:    //灯光 全开   
					{
						write_com_data(COM_SEND_LIGHT_OPEN);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT_OPEN);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"1");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 全开");
					}
					break;
				case 2:    //灯光 明亮
					{
						write_com_data(COM_SEND_LIGHT_STANDARD);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT_STANDARD);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"2");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 明亮");
					}
					break;
				case 3:    //灯光 柔和
					{
						write_com_data(COM_SEND_LIGHT_BACKGROUND);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT__BACKGROUND);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"3");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 柔和");
					}
					break;
				case 4:    //灯光 时尚
					{
						write_com_data(COM_SEND_LIGHT_STAGE);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT__STAGE);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"4");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 时尚");
					}
					break;
				case 5: //动感
					{
						write_com_data(COM_SEND_LIGHT_SCINTILLATION);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT__SCINTILLATION);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"5");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 动感");
					}
					break;
				case 6: //温馨
					{
						write_com_data(COM_SEND_LIGHT1);
						//显示控制osd
						result = show_control_osd(CONTROL_OSD_LIGHT1);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"6");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 温馨");
					}
					break;
				case 7: //浪漫
					{
						write_com_data(COM_SEND_LIGHT2);
						result = show_control_osd(CONTROL_OSD_LIGHT2);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"7");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 浪漫");
					}
					break;
				case 8: //商务
					{
						write_com_data(COM_SEND_LIGHT3);
						result = show_control_osd(CONTROL_OSD_LIGHT3);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"8");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 商务");
					}
					break;
				case 9: //绚丽
					{
						write_com_data(COM_SEND_LIGHT4);
						result = show_control_osd(CONTROL_OSD_LIGHT4);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"9");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 绚丽");
					}
					break;
				case 10: //梦幻
					{
						write_com_data(COM_SEND_LIGHT5);
						result = show_control_osd(CONTROL_OSD_LIGHT5);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"10");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 梦幻");
					}
					break;
				case 11: //预留1
					{
						write_com_data(COM_SEND_LIGHT6);
						result = show_control_osd(CONTROL_OSD_LIGHT6);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"11");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留1");
					}
					break;
				case 12: //预留2
					{
						write_com_data(COM_SEND_LIGHT7);
						result = show_control_osd(CONTROL_OSD_LIGHT7);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"12");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留2");
					}
					break;
				case 13: //预留3
					{
						write_com_data(COM_SEND_LIGHT8);
						result = show_control_osd(CONTROL_OSD_LIGHT8);
						//高亮的灯光按钮
						_tcscpy(m_select_ligth_buttom,L"13");
						WriteLog(__FL__, L"播放歌曲时需要控制灯光 预留3");
					}
					break;
				case 14:
					{
						write_com_data(COM_SEND_LIGHT_MUTE);
						//高亮的灯光按钮
						//_tcscpy(m_select_ligth_buttom,L"14");
						WriteLog(__FL__, L"歌曲静音时需要控制灯光");
					}
					break;
				case 15:
					{
						write_com_data(COM_SEND_LIGHT_PAUSE);
						//高亮的灯光按钮
						//_tcscpy(m_select_ligth_buttom,L"15");
						WriteLog(__FL__, L"歌曲暂停时需要控制灯光");
					}
					break;
				default:
					{
						light_control = m_default_auto_light;
						goto default_auto_light;
					}
					break;
				}
				//启动控制osd播放时间的定时器
				set_control_osd_show_timer();
				//设置灯光高亮按钮状态
				send_light_button_state();
			}
			break;
		default:
			break;
		}
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::test_song_query_show_data(void)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		bool result=false;
		int row=0;
		config_file_manager config_file;
		std::wstring song_number;


		//通过数据库查询
		result_set = new std::wstring[song_select_expr.result_column_nums*TEST_PAGE_SHOW_ROW_COUNT*TEST_SCREEN_SHOW_PAGE_COUNT];
		if (result_set)
		{
			//添加条件
			song_number = config_file.read_string(L"test_software",L"test_song_id",L"");
			if (!song_number.empty())
			{
				test_song_query_condition[TEST_SONG_ID_SUFFIX].operation_symbols = L" in (";
				test_song_query_condition[TEST_SONG_ID_SUFFIX].expression = song_number;
				test_song_query_condition[TEST_SONG_ID_SUFFIX].wildcard = L")";
			}

			//查询数据库得到数据
			row = m_db_query.query_db_get_table_data(result_set,song_select_expr.result_column_expr.c_str(),test_song_query_condition,TEST_SONG_CONDITION_NUMS,song_select_expr.result_column_nums*TEST_SCREEN_SHOW_PAGE_COUNT*TEST_PAGE_SHOW_ROW_COUNT,TEST_SCREEN_SHOW_PAGE_COUNT*TEST_PAGE_SHOW_ROW_COUNT,0);
			if (row<=0)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}

			//设置测试列表
			result = m_query_song_manager.set_test_or_select_song_list(result_set,song_select_expr.result_column_nums*TEST_PAGE_SHOW_ROW_COUNT*TEST_SCREEN_SHOW_PAGE_COUNT,song_select_expr.result_column_nums,true);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set=NULL;

			result = m_query_song_manager.make_test_song_list_xml(song_list_xml);
			if (!result)
			{
				return false;
			}
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"listsong",song_list_xml.c_str());
			if (!result)
			{
				return false;
			}
			m_test_flash_player.CallFunction(request);

			return true;
		}
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::flash_message_call_test_priority(const TCHAR *args)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		bool result=false;
		int priority_number=0;

		//得到数组中的编号
		swscanf(args,L"%d",&priority_number);

		//优先选择的歌曲
		result = m_query_song_manager.test_song_priority(priority_number);
		if (!result)
		{
			return;
		}
		//组织xml字符串
		result = m_query_song_manager.make_test_song_list_xml(song_list_xml);
		if (!result)
		{
			return ;
		}
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"listsong",song_list_xml.c_str());
		if (!result)
		{
			return ;
		}
		m_test_flash_player.CallFunction(request);

	}
	catch (...)
	{

	}
	return;
}

UINT Cflashktv10Wnd::DB_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		pThis->get_server_path_by_db();
		AfxEndThread(0);
	}
	catch (...)
	{

	}
	return 0;
}

UINT Cflashktv10Wnd::assistant_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		pThis->find_dog_and_precomputer(pThis->m_hWnd);

	}
	catch (...)
	{

	}
	return 0;
}

UINT Cflashktv10Wnd::find_dog_and_precomputer(HWND parent_hwnd)
{
	CTimer check_dog_time;
	double time_interval=0.0;
	bool result=false;
	config_file_manager config_file;
	std::wstring dog_ip;
	int check_dog_error_number=0;
	int dog_file_len=0;
	char dog_file_content[1024];
	//得到父句柄
	HWND parent_handle = (HWND)parent_hwnd;
	int login_result=0;
	int valid_day=0;

	string_conversion str_conv;
	std::wstring first_precomputer_ip;
	std::wstring second_precomputer_ip;
	char first_ip[32];
	char second_ip[32];
	int timeout=0;
	struct ccddt *ccddt_client=NULL;
	struct pwktvstate *ktv_state=NULL;
	int forbid_count=0;
	int ccddt_state=0;
	int cut_song_time=0;
	unsigned long system_time=0;
	int send_result=0;

	try
	{
		memset(first_ip,0x0,sizeof(first_ip));
		memset(second_ip,0x0,sizeof(second_ip));

		//设置加密狗的类型
		m_dog_type = SENSE_LOCK;
		//m_dog_type = FEITIAN_DOG;
		if(FEITIAN_DOG == m_dog_type)
		{
			//读取加密狗IP
			dog_ip = config_file.read_string(L"DogServer",L"ServerIP",L"127.0.0.1");
			//给加密狗设置参数
			result = m_watch_dog.set_parameter(dog_ip.c_str(),DOG_SERVER_PORT,SOFTWARE_MODULE_NUMBER,DOG_SERVER_MAX_ERROR_LINK_NUMBER,DOG_SERVER_SOCKET_TIME_OUT,0);
			//连接狗服务
			while (1)
			{
				if (!m_thread_run)
				{
					//线程退出
					m_watch_dog.logout();
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				result = m_watch_dog.connect_server();
				if (result)
				{
					//连接成功
					break;
				}

				WriteLog(__FL__, L"===连接服务器失败===");
				//连接服务器失败
				::PostMessage(parent_handle,DM_CHECK_DOG,CONNECT_DOG_FAIL,NULL);
				Sleep(1000);
			}
			//做登陆检查，看狗是否过期
			//先检查文化部的模块编号
			login_result = m_watch_dog.login_check(dog_valid_time,CULTURE_SOFTWARE_MODULE_NUMBER);
			if (0!=login_result)
			{
				while(1)
				{
					if (!m_thread_run)
					{
						//线程退出
						m_watch_dog.logout();
						if (m_assistant_thread_event_handle)
						{
							//设置事件为信号状态，使程序能正常退出
							SetEvent(m_assistant_thread_event_handle);
						}
						return 0;
					}
					//在检查软件模块
					login_result = m_watch_dog.login_check(dog_valid_time,SOFTWARE_MODULE_NUMBER);
					if (0!=login_result)
					{
						//登陆检测失败
						::PostMessage(parent_handle,DM_CHECK_DOG,DOG_LOGIN_CHECK,login_result);
					}
					else
					{
						//成功
						//软件模块编号
						g_dog_open_function.precomputer_check = false;

						break;
					}
				}
			}
			else
			{
				//文化部的模块编号
				g_dog_open_function.precomputer_check = true;
			}

			//检测是否打开评分功能 2013-08-21 add
			long tmp_value=0; 
			int score_result = m_watch_dog.login_check(tmp_value,SCORE_MODULE_NUMBER);
			if (0==score_result)
			{
				//打开评分
				m_use_score_system = SCORE_SYSTEM_SHINE;
				m_is_scoring = config_file.read_boolean(L"mark",L"open_mark",true);
			} 

			//计算剩下的天数
			valid_day = dog_valid_time/(24*3600);
			if (valid_day<7)
			{
				//有效日期小于7天，提示用户
				//::PostMessage(parent_handle,DM_CHECK_DOG,SOFTWARE_DOG_VALID_DAY_TIP,valid_day);
			}
			////////mzy 20100426 , 目的是双狗方案时提示信息使用，开始修改
			//long control_dog_valid_time = 0;
			//检测控件狗的有效期，只有使用双狗机制时才检测
			//login_result = m_watch_dog.login_check(control_dog_valid_time, CONTROL_MODULE_NUMBER);
			//检测成功，当两条狗加密狗的有效时间大于60秒时,认定是两条狗
			//if (((dog_valid_time - control_dog_valid_time > 120) || (control_dog_valid_time - dog_valid_time < 120)) && (0==login_result))
			//{
			//计算剩下的天数
			//	valid_day = control_dog_valid_time/(24*3600);
			/////mzy 20100426 修改结束
			//	if (valid_day< 15)
			//	{
			//控件的有效日期提示用户
			//		::PostMessage(parent_handle,DM_CHECK_DOG,CONTROL_DOG_VALID_DAY_TIP,valid_day);
			//	}
			//}

			memset(dog_file_content,0x0,sizeof(dog_file_content));
			//自用文件
			result = m_watch_dog.get_data(0,dog_file_len,dog_file_content);
			if (result)
			{
				//成功
				//0 自用文件　1　客户文件　代理商文件	
				//FF FF FF FF FF FF FF FF 界面用 FF FF FF FF FF FF FF FF 功能用
				//FF　星空　FF 1024　FF　三版，粉色　FF　FF　FF FF　FF 新版
				//FF FF FF FF FF FF FF FF FF FF FF FF 序列号用,第只狗都不一样
				//FF 星空版后一F是版本号 
				//FF 歌曲支持，固定位置是28

				int Offset=0;
				unsigned int Func[2];
				unsigned int dog_version=0;
				TCHAR log_text[2048];

				memset(log_text,0x0,sizeof(log_text));

				//版本控制，老版是15　文化部狗版是14　7.1版是13
				//15是临时写的狗
				//文化部程序新改动
				dog_version = ((byte) dog_file_content[0]) % 16;
				if ((dog_version == 0x0E) || (dog_version == 0x0D))  //新程序
				{
					Offset = 32;
				}

				//功能FF FF FF FF 功能 FF FF FF FF 带点数功能
				Func[0] = (((byte) dog_file_content[Offset + 8]) << 24)
					+ (((byte) dog_file_content[Offset + 9]) << 16) 
					+ (((byte) dog_file_content[Offset + 10]) << 8) 
					+ (byte) dog_file_content[Offset + 11];
				Func[1] =  (((byte) dog_file_content[Offset + 12]) << 24)
					+ (((byte) dog_file_content[Offset + 13]) << 16) 
					+ (((byte) dog_file_content[Offset + 14]) << 8) 
					+ (byte) dog_file_content[Offset + 15];

				//开通主被控功能
				g_dog_open_function.control= ((Func[0] & 1)!= 0);
				//开通后台功能
				g_dog_open_function.drinks_software = ((Func[0] & 2)!= 0);
				//开通鼠标功能
				g_dog_open_function.mouse  = ((Func[0] & 4)!= 0);

				//8 游戏
				if ((Func[0] & 0x8) != 0)
					g_dog_open_function.game = true;
				if (g_dog_open_function.game&&m_use_Interactive_game)
				{
					//检测互动游戏的点数是否够
					login_result = m_watch_dog.login_check(dog_valid_time,GAME_MODULE_NUMBER);
					if (0!=login_result)
					{
						WriteLog(__FL__, L"互动游戏的点数不够，不能启动互动游戏");
						//点数不够，不能启动互动游戏
						g_dog_open_function.game = false;
					}
				}

				//10　彩铃
				if ((Func[0] & 0x8) != 0)
					g_dog_open_function.Mob = 1;

				//20　, 40 录像
				if ((Func[0] & 0x20) != 0)
					g_dog_open_function.Rec = 1;
				else if ((Func[0] & 0x40) != 0)
					g_dog_open_function.Rec = 2;

				//80　电子调查
				if ((Func[0] & 0x80) != 0)    // 电子　调查
				{
					//WriteLog(__FL__, L"开通电子调查功能\r\n");			
				}

				//100 用来控制串口设备1		
				if ((Func[0] & 0x100) != 0)
				{
					g_dog_open_function.Com1 = 1;
				}

				//400用来控制串口设备2
				if ((Func[0] & 0x400) != 0)
				{
					g_dog_open_function.Com2 = 1;
				}

				//1000,2000 用来控制触摸屏
				if ((Func[0] & 0x1000) != 0)
					g_dog_open_function.MScreen = 1;
				else if ((Func[0] & 0x2000) != 0)
					g_dog_open_function.MScreen = 2;

				//200 800大厅直播，带点数
				if ((Func[0] & 0x200) != 0)
					g_dog_open_function.Play = 1;
				else if ((Func[0] & 0x800) != 0)
					g_dog_open_function.Play = 2;

				//10000歌曲预览
				if ((Func[0] & 0x10000) != 0)
					g_dog_open_function.preview = true;

				//4000, 8000 一机多卡带点
				if ((Func[0] & 0x4000) != 0)
					g_dog_open_function.MuCard = 1;
				else if ((Func[0] & 0x8000) != 0)
					g_dog_open_function.MuCard = 2;		

				//8000, 10000, 20000 未用
				//40000, 80000 未用
				//100000, 200000 未用
				//400000, 800000 未用
				//1000000, 2000000 未用
				//4000000, 8000000 未用
				//10000000, 20000000 未用
				//40000000, 80000000 未用

				if ((Func[1] & 1) != 0)
				{
					//WriteLog(__FL__, L"开通换肤功能\r\n");
				}

				if ((Func[1] & 4) != 0)
				{
					//WriteLog(__FL__, L"开通交友功能\r\n");
				}

				if ((Func[1] & 0x10) != 0)
				{
					//WriteLog(__FL__, L"开通面板功能\r\n");
				}
				else if ((Func[1] & 0x20) != 0)
				{
					//WriteLog(__FL__, L"开通部分面板功能\r\n");
				}

				//40 OSD点歌, 		
				if ((Func[1] & 0x40) != 0)
					g_dog_open_function.OSDSelect = 1;
				else if ((Func[1]& 0x80) != 0)
					g_dog_open_function.OSDSelect = 2;

				//100, 200 金永
				if ((Func[1] & 0x100) != 0)
					g_dog_open_function.KY = 1;
				else if ((Func[1]& 0x200) != 0)
					g_dog_open_function.KY = 2;
				//400 广告
				if ((Func[1] & 0x400) != 0)
					g_dog_open_function.AD = true;
				//800 歌词
				if ((Func[1] & 0x800) != 0)
					g_dog_open_function.Word = 1;

				swprintf(log_text,L"狗功能（1为开放2为部分开放) COM1:%d, COM2:%d, 触摸屏:%d, OSD点歌:%d, 广告：%d, 直播：%d,预览:%d, 彩铃:%d, 歌词:%d, 金永:%d,一机多卡:%d, 录像:%d, 游戏:%d, 后台:%d", 
					g_dog_open_function.Com1, g_dog_open_function.Com2, g_dog_open_function.MScreen, g_dog_open_function.OSDSelect, 
					g_dog_open_function.AD, g_dog_open_function.Play, g_dog_open_function.preview, g_dog_open_function.Mob, g_dog_open_function.Word, 
					g_dog_open_function.KY, g_dog_open_function.MuCard,g_dog_open_function.Rec, g_dog_open_function.game,g_dog_open_function.drinks_software);
				//写狗功能的日志
				WriteLog(__FL__, log_text);
			}

			//发现麦霸 
			m_use_find_maiba_pk = true;

			//挑战麦霸
			m_use_area_pk = true;

			//客户文件
			memset(dog_file_content,0x0,sizeof(dog_file_content));
			result = m_watch_dog.get_data(1,dog_file_len,dog_file_content);
			if (result)
			{
				//成功
				// 解压缩
				// FF 注册标志用客户代理商,后一F代表版本号 FF FF FF FF 客户名称长度，电话长度,用户所在地,联系方式
				// FF FF FF FF FF代理商编号，代理商名称，联系电话、地址, 公司联系电话，
				// 1 + 3 + 1 + 3 + 3 + 1 + 1 + 3 + 1 + 3 + 3 = 33
				byte m_iUserFlag;

				m_iUserFlag = ((byte) dog_file_content[0]) / 16;

				byte iUserLen[4], iSellLen[6];
				for (int kl=0; kl < 4; kl++)
				{
					iUserLen[kl] = (byte) dog_file_content[kl+1];
					if (iUserLen[kl] > 64)
						iUserLen[kl] = 0;
				}

				int len = 5; 
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len], iUserLen[0],user_infor.Name, 64);
				if ((0!=_tcsncmp(user_infor.Name,L"光临",2))&&(0!=_tcsncmp(user_infor.Name,L"使用",2)))
				{
					TCHAR tmp_wide_string[256];

					memset(tmp_wide_string,0x0,sizeof(tmp_wide_string));
					//没有添加光临，就添加
#ifdef MONGOLIA_VERSION  //外蒙古
					swprintf(tmp_wide_string,L"%s",user_infor.Name);
#else
					swprintf(tmp_wide_string,L"光临%s",user_infor.Name);
#endif
					memset(user_infor.Name,0x0,sizeof(user_infor.Name));
					_tcscpy(user_infor.Name,tmp_wide_string);
				}
				len += iUserLen[0];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len], iUserLen[1],user_infor.Tel, 16);
				len += iUserLen[1];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len], iUserLen[2],user_infor.Address, 64 );
				len += iUserLen[2];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len], iUserLen[3],user_infor.PostAdd, 64 );
				len += iUserLen[3];		

				if (0==_tcscmp(user_infor.Tel,L""))
				{
					//客户电话为空，默认公司电话
					_tcscpy(user_infor.Tel,L"400-630-7890");
				}

				for (int kl = 0; kl <5; kl++)
				{
					iSellLen[kl] = (byte) dog_file_content[len + kl];
					if (iSellLen[kl] > 64)
						iSellLen[kl] = 0;
				}
				len += 5;
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len],iSellLen[0],sell_infor.No, 16 );
				len += iSellLen[0];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len],iSellLen[1],sell_infor.Name, 64 );
				len += iSellLen[1];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len],iSellLen[2],sell_infor.Tel, 16 );
				len += iSellLen[2];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len],iSellLen[3],sell_infor.Address, 64 );
				len += iSellLen[3];
				MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len],iSellLen[4],sell_infor.oTel, 16 );
				len += iSellLen[4];

				iSellLen[0] = (byte) dog_file_content[len];
				if (iSellLen[0] > 0 && iSellLen[0] < 17)
				{
					len++;
					MultiByteToWideChar( CP_ACP, 0, &dog_file_content[len], iSellLen[0], user_infor.Display, 30);
				}
			}
			_sleep(1000); //2013-06-18 门牌机启动时间
			::PostMessage(parent_handle,DM_CHECK_DOG,CHECK_DOG_SUCCESS,NULL);
		}
		else if (SENSE_LOCK == m_dog_type)
		{
			int ret = LOCK_OK;
			OUTLETS_DATA outlets_info;
			AGENT_DATA agent_info;
			UINT assist_fun;
			string_conversion string_conv;
			char lock_ip[256];
			TCHAR lock_ip_w[256];
			TCHAR log[256];

			ret = lock_init();
			if (LOCK_OK != ret)
			{
				memset(log, 0x0, sizeof(log));
				swprintf(log, L"初始化连接加密狗服务器失败! 错误码 = ", ret);
				WriteLog(__FL__, log);

				//连接服务器失败
				::PostMessage(parent_handle,DM_CHECK_DOG,CONNECT_DOG_FAIL,NULL);
				if (m_assistant_thread_event_handle)
				{
					//设置事件为信号状态，使程序能正常退出
					SetEvent(m_assistant_thread_event_handle);
				}
				return 0;
			} 

			WriteLog(__FL__, L"==开始连接加密狗服务==");
			//连接狗服务
			while (1)
			{
				if (!m_thread_run)
				{
					//线程退出
					lock_uninit();
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				ret = lock_connect_server();
				if (LOCK_OK == ret)
				{
					//连接成功
					WriteLog(__FL__, L"==开始连接加密狗成功==");
					break;
				}

				memset(log, 0x0, sizeof(log));
				swprintf(log, L"连接加密狗服务器失败! 错误码 = %d", ret);
				WriteLog(__FL__, log);

				memset(lock_ip, 0x0, sizeof(lock_ip));
				memset(lock_ip_w, 0x0, sizeof(lock_ip_w));
				memset(log, 0x0, sizeof(log));

				lock_get_server_ip(lock_ip, sizeof(lock_ip));
				string_conv.multibyte_to_widechar(lock_ip, lock_ip_w, sizeof(lock_ip_w)/sizeof(TCHAR));
				swprintf(log, _T("加密狗服务器IP：%s"), lock_ip_w);
				WriteLog(__FL__, log);

				//连接服务器失败
				::PostMessage(parent_handle,DM_CHECK_DOG,CONNECT_DOG_FAIL,NULL);
				Sleep(1000);
			}

			//模块检查
			ret = lock_login_check(1013, &dog_valid_time);
			if (LOCK_OK != ret)
			{
				::PostMessage(parent_handle,DM_CHECK_DOG,DOG_LOGIN_CHECK,SHINE_ERROR_MOULDID);
				if (m_assistant_thread_event_handle)
				{
					//设置事件为信号状态，使程序能正常退出
					SetEvent(m_assistant_thread_event_handle);
				}
				return 0;
			}
			//计算剩下的天数
			//valid_day = dog_valid_time/(24*3600);
			if (dog_valid_time < 1)
			{
				//已经过期，提示用户
				::PostMessage(parent_handle,DM_CHECK_DOG,SOFTWARE_DOG_VALID_DAY_TIP,dog_valid_time);
			}

			//得到用户信息
			ret = lock_get_data(0,&outlets_info, sizeof(outlets_info));
			if (LOCK_OK == ret)
			{
				string_conv.multibyte_to_widechar(outlets_info.UserAddress,user_infor.Address,sizeof(user_infor.Address));
				string_conv.multibyte_to_widechar(outlets_info.UserDisName,user_infor.Display,sizeof(user_infor.Display));
#ifdef DON_GUAN_K_PLUS
				swprintf(user_infor.Name, L"东莞K+ Party");
#else
				string_conv.multibyte_to_widechar(outlets_info.UserPlaceName,user_infor.Name,sizeof(user_infor.Name));
#endif // DON_GUAN_K_PLUS
				string_conv.multibyte_to_widechar(outlets_info.userReservePhone,user_infor.Tel,sizeof(user_infor.Tel));
			}
			//得到代理商信息
			ret = lock_get_data(1,&agent_info, sizeof(agent_info));
			if (LOCK_OK == ret)
			{
				string_conv.multibyte_to_widechar(agent_info.AgentAddress,sell_infor.Address,sizeof(sell_infor.Address));
				string_conv.multibyte_to_widechar(agent_info.AgentName,sell_infor.Name,sizeof(sell_infor.Name));
				string_conv.multibyte_to_widechar(agent_info.AgentPhone,sell_infor.oTel,sizeof(sell_infor.oTel));
			}

			//得到辅助功能
			ret = lock_get_data(3,&assist_fun,sizeof(assist_fun));		
			if (LOCK_OK == ret)
			{ 
				//评分功能
				if (0 == (assist_fun&AF_LIVE_SCORE))
				{
					//打开评分
					m_use_score_system = SCORE_SYSTEM_SHINE;
					//m_is_scoring = config_file.read_boolean(L"mark",L"open_mark",true);
					m_is_scoring = config_file.read_boolean(L"mark", L"use_mark", true);
					if (m_is_scoring)
					{
						m_player_manager.set_use_song_mark(true);
					}
				} 

				if (0 == (assist_fun&RF_1))
				{
					//挑战麦霸
					m_use_area_pk = true; 
				} 

				if (0 == (assist_fun&RF_2))
				{
					//发现麦霸 
					m_use_find_maiba_pk = true;
				}

				//是否启用四音轨
				if (0 == (assist_fun&RF_3))
				{
					m_is_open_four_track = true;
				}

				//检测是否启用四音轨
				if (m_is_open_four_track)
				{
					m_track_mode = 1;
				}else 
				{
					m_track_mode = 0;
				}

				g_dog_open_function.preview = true;
				g_dog_open_function.drinks_software = true;
				g_dog_open_function.AD = true;
				/*	g_dog_open_function.Word = 1;
				g_dog_open_function.control = 1;
				g_dog_open_function.mouse = 1;				
				g_dog_open_function.MuCard = 2;
				g_dog_open_function.Play = 2;
				g_dog_open_function.Com1 = 1;
				g_dog_open_function.Com2 = 1;
				g_dog_open_function.game = true;
				g_dog_open_function.KY = 1;
				g_dog_open_function.Mob = 1;
				g_dog_open_function.MScreen = 1; 
				g_dog_open_function.OSDSelect = 1;
				g_dog_open_function.precomputer_check = true;
				g_dog_open_function.Rec = 1; */
			}
			//检测加密狗号
			char serial_num[16] = {0x00};
			ret = lock_get_data(7,&serial_num,sizeof(serial_num));
			if (ret == LOCK_OK)
			{
				string_conv.multibyte_to_widechar(serial_num, g_dog_serial_num, sizeof(g_dog_serial_num));
			}
			_sleep(1000); //2013-06-18 门牌机启动时间
			::PostMessage(parent_handle,DM_CHECK_DOG,CHECK_DOG_SUCCESS,NULL);
		}

		g_dog_open_function.precomputer_check = false;
		if (g_dog_open_function.precomputer_check)
		{
			//对文化部的检测进行初始化
			//前置机的ip地址
			first_precomputer_ip = config_file.read_string(L"ministry_of_culture",L"first_precomputer_ip",L"192.168.0.1");
			second_precomputer_ip = config_file.read_string(L"ministry_of_culture",L"second_precomputer_ip",L"192.168.0.11");
			//连接超时
			timeout = config_file.read_integer(L"ministry_of_culture",L"connect_timeout",3);
			//把IP地址转化成多字节

			//unicode转化成多字节字符串
			result = str_conv.widechar_to_multibyte(first_precomputer_ip.c_str(),first_ip,sizeof(first_ip));
			if (!result)
			{
			}

			//unicode转化成多字节字符串
			result = str_conv.widechar_to_multibyte(second_precomputer_ip.c_str(),second_ip,sizeof(second_ip));
			if (!result)
			{
			}
			WriteLog(__FL__, L"启动了文化部模块，开始检测前置机");
			ccddt_client = ccddtinit(first_ip,second_ip,timeout);
			if (NULL==ccddt_client)
			{
				//初始化失败
				::PostMessage(parent_handle,DM_CHECK_PRECOMPUTER,NULL,NULL);
				if (m_assistant_thread_event_handle)
				{
					//设置事件为信号状态，使程序能正常退出
					SetEvent(m_assistant_thread_event_handle);
				}
				return 0;
			}
			else
			{
				//检查前置机的状态 
				ccddt_state = recvccddtstate(ccddt_client);
				if (-3==ccddt_state)
				{
					//初始化客户端证书异常
					//反初始化
					if (ccddt_client)
					{
						ccddtclose(ccddt_client);
						ccddt_client = NULL;
					}
					::PostMessage(parent_handle,DM_CHECK_PRECOMPUTER,NULL,NULL);
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				else if (-2==ccddt_state)
				{
					//两台前置机都异常
					//反初始化
					if (ccddt_client)
					{
						ccddtclose(ccddt_client);
						ccddt_client = NULL;
					}
					::PostMessage(parent_handle,DM_CHECK_PRECOMPUTER,NULL,NULL);
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				else if (-1==ccddt_state)
				{
					//主前置机异常
				}
				else if (0==ccddt_state)
				{
					//从前置机异常
				}
				//检查ktv场所的状态
				ktv_state = recvktvstate(ccddt_client);
				if (NULL==ktv_state)
				{
					//前置机异常
					//反初始化
					if (ccddt_client)
					{
						ccddtclose(ccddt_client);
						ccddt_client = NULL;
					}
					::PostMessage(parent_handle,DM_CHECK_PRECOMPUTER,NULL,NULL);
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				if ('0'==ktv_state->auth)
				{
					//场所不能运行
					//释放ktv授权状态
					if (ktv_state)
					{
						freektvstate(ktv_state);
						ktv_state=NULL;
					}
					//反初始化
					if (ccddt_client)
					{
						ccddtclose(ccddt_client);
						ccddt_client = NULL;
					}
					::PostMessage(parent_handle,DM_CHECK_PRECOMPUTER,NULL,NULL);
					if (m_assistant_thread_event_handle)
					{
						//设置事件为信号状态，使程序能正常退出
						SetEvent(m_assistant_thread_event_handle);
					}
					return 0;
				}
				//查找禁播歌曲
				forbid_song_list = recvforbidlist(ccddt_client,&forbid_count);
				if (NULL==forbid_song_list)
				{
				}
				//获取切歌时长
				cut_song_time = recvsongchangetime(ccddt_client);
				//获取前置机时钟，同步服务器时间
				system_time = recvpwtime(ccddt_client);
				if (system_time>0)
				{
					tm* t = localtime((time_t*)&system_time);
					if (t->tm_year > 109 && t->tm_year < 138)
					{					
						SYSTEMTIME st;
						st.wYear  = t->tm_year + 1900;
						st.wMonth = t->tm_mon + 1;
						st.wDay   = t->tm_mday;
						st.wHour  = t->tm_hour;
						st.wMinute= t->tm_min;
						st.wSecond= t->tm_sec;
						st.wMilliseconds = 0;		
						SetLocalTime(&st);
					}
				}
				//new 发送给前置机的类实例
				for (int i=0;i<sizeof(send_ktv_msg)/sizeof(struct pwktvmsg *);i++)
				{
					send_ktv_msg[i] = new struct pwktvmsg;
					if (NULL==send_ktv_msg[i])
					{
						send_ktv_msg[i] = new struct pwktvmsg;
					}
					if (send_ktv_msg[i])
					{
						memset(send_ktv_msg[i],0x0,sizeof(struct pwktvmsg));
						//记录下包房编号
						strcpy(send_ktv_msg[i]->roomid,m_send_room_name); 
					}
				}
			}
		}

		//开始计时
		result = check_dog_time.start();
	}
	catch (...)
	{
		if (m_assistant_thread_event_handle)
		{
			//设置事件为信号状态，使程序能正常退出
			SetEvent(m_assistant_thread_event_handle);
		}
		m_watch_dog.logout();
		return 0;
	}
	while (m_thread_run)
	{
		try
		{
			Sleep(100);

			//发送视频播放信息给文化部的前置机
			if(g_dog_open_function.precomputer_check && send_video_play_recorder && send_ktv_msg[VIDEO_TYPE])
			{
				//86400：一天的秒数,由于广告没有播放时长限制，只有歌曲有，但是他们用的一个结构，所以只能去掉改限制
				//if ((send_ktv_msg[VIDEO_TYPE]->playtime > (unsigned long)cut_song_time)&&(send_ktv_msg[VIDEO_TYPE]->playtime<86400))
				if ((send_ktv_msg[VIDEO_TYPE]->playtime > 0)&&(send_ktv_msg[VIDEO_TYPE]->playtime<86400))
				{
					send_result = sendrecorder(ccddt_client,&send_ktv_msg[VIDEO_TYPE],1);
					if(send_result>0)
					{
						//发送成功
						send_video_play_recorder=false;
					}
				}
				else
				{
					send_video_play_recorder=false;
				}
			}
			//发送点播终端上的文字播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_pc_text_play_recorder && send_ktv_msg[PC_TEXT_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[PC_TEXT_TYPE],1);
				if (send_result>0)
				{
					send_pc_text_play_recorder=false;
				}
			}
			//发送电视上的文字播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_tv_text_play_recorder && send_ktv_msg[TV_TEXT_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[TV_TEXT_TYPE],1);
				if (send_result>0)
				{
					send_tv_text_play_recorder = false;
				}
			}
			//发送点播终端背景播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_pc_BK_play_recorder && send_ktv_msg[PC_BK_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[PC_BK_TYPE],1);
				if (send_result>0)
				{
					send_pc_BK_play_recorder = false;
				}
			}
			//发送终端logo播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_pc_logo_play_recorder && send_ktv_msg[PC_LOGO_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[PC_LOGO_TYPE],1);
				if (send_result>0)
				{
					send_pc_logo_play_recorder = false;
				}
			}
			//发送电视终端logo播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_tv_logo_play_recorder && send_ktv_msg[TV_LOGO_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[TV_LOGO_TYPE],1);
				if (send_result>0)
				{
					send_tv_logo_play_recorder = false;
				}
			}
			//发送屏保播放记录给前置机 
			if (g_dog_open_function.precomputer_check && send_screen_saver_play_recorder && send_ktv_msg[SCREEN_SAVER_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[SCREEN_SAVER_TYPE],1);
				if (send_result>0)
				{
					send_screen_saver_play_recorder = false;
				}
			}
			//发送提示框信息播放记录给前置机
			if (g_dog_open_function.precomputer_check && send_prompt_box_play_recorder && send_ktv_msg[PROMPT_BOX_TYPE])
			{
				send_result = sendrecorder(ccddt_client,&send_ktv_msg[PROMPT_BOX_TYPE],1);
				if (send_result>0)
				{
					send_prompt_box_play_recorder = false;
				}
			}

			//对加密狗进行检查
			time_interval = check_dog_time.last_time();
			if (time_interval>check_dog_time_interval)
			{
				//重新开始计时
				result = check_dog_time.start();
				switch (m_dog_type)
				{
				case FEITIAN_DOG:
					{
						//检测加密狗是否存在
						int dog_result = m_watch_dog.common_check();
						if (0!=dog_result)
						{
							//失败
							long song_count=0;

							//错误次数累加一
							check_dog_error_number++;
							result = m_watch_dog.get_song_number(song_count);
							if (result)
							{
								check_dog_error_number = 0;
							}
							if (!result && (check_dog_error_number>DOG_SERVER_MAX_ERROR_LINK_NUMBER))
							{
								//定时检测加密狗失败，并且监测歌曲数目失败
								::PostMessage(parent_handle,DM_CHECK_DOG,TIMER_CHECK_DOG_FAIL,NULL);
							}
						}
						else
						{
							check_dog_error_number = 0;
						}
					}
					break;
				case SENSE_LOCK:
					{
						int dog_result = lock_common_check();
						if (LOCK_OK != dog_result)
						{
							//定时检测加密狗失败，并且监测歌曲数目失败
							::PostMessage(parent_handle,DM_CHECK_DOG,TIMER_CHECK_DOG_FAIL,NULL);
						}
					}
					break;
				default:
					break;
				}
			}			
		}
		catch (...)
		{

		}
	}

	if (g_dog_open_function.precomputer_check)
	{
		//释放空间
		for (int i=0;i<sizeof(send_ktv_msg)/sizeof(struct pwktvmsg *);i++)
		{
			if (send_ktv_msg[i])
			{
				delete send_ktv_msg[i];
				send_ktv_msg[i] = NULL;
			}
		}

		// 释放请求禁播曲目返回内存
		if (forbid_song_list)
		{
			freeforbidlist(forbid_song_list,forbid_count);
		}
		//释放ktv授权状态
		if (ktv_state)
		{
			freektvstate(ktv_state);
			ktv_state=NULL;
		}
		//反初始化
		if (ccddt_client)
		{
			ccddtclose(ccddt_client);
			ccddt_client = NULL;
		}
	}

	//退出加密狗
	m_watch_dog.logout();
	if (m_assistant_thread_event_handle)
	{
		//设置事件为信号状态，使程序能正常退出
		SetEvent(m_assistant_thread_event_handle);
	}

	return 0;
}

UINT Cflashktv10Wnd::recv_server_data_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		return pThis->recv_server_data();
	}
	catch (...)
	{

	}
	return -1;
}

UINT Cflashktv10Wnd::recv_server_data(void)
{
	try
	{
		fd_set socket_set;
		timeval overtime;
		overtime.tv_sec = 0;
		overtime.tv_usec = 50000;
		int result=0;
		TCHAR log[1024];
		string_conversion string_conv;
		TCHAR wide_string[1024];
		int open_room_port;   //开关房使用的端口号
		config_file_manager config_file;

		//清0
		FD_ZERO(&socket_set);

		//得到开关房使用的端口号
		open_room_port = config_file.read_integer(L"server",L"switch_room_port",3000);

		//create socket
		SOCKET switch_room_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		if (switch_room_socket < 0) 
		{
			//终止线程
			if (m_server_thread_event_handle)
			{
				SetEvent(m_server_thread_event_handle);
			}
			return -1;
		}
		//bind local addr
		sockaddr_in addr;
		addr.sin_family = AF_INET;
		addr.sin_addr.S_un.S_addr = INADDR_ANY;
		//addr.sin_port = ntohs(3000);
		//为了和9.0的多点触摸屏相匹配，因为9.0的多点触摸使用了3000端口，开房端口是6501
		//addr.sin_port = ntohs(6501);
		//为了和9.0在同一个场所同时使用，开放了该端口号
		addr.sin_port = ntohs(open_room_port);
		memset(&addr.sin_zero, 0, sizeof(addr.sin_zero));

		if (SOCKET_ERROR==bind(switch_room_socket, (struct sockaddr*)&addr, sizeof(sockaddr_in)))
		{
			//终止线程
			if (m_server_thread_event_handle)
			{
				SetEvent(m_server_thread_event_handle);
			}
			WriteLog(__FL__, L"接受服务器开关房的socket绑定端口失败");
			return -1;
		}
		//监听
		if (SOCKET_ERROR==listen(switch_room_socket,SOMAXCONN))
		{
			//终止线程
			if (m_server_thread_event_handle)
			{
				SetEvent(m_server_thread_event_handle);
			}
			WriteLog(__FL__, L"启动监听端口失败");
			return -1;
		}
		//加入监听组
		FD_SET(switch_room_socket,&socket_set);
		while (m_thread_run)
		{
			try
			{
				SLEEP_FOR; //增加sleep

				//将fdSocket集合的一个拷贝fdRead传递给select函数，
				// 当有事件发生时，select函数移除fdRead集合中没有未决I/O操作的套节字句柄，然后返回
				fd_set fdRead_set = socket_set;
				result = ::select(0,&fdRead_set,NULL,NULL,&overtime);
				if (result<=0)
				{
					continue;
				}
				//通过将原来fdSocket集合与select处理过的fdRead集合比较，
				// 确定都有哪些套节字有未决I/O，并进一步处理这些I/O。
				for(int i=0; i<(int)socket_set.fd_count; i++)
				{
					if (FD_ISSET(socket_set.fd_array[i],&fdRead_set))
					{
						if (socket_set.fd_array[i]==switch_room_socket)  // （1）监听套节字接收到新连接
						{
							if(socket_set.fd_count < FD_SETSIZE)
							{
								//accept socket
								SOCKET accept_socket;
								sockaddr_in accept_sockaddr;
								int sockaddr_len=0;
								int timeout = 60000;
								linger accept_linger;
								accept_linger.l_onoff = 1;  // (在closesocket()调用,但是还有数据没发送完毕的时候容许逗留)
								accept_linger.l_linger = 5; // (容许逗留的时间为0秒)

								sockaddr_len = sizeof(accept_sockaddr);
								accept_socket = ::accept(socket_set.fd_array[i],(struct sockaddr*)&accept_sockaddr,&sockaddr_len);
								//设置接受超时
								::setsockopt(accept_socket,SOL_SOCKET,SO_RCVTIMEO,(char *)&timeout,sizeof(timeout));
								//设置关闭之后，会保留5秒
								::setsockopt(accept_socket,	SOL_SOCKET,	SO_LINGER,(const char*)&accept_linger,sizeof(accept_linger));
								//加入到socket_set中
								FD_SET(accept_socket,&socket_set);
								//输出日志
								memset(wide_string,0x0,sizeof(wide_string));
								memset(log,0x0,sizeof(log));

								string_conv.multibyte_to_widechar(inet_ntoa(accept_sockaddr.sin_addr),wide_string,sizeof(wide_string));
								swprintf(log,L"接受到一个新的socket连接，IP地址：%s",wide_string);
								WriteLog(__FL__, log);
							}
							else
							{
								WriteLog(__FL__, L"有太多的socket连接，不能接受新的连接");
								continue;
							}
						}
						else
						{
							//recv data
							char recv_data[512];
							int recv_len=0;

							memset(recv_data,0x0,sizeof(recv_data));

							recv_len = ::recv(socket_set.fd_array[i],recv_data,sizeof(recv_data),0);

							if (recv_len>0)                     //(2)接受到数据
							{
								//必须用sendmessage()函数
								SendMessage(DM_RECV_SERVER_DATA,(WPARAM)recv_data,NULL);
							}
							else								// （3）连接关闭、重启或者中断
							{
								::closesocket(socket_set.fd_array[i]);
								FD_CLR(socket_set.fd_array[i], &socket_set);
							}
						}
					}
				}//end for()
			}
			catch (...)
			{

			}
		}
		//关闭socket
		if (switch_room_socket)
		{
			::closesocket(switch_room_socket);
			switch_room_socket=0;
		}
		//终止线程
		if (m_server_thread_event_handle)
		{
			SetEvent(m_server_thread_event_handle);
		}
		return 1;
	}
	catch (...)
	{

	}
	//终止线程
	if (m_server_thread_event_handle)
	{
		SetEvent(m_server_thread_event_handle);
	}
	return -1;
}

bool Cflashktv10Wnd::show_control_osd(enum OSD_SHOW_CONTENT show_content)
{
	try
	{
		TCHAR path[256];
		int x_pos=0;
		int y_pos=0;
		bool result=false;
		string_conversion string_conv;
		TCHAR ad_path[256];
		TCHAR *file_suffix=NULL;
		long ad_result=false;
		TCHAR text[256];
		text_osd_info text_info;

		memset(path,0x0,sizeof(path));
		memset(ad_path,0x0,sizeof(ad_path));
		memset(text,0x0,sizeof(text));

		//如果先前的定时器存在，就杀死
		if (0!=show_control_osd_timer_identifier)
		{
			KillTimer(show_control_osd_timer_identifier);
			show_control_osd_timer_identifier = 0;
			m_player_manager.stop_ad_logo_osd(nLayerADBKLogo);
			//把发送给前置机的信息拷贝到发送结构体中
			copy_precomputer_send_info(PROMPT_BOX_TYPE);
		}

		if (m_show_song_tip_osd)
		{
			//正在播放，下一首提示不能播放其他的
			return true;
		}
		//是否在演唱台端显示控制osd
		config_file_manager config_file;
		result = config_file.read_boolean(L"control",L"slave_window_show_osd",false);
		if (result)
		{
		//	return true;
		}
		//得到控制osd图片路径
		result = m_osd_play_manager.get_control_osd_info(show_content,path,x_pos,y_pos,m_soft_decode_window_exist|m_inter_screen_soft_exist,g_flash_use_language,m_recorder_exist_video_path);
		if (!result)
		{
			return false;
		}
		if (PathFileExists(path))
		{
			//图片存在就显示
			result = m_player_manager.play_control_osd(path,x_pos,y_pos);
			if (!result)
			{
				return false;
			}
		}
		else
		{
			/*
			//图片不存在就显示文字
			//得到要显示的文字
			result = get_control_text(show_content,text);
			if (result)
			{
			//得到文字颜色
			result = m_osd_play_manager.m_osd_text_picture.get_text_info(text_info);
			if (!result)
			{
			//设置默认颜色
			text_info.fgcl = RGB(255,0,0);
			}
			//显示控制文字
			m_player_manager.play_control_text_osd(text,text_info.fgcl,x_pos,y_pos);
			}
			*/
		}

		if(culture_prompt_box_ad)
		{
			ad_result = get_ADItem_culture(DISPLAY_DEVICE_TV,AD_TYPE_HELP_MODE,&culture_prompt_box_ad,0);
			if (1==ad_result)
			{
				//转化成unicode
				string_conv.multibyte_to_widechar(culture_prompt_box_ad->szFilePath,ad_path,sizeof(ad_path));

				//判断图片类型，只支持8位索引的256色位图
				file_suffix = _tcsrchr(ad_path,'.');
				if (0==_tcsicmp(file_suffix,L".bmp"))
				{
					m_player_manager.play_ad_logo_osd(ad_path,nLayerADBKLogo);
				}
				//记录发送给前置机的信息
				set_precomputer_send_info(PROMPT_BOX_TYPE);
			}
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}


void Cflashktv10Wnd::show_recorder_picture_on_tv()
{
	try
	{
		TCHAR osd_path[256];
		memset(osd_path,0x0,sizeof(osd_path));

		osd_text_picture osd_msg;
		play_variable play_var;

		swprintf(osd_path,L"%s\\record_picture\\bg.png",m_work_path);
		//电视上显示图片
		bool ret = osd_msg.get_picture_play_variable(play_var);
		if (ret)
		{

			m_player_manager.play_bmp_osd(osd_path,play_var,OSDPK);
		}
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::show_volume_bar_on_tv(VOLUMN_BAR_FLAG bar_flag)
{
	try
	{
		int music_volume=0;
		int micro_volume=0;
		int tune=0;
		int picture_number=0;
		TCHAR volume_picture_path[256];
		config_file_manager config_file;
		bool result=false;
		play_variable picture_play_variable;

		memset(volume_picture_path,0x0,sizeof(volume_picture_path));

		//得到音量
		result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
		if (!result)
		{
			return;
		}
		//得到图片编号，按照12分来算
		if (MIC_VOLUMN_BAR==bar_flag)
		{
			//mic的
			picture_number = micro_volume*12/100;
		}
		else
		{
			//音乐音量
			picture_number = music_volume*12/100;
		}
		//得到路径
		if (m_show_vertical_volumn_bar)
		{
			//显示竖条
			swprintf(volume_picture_path,L"%s\\%s\\volume%02d_v.bmp",m_work_path,g_folder_name[6],picture_number);
		}
		else
		{
			//显示横条
			swprintf(volume_picture_path,L"%s\\%s\\volume%02d.bmp",m_work_path,g_folder_name[6],picture_number);
		}
		if (!PathFileExists(volume_picture_path))
		{
			//图片不存在直接返回
			return;
		}
		//显示音量图片
		picture_play_variable.nRepeat = 1;
		picture_play_variable.nDelayTime = 0;
		picture_play_variable.iHSpeed = 0;
		picture_play_variable.iVSpeed = 0;
		if (m_show_vertical_volumn_bar)
		{
			//显示竖条
			m_player_manager.play_bmp_osd(volume_picture_path,picture_play_variable,OSDAlignmentRightCenter);
		}
		else
		{
			//显示横条
			m_player_manager.play_bmp_osd(volume_picture_path,picture_play_variable,OSDAlignmentCenter);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::set_precomputer_send_info(enum PRECOMPUTER_SEND_TYPE ad_type)
{
	try
	{
		AD_ITEM_CULTURE *culture_ad_item=NULL;

		if (!g_dog_open_function.precomputer_check)
		{
			return;
		}

		switch(ad_type)
		{
		case VIDEO_TYPE:     //视频信息
			{
				culture_ad_item = culture_video_ad;
			}
			break;
		case PC_TEXT_TYPE:   //点播终端的文字
			{
				culture_ad_item = culture_pc_text_ad;
			}
			break;
		case TV_TEXT_TYPE:   //电视终端的文字
			{
				culture_ad_item = culture_tv_text_ad;
			}
			break;
		case PC_BK_TYPE:     //点播终端的背景广告
			{
				culture_ad_item = culture_pc_background_ad;
			}
			break;
		case PC_LOGO_TYPE:   //点播终端的logo
			{
				culture_ad_item = culture_pc_logo_ad;
			}
			break;
		case TV_LOGO_TYPE:  //电视上的logo
			{
				culture_ad_item = culture_tv_logo_ad;
			}
			break;
		case SCREEN_SAVER_TYPE: //屏保广告
			{
				culture_ad_item = culture_screen_saver_ad;
			}
			break;
		case PROMPT_BOX_TYPE:  //信息提示框
			{
				culture_ad_item = culture_prompt_box_ad;
			}
			break;
		default:
			return;
		}

		if (culture_ad_item)
		{
			//使用之前先初始化
			memset(&send_precomputer_msg[ad_type],0x0,sizeof(SEND_PRECOMPUTER_MSG));

			//正常播放是0，过路歌曲是1,广告是2
			send_precomputer_msg[ad_type].song_type = '2';
			memset(send_precomputer_msg[ad_type].song_id,0x0,sizeof(send_precomputer_msg[ad_type].song_id));
			sprintf(send_precomputer_msg[ad_type].song_id,"%s%s",culture_ad_item->szType_code,culture_ad_item->szCode_id);
			memset(send_precomputer_msg[ad_type].song_name,0x0,sizeof(send_precomputer_msg[ad_type].song_name));
			send_precomputer_msg[ad_type].start_time = time(0);
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::copy_precomputer_video_send_info()
{
	try
	{
		if (!g_dog_open_function.precomputer_check)
		{
			//不检测前置机，不是文化部的狗，就不用发送播放信息
			return;
		}
		//得到播放时长
		send_precomputer_msg[VIDEO_TYPE].play_time = (unsigned long)(time(0)-send_precomputer_msg[VIDEO_TYPE].start_time);
		if (send_ktv_msg[VIDEO_TYPE])
		{
			strcpy(send_ktv_msg[VIDEO_TYPE]->songid,send_precomputer_msg[VIDEO_TYPE].song_id);
			strcpy(send_ktv_msg[VIDEO_TYPE]->songname,send_precomputer_msg[VIDEO_TYPE].song_name);
			struct tm *tm_struct = localtime(&send_precomputer_msg[VIDEO_TYPE].start_time);
			sprintf(send_ktv_msg[VIDEO_TYPE]->demandtime,"%04d-%02d-%02d %02d:%02d:%02d",tm_struct->tm_year+1900,tm_struct->tm_mon+1,tm_struct->tm_mday,tm_struct->tm_hour,tm_struct->tm_min,tm_struct->tm_sec);
			if(m_is_playing_video_ad)
			{
				//刚播放的是视频广告，播放时长是1
				send_ktv_msg[VIDEO_TYPE]->playtime = 1;
			}
			else
			{
				//歌曲视频，播放时长是实际的播放时长
				send_ktv_msg[VIDEO_TYPE]->playtime = send_precomputer_msg[VIDEO_TYPE].play_time;
			}

			send_ktv_msg[VIDEO_TYPE]->songtype = send_precomputer_msg[VIDEO_TYPE].song_type;
			//更改发送播放记录发送播放记录
			send_video_play_recorder = true;
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::copy_precomputer_send_info(enum PRECOMPUTER_SEND_TYPE ad_type)
{
	try
	{
		if (!g_dog_open_function.precomputer_check)
		{
			//不检测前置机，不是文化部的狗，就不用发送播放信息
			return;
		}
		//得到播放时长
		send_precomputer_msg[ad_type].play_time = (unsigned long)(time(0)-send_precomputer_msg[ad_type].start_time);
		if (send_ktv_msg[ad_type] && (0!=strcmp(send_precomputer_msg[ad_type].song_id,"")))
		{
			strcpy(send_ktv_msg[ad_type]->songid,send_precomputer_msg[ad_type].song_id);
			strcpy(send_ktv_msg[ad_type]->songname,send_precomputer_msg[ad_type].song_name);
			struct tm *tm_struct = localtime(&send_precomputer_msg[ad_type].start_time);
			sprintf(send_ktv_msg[ad_type]->demandtime,"%04d-%02d-%02d %02d:%02d:%02d",tm_struct->tm_year+1900,tm_struct->tm_mon+1,tm_struct->tm_mday,tm_struct->tm_hour,tm_struct->tm_min,tm_struct->tm_sec);
			//广告时长都改成1
			//send_ktv_msg[ad_type]->playtime = send_precomputer_msg[ad_type].play_time;
			send_ktv_msg[ad_type]->playtime = 1;
			send_ktv_msg[ad_type]->songtype = send_precomputer_msg[ad_type].song_type;

			//赋值给发送结构体之后，进行初始化
			memset(&send_precomputer_msg[ad_type],0x0,sizeof(SEND_PRECOMPUTER_MSG));
			//更改发送播放记录
			switch(ad_type)
			{
			case VIDEO_TYPE:     //视频信息
				{
					send_video_play_recorder = true;
				}
				break;
			case PC_TEXT_TYPE:   //点播终端的文字
				{
					send_pc_text_play_recorder = true;
				}
				break;
			case TV_TEXT_TYPE:   //电视终端的文字
				{
					send_tv_text_play_recorder = true;
				}
				break;
			case PC_BK_TYPE:     //点播终端的背景广告
				{
					send_pc_BK_play_recorder = true;
				}
				break;
			case PC_LOGO_TYPE:   //点播终端的logo
				{
					send_pc_logo_play_recorder = true;
				}
				break;
			case TV_LOGO_TYPE:  //电视上的logo
				{
					send_tv_logo_play_recorder = true;
				}
				break;
			case SCREEN_SAVER_TYPE: //屏保广告
				{
					send_screen_saver_play_recorder = true;
				}
				break;
			case PROMPT_BOX_TYPE:  //信息提示框
				{
					send_prompt_box_play_recorder = true;
				}
				break;
			default:
				break;
			}
		}
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::get_control_text(enum OSD_SHOW_CONTENT show_content,TCHAR *text)
{
	try
	{
		int music_volume=0;
		int micro_volume=0;
		int tune=0;
		bool result=false;

		switch(show_content)
		{
		case CONTROL_OSD__PAUSE:  //暂停
			{
				_tcscpy(text,L"暂停");
			}
			break;
		case CONTROL_OSD__NEXT: //下一首
			{
				_tcscpy(text,L"下一首");
			}
			break;
		case CONTROL_OSD__CHANNEL_KALAOK:	// 原唱
			{
				_tcscpy(text,L"原唱");
			}
			break;
		case CONTROL_OSD__CHANNEL_ACCOMPANY:    //伴唱
			{
				_tcscpy(text,L"伴唱");
			}
			break;
		case CONTROL_OSD__RECORD:	// 录音中……
			{
				_tcscpy(text,L"录音中");
			}
			break;
		case CONTROL_OSD__PLAYBACK:	// 回放中……
			{
				_tcscpy(text,L"回放中");
			}
			break;
		case CONTROL_OSD__VOLUME_UP:	// 音量+
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"音量+:%d",music_volume);
				}
				else
				{
					_tcscpy(text,L"音量+");
				}
			}
			break;
		case CONTROL_OSD__VOLUME_DOWN: //音量-
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"音量-:%d",music_volume);
				}
				else
				{
					_tcscpy(text,L"音量-");
				}
			}
			break;
		case CONTROL_OSD__VOLUME_MUTE:  //静音
			{
				_tcscpy(text,L"静音");
			}
			break;
		case CONTROL_OSD__MICROPHONE_VOLUME_UP:   // 麦克风音量加
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"麦克+:%d",micro_volume);
				}
				else
				{
					_tcscpy(text,L"麦克+");
				}
			}
			break;
		case CONTROL_OSD__MICROPHONE_VOLUME_DOWN:   // 麦克风音量减
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"麦克-:%d",micro_volume);
				}
				else
				{
					_tcscpy(text,L"麦克-");
				}
			}
			break;
		case CONTROL_OSD__TUNE_UP:       // 音调加
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"音调+:%d",tune);
				}
				else
				{
					_tcscpy(text,L"音调+");
				}
			}
			break;
		case CONTROL_OSD__TUNE_DOWN:     // 音调减
			{
				result = m_player_manager.get_volume_tune(music_volume,micro_volume,tune);
				if (result)
				{
					swprintf(text,L"音调-:%d",tune);
				}
				else
				{
					_tcscpy(text,L"音调-");
				}
			}
			break;
		case CONTROL_OSD__TUNE_ORIGINAL: //原调
			{
				_tcscpy(text,L"标准调");
			}
			break;
		case CONTROL_OSD__SERVICE:  //服务
			{
				_tcscpy(text,L"服务");
			}
			break;
			//音效
		case CONTROL_OSD_AUDIO_EFFECT_STANDARD: //标准
			{
				_tcscpy(text,L"音效:标准");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_THEATER: //剧场
			{
				_tcscpy(text,L"音效:剧场");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_PROFESSIONAL: //唱将
			{
				_tcscpy(text,L"音效:唱将");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_MAGIC: //魔音
			{
				_tcscpy(text,L"音效:魔音");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_RESERVE1: //魔音
			{
				_tcscpy(text,L"音效:预留1");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_RESERVE2: //魔音
			{
				_tcscpy(text,L"音效:预留2");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_RESERVE3: //魔音
			{
				_tcscpy(text,L"音效:预留3");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT_RESERVE4: //魔音
			{
				_tcscpy(text,L"音效:预留4");
			}
			break;
		case CONTROL_OSD_ATMOSPHERE_APPLAUSE: //鼓掌
			{
				_tcscpy(text,L"鼓掌");
			}
			break;
		case CONTROL_OSD_ATMOSPHERE_CHEER:       //欢呼
			{
				_tcscpy(text,L"欢呼");
			}
			break;
		case CONTROL_OSD_ATMOSPHERE_OUTCRY:      //催眠
			{
				_tcscpy(text,L"催眠");
			}
			break;
		case CONTROL_OSD_ATMOSPHERE_WHISTLE:     //狂汗
			{
				_tcscpy(text,L"狂汗");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_HAOZAN: //好赞
			{
				_tcscpy(text,L"好赞");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_SHIHUA: //石化
			{
				_tcscpy(text,L"石化");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_XIANHUA: //鲜花
			{
				_tcscpy(text,L"鲜花");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_TUXIE: //吐血
			{
				_tcscpy(text,L"吐血");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_FEIWEN: //飞吻
			{
				_tcscpy(text,L"飞吻");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_XINSUI: //心碎
			{
				_tcscpy(text,L"心碎");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_HAIXIU: //害羞
			{
				_tcscpy(text,L"害羞");
			}
			break;
		case 	CONTROL_OSD_ATMOSPHERE_ZADAN: //砸蛋
			{
				_tcscpy(text,L"砸蛋");
			}
			break;
			//灯光
		case CONTROL_OSD_LIGHT1:                     //灯光1
			{
				_tcscpy(text,L"灯光:1");
			}
			break;
		case CONTROL_OSD_LIGHT2:                     //灯光2
			{
				_tcscpy(text,L"灯光:2");
			}
			break;
		case CONTROL_OSD_LIGHT3:                     //灯光3
			{
				_tcscpy(text,L"灯光:3");
			}
			break;
		case CONTROL_OSD_LIGHT4:                     //灯光4
			{
				_tcscpy(text,L"灯光:4");
			}
			break;
		case CONTROL_OSD_LIGHT5:                     //灯光5
			{
				_tcscpy(text,L"灯光:5");
			}
			break;
		case CONTROL_OSD_LIGHT6:                     //灯光6
			{
				_tcscpy(text,L"灯光:6");
			}
			break;
		case CONTROL_OSD_LIGHT7:                     //灯光7
			{
				_tcscpy(text,L"灯光:7");
			}
			break;
		case CONTROL_OSD_LIGHT8:                     //灯光8
			{
				_tcscpy(text,L"灯光:8");
			}
			break;
		case CONTROL_OSD_LIGHT_STANDARD:             //灯光 标准
			{
				_tcscpy(text,L"灯光:标准");
			}
			break;
		case CONTROL_OSD_LIGHT__BACKGROUND:           //灯光 背景
			{
				_tcscpy(text,L"灯光:背景");
			}
			break;
		case CONTROL_OSD_LIGHT__STAGE:                //灯光 舞台
			{
				_tcscpy(text,L"灯光:舞台");
			}
			break;
		case CONTROL_OSD_LIGHT__SCINTILLATION:        //灯光 屏闪
			{
				_tcscpy(text,L"灯光:屏闪");
			}
			break;
		case CONTROL_OSD_LIGHT_OPEN:                   //灯光 开
			{
				_tcscpy(text,L"灯光:全开");
			}
			break;
			//case CONTROL_OSD_LIGHT_CLOSE:                //灯光 关闭
			//	{
			//		_tcscpy(text,L"灯光:全关");
			//	}
			//	break;
			//环境音
		case CONTROL_OSD_ENVIRONMENT_AUDIO_MEETING:   //会议
			{
				_tcscpy(text,L"会议");
			}
			break;
		case CONTROL_OSD_ENVIRONMENT_AUDIO_AIRPORT:   //飞机场
			{
				_tcscpy(text,L"飞机场");
			}
			break;
		case CONTROL_OSD_ENVIRONMENT_AUDIO_ROAD:      //马路上
			{
				_tcscpy(text,L"马路上");
			}
			break;
		case CONTROL_OSD_ENVIRONMENT_AUDIO_STATION:   //火车站
			{
				_tcscpy(text,L"火车站");
			}
			break;
		case CONTROL_OSD_ENVIRONMENT_AUDIO_MAHJONG: //麻将
			{
				_tcscpy(text,L"麻将中");
			}
			break;
		case CONTROL_OSD_ENVIRONMENT_AUDIO_RAIN:   //下雨中
			{
				_tcscpy(text,L"下雨中");
			}
			break;
		case CONTROL_OSD_REVERBERATION_DOWN:        //混响减
			{
				_tcscpy(text,L"混响-");
			}
			break;
		case CONTROL_OSD_REVERBERATION_UP:          //混响加
			{
				_tcscpy(text,L"混响加");
			}
			break;
		case CONTROL_OSD__ENTER_AUTO_SONG:   //进入导唱
			{
				_tcscpy(text,L"进入导唱");
			}
			break;
		case CONTROL_OSD__EXIT_AUTO_SONG:   //退出导唱
			{
				_tcscpy(text,L"退出导唱");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_STRONG:          //空调强
			{
				_tcscpy(text,L"强风");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_MID:          //空调中
			{
				_tcscpy(text,L"中风");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_WEAK:          //空调弱
			{
				_tcscpy(text,L"弱风");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_TEMPERATURE_UP:     //温度+
			{
				_tcscpy(text,L"温度+");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_TEMPERATURE_DOWN:   //温度-
			{
				_tcscpy(text,L"温度-");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_CLOSE:          //空调关闭
			{
				_tcscpy(text,L"空调开/关");
			}
			break;
		case CONTROL_OSD_DISCHARGE_AIR_FUNCTION:          //排风
			{
				_tcscpy(text,L"排风");
			}
			break;
		case CONTROL_OSD_DISCHARGE_AIR_CLOSE:  //排风关闭
			{
				_tcscpy(text,L"关闭排风");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_REFRIGERATION:      //制冷
			{
				_tcscpy(text,L"制冷");
			}
			break;
		case CONTROL_OSD_AIR_CONDITION_HEATING:          //制热
			{
				_tcscpy(text,L"制热");
			}
			break;
		case CONTROL_OSD_SCORE_OPEN:  //打开评分
			{
				_tcscpy(text,L"开启评分");
			}
			break;
		case CONTROL_OSD_SCORE_CLOSE:  //关闭评分
			{
				_tcscpy(text,L"关闭评分");
			}
			break;
		case CONTROL_OSD_AUDIO_EFFECT:  //自动
			{
				_tcscpy(text,L"自动");
			}
			break;
		case CONTROL_OSD_MUSIC_SOUND_STANDARD: //音乐音效标准
			{
				_tcscpy(text,L"音乐音效标准");
			}
			break;
		case CONTROL_OSD_MUSIC_SOUND_THEATER: //音乐音效剧场
			{
				_tcscpy(text,L"音乐音效剧场");
			}
			break;
		case CONTROL_OSD_MUSIC_SOUND_PROFESSIONAL: //音乐音效唱将
			{
				_tcscpy(text,L"音乐音效唱将");
			}
			break;
		case CONTROL_OSD_MUSIC_SOUND_MAGIC: //音乐音效魔音
			{
				_tcscpy(text,L"音乐音效魔音");
			}
			break;
		case CONTROL_OSD_MUSIC_SOUND_RESERVE1: //音乐音效自动
			{
				_tcscpy(text,L"音乐音效自动");
			}
			break;
		default:
			return false;
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::flash_message_call_music_enjoy_data(int page_code, bool binit /*= true*/){
	TCHAR request[1024*52] = {0x00};
	std::wstring song_list_xml;
	bool result = false;  

	result = m_query_song_manager.make_music_enjoy_list_xml(song_list_xml, m_video_play_manager, m_music_enjoy, m_music_enjoy_count);
	if (!result)
	{
		//return false;
	}

	result = m_flash_manage.make_music_enjoy_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),binit,page_code,CUR_PAGE_OPERATE);
	if (!result)
	{
		return false;
	}

	flash_player_call_function(request);
	return true;
}

void Cflashktv10Wnd::parse_song_enjoy_json(Json::Value &info, TCHAR *path_name)
{
	string_conversion string_conv;
	m_music_enjoy_count = 0;

	for (int n = 0; n < 100; n++)
	{
		memset(m_music_enjoy[n].song_id, 0x00, sizeof(m_music_enjoy[n].song_id));
		memset(m_music_enjoy[n].song_name, 0x00, sizeof(m_music_enjoy[n].song_name));
		memset(m_music_enjoy[n].singer_id, 0x00, sizeof(m_music_enjoy[n].singer_id));
		memset(m_music_enjoy[n].singer_name, 0x00, sizeof(m_music_enjoy[n].singer_name));
		memset(m_music_enjoy[n].song_cloud_path, 0x00, sizeof(m_music_enjoy[n].song_cloud_path));
		memset(m_music_enjoy[n].song_lyric_cloud_path, 0x00, sizeof(m_music_enjoy[n].song_lyric_cloud_path));
		memset(m_music_enjoy[n].song_bk_path, 0x00, sizeof(m_music_enjoy[n].song_bk_path));
		m_music_enjoy[n].song_top = -1;
		m_music_enjoy[n].song_type = -1;
	}	

	TCHAR szSongID[MAX_PATH] = {0x00};
	TCHAR szSongName[MAX_PATH] = {0x00};
	TCHAR szSongSingerName[MAX_PATH] = {0x00};
	TCHAR szServerIP[32] = {0x00};

	string_conv.multibyte_to_widechar(m_service_server_ip, szServerIP, 32);

	int nSize = info.size();
	for (int i = 0; i < nSize; i++)
	{
		string strSongID = info[i]["SongID"].asString();
		string strSongName = info[i]["SongName"].asString();
		string strSingerName = info[i]["SingerName"].asString();
		string strSongTop = info[i]["SongTop"].asString();
		string strSongType = info[i]["SongType"].asString();

		int idx = atoi(strSongTop.c_str()) - 1;

		string_conv.utf8_to_widechar(strSongID.c_str(), szSongID, MAX_PATH);
		string_conv.utf8_to_widechar(strSongName.c_str(), szSongName, MAX_PATH);
		string_conv.utf8_to_widechar(strSingerName.c_str(), szSongSingerName, MAX_PATH);

		wcscpy(m_music_enjoy[idx].song_id, szSongID);
		wcscpy(m_music_enjoy[idx].song_name, szSongName);
		wcscpy(m_music_enjoy[idx].singer_name, szSongSingerName);
		m_music_enjoy[idx].song_top = atoi(strSongTop.c_str());
		m_music_enjoy[idx].song_type = atoi(strSongType.c_str());

		//歌曲在服务器上，为服务器歌曲路径		
		swprintf(m_music_enjoy[idx].song_cloud_path, L"%s\\songenjoy\\%s\\mp3\\%s.mp3", m_music_enjoy_path.c_str(), path_name, szSongID);
		swprintf(m_music_enjoy[idx].song_lyric_cloud_path, L"%s\\songenjoy\\%s\\lrc\\%s.lrc", m_music_enjoy_path.c_str(), path_name, szSongID);
		//测试yzg
		//swprintf(m_music_enjoy[idx].song_bk_path, L"%s\\songenjoybk\\%s\\%s.mpg", m_music_enjoy_path.c_str(), path_name, L"886356"/*szSongID*/);
		if (_tcscmp(path_name, L"baidu") == 0)
			swprintf(m_music_enjoy[idx].song_bk_path, L"%s", m_szMusicEnjoyBkVideo[0]);
		if (_tcscmp(path_name, L"qq") == 0)
			swprintf(m_music_enjoy[idx].song_bk_path, L"%s", m_szMusicEnjoyBkVideo[1]);
		if (_tcscmp(path_name, L"kugou") == 0)
			swprintf(m_music_enjoy[idx].song_bk_path, L"%s", m_szMusicEnjoyBkVideo[2]);
		if (_tcscmp(path_name, L"kuwo") == 0)
			swprintf(m_music_enjoy[idx].song_bk_path, L"%s", m_szMusicEnjoyBkVideo[3]);

		m_music_enjoy_count++;
	}
}

void Cflashktv10Wnd::song_query_show_data_json(int page_code){
	TCHAR szSongJsonPath[MAX_PATH] = {0x00};
	TCHAR szServerIP[MAX_PATH] = {0x00};
	string_conversion str_con;

	str_con.multibyte_to_widechar(m_service_server_ip, szServerIP, MAX_PATH);
	swprintf(szSongJsonPath, _T("%s\\songenjoy\\SongInfo.txt"), m_music_enjoy_path.c_str());

	if (!PathFileExists(szSongJsonPath))
	{
		WriteLog(__FL__, _T("网络文件SongEnjoy\\SongInfo.txt文件不存在."));
		return;
	}

	//json解析文件
	Json::Reader reader;
	Json::Value root;

	ifstream ifs;
	ifs.open(szSongJsonPath);

	//不能解析
	if (!reader.parse(ifs, root, false))
	{
		return;
	}
	switch (page_code)
	{
	case page_baidu_music:
		{
			//百度音乐
			if (root.isMember("BaiDuSongInfo")){
				Json::Value baidu = root["BaiDuSongInfo"];
				parse_song_enjoy_json(baidu, L"baidu");				
			}
		}
		break;
	case page_qq_music:
		{
			//QQ音乐
			if (root.isMember("QQSongInfo")){
				Json::Value QQ = root["QQSongInfo"];
				parse_song_enjoy_json(QQ, L"qq");
			}
		}
		break;
	case page_kugou_music:
		{
			//酷狗音乐
			if (root.isMember("KuGouSongInfo")){
				Json::Value kuGou = root["KuGouSongInfo"];
				parse_song_enjoy_json(kuGou, L"kugou");
			}
		}
		break;
	case page_kuwo_music:
		{
			//酷我音乐
			if (root.isMember("KuWoSongInfo")){
				Json::Value kuWo = root["KuWoSongInfo"];
				parse_song_enjoy_json(kuWo, L"kuwo");
			}
		}
		break;
	}
	//关闭文件
	ifs.close();

	flash_message_call_music_enjoy_data(page_code);
}

bool Cflashktv10Wnd::song_query_show_data_by_id(select_expr &table_select_expr,bool page_expr, TCHAR *args)
{
	try
	{
		TCHAR request[2048*12];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int total_row = 0;
		int cur_page_number=0;
		int page_index=0;
		int page_show_row_count=0;

		memset(request,0x0,sizeof(request));

		//得到最后一页的索引
		page_index = m_flash_manage.get_last_page_index();
		//页显示的行数
		page_show_row_count = m_page_show_row_count;
		//设置排序方式
		set_query_sort_mode();

		song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"in (";
		song_query_condition[SONG_ID_SUFFIX].expression = args;
		song_query_condition[SONG_ID_SUFFIX].wildcard = L")";

		//数据库成功打开
		result_set = new std::wstring[table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count];
		if (result_set)
		{
			//得到总行数和页数 
			total_row = m_db_query.get_row_count(table_select_expr.row_count_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,page_show_row_count);
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据

			//CTimer test_time;
			//test_time.start();
			//row = m_db_query.get_table_data(result_set,table_select_expr.result_column_nums,table_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,m_db_order_item,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,page_show_row_count);
			row = m_db_query.get_table_data(result_set,table_select_expr.result_column_nums,table_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,m_db_order_item,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,page_show_row_count);
			//double last_time = test_time.last_time();

			if (row<=0)
			{
				delete []result_set;
				result_set = NULL;
				//显示没有符合查询条件的提示

				show_no_match_result_tip(page_expr);
				//清空查询条件和初始化查询面板 2014-04-22 不清空上一次查询条件
				if (page_index == page_singer_song)
				{
					//clear_query_condition_by_page_and_init(true);
					//flash_message_call_function(PAGE_BACK);
				}
				//

				return false;
			}

			//显示行页信息
			show_row_and_page_count(L"true",total_row,page_count,cur_page_number);

			//设置歌曲列表
			result = m_query_song_manager.set_song_list(result_set,table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count,table_select_expr.result_column_nums,page_count,cur_page_number,page_show_row_count);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}

			//WriteLog(__FL__, song_list_xml.c_str());

			//组织歌曲字符串   直接显示数据页操作码是0
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			//使用智能拼音
			use_smart_pinyin();

			return true;
		}

		return false;
	}
	catch (...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::song_query_show_data_by_sql_server()
{
	try
	{
		if (!m_voice_china_db)
		{
			flash_show_tip_message(L"服务器连接失败!");
			return false;
		}
		if(m_show_cube_song_vec.size() > 0)
		{
			for (int i = 0; i < m_show_cube_song_vec.size(); i++)
			{
				delete m_show_cube_song_vec[i];
			}
			m_show_cube_song_vec.clear();
		}

		if (m_show_cube_singer_vec.size() > 0)
		{
			for (int i = 0; i < m_show_cube_singer_vec.size(); i++)
			{
				delete m_show_cube_singer_vec[i];
			}
			m_show_cube_singer_vec.clear();
		}

		TCHAR szSql[1024*10] = {0x00};

		access_record_set_sql *record_set_song = m_sql_server_voice_db.Query(L"select * from voice_china_song");
		if (record_set_song != NULL)
		{
			record_set_song->MoveFirst();
			while(!record_set_song->IsEof())
			{
				LP_SHOW_CUBE_SONG item_song = new SHOW_CUBE_SONG();
				TCHAR szItem[1024] = {0x00};
				ZeroMemory(szItem, sizeof(szItem));
				//record_set_song->get_item_value_by_index(0, szItem); //编号

				//根据时间生成一个song_id
				SYSTEMTIME stCurTime = {0};
				::GetSystemTime(&stCurTime);
				swprintf(szItem, L"%d%d%d%d%d", stCurTime.wDay, stCurTime.wHour, stCurTime.wMinute, 
					stCurTime.wSecond, stCurTime.wMilliseconds);
				_sleep(1);

				item_song->id = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(1, szItem); //歌曲ID
				item_song->song_id = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(2, szItem); //歌曲名称
				item_song->song_name = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(3, szItem); //演唱者ID1
				item_song->singer_id1 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(4, szItem); //演唱者ID2
				item_song->singer_id2 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(5, szItem); //演唱者ID3
				item_song->singer_id3 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(6, szItem); //演唱者ID4
				item_song->singer_id4 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(7, szItem); //歌曲入库时间
				item_song->song_add_datetime = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(8, szItem); //第一服务器
				item_song->serv_path1 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(9, szItem); //第二服务器
				item_song->serv_path2 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(10, szItem); //第三服务器
				item_song->serv_path3 = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(11, szItem); //共享文件路径
				item_song->song_relative_path = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(12, szItem); //歌曲微信分享URL
				item_song->song_wechat_url = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(13, szItem); //歌曲类型
				item_song->song_type = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(14, szItem); //主题类型
				item_song->theme_type = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(15, szItem); //语言
				item_song->language = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(16, szItem); //歌名字数
				item_song->song_name_word = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(17, szItem); //歌曲首字母缩写
				item_song->song_name_spell = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(18, szItem); //歌曲版本
				item_song->song_version = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(19, szItem); //文件格式
				item_song->file_format = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(20, szItem); //歌曲提示名
				item_song->song_name_tip = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(21, szItem); //歌词
				item_song->lyric = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_song->get_item_value_by_index(22, szItem); //歌星名称
				item_song->singer_name = szItem;
				ZeroMemory(szItem, sizeof(szItem));

				memset(szSql, 0x00, sizeof(0x00));
				swprintf(szSql, L"select count(*) from song where song_id = '%s'", item_song->song_id.c_str());
				string_conversion str_conn;
				char szBuf[1024*10] = {0x00};
				str_conn.widechar_to_multibyte(szSql, szBuf, sizeof(szBuf));
				int nCount = m_db_query.get_row_count(szBuf);
				if (nCount <= 0)
				{
					memset(szSql, 0x00, sizeof(0x00));
					swprintf(szSql, L"insert or replace into song (song_id, song_name, singer_id1, singer_id2, singer_id3, singer_id4, server_path1, server_path2, server_path3, song_relative_path, song_type, new_song_theme, language, song_name_word_count, spell_first_letter_abbreviation, file_version, file_format, show_movie_name, lyric, song_theme, singer_name) \
									 values ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d', '%d', %d, '%s', '%d', '%s', '%s', '%s', '0', '%s')",
									 item_song->song_id.c_str(), item_song->song_name.c_str(), item_song->singer_id1.c_str(), item_song->singer_id2.c_str(),
									 item_song->singer_id3.c_str(), item_song->singer_id4.c_str(), item_song->serv_path1.c_str(), item_song->serv_path2.c_str(), item_song->serv_path3.c_str(),
									 item_song->song_relative_path.c_str(), item_song->song_type, item_song->theme_type, item_song->language,
									 item_song->song_name_word, item_song->song_name_spell.c_str(), item_song->song_version, item_song->file_format.c_str(),
									 item_song->song_name_tip.c_str(), item_song->lyric.c_str(), item_song->singer_name.c_str());

					bool bflag = m_db_query.exec_sql(szSql);
					if (!bflag)
					{
						WriteLog(__FL__, L"写入数据库歌曲表失败!");
						WriteLog(__FL__, szSql);
					}
				}				
				m_show_cube_song_vec.push_back(item_song);
				record_set_song->MoveNext();
			}
			delete record_set_song;
			record_set_song = NULL;
		}		

		access_record_set_sql *record_set_singer = m_sql_server_voice_db.Query(L"select * from voice_china_singer");
		if (record_set_singer != NULL)
		{
			record_set_singer->MoveFirst();
			while(!record_set_singer->IsEof())
			{
				LP_SHOW_CUBE_SINGER item_singer = new SHOW_CUBE_SINGER();
				TCHAR szItem[2048] = {0x00};
				record_set_singer->get_item_value_by_index(0, szItem); //编号
				item_singer->id = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(1, szItem); //演唱者ID
				item_singer->singer_id = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(2, szItem); //演唱者名称
				item_singer->singer_name = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(3, szItem); //演唱者头像路径
				item_singer->singer_picture = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(4, szItem); //演唱者加入初始时间
				item_singer->datatime = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(5, szItem); //演唱者名字拼写
				item_singer->singer_name_spell = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(6, szItem); //演唱者名字数量
				item_singer->singer_name_count = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(7, szItem); //演唱者二维码分享
				item_singer->singer_wechat_url = szItem;
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(8, szItem); //演唱者类型
				item_singer->singer_type = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(9, szItem); //演唱者性别
				item_singer->singer_sex = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(10, szItem); //演唱者区域区分
				item_singer->singer_region = _ttoi(szItem);
				ZeroMemory(szItem, sizeof(szItem));
				record_set_singer->get_item_value_by_index(11, szItem); //演唱者描述
				item_singer->singer_introduction = szItem;
				ZeroMemory(szItem, sizeof(szItem));

				memset(szSql, 0x00, sizeof(0x00));
				swprintf(szSql, L"select count(*) from singer where singer_id = '%s'", item_singer->singer_id.c_str());
				string_conversion str_conn;
				char szBuf[1024*10] = {0x00};
				str_conn.widechar_to_multibyte(szSql, szBuf, sizeof(szBuf));
				int nCount = m_db_query.get_row_count(szBuf);
				if (nCount <= 0)
				{
					memset(szSql, 0x00, sizeof(0x00));
					swprintf(szSql, L"insert or replace into singer (singer_id, singer_name, singer_sex, singer_region_new, spell_first_letter_abbreviation, singer_name_word_count, singer_introduction) \
									 values ('%s', '%s', %d, %d, '%s', %d, 2)",
									 item_singer->singer_id.c_str(), item_singer->singer_name.c_str(), item_singer->singer_sex, item_singer->singer_region, item_singer->singer_name_spell.c_str(), item_singer->singer_name_count);

					bool bflag = m_db_query.exec_sql(szSql);
					if (!bflag)
					{
						WriteLog(__FL__, L"写入数据库歌星表失败!");
						WriteLog(__FL__, szSql);
					}
				}
				m_show_cube_singer_vec.push_back(item_singer);
				record_set_singer->MoveNext();
			}

			delete record_set_singer;
			record_set_singer = NULL;
		}		
	}
	catch (...)
	{
	}
	return true;
}

bool Cflashktv10Wnd::song_query_show_data(select_expr &table_select_expr,bool bShowTip/*=true*/,bool page_expr/* =false */, bool show_movie_name /* = false */)
{
	try
	{
		TCHAR request[2048*12];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int total_row = 0;
		int cur_page_number=0;
		int page_index=0;
		int page_show_row_count=0;

		memset(request,0x0,sizeof(request));

		//得到最后一页的索引
		page_index = m_flash_manage.get_last_page_index();
		//页显示的行数
		page_show_row_count = m_page_show_row_count;
		//设置排序方式
		set_query_sort_mode();

#ifdef DALIAN_MATSA_EK_PLUS
		//mod by yzg 2015-12-04
		//拼音点歌不显示DJ歌曲
		if(song_query_condition[SONG_THEME_SUFFIX].expression.empty())
#else
		//检测是否允许播放DJ
		if(!m_allow_play_dj && song_query_condition[SONG_THEME_SUFFIX].expression.empty())
#endif
		{
			//不允许播放DJ
			song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"!=\"";
			song_query_condition[SONG_THEME_SUFFIX].expression = L"1";
			song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\"";
		}

		//是否在查询中显示云加歌歌曲
		//点击显示云加歌按钮后秀立方模块下显示歌曲不正常---2015年6月3日11:42:54----LTL
		if (m_allow_show_cloud_song && page_index != page_voice_china)
		{
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].operation_symbols = L" <> \'"; 
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression = L"1\'";
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression += L" or local_path is null";
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].wildcard = L"";
		}
		//2015-6-19 14:13:43--云加歌页面下查出本地歌曲----LTl
		if (page_index==page_yunadd_song)
		{
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].operation_symbols = L" = "; 
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression = L"\"1\"";
			song_query_condition[SONG_LOCAL_PATH_SUFFIX].wildcard = L"";
		}
#ifndef DON_GUAN_K_PLUS
		if (page_index != page_voice_china && page_index != page_singer_song && page_index != page_new_theme_song)
		{
			song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L" <> \'";
			song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"100";
			song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
		}
#endif // DON_GUAN_K_PLUS

		//数据库成功打开
		result_set = new std::wstring[table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count];
		if (result_set)
		{
			//得到总行数和页数 
			total_row = m_db_query.get_row_count(table_select_expr.row_count_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,page_show_row_count);
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//初始化一下
			m_query_song_manager.initialized_variables();

			if (total_row<=0)
			{
				delete []result_set;
				result_set = NULL;
				//显示没有符合查询条件的提示

				if (bShowTip)
				{
					show_no_match_result_tip(page_expr);
				}
				//清空查询条件和初始化查询面板 2014-04-22 不清空上一次查询条件
				if (page_index == page_singer_song)
				{
					//clear_query_condition_by_page_and_init(true);
					//flash_message_call_function(PAGE_BACK);
				}
				//
				send_to_flash_empty_list();

				//显示行页信息
				show_row_and_page_count(L"flash",total_row,page_count,cur_page_number);

				return false;
			}

			//查询数据库得到数据

			//CTimer test_time;
			//test_time.start();
			//row = m_db_query.get_table_data(result_set,table_select_expr.result_column_nums,table_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,m_db_order_item,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,page_show_row_count);
			row = m_db_query.get_table_data(result_set,table_select_expr.result_column_nums,table_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,m_db_order_item,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,page_show_row_count);
			//double last_time = test_time.last_time();			

			//显示行页信息
			show_row_and_page_count(L"true",total_row,page_count,cur_page_number);

			//设置歌曲列表
			result = m_query_song_manager.set_song_list(result_set,table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count,table_select_expr.result_column_nums,page_count,cur_page_number,page_show_row_count);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;

			//是否显示电影名称
			m_query_song_manager.set_show_movie_name_flag(show_movie_name);

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}

			//WriteLog(__FL__, song_list_xml.c_str());

			//组织歌曲字符串   直接显示数据页操作码是0
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			//使用智能拼音
			use_smart_pinyin();

			return true;
		}

		return false;
	}
	catch (...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::movie_query_show_data(void)
{
	TCHAR request[1024*100];
	std::wstring xml_request;
	std::wstring film_xml;

	m_film_manager.m_strcodation_keyword = movie_query_condition[MOVIE_SFSA_SUFFIX].expression;

	//获取电影页码
	int total_row=0,page_count=0;
	if(!m_film_manager.get_film_count(total_row,page_count))
	{
		show_no_match_result_tip();
		return false;
	}
	show_row_and_page_count(L"true",total_row,page_count,m_film_manager.m_npage_index+1);
	long querystarttime=GetTickCount();
	//获取电影列表
	if(!m_film_manager.get_film(film_xml))
	{
		show_no_match_result_tip();
		return false;
	}
	long queryendtime=GetTickCount();
	TCHAR szlog[256]={0x00};
	swprintf(szlog, L"电影列表查询时间：%ld", queryendtime-querystarttime);
	WriteLog(__FL__, szlog);
	m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"MovieList",film_xml.c_str(),true,page_movie,0);
	flash_player_call_function(request);
	long flashendtime=GetTickCount();
	swprintf(szlog, L"发码时间：%ld", flashendtime-queryendtime);
	WriteLog(__FL__, szlog);

	//发送按钮状态
	set_flash_button_state(L"film_type_button",m_film_manager.m_encodation_type);
	set_flash_button_state(L"film_country_button",m_film_manager.m_encodation_country);
	set_flash_button_state(L"FILM_ORDER_BY_button",m_film_manager.m_encodation_orderby);
	//2015-6-23 15:02:29---LTL--发送初始时按钮高亮
	set_flash_button_state(L"film_video_button",m_film_video_button_state);
	return true;

	//以下是电影老版本的代码，暂时不需要了
	//try
	//{
	//	TCHAR request[10240];
	//	std::wstring *result_set=NULL;
	//	std::wstring song_list_xml;
	//	int row=0;
	//	bool result=false;
	//	int page_count=0;
	//	int cur_page_number=0;
	//	int page_index=0;

	//	memset(request,0x0,sizeof(request));

	//	//得到最后一页的索引
	//	page_index = m_flash_manage.get_last_page_index();

	//	//数据库成功打开
	//	result_set = new std::wstring[movie_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
	//	if (result_set)
	//	{
	//		//得到总行数和页数
	//		row = m_db_query.get_row_count(movie_select_expr.row_count_expr.c_str(),movie_query_condition,MOVIE_CONDITION_NUMS,m_page_show_row_count);
	//		page_count = m_db_query.get_total_page_count();
	//		cur_page_number = m_db_query.get_cur_page_number();
	//		//显示行页信息
	//		show_row_and_page_count(L"true",row,page_count,cur_page_number);

	//		//初始化一下
	//		m_query_song_manager.initialized_variables();
	//		//查询数据库得到数据
	//		row = m_db_query.get_table_data(result_set,movie_select_expr.result_column_nums,movie_select_expr.result_column_expr.c_str(),movie_query_condition,MOVIE_CONDITION_NUMS,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,m_page_show_row_count);
	//		if (row<=0)
	//		{
	//			delete []result_set;
	//			result_set = NULL;
	//			//显示没有符合查询条件的提示
	//			show_no_match_result_tip();
	//			//清空查询条件和初始化查询面板
	//			clear_query_condition_by_page_and_init(true);

	//			return false;
	//		}

	//		//设置电影列表
	//		result = m_query_song_manager.set_movie_list(result_set,movie_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,movie_select_expr.result_column_nums,page_count,cur_page_number);
	//		if (!result)
	//		{
	//			delete []result_set;
	//			result_set = NULL;
	//			return false;
	//		}
	//		//注意释放空间
	//		delete []result_set;
	//		result_set = NULL;

	//		result = m_query_song_manager.make_movie_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count);
	//		if (!result)
	//		{
	//			return false;
	//		}
	//		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,SONG_SHOW_MODE_LIST);
	//		if (!result)
	//		{
	//			return false;
	//		}
	//		flash_player_call_function(request);

	//		//使用智能拼音
	//		use_smart_pinyin();

	//		return true;
	//	}

	//	return false;
	//}
	//catch (...)
	//{

	//}
	//return false;
}
bool Cflashktv10Wnd::movie_query_detail_data(void)
{
	std::wstring film_xml;
	TCHAR request[1024*100];
	bool result = false;

	//获取电影详情
	if(!m_film_manager.get_film_detail(film_xml))
	{
		show_no_match_result_tip();
		return false;
	}
	result = m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"MovieDetail",film_xml.c_str(),true,page_movie_detail,0);
	if (!result)	return false;

	result = flash_player_call_function(request);
	if (!result)	return false;

	return true;
}

bool Cflashktv10Wnd::member_song_query_show_data(void)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		int page_index=0;

		memset(request,0x0,sizeof(request));

		//赋值查询条件
		song_query_condition[MEMBER_NAME_SUFFIX].expression = m_member_name;

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//分配空间
		result_set = new std::wstring[member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
		if (result_set)
		{
			//得到总行数和页数
			row = m_db_query.get_row_count(member_song_select_expr.row_count_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,m_page_show_row_count);
			//记录下总的行数
			m_member_song_count = row;
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();
			//显示行页信息
			show_row_and_page_count(L"true",row,page_count,cur_page_number);

			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,member_song_select_expr.result_column_nums,member_song_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,m_page_show_row_count);
			if (row<=0)
			{
				delete []result_set;
				result_set = NULL;
				//显示没有符合查询条件的提示
				show_no_match_result_tip();
				//清空查询条件和初始化查询面板
				clear_query_condition_by_page_and_init(true);

				return false;
			}

			//设置歌曲列表
			result = m_query_song_manager.set_song_list(result_set,member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,member_song_select_expr.result_column_nums,page_count,cur_page_number,m_page_show_row_count);
			if (!result)
			{
				delete []result_set;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set=NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			//使用智能拼音
			use_smart_pinyin();

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}
bool Cflashktv10Wnd::song_recorder_query_show_data_by_id(TCHAR *pargs)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		std::wstring sql_expr;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		TCHAR row_page_data[256];
		int page_index=0;

		memset(request,0x0,sizeof(request));
		memset(row_page_data,0x0,sizeof(row_page_data));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();		

		//数据库成功打开
		result_set = new std::wstring[song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
		if (result_set)
		{
			sql_expr = song_recorder_select_expr.row_count_expr;
			sql_expr += L" where song_id in (";
			sql_expr += pargs;
			sql_expr += L")";

			WriteLog(__FL__, sql_expr.c_str());

			//得到总行数和页数
			row = m_db_query.get_row_count(sql_expr.c_str(),NULL,0,m_page_show_row_count);
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();
			//显示行页信息
			show_row_and_page_count(L"true",row,page_count,cur_page_number);

			sql_expr = song_recorder_select_expr.result_column_expr;
			sql_expr += L" where song_id in (";
			sql_expr += pargs;
			sql_expr += L")";
			WriteLog(__FL__, sql_expr.c_str());

			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,song_recorder_select_expr.result_column_nums,sql_expr.c_str(),NULL,0,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,m_page_show_row_count);
			if (row<=0)
			{
				delete []result_set;
				result_set = NULL;
				//显示没有符合查询条件的提示
				show_no_match_result_tip();
				//清空查询条件和初始化查询面板
				clear_query_condition_by_page_and_init(true);

				return false;
			}

			//设置录音列表
			result = m_query_song_manager.set_song_recorder_list(result_set,song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,song_recorder_select_expr.result_column_nums,page_count,cur_page_number);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set=NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::song_recorder_query_all_show_data(void)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		TCHAR row_page_data[256];
		int page_index=0;

		memset(request,0x0,sizeof(request));
		memset(row_page_data,0x0,sizeof(row_page_data));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();

		//得到总行数和页数
		row = m_db_query.get_row_count(song_recorder_select_expr.row_count_expr.c_str(),NULL,0,RECORDER_SHOW_PAGE_COUNT);
		page_count = m_db_query.get_total_page_count();
		cur_page_number = m_db_query.get_cur_page_number();
		//显示行页信息
		show_row_and_page_count(L"true",row,page_count,cur_page_number);

		//数据库成功打开
		result_set = new std::wstring[song_recorder_select_expr.result_column_nums*row];


		//初始化一下
		m_query_song_manager.initialized_variables();
		//查询数据库得到数据
		row = m_db_query.get_table_data(result_set,song_recorder_select_expr.result_column_nums,song_recorder_select_expr.result_column_expr.c_str(),NULL,0,NULL,NULL,RECORDER_SHOW_PAGE_COUNT,0);
		if (row<=0)
		{
			delete []result_set;
			result_set = NULL;
			//显示没有符合查询条件的提示
			show_no_match_result_tip();
			//清空查询条件和初始化查询面板
			//clear_query_condition_by_page_and_init(true);

			send_to_flash_empty_list();
			return false;
		}

		//设置录音列表
		result = m_query_song_manager.set_song_all_recorder_list(result_set,song_recorder_select_expr.result_column_nums*row,song_recorder_select_expr.result_column_nums);
		if (!result)
		{
			delete []result_set;
			result_set = NULL;
			return false;
		}
		//注意释放空间
		delete []result_set;
		result_set=NULL;

		result = m_query_song_manager.make_recorder_song_list_xml(song_list_xml,m_video_play_manager,page_index);
		if (!result)
		{
			return false;
		}
		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
		if (!result)
		{
			return false;
		}
		flash_player_call_function(request);

		return true;


	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::song_recorder_query_show_data(PAGE_OPERATE page_operate /* = FIRST_PAGE_OPERATE */)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		TCHAR row_page_data[256];
		int page_index=0;

		memset(request,0x0,sizeof(request));
		memset(row_page_data,0x0,sizeof(row_page_data));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();

		//数据库成功打开
		result_set = new std::wstring[song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
		if (result_set)
		{
			//得到总行数和页数
			row = m_db_query.get_row_count(song_recorder_select_expr.row_count_expr.c_str(),NULL,0,m_page_show_row_count);
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();
			//显示行页信息
			show_row_and_page_count(L"true",row,page_count,cur_page_number);

			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,song_recorder_select_expr.result_column_nums,song_recorder_select_expr.result_column_expr.c_str(),NULL,0,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,page_operate,m_page_show_row_count);
			if (row<=0)
			{
				delete []result_set;
				result_set = NULL;
				//显示没有符合查询条件的提示
				show_no_match_result_tip();
				//清空查询条件和初始化查询面板
				clear_query_condition_by_page_and_init(true);

				return false;
			}

			//设置录音列表
			result = m_query_song_manager.set_song_recorder_list(result_set,song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,song_recorder_select_expr.result_column_nums,page_count,cur_page_number);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set=NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}

int Cflashktv10Wnd::timer_show_flash_text(void)
{
	try
	{
		string_conversion string_conv;
		TCHAR ad_path[256];
		file ad_file;
		bool ad_result=false;
		char text_buffer[1024];
		TCHAR text[1024];
		DWORD read_size=0;

		memset(ad_path,0x0,sizeof(ad_path));
		memset(text_buffer,0x0,sizeof(text_buffer));
		memset(text,0x0,sizeof(text));

		//把发送给前置机的信息拷贝到发送结构体中
		copy_precomputer_send_info(PC_TEXT_TYPE);

		long result = get_ADItem_culture(DISPLAY_DEVICE_PC,AD_TYPE_CAPTION,&culture_pc_text_ad,0);
		if (1==result)
		{
			//转化成unicode
			string_conv.multibyte_to_widechar(culture_pc_text_ad->szFilePath,ad_path,sizeof(ad_path));

			//打开文件
			ad_result = ad_file.open_file((const TCHAR *)ad_path,FILE_READ);
			if (ad_result)
			{
				ad_result = ad_file.read_file(text_buffer,sizeof(text_buffer),&read_size);
				if (ad_result)
				{
					//转化成unicode
					ad_result = string_conv.multibyte_to_widechar(text_buffer,text,sizeof(text));
					if (ad_result)
					{
						//显示文字到flash上
						//记录欢迎词
						memset(m_msg_welcome,0x0,sizeof(m_msg_welcome));
						_tcscpy(m_msg_welcome,text);
						//得到滚动次数
						m_msg_welcome_scroll_count = 1;
					}
				}
			}
			//记录发送给前置机的信息
			set_precomputer_send_info(PC_TEXT_TYPE);
			return culture_pc_text_ad->nSwitch_time;
		}
	}
	catch (...)
	{

	}
	return 30;
}

int Cflashktv10Wnd::timer_show_tv_text(void)
{
	try
	{
		string_conversion string_conv;
		TCHAR ad_path[256];
		file ad_file;
		bool ad_result=false;
		char text_buffer[512];
		DWORD read_size=0;
		TCHAR text[256];

		memset(text_buffer,0x0,sizeof(text_buffer));
		memset(ad_path,0x0,sizeof(ad_path));
		memset(text,0x0,sizeof(text));

		//把发送给前置机的信息拷贝到发送结构体中
		copy_precomputer_send_info(TV_TEXT_TYPE);

		long result = get_ADItem_culture(DISPLAY_DEVICE_TV,AD_TYPE_CAPTION,&culture_tv_text_ad,0);
		if (1==result)
		{
			//转化成unicode
			ad_result = string_conv.multibyte_to_widechar(culture_tv_text_ad->szFilePath,ad_path,sizeof(ad_path));

			//打开文件
			ad_result = ad_file.open_file((const TCHAR *)ad_path,FILE_READ);
			if (ad_result)
			{
				ad_result = ad_file.read_file(text_buffer,sizeof(text_buffer),&read_size);
				if (ad_result)
				{
					//转化成unicode
					ad_result = string_conv.multibyte_to_widechar(text_buffer,text,sizeof(text));
					if (ad_result)
					{
						//显示文字到电视上
						ad_result = play_osd_text(text,OSD_RIGHT_TO_LEFT,1);
					}
				}
			}
			//记录发送给前置机的信息
			set_precomputer_send_info(TV_TEXT_TYPE);
			return culture_tv_text_ad->nSwitch_time;
		}
	}
	catch (...)
	{

	}
	return 30;
}

int Cflashktv10Wnd::timer_show_flash_background_picture(void)
{
	try
	{
		string_conversion string_conv;
		TCHAR ad_path[256];
		TCHAR *file_suffix=NULL;
		TCHAR request[512];
		TCHAR background_xml[512];

		memset(request,0x0,sizeof(request));
		memset(background_xml,0x0,sizeof(background_xml));
		memset(ad_path,0x0,sizeof(ad_path));

		//把发送给前置机的信息拷贝到发送结构体中
		copy_precomputer_send_info(PC_BK_TYPE);

		long result= get_ADItem_culture(DISPLAY_DEVICE_PC,AD_TYPE_BACK_MODE,&culture_pc_background_ad,0);
		if (1==result)
		{
			//转化成unicode
			string_conv.multibyte_to_widechar(culture_pc_background_ad->szFilePath,ad_path,sizeof(ad_path));

			//判断图片类型，只支持jpg
			file_suffix = _tcsrchr(ad_path,'.');
			if (0==_tcsicmp(file_suffix,L".jpg"))
			{
				//判断该文件是否存在
				if (PathFileExists(ad_path))
				{
					//更换flash背景
					swprintf(background_xml,L"<data><info bgurl=\"%s\" /></data>",ad_path);
					result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"changeColorBg",background_xml);
					if (result)
					{
						flash_player_call_function(request);
					}
				}
			}
			//记录发送给前置机的信息
			set_precomputer_send_info(PC_BK_TYPE);
			return culture_pc_background_ad->nSwitch_time;
		}
	}
	catch (...)
	{

	}
	return 30;
}

int Cflashktv10Wnd::timer_show_flash_logo(void)
{
	try
	{
		string_conversion string_conv;
		TCHAR ad_path[256];
		TCHAR *file_suffix=NULL;
		TCHAR request[512];
		TCHAR logo_xml[512];
		long result=0;

		memset(ad_path,0x0,sizeof(ad_path));
		memset(request,0x0,sizeof(request));
		memset(logo_xml,0x0,sizeof(logo_xml));

		if (m_flash_show_logo)
		{
			result= get_ADItem_culture(DISPLAY_DEVICE_PC,AD_TYPE_LOGO,&culture_pc_logo_ad,0);
			if (1==result)
			{
				//转化成unicode
				string_conv.multibyte_to_widechar(culture_pc_logo_ad->szFilePath,ad_path,sizeof(ad_path));

				//判断图片类型，只支持jpg
				file_suffix = _tcsrchr(ad_path,'.');
				if (0==_tcsicmp(file_suffix,L".jpg"))
				{
					//判断该文件是否存在
					if (PathFileExists(ad_path))
					{
						//显示logo
						swprintf(logo_xml,L"<data><info logo=\"%s\" /></data>",ad_path);
						result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"changeColorBg",logo_xml);
						if (result)
						{
							flash_player_call_function(request);
						}
					}
				}
				//记录发送给前置机的信息
				set_precomputer_send_info(PC_LOGO_TYPE);
			}
			m_flash_show_logo = false;
			return culture_pc_logo_ad->nDisp_time;
		}
		else
		{
			swprintf(logo_xml,L"<data><info logo=\"\" /></data>");
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"changeColorBg",logo_xml);
			if (result)
			{
				flash_player_call_function(request);
			}
			//把发送给前置机的信息拷贝到发送结构体中
			copy_precomputer_send_info(PC_LOGO_TYPE);
			m_flash_show_logo = true;
			return culture_pc_logo_ad->nSwitch_time;
		}
	}
	catch (...)
	{

	}
	return 30;
}

int Cflashktv10Wnd::timer_show_tv_logo(void)
{
	try
	{
		string_conversion string_conv;
		TCHAR ad_path[256];
		TCHAR *file_suffix=NULL;
		long result=0;

		memset(ad_path,0x0,sizeof(ad_path));

		if(m_tv_show_ad_logo)
		{
			result = get_ADItem_culture(DISPLAY_DEVICE_TV,AD_TYPE_LOGO,&culture_tv_logo_ad,0);
			if (1==result)
			{
				//转化成unicode
				string_conv.multibyte_to_widechar(culture_tv_logo_ad->szFilePath,ad_path,sizeof(ad_path));

				//判断图片类型，只支持8位索引的256色位图
				file_suffix = _tcsrchr(ad_path,'.');
				if (0==_tcsicmp(file_suffix,L".bmp"))
				{
					m_player_manager.play_ad_logo_osd(ad_path,nLayerADLogo);
				}
				//记录发送给前置机的信息
				set_precomputer_send_info(TV_LOGO_TYPE);
			}
			m_tv_show_ad_logo = false;
			return culture_tv_logo_ad->nDisp_time;
		}
		else
		{
			m_player_manager.stop_ad_logo_osd(nLayerADLogo);
			//把发送给前置机的信息拷贝到发送结构体中
			copy_precomputer_send_info(TV_LOGO_TYPE);
			m_tv_show_ad_logo = true;
			return culture_tv_logo_ad->nSwitch_time;
		}

	}
	catch (...)
	{

	}
	return 30;
}

void Cflashktv10Wnd::timer_show_pictrue_screen_saver(void)
{
	try
	{
		long ad_result=0;
		bool result=false;
		string_conversion string_conv;
		TCHAR screen_saver_path[256];
		int time_elapse=0;
		int switch_ad_screen_saver_time=0;

		memset(screen_saver_path,0x0,sizeof(screen_saver_path));

		if(m_show_screen_saver_state)
		{
			if (m_show_ad_screen_saver&&culture_screen_saver_ad)
			{
				//如果是广告屏保，到时间要切换屏保
				switch_ad_screen_saver_time = (int)(m_switch_screen_saver_timer.last_time());
				if (switch_ad_screen_saver_time>=(culture_screen_saver_ad->nSwitch_time))
				{
					//把发送给前置机的信息拷贝到发送结构体中
					copy_precomputer_send_info(SCREEN_SAVER_TYPE);
					//得到是否有可以播放的广告
					ad_result = get_ADItem_culture(DISPLAY_DEVICE_PC,AD_TYPE_SAFE_MODE,&culture_screen_saver_ad,0);
					if (1==ad_result)
					{
						//文化部的广告
						result = string_conv.multibyte_to_widechar(culture_screen_saver_ad->szFilePath,screen_saver_path,sizeof(screen_saver_path));
						if (result)
						{
							m_screen_saver_window.set_ad_screen_saver_path(screen_saver_path);
							//记录发送给前置机的信息
							set_precomputer_send_info(SCREEN_SAVER_TYPE);
						}
					}
					m_switch_screen_saver_timer.start();
				}
			}
			return;
		}

		time_elapse = (int)(m_start_screen_saver_timer.last_time());
		if (time_elapse>m_start_screen_saver_time)
		{
			//隐藏手写
			if (m_handwriting_window_exist && m_show_handwriting_window)
			{
				m_handwriting_window.ShowWindow(SW_HIDE);
			}
			//启动屏保
			if (culture_screen_saver_ad)
			{
				ad_result= get_ADItem_culture(DISPLAY_DEVICE_PC,AD_TYPE_SAFE_MODE,&culture_screen_saver_ad,0);
				if (1==ad_result)
				{
					//文化部的广告
					result = string_conv.multibyte_to_widechar(culture_screen_saver_ad->szFilePath,screen_saver_path,sizeof(screen_saver_path));
					if (result)
					{
						m_screen_saver_window.set_ad_screen_saver_path(screen_saver_path);
						m_switch_screen_saver_timer.start();
						m_show_ad_screen_saver = true;
						//记录发送给前置机的信息
						set_precomputer_send_info(SCREEN_SAVER_TYPE);
					}
					else
					{
						m_show_ad_screen_saver = false;
					}
				}
				else
				{
					m_show_ad_screen_saver = false;
				}
			}
			else
			{
				m_show_ad_screen_saver = false;
			}
			//显示屏保
			m_screen_saver_window.show_screen_saver();
			m_screen_saver_window.BringWindowToTop();
			m_show_screen_saver_state = true;
		}
	}
	catch (...)
	{
	}
	return;
}

void Cflashktv10Wnd::timer_show_video_screen_saver(void)
{
	try
	{
		int time_elapse=0;

		if (m_show_screen_saver_state)
		{
			//屏保已经启动，所以就不在启动
			return;
		}
		time_elapse = (int)(m_start_screen_saver_timer.last_time());
		if (time_elapse>m_start_screen_saver_time)
		{
			if (VIDEO_TYPE_PREVIEW_SONG==pc_play_video_type)
			{
				//重新计时
				m_start_screen_saver_timer.start();
				return;
			}
			//显示视频屏保
			show_video_screen_saver();
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::show_video_screen_saver(void)
{
	try
	{
		//隐藏手写
		if (m_handwriting_window_exist && m_show_handwriting_window)
		{
			m_handwriting_window.ShowWindow(SW_HIDE);
		}

		if (m_screen_show_window_exist && (VIDEO_TYPE_SONG==pc_play_video_type))
		{
#ifdef SICHUAN_M
			m_screen_show_window.MoveWindow(0,0,m_first_display_width - m_msqure_width,m_first_display_height);
			m_screen_msquare_window.MoveWindow(m_first_display_width - m_msqure_width,0,m_msqure_width,m_first_display_height);
			m_screen_msquare_window.show_window(true);
#else
			m_screen_show_window.MoveWindow(0,0,m_first_display_width,m_first_display_height);
#endif

			if (SCREEN_TYPE_VERTICAL==m_interface_type)
			{
				m_sub_screen_show_window.MoveWindow(0,(m_first_display_height-m_first_display_width*10/16)/2,m_first_display_width,m_first_display_width*10/16);
			}
			//显示视频窗口
#ifdef SLAVE_NO_PLAY_VIDEO
			if (2==m_master_slave_control_flag)
			{
				m_screen_show_window.show_window(false);
			}
			else
			{
				m_screen_show_window.show_window(true);
			}
#else
			if (!m_show_screen_saver_state_activity)
				m_screen_show_window.show_window(true);
#endif
			m_player_manager.show_screen_video(true);
		}
		else if (m_lobby_live_window_exist && (VIDEO_TYPE_LOBBY_LIVE==pc_play_video_type))
		{
			m_lobby_live_window.MoveWindow(0,0,m_first_display_width,m_first_display_height,TRUE);
			m_lobby_live_window.show_window(true);
		}
		else if (m_tv_window_exist && (VIDEO_TYPE_TV==pc_play_video_type))
		{
			m_tv_window.MoveWindow(0,0,m_first_display_width,m_first_display_height,TRUE);
			m_tv_window.show_window(true);
		}
		else if (m_preview_window_exist && (VIDEO_TYPE_PREVIEW_SONG==pc_play_video_type))
		{
			m_preview_window.MoveWindow(0,0,m_first_display_width,m_first_display_height,TRUE);
			m_preview_window.show_window(true);
		}
		////必须先设置状态，然后更新播放面板的控制状态
		m_show_screen_saver_state = true;
		if (m_controlbar_flash_player_exist)
		{

#ifdef SICHUAN_M    //四川M平方
			//不显示控制面板
#else
			m_controlbar_flash_player.BringWindowToTop();
			//m_controlbar_flash_player.ShowWindow(SW_SHOW);
			m_controlbar_flash_player.ShowWindow(SW_HIDE);
			//更新播放面板的控制状态
			update_flash_control_button();
			send_light_button_state();
#endif
		}		
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::show_song_name(void)
{
	try
	{
		song_info song_information;
		bool result=false;
		TCHAR text[2048];
		TCHAR playing_song_id[128];
		TCHAR playing_song_name[256];
		TCHAR next_song_name[256];
		TCHAR song_name_xml[1024];
		TCHAR request[2048];
		TCHAR singer_id[256];
		enum PLAYER_PLAY_STATE player_state=BEGIN_STATE;
		int scroll_count=1;
		TCHAR song_lyric[1024];
		TCHAR send_data[2048];

		memset(text,0x0,sizeof(text));
		memset(playing_song_id,0x0,sizeof(playing_song_id));
		memset(playing_song_name,0x0,sizeof(playing_song_name));
		memset(next_song_name,0x0,sizeof(next_song_name));
		memset(song_name_xml,0x0,sizeof(song_name_xml));
		memset(request,0x0,sizeof(request));
		memset(song_lyric,0x0,sizeof(song_lyric));
		memset(singer_id,0x0,sizeof(singer_id));

		if(2==m_master_slave_control_flag)
		{
			//如果是被控机，不显示歌曲名字
			return false;
		}

		switch(tv_play_video_type)
		{
		case VIDEO_TYPE_SONG:      //歌曲
			{
				//得到目前播放器所处的状态
				player_state = m_video_play_manager.get_player_cur_state();
				switch(player_state)
				{
				case BEGIN_STATE:     //开始
				case END_STATE:       //结束
				case IDLESSE_STATE:   //空闲
					{
						//得到当前播放的歌曲 显示空闲歌曲的名字
						result = m_video_play_manager.get_playing_video(song_information);
						if (result)
						{
							song_information.get_song_id(playing_song_id);
							result = song_information.get_song_name(playing_song_name);
						}
						if ((!result)||(0==_tcscmp(playing_song_name,L"")))
						{
							_tcscpy(playing_song_name,g_all_language[74].c_str());
							_tcscpy(next_song_name,g_all_language[74].c_str());
							_tcscpy(text,g_all_language[74].c_str());
						}
						else
						{
							_tcscpy(next_song_name,g_all_language[74].c_str());
							swprintf(text,L"%s：%s",g_all_language[74].c_str(),playing_song_name);
						}

						song_information.get_singer_id1(singer_id);
					}
					break;
				case PLAY_DJ_STATE:  //DJ
					{
						_tcscpy(playing_song_name,L"DJ歌曲");
						_tcscpy(next_song_name,L"DJ歌曲");
						_tcscpy(text,L"正在播放DJ歌曲");
					}
					break;
				case TEST_SONG_STATE:  //测机状态
					{
						result = m_video_play_manager.get_test_song_name(playing_song_name,next_song_name);
						if (!result)
						{
							return false;
						}
						if ((!result)||(0==_tcscmp(playing_song_name,L"")))
						{
							return false;
						}

						swprintf(text,L"%s：%s    %s：%s",g_all_language[5].c_str(),playing_song_name,g_all_language[73].c_str(),next_song_name);
					}
					break;
				case PLAY_SONG_STATE: //播放用户点的歌
					{
						//得到当前播放的歌曲
						result = m_video_play_manager.get_playing_video(song_information);
						if (!result)
						{
							return false;
						}
						song_information.get_singer_id1(singer_id);
						song_information.get_song_id(playing_song_id);
						result = song_information.get_song_name(playing_song_name);
						if ((!result)||(0==_tcscmp(playing_song_name,L"")))
						{
							return false;
						}
						//得到下一首要播放的歌曲
						song_information.initialized_variables();
						result = m_video_play_manager.get_next_play_song(song_information);
						if (result)
						{
							//得到歌曲的名字
							result = song_information.get_song_name(next_song_name);
							if (result&&(0!=_tcscmp(next_song_name,L"")))
							{
								//显示歌词
								song_information.get_lyric(song_lyric);
							}
						}
						else
						{
							_tcscpy(next_song_name,g_all_language[75].c_str());
						}

						if (0==_tcscmp(song_lyric,L""))
						{
							swprintf(text,L"%s：%s    %s：%s",g_all_language[5].c_str(),playing_song_name,g_all_language[73].c_str(),next_song_name);
						}
						else
						{
							swprintf(text,L"%s：%s    %s：%s    %s",g_all_language[5].c_str(),playing_song_name,g_all_language[73].c_str(),next_song_name,song_lyric);
						}

#ifdef VICE_SCREEN_GUANGXI
						if (m_vice_screen_flash_player_exist)
						{
							swprintf(m_szvice_screen_msg, L"<data><info curr = \"%s\" next = \"%s\"/></data>", playing_song_name, next_song_name);
							m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"vice_screen_text", m_szvice_screen_msg);
							m_vice_screen_flash_player.CallFunction(request);
							memset(request,0x0,sizeof(request));
						}	
#endif // VICE_SCREEN_GUANGXI	
					}
					break;
				default:
					break;
				}
			}
			break;
		case VIDEO_TYPE_LOBBY_LIVE: //大厅直播
			{
				_tcscpy(playing_song_name,g_all_language[89].c_str());
				_tcscpy(next_song_name,L"");
				_tcscpy(text,g_all_language[90].c_str());
			}
			break;
		case VIDEO_TYPE_TV:        //电视
			{
				_tcscpy(playing_song_name,g_all_language[91].c_str());
				_tcscpy(next_song_name,L"");
				_tcscpy(text,g_all_language[92].c_str());
			}
			break;
		default:
			return 0;
		}

		//向微博发送歌曲
		if (m_weibo_display_number)
		{
			if (2 == m_weibo_version_number)
			{
				send_song_name_data_to_weibo(playing_song_name,next_song_name);
			}
		}

		//播放滚动字幕
		if (!culture_tv_text_ad)
		{
			TCHAR ipad_login_tip_msg[256];
			TCHAR wechat_encode_tip[256];

			memset(ipad_login_tip_msg,0x0,sizeof(ipad_login_tip_msg));
			memset(wechat_encode_tip,0x0,sizeof(wechat_encode_tip));


			if (0!=_tcscmp(m_ipad_login_code,L"") && m_use_mobile_vod && (1 == m_show_tv_mobile_tip || 3 == m_show_tv_mobile_tip))
			{
				swprintf(ipad_login_tip_msg,L"    %s:%s",g_all_language[77].c_str(),m_ipad_login_code);
			}

			if (0!=_tcscmp(m_wechat_song_encode,L"") && (2 == m_show_tv_mobile_tip || 3 == m_show_tv_mobile_tip))
			{
				swprintf(wechat_encode_tip,L"    %s:%s",g_all_language[121].c_str(),m_wechat_song_encode);
			}

			//不播放文化部的广告时，才播放歌曲名字在电视上
			if ((CLOSE_ROOM_STATE==m_pc_state)||((m_tv_show_dog_tip_info>10) && (TEST_SONG_STATE!=player_state)))
			{
				memset(text,0x0,sizeof(text));
				m_tv_show_dog_tip_info = 0;
				if (0!=_tcscmp(m_dog_tip_info,L""))
				{
					swprintf(text,L"%s%s %s：%s    %s:%s",DogWelcomeTip,user_infor.Name,g_all_language[76].c_str(),m_dog_tip_info,g_all_language[88].c_str(),user_infor.Tel);
				}
				else
				{
					swprintf(text,L"%s%s    %s:%s",DogWelcomeTip,user_infor.Name,g_all_language[88].c_str(),user_infor.Tel);
				}
				if (0!=_tcscmp(ipad_login_tip_msg,L""))
				{
					//增加IPAD的验证码
					_tcscat(text,ipad_login_tip_msg);
				}

				//2012-12-4 增加视频邀请时，在电视上提示对方邀请信息
				if (m_pk_info_show_pc)
				{
					_tcscat(text,m_pk_info_tip_msg);
				}

#ifdef TV_SCROLL_WELCOME_WORD    //电视上显示欢迎词
				if (0!=_tcscmp(m_client_welcome,L""))
				{
					_tcscat(text,L"        ");
					_tcscat(text,m_client_welcome);
				}
#endif
				result = play_osd_text(text,OSD_RIGHT_TO_LEFT,scroll_count);
			}
			else
			{
				m_tv_show_dog_tip_info++;
				if (0!=_tcscmp(ipad_login_tip_msg,L""))
				{
					//增加IPAD的验证码
					_tcscat(text,ipad_login_tip_msg);
				}

				//2012-12-4 增加视频邀请时，在电视上提示对方邀请信息
				if (m_pk_info_show_pc)
				{
					_tcscat(text,m_pk_info_tip_msg);
				}

#ifdef TV_SCROLL_WELCOME_WORD    //电视上显示欢迎词
				if (0!=_tcscmp(m_client_welcome,L""))
				{
					_tcscat(text,L"        ");
					_tcscat(text,m_client_welcome);
				}
#endif
				result = play_osd_text(text,OSD_RIGHT_TO_LEFT,scroll_count);
			}
		}
		else if (m_tv_show_dog_tip_info && (TEST_SONG_STATE!=player_state))
		{
			//文化部广告
			memset(text,0x0,sizeof(text));
			if (0!=_tcscmp(m_dog_tip_info,L""))
			{
				swprintf(text,L"%s%s %s：%s",DogWelcomeTip,user_infor.Name,g_all_language[76].c_str(),m_dog_tip_info);
			}
			else
			{
				swprintf(text,L"%s%s",DogWelcomeTip,user_infor.Name);
			}
			result = play_osd_text(text,OSD_RIGHT_TO_LEFT,scroll_count);
		}
		if (1==m_master_slave_control_flag)
		{
			//主控机，发送电视滚动字幕给被控机
			memset(send_data,0x0,sizeof(send_data));

			//正播放和下一首信息
			swprintf(send_data,L"TVSCROLLTEXT%s",text);
			//发送给被控机
			send_master_slave_data(send_data,NULL);
		}

		if(0==_tcscmp(singer_id,L""))
		{
			_tcscpy(singer_id,L"default");
		}

		//验证歌星头像是否存在
		memset(song_name_xml, 0x00, sizeof(song_name_xml));
		swprintf(song_name_xml, L"%s\\singer_picture\\%s.jpg", m_work_path,singer_id);
		if (!PathFileExists(song_name_xml))
		{
			_tcscpy(singer_id,L"default");
		}

		memset(song_name_xml, 0x00, sizeof(song_name_xml));
		//显示到flash上
		swprintf(song_name_xml,L"<data><info playingid=\"%s\" playingsong=\"%s\" nextsong=\"%s\" singerurl=\"%s\\singer_picture\\%s.jpg\"/></data>",playing_song_id,playing_song_name,next_song_name,m_work_path,singer_id);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pubMainTitle",song_name_xml);
		if (result)
		{
			flash_player_call_function(request);
			if (1==m_master_slave_control_flag)
			{
				//主控机，发送播放歌曲信息给被控机
				memset(send_data,0x0,sizeof(send_data));

				//正播放和下一首信息
				swprintf(send_data,L"SONGNAMEINFO%s",request);
				//发送给被控机
				send_master_slave_data(send_data,NULL);
			}
		}


		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::get_select_song_number(TCHAR *song_ID)
{
	try
	{
		song_info select_song_info;
		int select_song_count=0;
		bool result=false;
		TCHAR song_number[128];
		std::wstring select_song_number;
		TCHAR temp_song_number[256];
		size_t len=0;

		if (NULL==song_ID)
		{
			return false;
		}

		// mod by yzg 2015-12-05
		//得到选择的歌曲数目		
		select_song_count = m_video_play_manager.get_select_song_count(0);
		if (select_song_count<=0)
		{
			//没有已选歌曲
			return false;
		}

		for (int i=0;i<select_song_count;i++)
		{
			memset(song_number,0x0,sizeof(song_number));
			memset(temp_song_number,0x0,sizeof(temp_song_number));

			//得到歌曲信息
			result = m_video_play_manager.get_select_song_information(select_song_info,i,false);
			if (!result)
			{
				continue;
			}
			//得到歌曲编号
			result = select_song_info.get_song_id(song_number);
			if (result && (0!=_tcscmp(song_number,L"")))
			{
				//保存歌曲编号
				swprintf(temp_song_number,L"\'%s\',",song_number);
				select_song_number += temp_song_number;
			}
		}
		//删除最后的逗号
		len = select_song_number.length();
		if (len<=0)
		{
			//没有得到已选歌曲编号
			return false;
		}
		//说明有已选歌曲
		select_song_number = select_song_number.substr(0,len-1);

		//返回选中歌曲编号
		_tcscpy(song_ID,select_song_number.c_str());

		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::save_select_song_number(TCHAR *path)
{
	try
	{
		file fp;
		TCHAR select_song_path[256];
		DWORD write_byte=0;
		TCHAR select_song_number[1024*50];
		bool result=false;
		unsigned int len=0;

		memset(select_song_path,0x0,sizeof(select_song_path));
		memset(select_song_number,0x0,sizeof(select_song_number));

		//删除服务器上的文件内容
		DeleteFile(path);

		//得到选中歌曲编号
		result = get_select_song_number(select_song_number);
		if (!result)
		{
			return;
		}
		//保存成文本
		result = fp.open_file(L"select_song.dat",FILE_WRITE);
		if (!result)
		{
			return;
		}
		//每个字符占两个字节
		len = _tcslen(select_song_number)*2;
		fp.write_file((LPVOID)select_song_number,len,&write_byte);
		fp.close_file();

		//上传到服务器
		result = CopyFile(L"select_song.dat",path,FALSE);
		if (!result)
		{
			CopyFile(L"select_song.dat",path,FALSE);
		}
		//删除本地文件
		DeleteFile(L"select_song.dat");

		return;
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::get_select_song_from_server(TCHAR *path)
{
	try
	{
		if (NULL==path)
		{
			return false;
		}
		bool result=false;
		file fp;
		int len=0;
		TCHAR *song_number=NULL;

		//拷贝已选歌曲
		result = CopyFile(path,L"select_song.dat",FALSE);
		if (!result)
		{
			//拷贝失败
			return false;
		}
		//拷贝成功，删除服务器上的文件
		DeleteFile(path);
		//读取已选歌曲编号
		result = fp.open_file(L"select_song.dat",FILE_READ);
		if (!result)
		{
			return false;
		}
		len = fp.get_file_size();
		if (len<=0)
		{
			fp.close_file();
			return false;
		}
		//unicode编号占两个字节
		song_number = new TCHAR[len/2+1];
		if (NULL==song_number)
		{
			fp.close_file();
			return false;
		}
		memset(song_number,0x0,len+2);
		result = fp.read_file(song_number,len);
		//关闭文件
		fp.close_file();

		//同步选择歌曲
		result = syn_select_song(true,song_number);

		//释放分配的空间
		if (song_number)
		{
			delete []song_number;
			song_number = NULL;
		}

		//删除文件
		DeleteFile(L"select_song.dat");

		return result;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::syn_select_song(bool clear_song,TCHAR *song_ID)
{
	try
	{
		std::wstring *select_result=NULL;
		int row=0;
		song_info select_song_info;
		query_condition temp_query_condition[1];
		bool result=false;
		TCHAR song_number_array[SELECT_SONG_MAX_COUNT][16];
		TCHAR *pre_pos=NULL;
		TCHAR *next_pos=NULL;
		int song_count=0;


		if ((NULL==song_ID)||(0==_tcscmp(song_ID,L"")))
		{
			return false;
		}
		//初始化
		for(int i=0;i<SELECT_SONG_MAX_COUNT;i++)
		{
			memset(song_number_array[i],0x0,sizeof(song_number_array[i]));
		}

		//置歌曲条件
		temp_query_condition[0].column_name = L"song_id";
		temp_query_condition[0].operation_symbols = L" in (";
		temp_query_condition[0].expression = song_ID;
		temp_query_condition[0].wildcard = L")";

		//分解歌曲编号
		pre_pos = _tcschr(song_ID,'\'');
		while(pre_pos)
		{
			pre_pos++;
			next_pos = _tcschr(pre_pos,'\'');
			if (NULL==next_pos)
			{
				break;
			}
			_tcsncpy(song_number_array[song_count],pre_pos,next_pos-pre_pos);
			song_count++;
			pre_pos = _tcschr(next_pos,',');
			if (NULL==pre_pos)
			{
				break;
			}
			pre_pos++;
		}

		//选择歌曲
		select_result = new std::wstring[SELECT_SONG_MAX_COUNT*song_select_expr.result_column_nums];
		if (NULL==select_result)
		{
			return false;
		}
		row = m_db_query.query_db_get_table_data(select_result,song_select_expr.result_column_expr.c_str(),temp_query_condition,1,SELECT_SONG_MAX_COUNT*song_select_expr.result_column_nums,SELECT_SONG_MAX_COUNT,0);
		if (row<=0)
		{
			if (select_result)
			{
				delete []select_result;
				select_result = NULL;
			}
			return false;
		}
		//整理选择的歌曲
		result = m_query_song_manager.set_test_or_select_song_list(select_result,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums,false);
		if (!result)
		{
			if (select_result)
			{
				delete []select_result;
				select_result = NULL;
			}
			return false;
		}
		if (select_result)
		{
			delete []select_result;
			select_result = NULL;
		}
		if (row<song_count)
		{
			//选择的歌曲数，少于发送过来的歌曲数，说明有电影，查询
			select_result = new std::wstring[SELECT_SONG_MAX_COUNT*movie_select_expr.result_column_nums];
			if (NULL==select_result)
			{
				return false;
			}
			//置歌曲条件
			temp_query_condition[0].column_name = L"id";
			temp_query_condition[0].operation_symbols = L" in (";
			temp_query_condition[0].expression = song_ID;
			temp_query_condition[0].wildcard = L")";
			row = m_db_query.query_db_get_table_data(select_result,movie_select_expr.result_column_expr.c_str(),temp_query_condition,1,SELECT_SONG_MAX_COUNT*movie_select_expr.result_column_nums,SELECT_SONG_MAX_COUNT,0);
			if (row<=0)
			{
				if (select_result)
				{
					delete []select_result;
					select_result = NULL;
				}
				return false;
			}
			//整理选择的歌曲
			result = m_query_song_manager.set_syn_movie_list(select_result,row*movie_select_expr.result_column_nums,movie_select_expr.result_column_nums);
			if (!result)
			{
				if (select_result)
				{
					delete []select_result;
					select_result = NULL;
				}
				return false;
			}
			if (select_result)
			{
				delete []select_result;
				select_result = NULL;
			}
		}
		if (clear_song)
		{
			//清空已选歌曲列表
			m_video_play_manager.clear_select_song(false);
		}
		//插入到已选列表中
		for(int i=0;i<song_count;i++)
		{
			result = m_query_song_manager.get_select_song_info(song_number_array[i],select_song_info);
			if (result)
			{
				// mod by yzg 2015-12-06
				//判断是云歌的话，增加[正在下载]标志
				TCHAR szLocalPath[256] = {0x00};
				result = select_song_info.get_local_path(szLocalPath);
				if (result && _tcscmp(szLocalPath, L"1") == 0)
				{
					select_song_info.set_down_update_song(1);
				}
				//mod end
				m_video_play_manager.add_select_song(select_song_info,false);
			}
			else
			{
				//从电影列表中选择
				result = m_query_song_manager.get_select_movie_info(song_number_array[i],select_song_info);
				if (result)
				{
					m_video_play_manager.add_select_song(select_song_info,false);
				}
			}
		}
		//更新选择的歌曲数目
		result = update_select_song_count();
		//设置播放状态
		m_video_play_manager.set_player_cur_state(PLAY_SONG_STATE);
		m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);

		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::flash_message_call_song_pinyin(select_expr &table_select_expr,const TCHAR *args)
{
	try
	{
		int assic_code=0;
		TCHAR temp_args[2];
		int len=0;
		bool result=false;
		std::wstring last_query_conditon;  //记录上次查询的条件

		swscanf(args,L"%d",&assic_code);

		if ((assic_code>=65)&&(assic_code<=90))
		{
			//26个字母
			temp_args[0]=assic_code;
			temp_args[1]='\0';
			//赋值
			last_query_conditon = song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression;

			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += temp_args;
			if (song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
		}
		else if (91==assic_code)
		{
			//回删
			len = (int)song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length();
			if (len<=0)
			{
				//没有选择就不用查询了
				return;
			}
			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.substr(0,len-1);
		}
		else if (92==assic_code)
		{
			//清空
			//len = (int)song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length();
			//if (len<=0)
			//{
			//没有选择就不用查询了
			//return;
			//}
			//song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);

			int page_index = m_flash_manage.get_last_page_index();
			if (page_index == page_sb_free_pk || page_index == page_sb_ranking_polite)
			{
				flash_message_call_song_sort_song();
				return;
			}
		}
		else 
		{
			last_query_conditon = song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression;

			switch(assic_code)
			{
			case 35:  //#
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"#";
				}
				break;
			case 42:  //*
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"*";
				}
				break;
			case 45:  //-
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"-";
				}
				break;
			case 95:  //_
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"_";
				}
				break;
			case 96:  //'
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"''";
				}
				break;
			case 44:  //,
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L",";
				}
				break;
			case 47:  // /
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"//";
				}
				break;
			case 92:  //  
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"/\\";
				}
				break;
			case 63:  //?
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"?";
				}
				break;
			case 61:  //=
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"/=";
				}
				break;
			case 37:  //%
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"/%";
				}
				break;
			case 38:  //&
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"/&";
				}
				break;
			case 46:  //.
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L"/.";
				}
				break;
			case 32:  //空格
				{
					song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += L" ";
				}
				break;
			default:
				return;
			}
		} 

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(song_query_condition,SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX,L"spell_first_letter_abbreviation",L"z",true);
		//查询数据库和显示结果到flash界面上
		bool ret  = song_query_show_data(table_select_expr);
		if (!ret)
		{
			//改为上一次的结果			
			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = last_query_conditon;
			change_query_mode(song_query_condition,SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX,L"spell_first_letter_abbreviation",L"z",true);
			ret  = song_query_show_data(table_select_expr);
		}

		show_letter_window(song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str());

		//发送检索条件
		send_query_condition_text_to_flash();

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_song_query(select_expr &table_select_expr,const TCHAR *args,SONG_LANGUAGE query_language)
{
	try
	{
		int len=0;
		bool result=false;
		int suffix=0;

		if (NULL==args)
		{
			return;
		}

		if (SONG_LANGUAGE_ZHUYIN==query_language)
		{
			suffix = SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX;
		}
		else if (SONG_LANGUAGE_MONGOLIA==query_language)
		{
			suffix = SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX;
		}
		else
		{
			return;
		}

		if (0==_tcscmp(args,L"91"))
		{
			//回删
			len = (int)song_query_condition[suffix].expression.length();
			if (len<=0)
			{
				//没有选择就不用查询了
				return;
			}
			song_query_condition[suffix].expression = song_query_condition[suffix].expression.substr(0,len-1);
		}
		else if (0==_tcscmp(args,L"92"))
		{
			//清空
			//len = (int)song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.length();
			//if (len<=0)
			//{
			//没有选择就不用查询了
			//	return;
			//}
			//song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			//37个注音
			song_query_condition[suffix].expression += args;
			if (song_query_condition[suffix].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[suffix].expression.clear();
			}
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(song_query_condition,SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX,L"spell_first_letter_abbreviation",m_max_unicode_char,true);

		//查询数据库和显示结果到flash界面上
		int ret  = song_query_two_show_data(table_select_expr);
		if (1==ret)
		{
			//查询成功  
			show_query_letter(song_query_condition[suffix].expression.c_str(),query_language);
		}
		else
		{
			//查询失败
			show_query_letter(L"",query_language);
		}
		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_song_japanese(select_expr &table_select_expr,const TCHAR *args)
{
	try
	{
		int suffix_number=0;
		size_t len=0;
		bool result=false;
		TCHAR condition[1024];
		std::wstring japanese_stroke[45]={L"ち",L"こ",L"そ",L"し",L"い",L"は",L"き",L"く",L"に",L"ま",L"の",L"り",L"も",L"み",L"ら",L"せ",L"た",L"す",L"と",L"か",L"な",L"ひ",L"て",L"さ",L"ん",L"つ",L"ぬ",L"ふ",L"あ",L"う",L"え",L"お",L"や",L"ゆ",L"よ",L"を",L"ほ",L"へ",L"れ",L"け",L"む",L"ね",L"る",L"め",L"ろ"};
		std::wstring enlish_stroke[45]={L"A",L"B",L"C",L"D",L"E",L"F",L"G",L"H",L"I",L"J",L"K",L"L",L"M",L"N",L"O",L"P",L"Q",L"R",L"S",L"T",L"U",L"V",L"W",L"X",L"Y",L"Z",L"1",L"2",L"3",L"4",L"5",L"6",L"7",L"8",L"9",L"0",L"",L"",L"",L"",L"",L"",L"",L"",L""};

		std::wstring last_query_conditon;  //记录上次查询的条件
		std::wstring last_japanese_enlish_stroke; //记录上次的值
		std::wstring last_japanese_strcke;

		memset(condition,0x0,sizeof(condition));

		swscanf(args,L"%d",&suffix_number);

		last_query_conditon = song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression;
		last_japanese_enlish_stroke = m_japanese_enlish_stroke;

		if ((suffix_number>=1)&&(suffix_number<=26))
		{
			//26个字母
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = condition;
			if (song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
		}
		else if ((suffix_number>=27)&&(suffix_number<=36))
		{
			//十个数字
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = condition;
			if (song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
		}
		else if ((suffix_number>=37)&&(suffix_number<=45))
		{
			//只是日文偏旁
			m_japanese_enlish_stroke.clear();
			swprintf(condition,L"%s",japanese_stroke[suffix_number-1].c_str());

			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = condition;
			if (song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
		}
		else if (91==suffix_number)
		{
			//回删
			len = (int)m_japanese_enlish_stroke.length();
			if (len<=0)
			{
				return;
			}
			else if (1==len)
			{
				m_japanese_enlish_stroke.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
			else
			{
				m_japanese_enlish_stroke = m_japanese_enlish_stroke.substr(0,len-1);
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = m_japanese_enlish_stroke;

			}
		}
		else if (92==suffix_number)
		{
			//清空
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else 
		{
			return;
		}

		//查询数据库和显示结果到flash界面上
		int ret = song_query_two_show_data(table_select_expr);
		if (1==ret)
		{
			//查询成功
			/*	len = m_japanese_enlish_stroke.length();
			if ((len<=1)&&(suffix_number<=45))
			{
			show_letter_window(japanese_stroke[suffix_number-1].c_str());
			}
			else
			{
			show_letter_window(m_japanese_enlish_stroke.c_str());
			}*/
			last_japanese_strcke = japanese_stroke[suffix_number-1].c_str();
		}
		else
		{
			//查询失败
			//show_letter_window(L"");
			m_japanese_enlish_stroke = last_japanese_enlish_stroke;
			last_japanese_strcke = L"";
			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = last_query_conditon;
			song_query_two_show_data(table_select_expr);
		}
		//成功，失败都显示，
		len = m_japanese_enlish_stroke.length();
		if ((len<=1)&&(suffix_number<=45))
		{
			//show_letter_window(japanese_stroke[suffix_number-1].c_str());
			show_letter_window(last_japanese_strcke.c_str());
		}
		else
		{
			show_letter_window(m_japanese_enlish_stroke.c_str());
		}

		//发送检索条件
		send_query_condition_text_to_flash();

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_singer_japanese(const TCHAR *args)
{
	try
	{
		int suffix_number=0;
		size_t len=0;
		bool result=false;
		TCHAR condition[1024];
		std::wstring japanese_stroke[45]={L"ち",L"こ",L"そ",L"し",L"い",L"は",L"き",L"く",L"に",L"ま",L"の",L"り",L"も",L"み",L"ら",L"せ",L"た",L"す",L"と",L"か",L"な",L"ひ",L"て",L"さ",L"ん",L"つ",L"ぬ",L"ふ",L"あ",L"う",L"え",L"お",L"や",L"ゆ",L"よ",L"を",L"ほ",L"へ",L"れ",L"け",L"む",L"ね",L"る",L"め",L"ろ"};
		std::wstring enlish_stroke[45]={L"A",L"B",L"C",L"D",L"E",L"F",L"G",L"H",L"I",L"J",L"K",L"L",L"M",L"N",L"O",L"P",L"Q",L"R",L"S",L"T",L"U",L"V",L"W",L"X",L"Y",L"Z",L"1",L"2",L"3",L"4",L"5",L"6",L"7",L"8",L"9",L"0",L"",L"",L"",L"",L"",L"",L"",L"",L""};
		std::wstring last_query_condition;
		std::wstring last_japanese_enlish_stroke;

		memset(condition,0x0,sizeof(condition));

		swscanf(args,L"%d",&suffix_number);

		last_query_condition = singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression;
		last_japanese_enlish_stroke = m_japanese_enlish_stroke;

		if ((suffix_number>=1)&&(suffix_number<=26))
		{
			//26个字母
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = condition;
			if (singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
			}
		}
		else if ((suffix_number>=27)&&(suffix_number<=36))
		{
			//十个数字
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = condition;
			if (singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
			}
		}
		else if ((suffix_number>=37)&&(suffix_number<=45))
		{
			//只是日文偏旁
			m_japanese_enlish_stroke.clear();
			swprintf(condition,L"%s",japanese_stroke[suffix_number-1].c_str());

			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = condition;
			if (singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
			}
		}
		else if (91==suffix_number)
		{
			//回删
			len = (int)m_japanese_enlish_stroke.length();
			if (len<=0)
			{
				return;
			}
			else if (1==len)
			{
				m_japanese_enlish_stroke.clear();
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
			}
			else
			{
				m_japanese_enlish_stroke = m_japanese_enlish_stroke.substr(0,len-1);
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = m_japanese_enlish_stroke;

			}
		}
		else if (92==suffix_number)
		{
			//清空
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			return;
		}

		//查询数据库和显示结果到flash界面上
		int ret = singer_query_show_data();
		if (1==ret)
		{
			//查询成功
			/*len = m_japanese_enlish_stroke.length();
			if ((len<=1)&&(suffix_number<=45))
			{
			show_letter_window(japanese_stroke[suffix_number-1].c_str());
			}
			else
			{
			show_letter_window(m_japanese_enlish_stroke.c_str());
			}*/
		}
		else
		{
			//singer_query_show_data();
			//查询失败
			//show_letter_window(L"");
			m_japanese_enlish_stroke = last_japanese_enlish_stroke;
			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = last_query_condition;
			singer_query_show_data();
		}

		//查询成功
		len = m_japanese_enlish_stroke.length();
		if ((len<1)&&(suffix_number<=45))
		{
			show_letter_window(japanese_stroke[suffix_number-1].c_str());
		}
		else
		{
			show_letter_window(m_japanese_enlish_stroke.c_str());
		}

		return;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call_movie_pinyin(const TCHAR *args)
{
	try
	{
		int assic_code=0;
		TCHAR temp_args[2];
		int len=0;
		bool result=false;

		swscanf(args,L"%d",&assic_code);

		if ((assic_code>=65)&&(assic_code<=90))
		{
			//26个字母
			temp_args[0]=assic_code;
			temp_args[1]='\0';

			movie_query_condition[MOVIE_SFSA_SUFFIX].expression += temp_args;
			if (movie_query_condition[MOVIE_SFSA_SUFFIX].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
			}
		}
		else if (91==assic_code)
		{
			//回删
			len = (int)movie_query_condition[MOVIE_SFSA_SUFFIX].expression.length();
			if (len<=0)
			{
				//没有选择就不用查询了
				return;
			}
			movie_query_condition[MOVIE_SFSA_SUFFIX].expression = movie_query_condition[MOVIE_SFSA_SUFFIX].expression.substr(0,len-1);
		}
		else if (92==assic_code)
		{
			//清空
			//len = (int)song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length();
			//if (len<=0)
			//{
			//没有选择就不用查询了
			//	return;
			//}
			//song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			switch(assic_code)
			{
			case 35:  //#
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"#";
				}
				break;
			case 42:  //*
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"*";
				}
				break;
			case 45:  //-
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"-";
				}
				break;
			case 95:  //_
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"_";
				}
				break;
			case 96:  //'
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"''";
				}
				break;
			case 44:  //,
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L",";
				}
				break;
			case 47:  // /
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"//";
				}
				break;
			case 92:  //  
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"/\\";
				}
				break;
			case 63:  //?
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"?";
				}
				break;
			case 61:  //=
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"/=";
				}
				break;
			case 37:  //%
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"/%";
				}
				break;
			case 38:  //&
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"/&";
				}
				break;
			case 46:  //.
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L"/.";
				}
				break;
			case 32:  //空格
				{
					movie_query_condition[MOVIE_SFSA_SUFFIX].expression += L" ";
				}
				break;
			default:
				return;
			}
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(movie_query_condition,MOVIE_SFSA_SUFFIX,L"spell_first_letter_abbreviation",L"z",true);

		//查询数据库和显示结果到flash界面上
		m_film_manager.m_npage_index=0;
		result  = movie_query_show_data();
		if (result)
		{
			//查询成功
			show_letter_window(movie_query_condition[MOVIE_SFSA_SUFFIX].expression.c_str());
		}
		else
		{
			movie_query_condition[MOVIE_SFSA_SUFFIX].expression = L"";
			movie_query_show_data();
			//查询失败
			show_letter_window(L"");
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_movie_japanese(const TCHAR *args)
{
	try
	{
		int suffix_number=0;
		size_t len=0;
		bool result=false;
		TCHAR condition[1024];
		std::wstring japanese_stroke[45]={L"ち",L"こ",L"そ",L"し",L"い",L"は",L"き",L"く",L"に",L"ま",L"の",L"り",L"も",L"み",L"ら",L"せ",L"た",L"す",L"と",L"か",L"な",L"ひ",L"て",L"さ",L"ん",L"つ",L"ぬ",L"ふ",L"あ",L"う",L"え",L"お",L"や",L"ゆ",L"よ",L"を",L"ほ",L"へ",L"れ",L"け",L"む",L"ね",L"る",L"め",L"ろ"};
		std::wstring enlish_stroke[45]={L"A",L"B",L"C",L"D",L"E",L"F",L"G",L"H",L"I",L"J",L"K",L"L",L"M",L"N",L"O",L"P",L"Q",L"R",L"S",L"T",L"U",L"V",L"W",L"X",L"Y",L"Z",L"1",L"2",L"3",L"4",L"5",L"6",L"7",L"8",L"9",L"0",L"",L"",L"",L"",L"",L"",L"",L"",L""};

		memset(condition,0x0,sizeof(condition));

		swscanf(args,L"%d",&suffix_number);

		if ((suffix_number>=1)&&(suffix_number<=26))
		{
			//26个字母
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),movie_query_condition[MOVIE_SFSA_SUFFIX].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			movie_query_condition[MOVIE_SFSA_SUFFIX].expression = condition;
			if (movie_query_condition[MOVIE_SFSA_SUFFIX].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
			}
		}
		else if ((suffix_number>=27)&&(suffix_number<=36))
		{
			//十个数字
			if (m_japanese_enlish_stroke.empty())
			{
				//检索日语和英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				swprintf(condition,L"%s\" or %s like \"%s",japanese_stroke[suffix_number-1].c_str(),movie_query_condition[MOVIE_SFSA_SUFFIX].column_name.c_str(),m_japanese_enlish_stroke.c_str());
			}
			else
			{
				//只检索英语
				m_japanese_enlish_stroke += enlish_stroke[suffix_number-1];
				_tcscpy(condition,m_japanese_enlish_stroke.c_str());
			}

			movie_query_condition[MOVIE_SFSA_SUFFIX].expression = condition;
			if (movie_query_condition[MOVIE_SFSA_SUFFIX].expression.length()>64)
			{
				//输入的大于32个字符，就自动清空
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
			}
		}
		else if ((suffix_number>=37)&&(suffix_number<=45))
		{
			//只是日文偏旁
			m_japanese_enlish_stroke.clear();
			swprintf(condition,L"%s",japanese_stroke[suffix_number-1].c_str());

			movie_query_condition[MOVIE_SFSA_SUFFIX].expression = condition;
			if (movie_query_condition[MOVIE_SFSA_SUFFIX].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
			}
		}
		else if (91==suffix_number)
		{
			//回删
			len = (int)m_japanese_enlish_stroke.length();
			if (len<=0)
			{
				return;
			}
			else if (1==len)
			{
				m_japanese_enlish_stroke.clear();
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
			}
			else
			{
				m_japanese_enlish_stroke = m_japanese_enlish_stroke.substr(len-1);
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression = m_japanese_enlish_stroke;

			}
		}
		else if (92==suffix_number)
		{
			//清空
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			return;
		}

		//查询数据库和显示结果到flash界面上
		int ret = movie_query_show_data();
		if (1==ret)
		{
			//查询成功
			len = m_japanese_enlish_stroke.length();
			if ((len<=1)&&(suffix_number<=45))
			{
				show_letter_window(japanese_stroke[suffix_number-1].c_str());
			}
			else
			{
				show_letter_window(m_japanese_enlish_stroke.c_str());
			}
		}
		else
		{
			movie_query_show_data();
			//查询失败
			show_letter_window(L"");
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_movie_query(const TCHAR *args,SONG_LANGUAGE query_language)
{
	try
	{
		int len=0;
		bool result=false;
		int suffix=0;

		if (NULL==args)
		{
			return;
		}

		if (SONG_LANGUAGE_ZHUYIN==query_language)
		{
			suffix = MOVIE_SFSA_SUFFIX;
		}
		else if (SONG_LANGUAGE_MONGOLIA==query_language)
		{
			suffix = MOVIE_SFLT_SUFFIX;
		}
		else
		{
			return;
		}

		if (0==_tcscmp(args,L"91"))
		{
			//回删
			len = (int)movie_query_condition[suffix].expression.length();
			if (len<=0)
			{
				//没有选择就不用查询了
				return;
			}
			movie_query_condition[suffix].expression = movie_query_condition[suffix].expression.substr(0,len-1);
		}
		else if (0==_tcscmp(args,L"92"))
		{
			//清空
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			//37个注音
			movie_query_condition[suffix].expression += args;
			if (movie_query_condition[suffix].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				movie_query_condition[suffix].expression.clear();
			}
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(movie_query_condition,MOVIE_SFSA_SUFFIX,L"spell_first_letter_abbreviation",m_max_unicode_char,true);

		//查询数据库和显示结果到flash界面上
		result  = movie_query_show_data();
		if (result)
		{
			//查询成功
			show_query_letter(movie_query_condition[suffix].expression.c_str(),query_language);
		}
		else
		{
			movie_query_show_data();
			//查询失败
			show_query_letter(L"",query_language);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_member_song_pinyin(const TCHAR *args)
{
	try
	{
		int assic_code=0;
		TCHAR temp_args[2];
		int len=0;
		bool result=false;

		swscanf(args,L"%d",&assic_code);

		if ((assic_code>=65)&&(assic_code<=90))
		{
			//26个字母
			temp_args[0]=assic_code;
			temp_args[1]='\0';

			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression += temp_args;
			if (song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			}
		}
		else if (91==assic_code)
		{
			//回删
			len = (int)song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.length();
			if (len<=0)
			{
				//没有选择就不用查询了
				return;
			}
			song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression = song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.substr(0,len-1);
		}
		else if (92==assic_code)
		{
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			return;
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(song_query_condition,SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX,L"spell_first_letter_abbreviation",L"z",true);

		//查询数据库和显示结果到flash界面上
		result  = member_song_query_show_data();
		if (result)
		{
			//查询成功
			show_letter_window(song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str());
		}
		else
		{
			member_song_query_show_data();
			//查询失败
			show_letter_window(L"");
		}
		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_singer_pinyin(const TCHAR *args)
{
	try
	{
		int assic_code=0;
		TCHAR temp_args[2];
		int len=0;
		bool result=false;
		std::wstring last_query_conditeion;  //最后一次检索条件

		swscanf(args,L"%d",&assic_code);

		last_query_conditeion = singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression;

		if ((assic_code>=65)&&(assic_code<=90))
		{
			//26个字母
			temp_args[0]=assic_code;
			temp_args[1]='\0';

			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += temp_args;
			if (singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.length()>=32)
			{
				//输入的大于32个字符，就自动清空
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
			}

		}
		else if (91==assic_code)
		{
			//回删
			len = (int)singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.length();
			if(len<=0)
			{
				//没有查询条件就不用重新查询了
				show_letter_window(L"");
				return;
			}
			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.substr(0,len-1);
		}
		else if (92==assic_code)
		{
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);

			//设置高亮按钮默认状态
			m_word_count_button_number = 0;
			m_song_version_button_number = 0;
		}
		else
		{
			switch(assic_code)
			{
			case 35:  //#
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"#";
				}
				break;
			case 42:  //*
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"*";
				}
				break;
			case 45:  //-
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"-";
				}
				break;
			case 95:  //_
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"_";
				}
				break;
			case 96:  //'
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"''";
				}
				break;
			case 44:  //,
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L",";
				}
				break;
			case 47:  // /
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"//";
				}
				break;
			case 92:  //  
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"/\\";
				}
				break;
			case 63:  //?
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"?";
				}
				break;
			case 61:  //=
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"/=";
				}
				break;
			case 37:  //%
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"/%";
				}
				break;
			case 38:  //&
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"/&";
				}
				break;
			case 46:  //.
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L"/.";
				}
				break;
			case 32:  //空格
				{
					singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression += L" ";
				}
				break;
			default:
				return;
			}
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(singer_query_condition,SPELL_FIRST_LETTER_ABBREVIATION,L"spell_first_letter_abbreviation",L"z",true);

		//查询数据库和显示结果到flash界面上
		result = singer_query_show_data();
		if (!result)
		{
			//记录最后一次查询的结果
			singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression = last_query_conditeion;
			change_query_mode(singer_query_condition,SPELL_FIRST_LETTER_ABBREVIATION,L"spell_first_letter_abbreviation",L"z",true);
			result = singer_query_show_data();
		}

		show_letter_window(singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.c_str());
		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_singer_query(const TCHAR *args,SONG_LANGUAGE query_language)
{
	try
	{
		int assic_code=0;
		int len=0;
		bool result=false;
		int suffix=0;

		if (NULL==args)
		{
			return;
		}

		if (SONG_LANGUAGE_ZHUYIN==query_language)
		{
			suffix = SPELL_FIRST_LETTER_ABBREVIATION;
		}
		else if (SONG_LANGUAGE_MONGOLIA==query_language)
		{
			suffix = SPELL_FIRST_LETTER_ABBREVIATION;
		}
		else
		{
			return;
		}

		if (0==_tcscmp(args,L"91"))
		{
			//回删
			len = (int)singer_query_condition[suffix].expression.length();
			if(len<=0)
			{
				//没有查询条件就不用重新查询了
				return;
			}
			singer_query_condition[suffix].expression = singer_query_condition[suffix].expression.substr(0,len-1);
		}
		else if (0==_tcscmp(args,L"92"))
		{
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			singer_query_condition[suffix].expression += args;
			if (singer_query_condition[suffix].expression.length()>32)
			{
				//输入的大于32个字符，就自动清空
				singer_query_condition[suffix].expression.clear();
			}
		}

		//2011-05-24 add  改变查询模式，启用索引
		change_query_mode(singer_query_condition,SPELL_FIRST_LETTER_ABBREVIATION,L"spell_first_letter_abbreviation",m_max_unicode_char,true);

		//查询数据库和显示结果到flash界面上
		result = singer_query_show_data();
		if (!result)
		{
			result = singer_query_show_data();
			//查询失败，清空查询条件
			show_query_letter(L"",query_language);
		}
		else
		{
			//成功
			show_query_letter(singer_query_condition[suffix].expression.c_str(),query_language);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

int Cflashktv10Wnd::song_query_two_show_data(select_expr &table_select_expr,int condition_number,query_condition *src_query_condition)
{
	bool result=false;

	//查询数据库和显示结果到flash界面上
	result = song_query_show_data(table_select_expr,false);

	if (!result)
	{
		if (src_query_condition)
		{
			song_query_condition[condition_number].column_name = src_query_condition->column_name;
			song_query_condition[condition_number].operation_symbols = src_query_condition->operation_symbols;
			song_query_condition[condition_number].expression = src_query_condition->expression;
			song_query_condition[condition_number].wildcard = src_query_condition->wildcard;
		}
		result = song_query_show_data(table_select_expr);
		if (result)
		{
			//第二次成功
			return 2;
		}
		else
		{
			//失败
			return 0;
		}
	}
	else
	{
		//第一次查询成功
		return 1;
	}
	//失败
	return 0;
}

void Cflashktv10Wnd::flash_message_call_language(const TCHAR *args)
{
	try
	{
		int language=0;
		bool result=false;
		int page_index=0;
		TCHAR request[1024];
		query_condition language_condition;       //语言条件
		int pre_button_number=0;

		memset(request,0x0,sizeof(request));

		//赋值语言查询条件
		swscanf(args,L"%d",&language);
		//记录当前的语言
		//m_query_panel_language = (SONG_LANGUAGE)language;
		//记录查询条件
		language_condition = song_query_condition[LANGUAGE_SUFFIX];
		pre_button_number = m_language_button_number;
		//一级查询，按照页面清空查询条件
		//clear_query_condition_by_page();

#ifdef DON_GUAN_K_PLUS
		//查询清空条件
		song_query_condition[SONG_THEME_SUFFIX].expression.clear();
#endif //DON_GUAN_K_PLUS

		//根据语言不同，赋值查询条件
		switch(language)
		{
		case SONG_LANGUAGE_CHINESE:	// 国语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"1";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 1;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		case SONG_LANGUAGE_YUE:	// 粤语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"2";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 2;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		case SONG_LANGUAGE_MINNAN:	// 闽南语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"3";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 3;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		case SONG_LANGUAGE_ENGLISH:	// 英语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"4";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 4;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		case SONG_LANGUAGE_JAPANESE:	// 日语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"6";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 5;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_JAPANESE);
			}
			break;
		case SONG_LANGUAGE_KOREAN:	// 韩语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"5";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
				m_language_button_number = 6;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_KOREAN);
			}
			break;
		case SONG_LANGUAGE_OTHERS:	//其他
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"not in (";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"\'1\',\'2\',\'3\',\'4\',\'5\',\'6\'";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L")";
				m_language_button_number = 7;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		case SONG_LANGUAGE_MONGOLIA:  //蒙古
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"9";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
			}
			break;
		case SONG_LANGUAGE_RUSSIAN:  //俄语
			{
				song_query_condition[LANGUAGE_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[LANGUAGE_SUFFIX].expression = L"10";
				song_query_condition[LANGUAGE_SUFFIX].wildcard = L"\'";
			}
			break;
#ifdef DON_GUAN_K_PLUS
		case SONG_SLOW_ROLL:  //慢摇
			{
				flash_message_call_theme(L"14");

				m_language_slow_dancer = true;

				m_language_button_number = 7;
				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);

				set_flash_button_state(L"query_language_button",m_language_button_number);
				//发送检索条件
				send_query_condition_text_to_flash();
				//清空显示的字幕
				show_letter_window(L"");
				//清空手写的字
				clear_handwriting_select_word();
				clear_handwriting_recognizer_word();
			}
			return;
#endif //DON_GUAN_K_PLUS
		case SONG_LANGUAGE_ALL:
		default:
			{
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				//clear_query_condition_by_page_and_init(false);
				m_language_button_number = 0;

				//设置键盘类型
				set_keyboard_type(KEYBOARD_TYPE_CHINESE);
			}
			break;
		}

		//根据页面查询歌曲
		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_top_song:  //排行列表
			{
				//查询数据库和显示结果到flash界面上
				int ret = song_query_two_show_data(top_song_select_expr,LANGUAGE_SUFFIX,&language_condition);
				if (1!=ret)
				{
					m_language_button_number = pre_button_number;
				}
			}
			break;
		case page_member_song:   //会员歌曲页面
			{
				result = member_song_query_show_data();
				if (!result)
				{
					//恢复查询条件
					song_query_condition[LANGUAGE_SUFFIX] = language_condition;
					m_language_button_number = pre_button_number;

					member_song_query_show_data();
				}
			}
			break;
		case page_title:        //歌名点歌
		case page_new_song:     //新歌页面
		case page_singer_song:  //歌星具体歌曲页面
		case page_language:     //语种点歌
		case page_write:		//手写点歌
		case page_hdmi:         //高清专区
		case page_movie_song:   //影视金曲
		case page_search_song:  //搜索歌曲 
		case page_voice_china:  //好声音
		case page_yunadd_song:
			{
				//查询数据库和显示结果到flash界面上
				//int ret = song_query_two_show_data(song_select_expr,LANGUAGE_SUFFIX,&language_condition);
				int ret = song_query_show_data(song_select_expr);
				if (1!=ret)
				{
					m_language_button_number = pre_button_number;
				}
			}
			break;
		default:
			break;
		}

		set_flash_button_state(L"query_language_button",m_language_button_number);
		//发送检索条件
		send_query_condition_text_to_flash();
		//清空显示的字幕
		show_letter_window(L"");
		//清空手写的字
		clear_handwriting_select_word();
		clear_handwriting_recognizer_word();

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_song_word_count(select_expr &table_select_expr,const TCHAR *args)
{
	try
	{
		int song_name_word_count=0;
		int result=0;

		swscanf(args,L"%d",&song_name_word_count);

		switch(song_name_word_count)
		{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"=";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = args;
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = song_name_word_count;
			}
			break;
		case 12:  //两字以下
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"2";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 13:  //三字以下
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"3";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 0;
			}
			break;
		case 14:  //四字以下
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"4";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 17:  //7字以上
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L">";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"7";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 6;
			}
			break;
		case 18:  //8字以上
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L">=";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"8";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 8;
			}
			break;
		case 19:  //9字以上
			{
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols = L">";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression = L"9";
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 0:  //全部
		default:
			{
				//按照页面清空查询条件并初始化
				clear_query_condition_by_page_and_init(false);
				m_word_count_button_number = 0;
			}
			break;
		}

		//查询数据库和显示结果到flash界面上
		result = song_query_two_show_data(table_select_expr);
		/*
		if (1!=result)
		{
		if (m_old_word_count_button_number != -1)
		{
		m_word_count_button_number = m_old_word_count_button_number;
		}else{
		m_word_count_button_number = 0;
		}			
		}else{
		if (m_old_word_count_button_number != m_word_count_button_number)
		{
		m_old_word_count_button_number = m_word_count_button_number;
		}
		}
		*/

		//设置按钮高亮状态
		set_flash_button_state(L"number_button",m_word_count_button_number);
		//发送检索条件
		send_query_condition_text_to_flash();

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_movie_word_count(const TCHAR *args)
{
	try
	{
		int song_name_word_count=0;
		bool result=false;

		swscanf(args,L"%d",&song_name_word_count);

		switch(song_name_word_count)
		{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L"=";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = args;
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = song_name_word_count-2;
			}
			break;
		case 12:  //两字以下
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"2";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 13:  //三字以下
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"3";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 0;
			}
			break;
		case 14:  //四字以下
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"4";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 17:  //7字以上
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L">";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"7";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 6;
			}
			break;
		case 18:  //8字以上
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L">=";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"8";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 8;
			}
			break;
		case 19:  //9字以上
			{
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].operation_symbols = L">";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression = L"9";
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 0:  //全部
		default:
			{
				//按照页面清空查询条件并初始化
				clear_query_condition_by_page_and_init(false);
				m_word_count_button_number = 0;
			}
			break;
		}

		//查询数据库和显示结果到flash界面上
		result = movie_query_show_data();
		if (!result)
		{
			m_word_count_button_number = 0;
			movie_query_show_data();
		}

		//设置按钮高亮状态
		set_flash_button_state(L"number_button",m_word_count_button_number);

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_singer_word_count(const TCHAR *args)
{
	try
	{
		int singer_word_count=0;
		bool result=false;

		swscanf(args,L"%d",&singer_word_count);

		switch(singer_word_count)
		{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			{
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"=";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].expression = args;
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 13:  //三字以下
			{
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].operation_symbols = L"<";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].expression = L"3";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 17:  //7字以上
			{
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].operation_symbols = L">";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].expression = L"7";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
			}
			break;
		case 18:  //8字以上
			{
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].operation_symbols = L">=";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].expression = L"8";
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].wildcard = L"";
				m_word_count_button_number = 8;
			}
			break;
		case 0:  //全部
		default:
			{
				//按照页面清空查询条件并初始化
				clear_query_condition_by_page_and_init(false);
			}
			break;
		}

		//查询数据库和显示结果到flash界面上
		result = singer_query_show_data();
		if (!result)
		{
			singer_query_show_data();
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::singer_query_show_data(void)
{
	try
	{
		TCHAR request[20480];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		int page_index=0;

		memset(request,0x0,sizeof(request));

		//设置排序模式
		set_query_sort_mode();


		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (page_singer==page_index)
		{
			//歌星点歌
			singer_query_condition[SINGER_INTRODUCTION_SUFFIX].expression = L"0";
		}
		else if (page_index==page_voice_china_singer)
		{
			//秀立方歌星
			singer_query_condition[SINGER_INTRODUCTION_SUFFIX].expression = L"2";
		}
		else
		{
			//场所歌星
			singer_query_condition[SINGER_INTRODUCTION_SUFFIX].expression = L"1";
		}
		//判断singer_id不能为空
		singer_query_condition[SINGER_ID_SUFFIX].expression = L"singer_id";

		//通过数据库查询
		result_set = new std::wstring[singer_select_expr.result_column_nums*SINGER_SCREEN_SHOW_PAGE_COUNT*singer_page_show_row_count];
		if (result_set)
		{
			//得到总行数和页数
			row = m_db_query.get_row_count(singer_select_expr.row_count_expr.c_str(),singer_query_condition,SINGER_CONDITION_NUMS,singer_page_show_row_count);
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();
			//显示行页信息
			show_row_and_page_count(L"true",row,page_count,cur_page_number);


			//重新开始计时
			//m_span_total_timer.start();

			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,singer_select_expr.result_column_nums,singer_select_expr.result_column_expr.c_str(),singer_query_condition,SINGER_CONDITION_NUMS,NULL,m_db_order_item,SINGER_SCREEN_SHOW_PAGE_COUNT,FIRST_PAGE_OPERATE,singer_page_show_row_count);
			if (row<=0)
			{
				delete []result_set;
				result_set=NULL;
				send_to_flash_empty_list(false);
				//显示没有符合查询条件的提示
				show_no_match_result_tip();
				//清空查询条件和初始化查询面板
				//clear_query_condition_by_page_and_init(true);

				return false;
			}


			//double last_time = m_span_total_timer.last_time();

			//初始化一下
			m_query_singer_manager.initialized_variables();
			result = m_query_singer_manager.set_singer_list(result_set,singer_select_expr.result_column_nums*SINGER_SCREEN_SHOW_PAGE_COUNT*singer_page_show_row_count,singer_select_expr.result_column_nums,page_count,cur_page_number);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}

			//注意释放空间
			delete []result_set;
			result_set = NULL;

			result = m_query_singer_manager.make_singer_list_xml(song_list_xml);
			if (!result)
			{
				return false;
			}

			result = m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"SingerPhotoList",song_list_xml.c_str(),true,page_index,0);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			//使用智能拼音
			use_smart_pinyin();

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::flash_message_call_select_recognize_word(const TCHAR *args)
{
	try
	{
#define LYRIC_SEARCH_MAX_COUNT  888

		int select_num=0;
		TCHAR word[16];
		int page_index=0;
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;
		size_t len=0;
		TCHAR song_id[LYRIC_SEARCH_MAX_COUNT*7];
		string_conversion string_conv;
		int search_song_count=0;
		std::wstring last_query_conditon;  //记录最后的查询条件

		memset(word,0x0,sizeof(word));
		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		memset(song_id,0x0,sizeof(song_id));

		swscanf(args,L"%d",&select_num);

		switch(select_num)
		{
		case 64:   //上一页
			{
				show_association_word(PRE_PAGE_OPERATE);
			}
			return;
		case 65:   //下一页
			{
				show_association_word(NEXT_PAGE_OPERATE);
			}
			return;
		case 68:   //重写
			{
				//清空手写区域
				m_handwriting_window.clear_ink_window();
				//清空识别的结果
				clear_handwriting_recognizer_word();
				for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
				{
					m_recognition_result[i].Empty();
				}
			}
			return;
		default:
			break;
		}

		//得到数组下标
		if ((select_num>=0) && (select_num<INK_RECOGNIZE_ALTERNATE_NUMS))
		{
			if (!m_recognition_result[select_num].IsEmpty())
			{
				_tcscpy(word,m_recognition_result[select_num].GetBuffer(0));
			}
			else
			{
				return;
			}
		}

		page_index = m_flash_manage.get_last_page_index();
#ifdef DON_GUAN_K_PLUS
		if (page_index == page_top_song && m_language_button_number == 7)
		{
			page_index = 1;
		}
#endif
		switch(page_index)
		{
		case page_lyric:   //歌词页面
			{
				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = (int)m_ink_song_lyric.length();
					if (len<=0)
					{
						//没有可以回删的歌曲
						break;
					}
					else if (len>0)
					{
						m_ink_song_lyric = m_ink_song_lyric.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
						//按照页面清空查询条件并初始化
						clear_query_condition_by_page_and_init(false);
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					len = (int)m_ink_song_lyric.length();
					if (len<=0)
					{
						//没有可以清空的字
						break;
					}
					//按照页面清空查询条件并初始化
					clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格
					m_ink_song_lyric += L" ";
					if (m_ink_song_lyric.length()>32)
					{
						m_ink_song_lyric.clear();
					}
				}
				else
				{
					//选择字,歌曲名字
					m_ink_song_lyric += word;
					if (m_ink_song_lyric.length()>32)
					{
						m_ink_song_lyric.clear();
						clear_handwriting_recognizer_word();
					}
				}

				if (0!=_tcscmp(m_ink_song_lyric.c_str(),L""))
				{
					//通过歌词查询歌曲的ID
					search_song_count = m_lyricSrarch.SearchSongCode((TCHAR *)m_ink_song_lyric.c_str(),song_id,sizeof(song_id)/sizeof(TCHAR));

					if (search_song_count>0)
					{						
						song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"in (";
						song_query_condition[SONG_ID_SUFFIX].expression = song_id;
						song_query_condition[SONG_ID_SUFFIX].wildcard=L")";
						swprintf(data,L"<data><info str=\"%s\"/></data>",m_ink_song_lyric.c_str());
					}
					else
					{
						//提示没有符合条件的结果
						show_no_match_result_tip();
						//清空条件
						song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"=\'";
						song_query_condition[SONG_ID_SUFFIX].expression.clear();
						song_query_condition[SONG_ID_SUFFIX].wildcard=L"\'";
						//清空手写显示
						m_ink_song_lyric.clear();
						//清空选择的字
						clear_handwriting_select_word();
						//清空手写的字
						clear_handwriting_recognizer_word();
						for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
						{
							m_recognition_result[i].Empty();
						}
					}
					//if (search_song_count>0)
					//{
					//	TCHAR *song_number = NULL;

					//	//得到unicode占用的字节数
					//	int byte_size = string_conv.get_byte_size_of_widechar(song_id);
					//	//分配空间
					//	song_number = new TCHAR[byte_size];
					//	if (song_number)
					//	{
					//		memset(song_number,0x0,byte_size*sizeof(TCHAR));
					//		string_conv.multibyte_to_widechar(song_id,song_number,byte_size);
					//		song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"in (";
					//		song_query_condition[SONG_ID_SUFFIX].expression = song_number;
					//		song_query_condition[SONG_ID_SUFFIX].wildcard=L")";
					//		swprintf(data,L"<data><info str=\"%s\"/></data>",m_ink_song_lyric.c_str());
					//		//释放空间
					//		delete []song_number;
					//		song_number = NULL;
					//	}
					//}
					//else
					//{
					//	//提示没有符合条件的结果
					//	show_no_match_result_tip();
					//	//清空条件
					//	song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"=\'";
					//	song_query_condition[SONG_ID_SUFFIX].expression.clear();
					//	song_query_condition[SONG_ID_SUFFIX].wildcard=L"\'";
					//	//清空手写显示
					//	m_ink_song_lyric.clear();
					//	//清空选择的字
					//	clear_handwriting_select_word();
					//	//清空手写的字
					//	clear_handwriting_recognizer_word();
					//	for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
					//	{
					//		m_recognition_result[i].Empty();
					//	}
					//}
				}

				//查询歌曲
				int ret = song_query_two_show_data(song_select_expr);
				if (1!=ret)
				{
					memset(data,0x0,sizeof(data));
				}
			}
			break;
		case page_singer:         //歌星照片
		case page_custom_singer:  //场所歌星
		case page_voice_china_singer:
			{
				//记录当前的查询条件
				last_query_conditon = singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression;

				if (0==_tcscmp(args,L"66")) //回删
				{
					len = singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以回删的
						break;
					}
					else if (len>0)
					{
						singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression = singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//len = singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.length();
					//if (len<=0)
					//{
					//没有可以清空的
					//	break;
					//}
					//清空
					//singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.clear();
					//clear_handwriting_recognizer_word();
					//按照页面清空查询条件并初始化
					clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格
					singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression += L" ";
					if (singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.length()>16)
					{
						singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.clear();
					}
				}
				else
				{
					singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression += word;
					if (singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.length()>16)
					{
						singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.clear();
					}
				}


				//2011-05-24 add  改变查询模式，启用索引
				change_query_mode(singer_query_condition,SINGER_TABLE_NAME_SUFFIX,L"singer_name",m_max_unicode_char,false);

				//查询数据库和显示结果到flash界面上
				result = singer_query_show_data();
				if (!result)
				{
					//singer_query_show_data();
					singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression = last_query_conditon;
					change_query_mode(singer_query_condition,SINGER_TABLE_NAME_SUFFIX,L"singer_name",m_max_unicode_char,false);
					result = singer_query_show_data();
				} 
				//显示手写的字
				swprintf(data,L"<data><info str=\"%s\"/></data>",singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.c_str());
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
			}
			break;
		case page_top_song:    //排行页面
			{
				last_query_conditon = song_query_condition[SONG_NAME_SUFFIX].expression;

				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = song_query_condition[SONG_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以回删的
						break;
					}
					else if (len>0)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression = song_query_condition[SONG_NAME_SUFFIX].expression.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//len = song_query_condition[SONG_NAME_SUFFIX].expression.length();
					//if (len<=0)
					//{
					//没有可以清空的
					//	break;
					//}
					//清空
					//song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					//clear_handwriting_recognizer_word();
					//按照页面清空查询条件并初始化
					clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{

					//选择字,空格
					song_query_condition[SONG_NAME_SUFFIX].expression += L" ";
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}
				else
				{
					//选择字歌曲名字
					song_query_condition[SONG_NAME_SUFFIX].expression += word;
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}

				//查询歌曲
				int ret = song_query_two_show_data(top_song_select_expr);
				if (1 != ret)
				{
					song_query_condition[SONG_NAME_SUFFIX].expression  = last_query_conditon;
					song_query_two_show_data(top_song_select_expr);
				}  

				swprintf(data,L"<data><info str=\"%s\"/></data>",song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
			}
			break;
		case page_movie:  //电影页面
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
			{
				last_query_conditon = song_query_condition[MOVIE_NAME_SUFFIX].expression;
				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = movie_query_condition[MOVIE_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以回删的
						break;
					}
					else if (len>0)
					{
						movie_query_condition[MOVIE_NAME_SUFFIX].expression = movie_query_condition[MOVIE_NAME_SUFFIX].expression.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//按照页面清空查询条件并初始化
					clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格 
					movie_query_condition[MOVIE_NAME_SUFFIX].expression += L" ";
					if (movie_query_condition[MOVIE_NAME_SUFFIX].expression.length()>32)
					{
						movie_query_condition[MOVIE_NAME_SUFFIX].expression.clear();
					}
				}
				else
				{
					//选择字
					movie_query_condition[MOVIE_NAME_SUFFIX].expression += word;
					if (movie_query_condition[MOVIE_NAME_SUFFIX].expression.length()>32)
					{
						movie_query_condition[MOVIE_NAME_SUFFIX].expression.clear();
					}
				}
				//2011-05-24 add  改变查询模式，启用索引
				change_query_mode(movie_query_condition,MOVIE_NAME_SUFFIX,L"name",m_max_unicode_char,false);

				//查询歌曲
				result = movie_query_show_data();
				if (result)
				{
					swprintf(data,L"<data><info str=\"%s\"/></data>",movie_query_condition[MOVIE_NAME_SUFFIX].expression.c_str());
				}
				else
				{
					song_query_condition[MOVIE_NAME_SUFFIX].expression = last_query_conditon;
					movie_query_show_data();
					_tcscpy(data,L"<data><info str=\"\"/></data>");

				}
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
			}
			break;
		case page_member_song:  //会员歌曲页面
			{
				last_query_conditon=song_query_condition[SONG_NAME_SUFFIX].expression;
				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = song_query_condition[SONG_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以回删的
						break;
					}
					else if (len>0)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression = song_query_condition[SONG_NAME_SUFFIX].expression.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//按照页面清空查询条件并初始化
					clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格 歌曲名字
					song_query_condition[SONG_NAME_SUFFIX].expression += L" ";
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}
				else
				{
					//歌曲名字
					song_query_condition[SONG_NAME_SUFFIX].expression += word;
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}

				//2011-05-24 add  改变查询模式，启用索引
				change_query_mode(song_query_condition,SONG_NAME_SUFFIX,L"song_name",m_max_unicode_char,false);

				//查询歌曲
				result = member_song_query_show_data();
				if (result)
				{
					swprintf(data,L"<data><info str=\"%s\"/></data>",song_query_condition[SONG_NAME_SUFFIX].expression.c_str());

				}
				else
				{
					song_query_condition[SONG_NAME_SUFFIX].expression = last_query_conditon;
					member_song_query_show_data();
					_tcscpy(data,L"<data><info str=\"\"/></data>");
				}
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
			}
			break;
		case page_proposal:   //电子调查
			{
				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = m_others_opinion.length();
					if (len<=0)
					{
						//没有可以回删的
						return;
					}
					else if (len>0)
					{
						m_others_opinion = m_others_opinion.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//按照页面清空查询条件并初始化
					m_others_opinion.clear();
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格 
					if (m_others_opinion.length()<70)
					{
						m_others_opinion += L" ";
					}
					else
					{
						return;
					}
				}
				else
				{
					//选择字
					if (m_others_opinion.length()<70)
					{
						m_others_opinion += word;
					}
					else
					{
						return;
					}
				}
				m_input_box_show_help[0] = false;
				flash_show_others_opinion(m_others_opinion.c_str(),true);
				//清空手写板
				m_handwriting_window.clear_ink_window();
			}
			return;
		case page_custom_song:
			{
				if (0==_tcscmp(args,L"66"))
				{
					//回删 
					len = m_custom_song[m_custom_input_fouce].length();
					if (len<=0)
					{
						//没有可以回删的
						return;
					}
					else if (len>0)
					{
						m_custom_song[m_custom_input_fouce] = m_custom_song[m_custom_input_fouce].substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					//按照页面清空查询条件并初始化
					m_custom_song[m_custom_input_fouce].clear();
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格  
					if (m_custom_song[m_custom_input_fouce].length()<70)
					{
						m_custom_song[m_custom_input_fouce] += L" ";
					}
					else
					{
						return;
					}
				}
				else
				{
					//选择字
					if (m_custom_song[m_custom_input_fouce].length()<70)
					{
						m_custom_song[m_custom_input_fouce] += word;
					}
					else
					{
						return;
					}
				} 

				flash_show_custom_song(m_custom_song[m_custom_input_fouce].c_str(),m_custom_input_fouce,true);
				//清空手写板
				m_handwriting_window.clear_ink_window();
			}
			return;
		case page_title:      //歌名点歌
		case page_theme_song:      //主题点歌
		case page_new_theme_song:
		case page_class:      //分类点歌
		case page_new_song:   //新歌页面
		case page_opera:      //经典戏曲
		case page_language:     //语种点歌
		case page_singer_song:  //具体歌星歌曲页面
		case page_movie_song:     //影视金曲
		case page_era_song:       //年代金曲
		case page_search_song:    //搜索歌曲
		case page_write:        //手写点歌
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
		case page_fast_songs_slow_dance: //劲曲漫舞
		case page_sb_free_pk:		//自由PK
		case page_sb_ranking_polite://上榜有礼
		case page_sb_challenge_pk: //擂台pk
		case page_voice_china:   //好声音
		case page_yunadd_song:
			{
				last_query_conditon = song_query_condition[SONG_NAME_SUFFIX].expression;

				//歌曲页面，检索歌曲名字
				if (0==_tcscmp(args,L"66"))
				{
					//回删
					len = song_query_condition[SONG_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以回删的
						break;
					}
					else if (len>0)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression = song_query_condition[SONG_NAME_SUFFIX].expression.substr(0,len-1);
					}
					if (1==len)
					{
						//最后一个字了，删除之后，就没有选择的字，也要清空识别的字
						clear_handwriting_recognizer_word();
					}
				}
				else if (0==_tcscmp(args,L"67"))  //清空
				{
					len = song_query_condition[SONG_NAME_SUFFIX].expression.length();
					if (len<=0)
					{
						//没有可以清空的
						break;
					}
					//清空
					song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					clear_handwriting_recognizer_word();
					//按照页面清空查询条件并初始化
					//clear_query_condition_by_page_and_init(false);
				}
				else if (0 == _tcscmp(args,L"32"))
				{
					//选择字,空格  
					song_query_condition[SONG_NAME_SUFFIX].expression += L" ";
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}
				else
				{
					//last_query_conditon = song_query_condition[SONG_NAME_SUFFIX].expression;
					//选择字歌曲名字
					song_query_condition[SONG_NAME_SUFFIX].expression += word;
					if (song_query_condition[SONG_NAME_SUFFIX].expression.length()>32)
					{
						song_query_condition[SONG_NAME_SUFFIX].expression.clear();
					}
				}

				//2011-05-24 add  改变查询模式，启用索引
				change_query_mode(song_query_condition,SONG_NAME_SUFFIX,L"song_name",m_max_unicode_char,false);
#ifdef DON_GUAN_K_PLUS
				//查询歌曲
				int ret  = song_query_show_data(song_select_expr);
				if (1!=ret)
				{
					//song_query_condition[SONG_NAME_SUFFIX].expression = last_query_conditon;
				}

				swprintf(data,L"<data><info str=\"%s\"/></data>",song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
#else
				//查询歌曲
				int ret  = song_query_two_show_data(song_select_expr);
				if (1!=ret)
				{
					song_query_condition[SONG_NAME_SUFFIX].expression = last_query_conditon;
					change_query_mode(song_query_condition,SONG_NAME_SUFFIX,L"song_name",m_max_unicode_char,false);
					song_query_two_show_data(song_select_expr);
				}

				swprintf(data,L"<data><info str=\"%s\"/></data>",song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
				//得到联想字
				result = query_handwriting_association_word();
				if (result)
				{
					//显示联想的字
					show_association_word(FIRST_PAGE_OPERATE);
				}
#endif // DON_GUAN_K_PLUS

			}
			break;
		default:
			break;
		}
		//显示选择的字
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"selectedResult_handwriting",data);
		if (result)
		{
			flash_player_call_function(request);
		}
		//清空手写板
		m_handwriting_window.clear_ink_window();

		//发送检索条件
		send_query_condition_text_to_flash();
	}
	catch (...)
	{
	}
	return;
}

void Cflashktv10Wnd::flash_message_call_mongolia_input_opinion(const TCHAR *args)
{
	try
	{
		int len=0;

		if (NULL==args)
		{
			return;
		}

		if (0==_tcscmp(args,L"91"))
		{
			//回删
			len = m_others_opinion.length();
			if (len<=0)
			{
				//没有可以回删的
				return;
			}
			else if (len>0)
			{
				m_others_opinion = m_others_opinion.substr(0,len-1);
			}
		}
		else if (0==_tcscmp(args,L"92"))  //清空
		{
			//按照页面清空查询条件并初始化
			m_others_opinion.clear();
		}
		else
		{
			//选择字
			m_others_opinion += args;
			if (m_others_opinion.length()>128)
			{
				m_others_opinion.clear();
			}
		}
		flash_show_others_opinion(m_others_opinion.c_str(),true);

		return;
	}
	catch(...)
	{

	}

	return;
}

bool Cflashktv10Wnd::query_handwriting_association_word(void)
{
	try
	{
		int row=0;
		std::wstring *result_string=NULL;
		bool result=false;
		int page_index=0;

		//初始化
		m_association_word_count = 0;
		for (int i=0;i<HANDWRITING_ASSOCIATION_WORD_COUNT;i++)
		{
			memset(m_handwriting_association_word[i],0x0,sizeof(m_handwriting_association_word[i]));
		}
		//得到当前页面索引
		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_singer:         //歌星照片列表
		case page_custom_singer:  //场所歌星
		case page_voice_china_singer:
			{
				if (!singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct singer_name from singer",singer_query_condition,SINGER_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		case page_movie:   //电影页面
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
			{
				if (!movie_query_condition[MOVIE_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct name from movie",movie_query_condition,MOVIE_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,movie_query_condition[MOVIE_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		case page_member_song:   //会员歌曲
			{
				if (!song_query_condition[SONG_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct song_name from member_song",song_query_condition,SONG_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		case page_movie_song:  //影视金曲
			{
				if (!song_query_condition[SONG_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct movie_name from song",song_query_condition,SONG_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		case page_top_song:   //排行
			{
				if (!song_query_condition[SONG_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct song_name from top_song",song_query_condition,SONG_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		default:    //歌曲
			{
				if (!song_query_condition[SONG_NAME_SUFFIX].expression.empty())
				{
					result_string = new std::wstring[HANDWRITING_ASSOCIATION_WORD_COUNT];
					if (result_string)
					{
						row = m_db_query.query_db_get_table_data(result_string,L"select distinct song_name from song",song_query_condition,SONG_CONDITION_NUMS,HANDWRITING_ASSOCIATION_WORD_COUNT,HANDWRITING_ASSOCIATION_WORD_COUNT,0);
						if (row>0)
						{
							//得到手写联想的字
							result = get_handwriting_assocition_word(result_string,row,song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
						}
						delete []result_string;
						result_string = NULL;
					}
				}
			}
			break;
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::query_board_init(void)
{
	try
	{
		int page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_homepage:    //与手写不相关的页面
		case page_assist:
		case page_game:
		case page_video:
		case page_U_disk:
		case page_member_manager:
		case page_introduce:
		case page_help:
		case page_room:      
		case page_fire:  
		case page_guide: 
		case page_change_skin:
		case page_recording:
		case page_selected:
		case page_singed:
		case page_jewel_box:
			break;
		default:
			{
				//清空选择的字
				clear_handwriting_select_word();
				//清空手写的字
				clear_handwriting_recognizer_word();
				for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
				{
					m_recognition_result[i].Empty();
				}
				//清空手写显示
				m_ink_song_lyric.clear();
				//清空手写区域
				m_handwriting_window.clear_ink_window();
			}
			break;
		}

		//清空语种查询的日语条件
		m_japanese_enlish_stroke.clear();
		//把输入的字符清空
		show_letter_window(L"");
		//关联的字数清零
		m_association_word_count=0;
	}
	catch(...)
	{

	}
	return;
}

void Cflashktv10Wnd::clear_all_query_condition(void)
{
	try
	{
		//清空所有条件
		m_db_query.clear_all_conditon(song_query_condition,SONG_CONDITION_NUMS);
		m_db_query.clear_all_conditon(singer_query_condition,SINGER_CONDITION_NUMS);
		m_db_query.clear_all_conditon(movie_query_condition,MOVIE_CONDITION_NUMS);
		m_db_query.clear_all_conditon(member_query_condition,MEMBER_CONDITION_NUMS);
		//检索面板初始化
		query_board_init();
		//设置按钮高亮状态

		//set_button_highlight_state(true);
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::clear_query_condition_by_page(void)
{
	try
	{
		int page_index=0;
		TCHAR select_letter[64];

		memset(select_letter,0x0,sizeof(select_letter));

		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_title:
		case page_write:
		case page_top_song:
		case page_number_song:
			{
				//留下语种、字数、版本
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				//song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_singer_song:  //具体歌星的歌曲列表
			{
				//留下歌星名字条件
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_fast_songs_slow_dance:
		case page_theme_song: 
		case page_new_theme_song:
		case page_opera:       //戏曲页面
		case page_movie_song:  //影视金曲
		case page_pkjx:        //pk精选
			{
				//留下歌曲主题条件、字数、版本
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				//song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				//song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_new_song:  //新歌页面
		case page_voice_china:  //好声音
			{
				//留下新歌日期，主题
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				//song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_class:   
			{
				//留下
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				//song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_member_song:  //会员歌曲
			{
				//留下会员名字
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				//song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_hdmi:
			{
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
				song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SUFFIX].expression.clear();
				song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
				song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SONG_THEME_SUFFIX].expression.clear();
				song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
				song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
				song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
				//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
				song_query_condition[LANGUAGE_SUFFIX].expression.clear();
				song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
				song_query_condition[SINGER_ID1_STUFFIX].expression.clear();
				//song_query_condition[FILE_FORMAT_SUFFIX].expression.clear();
				song_query_condition[SONG_NAME_SORT_SUFFIX].expression.clear();
				song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression.clear();
			}
			break;
		case page_concert:      //演唱会
		case page_place_video:  //场所视频
			{
				//留下电影分类
				//movie_query_condition[MOVIE_STORY_SUFFIX].expression.clear();
				movie_query_condition[MOVIE_NAME_SUFFIX].expression.clear();
				movie_query_condition[MOVIE_WORD_COUNT_SUFFIX].expression.clear();
				movie_query_condition[MOVIE_SFSA_SUFFIX].expression.clear();
				movie_query_condition[MOVIE_SFLT_SUFFIX].expression.clear();
			}
			break;
			//case page_search_song:  //搜索页面
			//	{
			//		song_query_condition[SONG_ID_SUFFIX].expression.clear();
			//		song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.clear();
			//		song_query_condition[SPELL_FIRST_LETTER_TRADITIONAL_SUFFIX].expression.clear();
			//		song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.clear();
			//		song_query_condition[SONG_NAME_SUFFIX].expression.clear();
			//		song_query_condition[WORD_HEAD_CODE_SUFFIX].expression.clear();
			//		song_query_condition[FIRST_WORD_STROKE_NUMBER_SUFFIX].expression.clear();
			//		song_query_condition[SONG_THEME_SUFFIX].expression.clear();
			//		song_query_condition[NEW_SONG_DATA_SUFFIX].expression.clear();
			//		song_query_condition[SING_NUMBER_SUFFIX].expression.clear();
			//		song_query_condition[SINGER_NAME_SUFFIX].expression.clear();
			//		//song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
			//		song_query_condition[SONG_TYPE_SUFFIX].expression.clear();
			//		//song_query_condition[LANGUAGE_SUFFIX].expression.clear();
			//		song_query_condition[MEMBER_NAME_SUFFIX].expression.clear();
			//	}
			//	break;
		case page_singer:
		case page_voice_china_singer:
			{
				//流行歌曲区域
				singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.clear();
				//singer_query_condition[SINGER_REGION_SUFFIX].expression.clear();
				singer_query_condition[POPULAR_SINGER_SUFFIX].expression.clear();
				singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.clear();
				singer_query_condition[SINGER_NAME_WORD_COUNT_SUFFIX].expression.clear();
				singer_query_condition[SINGER_INTRODUCTION_SUFFIX].expression.clear();
			}
			break;
		default:
			{
				//清空所有条件
				m_db_query.clear_all_conditon(song_query_condition,SONG_CONDITION_NUMS);
				m_db_query.clear_all_conditon(singer_query_condition,SINGER_CONDITION_NUMS);
				m_db_query.clear_all_conditon(movie_query_condition,MOVIE_CONDITION_NUMS);
				m_db_query.clear_all_conditon(member_query_condition,MEMBER_CONDITION_NUMS);
				m_japanese_enlish_stroke.clear();
			}
			break;
		}
		//设置高亮按钮状态
		set_button_highlight_state(true);
	}
	catch (...) {
	}
}
void Cflashktv10Wnd::flash_show_tip_message_chVip(TCHAR *tip_msg)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		if (NULL==tip_msg)
		{
			return;
		}

		swprintf(data,L"<data><info data=\"%s\"/></data>",tip_msg);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"ErrorInfoChVip",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{
	}
	return;
}
void Cflashktv10Wnd::flash_show_tip_message_vip(int msg_code,bool back_tip)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		if (back_tip)
		{
			swprintf(data,L"<data><info data=\"%s\" back_tip=\"true\"/></data>",g_all_language[msg_code].c_str());
		}
		else
		{
			swprintf(data,L"<data><info data=\"%s\" back_tip=\"false\"/></data>",g_all_language[msg_code].c_str());
		}

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"ErrorInfoChVip",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{
	}
	return;
}
void Cflashktv10Wnd::flash_show_tip_message(int msg_code,bool back_tip)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		if (back_tip)
		{
			swprintf(data,L"<data><info data=\"%s\" back_tip=\"true\"/></data>",g_all_language[msg_code].c_str());
		}
		else
		{
			swprintf(data,L"<data><info data=\"%s\" back_tip=\"false\"/></data>",g_all_language[msg_code].c_str());
		}

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"ErrorInfo",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{
	}
	return;
}

void Cflashktv10Wnd::flash_show_tip_message(TCHAR *tip_msg)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		if (NULL==tip_msg)
		{
			return;
		}

		swprintf(data,L"<data><info data=\"%s\"/></data>",tip_msg);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"ErrorInfo",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{
	}
	return;
}

UINT Cflashktv10Wnd::send_msg_to_back_server_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		switch(g_back_server_msg_type)
		{
		case BACK_SERVER_MSG_TYPE_IP_NAME:       //发送IP和计算机名
			{
				pThis->send_local_ip_name_to_server();
			}
			break;
		case BACK_SERVER_MSG_TYPE_REQUESTOPEN:  //发送请求开房消息给后台
			{
				pThis->send_request_open_room_to_server();
			}
			break;
		case BACK_SERVER_MSG_TYPE_CLEAN:        //发送清房消息给后台
			{
				pThis->send_msg_to_back_server("CLEAN");
			}
			break;
		default:
			break;
		}

	}
	catch (...)
	{

	}
	return 0;
}

void Cflashktv10Wnd::exit_window_pretreat(void)
{
	try
	{
		//通知所有线程退出
		m_thread_run=false;

		//发送关机串口命令
		write_com_data(COM_SEND_POWER_OFF);

		if (g_dog_open_function.AD)
		{
			//启用文化部广告功能
			UninitADSystem_culture();
		}
		//停止录音
		stop_recorder_audio(false,false,false);
		//反初始化录音类
		//m_tape_audio.Fini();
		//释放资源
		if (m_song_tip_image)
		{
			delete m_song_tip_image;
			m_song_tip_image=NULL;
		}

		//播放控件反初始化
		m_player_manager.destroy_player();
		//关闭数据库
		m_db_query.close_DB();
	}
	catch (...)
	{

	}
}


void Cflashktv10Wnd::Generate_function_encode()
{
	char encode_data[256]; 
	config_file_manager config_file;
	string_conversion string_conv;
	memset(m_encode_picture_path,0x0,sizeof(m_encode_picture_path));
	memset(encode_data,0x0,sizeof(encode_data));	

	_tcscpy(m_encode_picture_path,m_work_path);
	_tcscat(m_encode_picture_path,L"\\qr_picture\\ipad_encode.png");
	//ipad的验证码
	int code = rand()/(RAND_MAX/255+1);
	int ipad_code[5];

	memset(ipad_code,0x0,sizeof(ipad_code));
	memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));

	ipad_code[0] = code;   //第一位是密钥
	swscanf(m_room_ip,L"%d.%d.%d.%d",&ipad_code[1],&ipad_code[2],&ipad_code[3],&ipad_code[4]);
	//用密钥对IP尽心异或操作
	ipad_code[1] = ipad_code[1]^ipad_code[0];
	ipad_code[2] = ipad_code[2]^ipad_code[0];
	ipad_code[3] = ipad_code[3]^ipad_code[0];
	ipad_code[4] = ipad_code[4]^ipad_code[0];
	//转化成16进制的字符串
	swprintf(m_ipad_login_code,L"%02X%02X%02X%02X%02X",ipad_code[0],ipad_code[1],ipad_code[2],ipad_code[3],ipad_code[4]);
	//写入配置文件
	config_file.write_string(L"ipad",L"login_password",m_ipad_login_code);

	string_conv.widechar_to_multibyte(m_ipad_login_code,encode_data,sizeof(encode_data));
	//qr_picture

	Generate_encode_picture(encode_data,m_encode_picture_path);

	zoom_image(m_encode_picture_path,145,145,m_encode_picture_path,L"image/png",20,20);

	//电视上显示验证码
	show_song_name();
}



bool Cflashktv10Wnd::Generate_encode_picture(LPCSTR strData,CString strPath)
{
	try
	{
		bool result = false;
		CQR_Encode* pQR_Encode = new CQR_Encode;
		if (pQR_Encode)
		{
			result = pQR_Encode->GenerateImage(strData,strPath);
			delete pQR_Encode;
			pQR_Encode = NULL;
		}

		return result;
	}
	catch (...)
	{

	}

	return false;
}

void Cflashktv10Wnd::flash_message_call_wechat()
{
	try
	{

		TCHAR request[1024];
		TCHAR data[1024]; 
		bool result = false; 

		memset(request,0x0,sizeof(request)); 
		memset(data,0x0,sizeof(data)); 

		set_flash_button_state(L"encode_button",m_wechat_button_number);

		swprintf(data,L"<data><info wechat_data=\"%s\" wechat_path=\"%s\"/></data>",m_wechat_song_encode, m_wechat_song_path);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"wechat_info",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		return;
	}
	catch (...)
	{

	} 

	return;
}

void Cflashktv10Wnd::flash_message_call_encode(const TCHAR *args)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		TCHAR download_address[256];
		TCHAR msquare_picture[256];
		std::wstring wifi;
		std::wstring wifi_password;
		config_file_manager con_file;
		int encode_type = 0;
		int button_state = 0;
		TCHAR command[256] = {0x00};

		swscanf(args,L"%d",&encode_type);

		bool result=false;
		memset(request,0x0,sizeof(request)); 
		memset(data,0x0,sizeof(data));
		memset(download_address,0x0,sizeof(download_address));
		memset(msquare_picture,0x0,sizeof(msquare_picture)); 

		swprintf(download_address,L"%s%s",m_work_path,L"\\qr_picture\\down_load_encode.png");
		swprintf(msquare_picture,L"%s%s",m_work_path,L"\\qr_picture\\msquare_picture.png");
		wifi = con_file.read_string(L"ipad",L"wifi",L"");
		wifi_password = con_file.read_string(L"ipad",L"wifi_password",L"");

#ifdef SICHUAN_M
		swprintf(data,L"<data><info msquare_picture=\"%s\" encode_data=\"%s\" encode_picture=\"%s\" download_address=\"%s\"/></data>",msquare_picture,m_ipad_login_code,
			m_encode_picture_path,download_address);
#else
		if (1 == encode_type)
		{
			swprintf(data,L"<data><info encode_data=\"%s\" encode_picture=\"%s\" download_address=\"%s\" wifi=\"%s\" wifi_password=\"%s\"/></data>",m_ipad_login_code,
				m_encode_picture_path,download_address,wifi.c_str(),wifi_password.c_str());
			_tcscpy(command, L"encode_info");
			button_state = 2;
		}
		else if (0 == encode_type)
		{
			//	swprintf(data,L"<data><info wechat_data=\"%s\" /></data>",m_wechat_song_encode);
			//_tcscpy(m_wechat_song_encode,L"25645514");
			swprintf(data,L"<data><info wechat_data=\"%s\" wechat_path=\"%s\"/></data>",m_wechat_song_encode, m_wechat_song_path);
#ifdef DON_GUAN_K_PLUS
			_tcscpy(command, L"wechat_info");
#else
			_tcscpy(command, L"encode_info");
#endif // DON_GUAN_K_PLUS			
			button_state = 1;
		}
		else if (2 == encode_type)
		{
			swprintf(data,L"<data><info wifi=\"%s\" wifi_password=\"%s\" dlna=\"%d\"/></data>",wifi.c_str(),wifi_password.c_str(), m_is_open_dlna ? 1 : 0);
			_tcscpy(command, L"phone_push_info");
			button_state = 3;
		}
		else
		{
			return;
		}
#endif

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
		if (result)
		{
			flash_player_call_function(request);
		}


		set_flash_button_state(L"encode_button",button_state);

		return;
	}
	catch (...)
	{

	}

	return;

}

void Cflashktv10Wnd::password_function_judgement(const TCHAR *args)
{
	try
	{
		config_file_manager config_file;
		std::wstring quit_password;
		std::wstring open_room_password;
		std::wstring close_room_password;
		std::wstring shutdown_password;
		std::wstring reboot_password;
		std::wstring clear_room_password;
		std::wstring play_dj_password;
		std::wstring system_info_password;
		std::wstring request_open_password;
		std::wstring close_fire_password;
		std::wstring audio_effect_password;
		std::wstring ipad_login_password;
		TCHAR request[1024];
		const TCHAR bomb_authentication_code[]=L"9119112425";  //索要炸弹的验证码
		bool result=false;

		memset(request,0x0,sizeof(request));

		quit_password = config_file.read_string(L"room",L"ktv_quit_password",L"");
		open_room_password = config_file.read_string(L"room",L"ktv_open_room_password",L"");
		close_room_password = config_file.read_string(L"room",L"ktv_close_room_password",L"");
		shutdown_password = config_file.read_string(L"room",L"ktv_shutdown_password",L"");
		reboot_password = config_file.read_string(L"room",L"ktv_reboot_password",L"");
		clear_room_password = config_file.read_string(L"room",L"ktv_clear_room_password",L"");
		play_dj_password = config_file.read_string(L"room",L"play_dj_password",L"");
		system_info_password = config_file.read_string(L"room",L"system_info_password",L"");
		request_open_password = config_file.read_string(L"room",L"request_open_password",L"");
		close_fire_password = config_file.read_string(L"room",L"close_fire_password",L"");
		audio_effect_password = config_file.read_string(L"room",L"audio_effect_password",L"");
		ipad_login_password = config_file.read_string(L"room",L"ipad_login_password",L"");

		if (((!quit_password.empty()) && (0==_tcscmp(quit_password.c_str(),args)))||(0==_tcscmp(args,L"03512824149")))
		{
			//软件退出
			PostMessage(WM_CLOSE);
		}
		else if ((!open_room_password.empty()) && (0==_tcscmp(open_room_password.c_str(),args)))  //开房
		{
			//开房,必须在没有异常的情况下，才能实现
			//发送开房指令
			SendMessage(DM_RECV_SERVER_DATA,(WPARAM)"open0",NULL);
			if (m_close_room_timer_identifier > 0)
			{
				KillTimer(m_close_room_timer_identifier);
				m_close_room_timer_identifier = 0;
			}

			if (m_nCloseRoomTimeSpace > 0)
				m_close_room_timer_identifier = SetTimer(CLOSE_ROOM_TIME_SPACE_TIME_EVENT_ID,m_nCloseRoomTimeSpace*60*1000,NULL);
		}
		else if (!close_room_password.empty() && (0==_tcscmp(close_room_password.c_str(),args)))  //锁房
		{
			//发送关房指令
			SendMessage(DM_RECV_SERVER_DATA,(WPARAM)"close",NULL);
		}
		else if (!shutdown_password.empty() && (0==_tcscmp(shutdown_password.c_str(),args)))  //关机密码
		{
			shutdown_computer();
		}
		else if (!reboot_password.empty() && (0==_tcscmp(reboot_password.c_str(),args)))  //重启电脑密码
		{
			reboot_computer();
		}
		else if (!clear_room_password.empty() && (0==_tcscmp(clear_room_password.c_str(),args)))  //解房密码
		{
			//发送给后台，表示清洁完成，可以待客了
			g_back_server_msg_type = BACK_SERVER_MSG_TYPE_CLEAN;
			AfxBeginThread(Cflashktv10Wnd::send_msg_to_back_server_thread,this);

#ifdef DON_GUAN_K_PLUS
			flash_show_tip_message(L"已通知前台清洁完毕");
#else
			//回到首页
			page_change(page_homepage);
#endif // DON_GUAN_K_PLUS
		}
		else if (!system_info_password.empty() &&(0==_tcscmp(system_info_password.c_str(),args)))  //弹出系统信息窗口
		{
			result = page_change(page_system_info);
			if (result)
			{
				//显示计算机名字和IP
				show_local_computer_name_IP();
				//默认修改计算机名字
				m_system_info_input_type=0;

				//发送房态
				set_button_show_state(ROOM_BUTTON_STATE,m_pc_state);
				//发送DJ功能
				set_button_show_state(DJ_BUTTON_STATE,m_allow_play_dj);
				//发送电影功能
				set_button_show_state(MOVIE_BUTTON_STATE,m_allow_play_movie);
				//发送服务开关
				set_button_show_state(OPEN_SERVER_WINDOW,m_server_pop_up_window);
				//发送视频交友状态
				set_button_show_state(VIDEO_DATING_STATE,m_video_dating_show);
				//发送显示云加歌状态
				set_button_show_state(SHOW_CLOUD_SONG_STATE, m_allow_show_cloud_song);

				//设置系统信息和版本
				set_system_version_date();
			}
		}
		else if (!request_open_password.empty() && (0==_tcscmp(request_open_password.c_str(),args)))  //请求开房
		{
			g_back_server_msg_type = BACK_SERVER_MSG_TYPE_REQUESTOPEN;
			AfxBeginThread(Cflashktv10Wnd::send_msg_to_back_server_thread,this);
		}
		else if (!close_fire_password.empty() && (0==_tcscmp(close_fire_password.c_str(),args)))   //关闭火警密码
		{
			//设置正播放歌曲的视频类型
			m_player_manager.set_playing_video_type(PLAY_SONG_TYPE_SELECT_SONG);
			//设置播放器状态
			m_video_play_manager.set_player_cur_state(PLAY_SONG_STATE);
			m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);
			//播放下一首
			flash_message_call_function(SONG_NEXT);
			//回到首页
			page_change(page_homepage);
		}
		else if (!play_dj_password.empty() && (0==_tcscmp(play_dj_password.c_str(),args)))  //允许播放DJ密码
		{
			m_allow_play_dj = true;
			//跳转到分类的迪曲页面
			result = page_change(page_homepage);
			if (result)
			{
				flash_message_call_theme(L"1");
			}
		}
		else if (!m_play_movie_password.empty() && (0==_tcscmp(m_play_movie_password.c_str(),args)))
		{
			//设置播放电影的标示
			m_allow_play_movie = true;
			//跳转到电影页面
			flash_message_call_page_jump(page_movie);
		}
		else if (!audio_effect_password.empty() && (0==_tcscmp(audio_effect_password.c_str(),args)))
		{
			std::wstring audio_effect;
			//返回到首页
			page_change(page_homepage);
			//显示调音窗口
			//检测是否有外挂音效器控制软件
			audio_effect = config_file.read_string(L"amplifier",L"plug_in_audio_effect",L"");
			if (audio_effect.empty())
			{
				//显示内嵌调音窗口
				if (m_audio_effect_window_exist)
				{
					m_audio_effect_window.BringWindowToTop();
					m_audio_effect_window.ShowWindow(SW_SHOW);
				}
			}
			else
			{
				//启用外挂音效器
				result = check_process_run_state(NULL,m_audio_effect_progress_id);
				if (result)
				{
					//终止原来的
					teminate_process(NULL,m_audio_effect_progress_id);
				}
				//重新启动
				start_plug_in_process(audio_effect.c_str(),SW_SHOW,m_audio_effect_progress_id);
			}
		}
		else if (!ipad_login_password.empty() && (0==_tcscmp(ipad_login_password.c_str(),args)))
		{
			//modify：modify:2012-9-4 Yangzhenglun 输入验证码后，可以开启移动点歌
			m_use_mobile_vod = true; 

			if (judge_generate_encode())
			{
				Generate_function_encode();
			}

			//ipad的验证码
			//int code = rand()/(RAND_MAX/255+1);
			//int ipad_code[5];

			//memset(ipad_code,0x0,sizeof(ipad_code));
			//memset(m_ipad_login_code,0x0,sizeof(m_ipad_login_code));

			//ipad_code[0] = code;   //第一位是密钥
			//swscanf(m_room_ip,L"%d.%d.%d.%d",&ipad_code[1],&ipad_code[2],&ipad_code[3],&ipad_code[4]);
			////用密钥对IP尽心异或操作
			//ipad_code[1] = ipad_code[1]^ipad_code[0];
			//ipad_code[2] = ipad_code[2]^ipad_code[0];
			//ipad_code[3] = ipad_code[3]^ipad_code[0];
			//ipad_code[4] = ipad_code[4]^ipad_code[0];
			////转化成16进制的字符串
			//swprintf(m_ipad_login_code,L"%02X%02X%02X%02X%02X",ipad_code[0],ipad_code[1],ipad_code[2],ipad_code[3],ipad_code[4]);
			////写入配置文件
			//         config_file.write_string(L"ipad",L"login_password",m_ipad_login_code);
			////电视上显示验证码
			show_song_name();
			//回到首页
			page_change(page_homepage);
		}
		else if (0==_tcscmp(bomb_authentication_code,args))
		{
			TCHAR auth_code[64];

			//生成炸弹验证码
			memset(auth_code,0x0,sizeof(auth_code));
			memset(m_make_bomb_code1,0x0,sizeof(m_make_bomb_code1));
			memset(m_make_bomb_code2,0x0,sizeof(m_make_bomb_code2));
			result = m_shine_bomb.make_authentication_code(auth_code);
			if (result)
			{
				//显示验证码
				MessageBox(auth_code,L"密钥",MB_OK);
			}
			//生成密钥
			result = m_shine_bomb.make_bomb_code(auth_code,m_make_bomb_code1,m_make_bomb_code2);
		}
		else
		{
			//回到首页
			page_change(page_homepage);
		}
	}
	catch (...)
	{

	}
	return;
}


void Cflashktv10Wnd::flash_message_call_member_login(const TCHAR *args)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		TCHAR temp_args[16];
		TCHAR temp_value[256];
		int number=0;
		size_t len=0;
		bool result=false;
		TCHAR show_text[256];

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));
		memset(temp_args,0x0,sizeof(temp_args));
		memset(temp_value,0x0,sizeof(temp_value));
		memset(show_text,0x0,sizeof(show_text));

		swscanf(args,L"%d",&number);
		switch(number)
		{
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			{
				_tcscpy(temp_args,args);
				switch(m_member_manage_state)
				{
				case MEMBER_LOGIN_STATE:   //会员登录
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								_tcscpy(temp_value, m_member_name);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员号最长为12位。");
									return;
									memset(m_member_name,0x0,sizeof(m_member_name));
								}
								//显示字符
								_tcscpy(m_member_name,temp_value);
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员密码
							{
								_tcscpy(temp_value, m_member_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_password,0x0,sizeof(m_member_password));
								}
								//显示字符
								_tcscpy(m_member_password,temp_value);
								_tcscpy(show_text,m_member_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				case MEMBER_REGISTER_STATE:  //会员注册
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								_tcscpy(temp_value, m_member_name);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员号最长为12位。");
									return;
									//memset(m_member_name,0x0,sizeof(m_member_name));
								}
								//显示字符
								_tcscpy(m_member_name,temp_value);
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员密码
							{
								_tcscpy(temp_value, m_member_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_password,0x0,sizeof(m_member_password));
								}
								//显示字符
								_tcscpy(m_member_password,temp_value);
								_tcscpy(show_text,m_member_password);
							}
							break;
						case 3:  //输入会员确认密码
							{
								_tcscpy(temp_value, m_member_ok_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_ok_password,0x0,sizeof(m_member_ok_password));
								}
								//显示字符
								_tcscpy(m_member_ok_password,temp_value);
								_tcscpy(show_text,m_member_ok_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				case MEMBER_CHANGE_PSW_STATE:  //会员修改密码
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								_tcscpy(temp_value, m_member_name);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员号最长为12位。");
									return;
									memset(m_member_name,0x0,sizeof(m_member_name));
								}
								//显示字符
								_tcscpy(m_member_name, temp_value);
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员旧密码
							{
								_tcscpy(temp_value, m_member_old_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_old_password,0x0,sizeof(m_member_old_password));
								}
								//显示字符
								_tcscpy(m_member_old_password, temp_value);
								_tcscpy(show_text,m_member_old_password);
							}
							break;
						case 3:  //输入会员新密码
							{
								_tcscpy(temp_value, m_member_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_password,0x0,sizeof(m_member_password));
								}
								//显示字符
								_tcscpy(m_member_password, temp_value);
								_tcscpy(show_text,m_member_password);
							}
							break;
						case 4:  //输入会员确认密码
							{
								_tcscpy(temp_value, m_member_ok_password);
								_tcscat(temp_value,temp_args);
								len = _tcslen(temp_value);
								if (len>12)
								{
									flash_show_tip_message(L"会员密码最长为12位。");
									return;
									memset(m_member_ok_password,0x0,sizeof(m_member_ok_password));
								}
								//显示字符
								_tcscpy(m_member_ok_password,temp_value);
								_tcscpy(show_text,m_member_ok_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				default:
					break;
				}
			}
			break;
		case 10:
			{
				switch(m_member_manage_state)
				{
				case MEMBER_LOGIN_STATE:   //会员登录
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								len = _tcslen(m_member_name);
								if (len>0)
								{
									m_member_name[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员密码
							{
								len = _tcslen(m_member_password);
								if (len>0)
								{
									m_member_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				case MEMBER_REGISTER_STATE:  //会员注册
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								len = _tcslen(m_member_name);
								if (len>0)
								{
									m_member_name[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员密码
							{
								len = _tcslen(m_member_password);
								if (len>0)
								{
									m_member_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_password);
							}
							break;
						case 3:  //输入会员确认密码
							{
								len = _tcslen(m_member_ok_password);
								if (len>0)
								{
									m_member_ok_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_ok_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				case MEMBER_CHANGE_PSW_STATE:  //会员修改密码
					{
						switch(m_member_input_type)
						{
						case 1:  //输入会员号
							{
								len = _tcslen(m_member_name);
								if (len>0)
								{
									m_member_name[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_name);
							}
							break;
						case 2:  //输入会员旧密码
							{
								len = _tcslen(m_member_old_password);
								if (len>0)
								{
									m_member_old_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_old_password);
							}
							break;
						case 3:  //输入会员新密码
							{
								len = _tcslen(m_member_password);
								if (len>0)
								{
									m_member_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_password);
							}
							break;
						case 4:  //输入会员确认密码
							{
								len = _tcslen(m_member_ok_password);
								if (len>0)
								{
									m_member_ok_password[len-1]='\0';
								}
								//显示字符
								_tcscpy(show_text,m_member_ok_password);
							}
							break;
						default:
							break;
						}
					}
					break;
				default:
					break;
				}
			}
			break;
		case 11:   //确定
			{
				switch(m_member_manage_state)
				{
				case MEMBER_LOGIN_STATE:   //会员登录
					{
						if (m_member_already_login)
						{
							//成功,跳转到会员列表
							result = page_change(page_member_song);
							if (result)
							{
								//查询并显示成员歌曲
								member_song_query_show_data();
							}
						}
						else if ((0==_tcscmp(m_member_name,L""))||(0==_tcscmp(m_member_password,L"")))
						{
							flash_show_tip_message_vip(13);
						}
						else
						{
							//首先判断是否是炸弹
							if ((0!=_tcscmp(m_make_bomb_code1,L""))&&(0==_tcsncmp(m_make_bomb_code1,m_member_name,18)))
							{
								//判断第一组密钥
								m_first_code_success = true;
								//清空
								memset(m_member_name,0x0,sizeof(m_member_name));
								show_member_manager_input_text(1,L"");
								//提示
								flash_show_tip_message_chVip(L"用户名正确，密码错误，请输入第二组");
								break;
							}
							if (m_first_code_success && (0!=_tcscmp(m_make_bomb_code2,L""))&&(0==_tcsncmp(m_make_bomb_code2,m_member_name,14)))
							{
								int bomb_type=0;  //3：频繁切歌曲炸弹 5：停狗炸弹 7：移出炸弹
								int temp_number=0;
								TCHAR bomb_number[16];

								memset(bomb_number,0x0,sizeof(bomb_number));

								//最后三个字节相加决定了启动炸弹类型还是移出炸弹
								bomb_number[0] = m_member_name[15];
								swscanf(bomb_number,L"%d",&temp_number);
								bomb_type = temp_number;
								bomb_number[0] = m_member_name[16];
								swscanf(bomb_number,L"%d",&temp_number);
								bomb_type += temp_number;
								bomb_number[0] = m_member_name[17];
								swscanf(bomb_number,L"%d",&temp_number);
								bomb_type += temp_number;

								if (14==bomb_type)
								{
									//安装频繁切歌曲的炸弹
									m_shine_bomb.embed_bomb(BOMB_SONG,true);
									memset(m_member_name,0x0,sizeof(m_member_name));
									show_member_manager_input_text(1,L"");
									//提示
									flash_show_tip_message_chVip(L"第二组用户名正确，密码错误。请选歌");
								}
								else if (19==bomb_type)
								{
									//安装停狗炸弹
									m_stop_dog_bomb=true;
									m_shine_bomb.embed_bomb(BOMB_STOP_DOG,false);
									memset(m_member_name,0x0,sizeof(m_member_name));
									show_member_manager_input_text(1,L"");
									//提示
									flash_show_tip_message_chVip(L"第二组用户名正确，密码错误，请选歌");
								}
								else if (16==bomb_type)
								{
									//移出炸弹
									m_shine_bomb.bomb_out();
									memset(m_member_name,0x0,sizeof(m_member_name));
									show_member_manager_input_text(1,L"");
									//提示
									flash_show_tip_message_chVip(L"第二次还是用户名正确，密码错误，请选歌");
								}
								else
								{
									memset(m_member_name,0x0,sizeof(m_member_name));
									show_member_manager_input_text(1,L"");
									//提示
									flash_show_tip_message_chVip(L"第二组用户名和密码都错误，请重新输入");
								}
								break;
							}
							if (m_first_code_success && m_stop_dog_bomb)
							{
								//停狗
								unsigned int string_len=0;

								if (!m_first_stop_dog_code_success)
								{
									string_len =_tcslen(m_member_name);
									if (32!=string_len)
									{
										memset(m_member_name,0x0,sizeof(m_member_name));
										show_member_manager_input_text(1,L"");
										//提示
										flash_show_tip_message_chVip(L"用户名的位数不正确");
										break;
									}
									//处理第一组
									result = convert_string_10_to_16(m_member_name,m_dog_time_active_code,32);
									if (result)
									{
										//成功
										m_first_stop_dog_code_success=true;
										memset(m_member_name,0x0,sizeof(m_member_name));
										show_member_manager_input_text(1,L"");
										//提示
										flash_show_tip_message_chVip(L"用户名正确，密码错误，请输入第二组");
									}
									else
									{
										memset(m_member_name,0x0,sizeof(m_member_name));
										show_member_manager_input_text(1,L"");
										//提示
										flash_show_tip_message_chVip(L"用户名和密码都错误");
									}
								}
								else
								{
									string_len =_tcslen(m_member_name);
									if (32!=string_len)
									{
										memset(m_member_name,0x0,sizeof(m_member_name));
										show_member_manager_input_text(1,L"");
										//提示
										flash_show_tip_message_chVip(L"用户名的位数不对");
										break;
									}
									result = convert_string_10_to_16(m_member_name,m_dog_time_active_code+16,32);
									if (result)
									{
										//成功
										//给7天时间
										long now_time = time(0) + 764000;
										//处理第二组，并停狗
										result = m_watch_dog.active_clock_time(m_dog_time_active_code,(long)now_time);
										if (result)
										{
											memset(m_member_name,0x0,sizeof(m_member_name));
											show_member_manager_input_text(1,L"");
											//提示
											flash_show_tip_message_chVip(L"用户名正确，密码正确，请选歌");
										}
										else
										{
											memset(m_member_name,0x0,sizeof(m_member_name));
											show_member_manager_input_text(1,L"");
											//提示
											flash_show_tip_message_chVip(L"两组用户名错误，请重新输入");
										}								
									}
									else
									{
										memset(m_member_name,0x0,sizeof(m_member_name));
										show_member_manager_input_text(1,L"");
										//提示
										flash_show_tip_message_chVip(L"用户名和密码都错误");
									}
								}
								break;
							}

							//确定
							result = member_login(m_member_name,m_member_password);
							if (result)
							{
								//发送会员名到服务器
								TCHAR send_msg[1024];
								memset(send_msg,0x0,sizeof(send_msg));
								_tcscpy(m_video_dating_info.name, m_member_name);
								swprintf(send_msg,L"Message&VIDEODATING;%s@%d@%d@%s$END", m_video_dating_info.name, m_video_dating_info.nstatus, 
									m_video_dating_info.ncharacter, m_video_dating_info.ip);
								send_data_to_service_udp(send_msg);

								//成功,跳转到会员列表
								result = page_change(page_member_song);
								if (result)
								{
									//查询并显示成员歌曲
									member_song_query_show_data();
								}
								break;
							}
							else
							{
								//失败
								//清空输入的内容
								clear_member_manage_input_text();
								flash_show_tip_message_vip(15);
							}
						}
					}
					break;
				case MEMBER_REGISTER_STATE:  //会员注册
					{
						if ((0==_tcscmp(m_member_name,L""))||(0==_tcscmp(m_member_password,L""))||(0==_tcscmp(m_member_ok_password,L"")))
						{
							flash_show_tip_message_vip(13);
						}
						else if (0!=_tcscmp(m_member_password,m_member_ok_password))
						{
							//清空输入的内容
							clear_member_manage_input_text();
							flash_show_tip_message_vip(43);
						}
						else
						{
							//注册会员
							result = member_register(m_member_name,m_member_password);
							if (result)
							{
								//成功,跳转到会员列表
								result = page_change(page_member_song);
								if (result)
								{
									//查询并显示成员歌曲
									member_song_query_show_data();
								}
								break;
							}
							else
							{
								//失败
								//清空输入的内容
								clear_member_manage_input_text();
								flash_show_tip_message_vip(14);
							}
						}
					}
					break;
				case MEMBER_CHANGE_PSW_STATE:  //会员修改密码
					{
						if ((0==_tcscmp(m_member_name,L""))||(0==_tcscmp(m_member_old_password,L""))||(0==_tcscmp(m_member_password,L""))||(0==_tcscmp(m_member_ok_password,L"")))
						{
							flash_show_tip_message_vip(13);
						}
						else if (0!=_tcscmp(m_member_password,m_member_ok_password))
						{
							//清空输入的内容
							clear_member_manage_input_text();
							flash_show_tip_message_vip(43);
						}
						else
						{
							//修改密码
							result = member_change_password(m_member_name,m_member_old_password,m_member_password);
							if (result)
							{
								//成功
								flash_message_call_member_manager(L"1");
								flash_show_tip_message_vip(47);
							}
							else
							{
								//失败
								//清空输入的内容
								clear_member_manage_input_text();
								flash_show_tip_message_vip(46);
							}
						}
					}
					break;
				default:
					break;
				}
			}
			return;
		default:
			break;
		}

		//显示到flash界面上
		show_member_manager_input_text(m_member_input_type,show_text);
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::judge_memeber_is_login()
{
	try
	{

	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::member_register(const TCHAR *name,const TCHAR *password)
{
	try
	{
		TCHAR sql[2048];
		bool result=false;

		if (NULL==name)
		{
			return false;
		}

		memset(sql,0x0,sizeof(sql));

		//检测会员是否存在
		swprintf(sql,L"name=\'%s\'",name);
		result = m_db_query.table_data_existence(member_select_expr.row_count_expr.c_str(),sql);
		if (result)
		{
			//已经存在
			return false;
		}
		else
		{
			//录入到数据库中
			memset(sql,0x0,sizeof(sql));
			swprintf(sql,L"INSERT OR REPLACE INTO member(name,password) VALUES(\"%s\",\"%s\")",name,password);
			result = m_db_query.exec_sql(sql);
			if (result)
			{
				//成功
				//发送给后台服务程序
				memset(sql,0x0,sizeof(sql));
				swprintf(sql,L"Message&MEMBERREG;%s:%s$END",name,password);
				send_data_to_service_udp(sql);
				//修改标示
				m_member_already_login=true;
				return true;
			}
			//失败
			return false;
		}
		//失败
		return false;
	}
	catch (...)
	{

	}
	return false;
}

int Cflashktv10Wnd::member_login(const TCHAR *name,const TCHAR *password)
{
	try
	{
		TCHAR sql[2048];
		bool result=false;

		memset(sql,0x0,sizeof(sql));

		if (NULL==name)
		{
			return false;
		}
		//检测用户名或密码是否正确
		swprintf(sql,L"name=\'%s\' and password=\'%s\'",name,password);
		result = m_db_query.table_data_existence(member_select_expr.row_count_expr.c_str(),sql);
		if (result)
		{
			//成功
			//发送给后台服务程序
			memset(sql,0x0,sizeof(sql));
			swprintf(sql,L"Message&MEMBERLOGIN;%s:%s$END",name,password);
			send_data_to_service_udp(sql);
			//修改标示位
			m_member_already_login=true;
			return true;
		}
		else
		{
			memset(sql,0x0,sizeof(sql));
			swprintf(sql,L"name=\'%s\'",name);
			result = m_db_query.table_data_existence(member_select_expr.row_count_expr.c_str(),sql);
			if (result)
			{
				return false;
			}
		}
		//失败
		return false;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::member_show_error_tip(int error_code)
{
	try
	{
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		swprintf(data,L"<data><info>%s</info></data>",g_all_language[error_code].c_str());
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"vipError",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::member_show_error_tip(TCHAR* error_msg)
{
	try
	{
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		swprintf(data,L"<data><info>%s</info></data>",error_msg);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"vipError",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::show_error_tip(int error_code, TCHAR *fun)
{
	try
	{
		TCHAR data[1024];
		TCHAR request[1024];
		TCHAR msg[1024] = {0x00};
		bool result=false;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		swprintf(data,L"<data><info>%s</info></data>",g_all_language[error_code].c_str());		
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),fun,data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}

	return;
}
void Cflashktv10Wnd::record_delete_show_error_tip(int error_code, int laste_error_code, TCHAR *song_name)
{
	try
	{
		TCHAR data[1024];
		TCHAR request[1024];
		TCHAR msg[1024] = {0x00};
		bool result=false;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		swprintf(data,L"<data><info>%s%s%s</info></data>",g_all_language[error_code].c_str(), song_name, g_all_language[laste_error_code].c_str());		
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"RecordDelteError",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}

	return;
}

bool Cflashktv10Wnd::member_change_password(const TCHAR *name,const TCHAR *old_password,const TCHAR *new_password)
{
	try
	{
		TCHAR sql[2048];
		bool result=false;

		memset(sql,0x0,sizeof(sql));

		if (NULL==name)
		{
			return false;
		}
		//检测用户名或密码是否正确
		swprintf(sql,L"name=\'%s\' and password=\'%s\'",name,old_password);
		result = m_db_query.table_data_existence(member_select_expr.row_count_expr.c_str(),sql);
		if (result)
		{
			//存在，修改密码
			memset(sql,0x0,sizeof(sql));
			swprintf(sql,L"update member set password=\'%s\' where name=\'%s\' and password=\'%s\' ",new_password,name,old_password);
			result = m_db_query.exec_sql(sql);
			if (result)
			{
				//发送给后台服务程序
				memset(sql,0x0,sizeof(sql));
				swprintf(sql,L"Message&MEMBERCHANGEPSW;%s:%s:%s$END",name,old_password,new_password);
				send_data_to_service_udp(sql);
				return true;
			}
		}
		//失败
		return false;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::use_smart_pinyin(void)
{
	try
	{
		if (!m_use_smart_pinyin)
		{
			//不使用智能拼音直接返回
			return;
		}
		int row=0;
		std::wstring *result_string=NULL;
		TCHAR select_letter[64];
		int select_letter_count=0;
		bool result=false;
		int page_index=0;

		memset(select_letter,0x0,sizeof(select_letter));

		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_title:	//歌名点歌
		case page_opera:	//列表_戏曲
		case page_language:     //语种点歌
		case page_singer_song: //具体歌星歌曲列表
		case page_theme_song:       //主题点歌
		case page_new_theme_song:
		case page_class:       //分类点歌
		case page_new_song:    //新歌页面
		case page_era_song:       //年代金曲
		case page_search_song:    //搜索歌曲
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
		case page_write:    //手写
		case page_voice_china:   //好声音
			{
				row = m_db_query.get_total_row_count();
				if ((row>0) && (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct spell_first_letter_abbreviation from song",song_query_condition,SONG_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		case page_movie_song:     //影视金曲
			{
				row = m_db_query.get_total_row_count();
				if ((row>0) && (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct moive_spell_first_letter from song",song_query_condition,SONG_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		case page_top_song:  //排行页面
			{
				row = m_db_query.get_total_row_count();
				if ((row>0) && (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct spell_first_letter_abbreviation from top_song",song_query_condition,SONG_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		case page_singer:         //歌星照片列表
		case page_custom_singer:  //场所歌星
		case page_voice_china_singer:
			{
				row = m_db_query.get_total_row_count();
				if ((row>0)&&(!singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct spell_first_letter_abbreviation from singer",singer_query_condition,SINGER_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		case page_movie:  //电影页面
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
			{
				row = m_db_query.get_total_row_count();
				if ((row>0)&&(!movie_query_condition[MOVIE_SFSA_SUFFIX].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct spell_first_letter_abbreviation from movie",movie_query_condition,MOVIE_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,movie_query_condition[MOVIE_SFSA_SUFFIX].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		case page_member_song:  //会员歌曲页面
			{
				row = m_db_query.get_total_row_count();
				if ((row>0) && (!song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.empty()))
				{
					result_string = new std::wstring[row];
					if (result_string)
					{
						result = m_db_query.query_db_get_table_data(result_string,L"select distinct spell_first_letter_abbreviation from member_song",song_query_condition,SONG_CONDITION_NUMS,row,row,0);
						if (result)
						{
							//得到可以点击的字符
							result = get_show_letter(result_string,row,song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str(),select_letter,select_letter_count);
							if (result)
							{
								//调用智能拼音,屏蔽不能查询的字符
								flash_yinpin_hide_letter(select_letter,select_letter_count);
							}
						}
						delete []result_string;
						result_string = NULL;
					}
				}
				else
				{
					//全部可以显示
					//调用智能拼音,屏蔽不能查询的字符
					_tcscpy(select_letter,L"abcdefghijklmnopqrstuvwxyz");
					flash_yinpin_hide_letter(select_letter,26);
				}
			}
			break;
		default:
			break;
		}
	}
	catch (...)
	{

	}
	return ;
}

bool Cflashktv10Wnd::get_show_letter(std::wstring result_string[],int array_size,const TCHAR *query_letter,TCHAR select_letter[],int &select_letter_count)
{
	try
	{
		if (NULL==query_letter)
		{
			return false;
		}

		TCHAR letter;
		bool exist=false;
		int letter_count=0;
		const TCHAR *first_query_letter=NULL;

		for (int i=0;i<array_size;i++)
		{
			//2011-04-08 add
			if (m_use_obscure_query)
			{
				//启用模糊查询
				first_query_letter = _tcsstr(result_string[i].c_str(),query_letter);
				if (NULL==first_query_letter)
				{
					continue;
				}
				//得到字符数
				letter_count = first_query_letter-result_string[i].c_str()+_tcslen(query_letter);
			}
			else
			{
				//不启用模糊查询
				letter_count = _tcslen(query_letter);
			}
			if (result_string[i].length()<=letter_count)
			{
				continue;
			}
			//得到一个字符
			letter = result_string[i][letter_count];
			exist = false;
			for (int j=0;j<select_letter_count;j++)
			{
				//使用小写进行比较
				if (select_letter[j]==(letter+32))
				{
					//已经存在
					exist = true;
					break;
				}
			}
			if (!exist && (letter>='A') && (letter<='Z'))
			{
				//如果不存在就加入
				//使用小写
				select_letter[select_letter_count] = letter+32;
				select_letter_count++;
			}
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::flash_yinpin_hide_letter(TCHAR *select_letter,int select_letter_count)
{
	try
	{
		TCHAR hide_letter[64];
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;
		bool exist=false;
		int hide_letter_count=0;
		TCHAR command[256];

		memset(hide_letter,0x0,sizeof(hide_letter));
		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));
		memset(command,0x0,sizeof(command));

		//找到要屏蔽的字符，使用小写字符
		for (int i=97;i<=122;i++)  //26个小写字符
		{
			exist = false;
			for (int j=0;j<select_letter_count;j++)
			{
				if (i==select_letter[j])
				{
					exist = true;
					break;
				}
			}
			if (!exist)
			{
				//如果不存在就加入
				if (0==hide_letter_count)
				{
					hide_letter[2*hide_letter_count] = i;
				}
				else
				{
					hide_letter[2*hide_letter_count-1] = ']';
					hide_letter[2*hide_letter_count] = i;
				}
				hide_letter_count++;				
			}
		}

		//智能拼音显示
		if (SONG_LANGUAGE_KOREAN==m_query_panel_language)
		{
			//韩语
			_tcscpy(command,L"selectedBtnKorean");
		}
		else if (SONG_LANGUAGE_JAPANESE==m_query_panel_language)
		{
			//日语没有智能拼音
			return true;
		}
		else
		{
			//汉语拼音
			_tcscpy(command,L"selectedBtn");
		}
		swprintf(data,L"<data><info str=\"%s\"/></data>",hide_letter);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
		if (result)
		{
			flash_player_call_function(request);
		}
		return true;
	}
	catch (...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::flash_yinpin_show_all_letter(void)
{
	try
	{
		TCHAR request[1024];
		bool result=false;
		TCHAR command[256];

		memset(request,0x0,sizeof(request));
		memset(command,0x0,sizeof(command));

		//智能拼音显示
		if (SONG_LANGUAGE_KOREAN==m_query_panel_language)
		{
			//韩语
			_tcscpy(command,L"selectedBtnKorean");
		}
		else if (SONG_LANGUAGE_JAPANESE==m_query_panel_language)
		{
			//日语
		}
		else
		{
			//汉语拼音
			_tcscpy(command,L"selectedBtn");
		}
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,L"<data><info str=\"\"/></data>");
		if (result)
		{
			flash_player_call_function(request);
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::show_help_info(void)
{
	try
	{
		int page_index=0;
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		//不同的页面显示不同的帮助信息
		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_member_manager:	//会员注册
			{
				swprintf(data,L"<data><info txt=\"%s \"/></data>",g_all_language[1].c_str());
			}
			break;
		case page_title:     //歌名点歌
		case page_lyric:  	 //歌词点歌
		case page_opera:     //戏曲
		case page_language:  //语种点歌
		case page_new_song:  //新歌
		case page_top_song:  //排行
		case page_singer:    //歌星页面
		case page_custom_singer: //场所歌星
		case page_theme_song:         //主题页面
		case page_new_theme_song:
		case page_class:         //分类点歌
		case page_movie:         //电影页面
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
		case page_U_disk:        //U盘播歌曲
		case page_selected:	     //已选页面
		case page_singer_song:   //具体歌星的歌曲
		case page_movie_song:    //影视金曲
		case page_era_song:      //年代金曲
		case page_number_song:   //编号选歌
		case page_singed:        //已唱页面
		case page_write:        //手写点歌
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
		case page_voice_china_singer:
			{
				swprintf(data,L"<data><info txt=\"%s\"/></data>",g_all_language[0].c_str());
			}
			break;
		case page_proposal:    //意见调查
			{
				swprintf(data,L"<data><info txt=\"%s\"/></data>",g_all_language[6].c_str());
			}
			break;
		case page_recording:   //录音页面
			{
				swprintf(data,L"<data><info txt=\"%s\"/></data>",g_all_language[54].c_str());
			}
			break;
			//case page_video:      //屏切视频
			//	{
			//		swprintf(data,L"<data><info txt=\"%s\"/></data>",g_all_language[56].c_str());
			//	}
			//	break;
		default:
			{
				//不提示
				_tcscpy(data,L"<data><info txt=\"\"/></data>");
			}
			break;
		}
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"help_info",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::song_pre_next_page_change(select_expr &table_select_expr,int page_operate,int operate_type)
{
	try
	{
		TCHAR request[2048*12];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		int page_index=0;
		int page_show_row_count=0;

		memset(request,0x0,sizeof(request));

		//得到最后一页索引
		page_index = m_flash_manage.get_last_page_index();

		if (page_index == page_theme_song || page_index == page_new_theme_song)
		{
			TCHAR request[2048] = {0x00};
			swprintf(request,L"<invoke name=\"theme_song_name\" returntype=\"xml\"><arguments><string><data><pageinfo themesongname=\"theme_song_name\" logo_url=\"\" page_title=\"%s\"/></data></string></arguments></invoke>", m_pre_theme_name.c_str());
			flash_player_call_function(request);
		}
		//页显示的行数
		page_show_row_count = m_page_show_row_count;
		//设置排序方式
		set_query_sort_mode();
		//通过数据库查询
		result_set = new std::wstring[table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count];
		if (result_set)
		{
			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,table_select_expr.result_column_nums,table_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,m_db_order_item,SCREEN_SHOW_PAGE_COUNT,page_operate,page_show_row_count);
			if (row<0)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}

			//得到总行数和页数
			row = m_db_query.get_total_row_count();
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//设置歌曲列表
			result = m_query_song_manager.set_song_list(result_set,table_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*page_show_row_count,table_select_expr.result_column_nums,page_count,cur_page_number,page_show_row_count);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}

			//WriteLog(__FL__, song_list_xml.c_str());

			memset(request,0x0,sizeof(request));
			//if (CUR_PAGE_OPERATE==page_operate)
			//{
			//显示当前页，需要替换三屏数据
			//	result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			//}
			//else
			//{
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,operate_type,m_song_show_mode);
			//}
			if (!result)
			{
				return false;
			}
			//显示行页信息
			show_row_and_page_count(L"false",row,page_count,cur_page_number);
			flash_player_call_function(request);

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::movie_pre_next_page_change(int page_operate,int operate_type)
{
	if(page_operate == PRE_PAGE_OPERATE)
	{
		if(m_film_manager.m_npage_index > 0)
			m_film_manager.m_npage_index--;
	}
	else if(page_operate == NEXT_PAGE_OPERATE)
	{
		m_film_manager.m_npage_index++;
	}
	else if(page_operate == FIRST_PAGE_OPERATE)
	{
		m_film_manager.m_npage_index = 0;
	}
	movie_query_show_data();
	return true;
	//以下代码不再使用，可以删除
	//try
	//{
	//	TCHAR request[10240];
	//	std::wstring *result_set=NULL;
	//	std::wstring song_list_xml;
	//	int row=0;
	//	bool result=false;
	//	int page_count=0;
	//	int cur_page_number=0;
	//	int page_index=0;

	//	memset(request,0x0,sizeof(request));

	//	//数据库成功打开
	//	result_set = new std::wstring[movie_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
	//	if (result_set)
	//	{
	//		//初始化一下
	//		m_query_song_manager.initialized_variables();
	//		//查询数据库得到数据
	//		row = m_db_query.get_table_data(result_set,movie_select_expr.result_column_nums,movie_select_expr.result_column_expr.c_str(),movie_query_condition,MOVIE_CONDITION_NUMS,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,page_operate,m_page_show_row_count);
	//		if (row<0)
	//		{
	//			delete []result_set;
	//			result_set = NULL;
	//			return false;
	//		}

	//		//得到总行数和页数
	//		row = m_db_query.get_total_row_count();
	//		page_count = m_db_query.get_total_page_count();
	//		cur_page_number = m_db_query.get_cur_page_number();

	//		//设置电影列表
	//		result = m_query_song_manager.set_movie_list(result_set,movie_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,movie_select_expr.result_column_nums,page_count,cur_page_number);
	//		if (!result)
	//		{
	//			delete []result_set;
	//			result_set=NULL;
	//			return false;
	//		}
	//		//注意释放空间
	//		delete []result_set;
	//		result_set=NULL;

	//		result = m_query_song_manager.make_movie_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count);
	//		if (!result)
	//		{
	//			return false;
	//		}
	//		memset(request,0x0,sizeof(request));
	//		page_index = m_flash_manage.get_last_page_index();
	//		if (CUR_PAGE_OPERATE==page_operate)
	//		{
	//			//显示当前页，需要替换三屏数据
	//			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,SONG_SHOW_MODE_LIST);
	//		}
	//		else
	//		{
	//			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,operate_type,SONG_SHOW_MODE_LIST);
	//		}
	//		if (!result)
	//		{
	//			return false;
	//		}
	//		flash_player_call_function(request);

	//		//显示行页信息
	//		show_row_and_page_count(L"false",row,page_count,cur_page_number);

	//		return true;
	//	}

	//	return false;
	//}
	//catch (...)
	//{

	//}
	//return false;
}

bool Cflashktv10Wnd::member_song_pre_next_page_change(int page_operate,int operate_type)
{
	try
	{
#if 0
		//得到当前页面
		int current_page = 0;
		m_memeber_manage[m_activate_vip_button].set_current_member_page((PAGE_OPERATE)page_operate);

		current_page = m_memeber_manage[m_activate_vip_button].get_current_member_page();

		//发送给网络请求数据
#else
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		int page_index=0;

		memset(request,0x0,sizeof(request));
		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//赋值查询条件
		song_query_condition[MEMBER_NAME_SUFFIX].expression = m_member_name;
		//分配空间
		result_set = new std::wstring[member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
		if (result_set)
		{
			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,member_song_select_expr.result_column_nums,member_song_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,page_operate,m_page_show_row_count);
			if (row<0)
			{
				delete []result_set;
				result_set=NULL;
				return false;
			}

			//得到总行数和页数
			row = m_db_query.get_total_row_count();
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//显示行页信息
			show_row_and_page_count(L"false",row,page_count,cur_page_number);

			//设置歌曲列表
			result = m_query_song_manager.set_song_list(result_set,member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,member_song_select_expr.result_column_nums,page_count,cur_page_number,m_page_show_row_count);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}
			if (CUR_PAGE_OPERATE==page_operate)
			{
				//显示当前页，需要替换三屏数据
				result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			}
			else
			{
				result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,operate_type,m_song_show_mode);
			}
			if (result)
			{
				flash_player_call_function(request);
			}

			return true;
		}

		return false;
#endif

	}
	catch (...)
	{

	}

	return false;
}
/*
bool Cflashktv10Wnd::member_song_pre_next_page_change(int page_operate,int operate_type)
{
try
{
TCHAR request[10240];
std::wstring *result_set=NULL;
std::wstring song_list_xml;
int row=0;
bool result=false;
int page_count=0;
int cur_page_number=0;
int page_index=0;

memset(request,0x0,sizeof(request));
//得到页面索引
page_index = m_flash_manage.get_last_page_index();
//分配空间
result_set = new std::wstring[member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
if (result_set)
{
//初始化一下
m_query_song_manager.initialized_variables();
//查询数据库得到数据
row = m_db_query.get_table_data(result_set,member_song_select_expr.result_column_nums,member_song_select_expr.result_column_expr.c_str(),song_query_condition,SONG_CONDITION_NUMS,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,page_operate,m_page_show_row_count);
if (row<0)
{
delete []result_set;
result_set=NULL;
return false;
}

//得到总行数和页数
row = m_db_query.get_total_row_count();
page_count = m_db_query.get_total_page_count();
cur_page_number = m_db_query.get_cur_page_number();

//设置歌曲列表
result = m_query_song_manager.set_song_list(result_set,member_song_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,member_song_select_expr.result_column_nums,page_count,cur_page_number,m_page_show_row_count);
if (!result)
{
delete []result_set;
result_set = NULL;
return false;
}
//注意释放空间
delete []result_set;
result_set = NULL;

result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
if (!result)
{
return false;
}
if (CUR_PAGE_OPERATE==page_operate)
{
//显示当前页，需要替换三屏数据
result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
}
else
{
result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,operate_type,m_song_show_mode);
}
if (result)
{
flash_player_call_function(request);
}

//显示行页信息
show_row_and_page_count(L"false",row,page_count,cur_page_number);

return true;
}

return false;
}
catch (...)
{

}
return false;
}
*/
bool Cflashktv10Wnd::song_recorder_pre_next_page_change(int page_operate,int operate_type)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		TCHAR row_page_data[256];
		int page_index=0;

		memset(request,0x0,sizeof(request));
		memset(row_page_data,0x0,sizeof(row_page_data));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//数据库成功打开
		result_set = new std::wstring[song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count];
		if (result_set)
		{
			//初始化一下
			m_query_song_manager.initialized_variables();
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,song_recorder_select_expr.result_column_nums,song_recorder_select_expr.result_column_expr.c_str(),NULL,0,NULL,NULL,SCREEN_SHOW_PAGE_COUNT,page_operate,m_page_show_row_count);
			if (row<0)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}

			//得到总行数和页数
			row = m_db_query.get_total_row_count();
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//显示行页信息
			show_row_and_page_count(L"false",row,page_count,cur_page_number);

			//设置录音歌曲列表
			result = m_query_song_manager.set_song_recorder_list(result_set,song_recorder_select_expr.result_column_nums*SCREEN_SHOW_PAGE_COUNT*m_page_show_row_count,song_recorder_select_expr.result_column_nums,page_count,cur_page_number);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;

			result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
			if (!result)
			{
				return false;
			}

			//WriteLog(__FL__, song_list_xml.c_str());

			if (CUR_PAGE_OPERATE==page_operate)
			{
				//显示当前页，需要替换三屏数据
				result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			}
			else
			{
				result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,operate_type,m_song_show_mode);
			}
			if (result)
			{
				flash_player_call_function(request);
			}

			return true;
		}

		return false;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::singer_pre_next_page_change(int page_operate,int operate_type)
{
	try
	{
		TCHAR request[10240];
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row=0;
		bool result=false;
		int page_count=0;
		int cur_page_number=0;
		int page_index=0;

		memset(request,0x0,sizeof(request));

		//设置排序模式
		set_query_sort_mode();


		//数据库成功打开
		result_set = new std::wstring[singer_select_expr.result_column_nums*SINGER_SCREEN_SHOW_PAGE_COUNT*singer_page_show_row_count];
		if (result_set)
		{
			//查询数据库得到数据
			row = m_db_query.get_table_data(result_set,singer_select_expr.result_column_nums,singer_select_expr.result_column_expr.c_str(),singer_query_condition,SINGER_CONDITION_NUMS,NULL,m_db_order_item,SINGER_SCREEN_SHOW_PAGE_COUNT,page_operate,singer_page_show_row_count);
			if (row<0)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}


			//得到总行数和页数
			row = m_db_query.get_total_row_count();
			page_count = m_db_query.get_total_page_count();
			cur_page_number = m_db_query.get_cur_page_number();

			//初始化一下
			m_query_singer_manager.initialized_variables();
			result = m_query_singer_manager.set_singer_list(result_set,singer_select_expr.result_column_nums*SINGER_SCREEN_SHOW_PAGE_COUNT*singer_page_show_row_count,singer_select_expr.result_column_nums,page_count,cur_page_number);
			if (!result)
			{
				delete []result_set;
				result_set = NULL;
				return false;
			}
			//注意释放空间
			delete []result_set;
			result_set = NULL;


			//组织三屏数据
			result = m_query_singer_manager.make_singer_list_xml(song_list_xml);


			if (!result)
			{
				return false;
			}
			//得到页面索引
			page_index = m_flash_manage.get_last_page_index();
			//if (CUR_PAGE_OPERATE==page_operate)
			//{
			//显示当前页，需要替换三屏数据
			//	result = m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"SingerPhotoList",song_list_xml.c_str(),true,page_index,0);
			//}
			//else
			//{
			result = m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"SingerPhotoList",song_list_xml.c_str(),false,page_index,operate_type);
			//}
			if (!result)
			{
				return false;
			}

			//显示行页信息
			show_row_and_page_count(L"false",row,page_count,cur_page_number);
			flash_player_call_function(request);

			return true;
		}
		return false;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::chang_select_song_color(song_info &song_information,int number,bool priority)
{
	try
	{
		TCHAR request[1024];
		TCHAR song_show_info[1024];
		TCHAR song_name[256];
		int select_song_count=0;
		bool result=false;
		int query_song_count=0;
		int sing_song_count=0;
		int page_index=0;
		TCHAR page_name[256];
		TCHAR movie_name[256];
		int down_update_song=0;
		TCHAR szLocal_path[MAX_PATH] = {0x00};
		int local_path = -1;

		memset(request,0x0,sizeof(request));
		memset(song_show_info,0x0,sizeof(song_show_info));
		memset(song_name,0x0,sizeof(song_name));
		memset(page_name,0x0,sizeof(page_name));
		memset(movie_name,0x0,sizeof(movie_name));


		//得到选择的歌曲数目
		page_index = m_flash_manage.get_last_page_index();
		select_song_count = m_video_play_manager.get_select_song_count(1);
		query_song_count = m_db_query.get_total_row_count();
		sing_song_count = m_video_play_manager.get_sing_song_count();
		int song_sort = song_information.get_song_sort();
		int maiba_pk = (song_sort>>2)&0x01;
		if (priority ||(0==select_song_count) || (query_song_count<=m_page_show_row_count)||((sing_song_count<=m_page_show_row_count)&&(page_singed==page_index)))
		{
			//插入,改变了原有顺序，所以进行刷屏
			refresh_screen_list();
		}
		else
		{
			//得到歌曲名字
			result = song_information.get_song_name(song_name);
			down_update_song = song_information.get_down_update_song();
			result = song_information.get_local_path(szLocal_path);
			if (result)
			{
				swscanf(szLocal_path, L"%d", &local_path);
			}

			if (page_opera==page_index)
			{
				//戏曲页面特殊处理，显示出自那
				TCHAR *split_symbol = _tcsrchr(song_name,'-');
				if (split_symbol)
				{
					split_symbol[0] = '\0';
				}
				//得到出处
				memset(movie_name,0x0,sizeof(movie_name));
				song_information.get_moive_name(movie_name);
				if (0!=_tcscmp(movie_name,L""))
				{
					//添加出处
					swprintf(song_name+_tcslen(song_name),L"-%s",movie_name);
				}
			}

			//得到页面名字
			result = m_flash_manage.get_page_name(page_index,page_name,m_song_show_mode);
			if (result)
			{
				//存在已选歌曲，则放到最后
				//swprintf(song_show_info,L"<data><item color=\"%s\" song_txt=\"%s[%s%d]\" index =\"%d\" page_name=\"%s\"/></data>",m_select_song_name_color.c_str(),song_name,g_all_language[4].c_str(),select_song_count,number,page_name);

				if (1 == down_update_song)
				{
					swprintf(song_show_info,L"<data><item color=\"%s\" song_txt=\"%s[%s]\" index =\"%d\" page_name=\"%s\" is_down=\"%d\" is_update=\"%d\" maiba_pk=\"%d\"/></data>",m_select_song_name_color.c_str(),song_name,g_all_language[123].c_str(),number,page_name, local_path == 1 ? 1:0, local_path == 2 ? 1:0, maiba_pk);
				}
				else if (2 == down_update_song)
				{
					swprintf(song_show_info,L"<data><item color=\"%s\" song_txt=\"%s[%s]\" index =\"%d\" page_name=\"%s\" is_down=\"%d\" is_update=\"%d\" maiba_pk=\"%d\"/></data>",m_select_song_name_color.c_str(),song_name,g_all_language[124].c_str(),number,page_name, local_path == 1 ? 1:0, local_path == 2 ? 1:0, maiba_pk);
				}
				else
				{
					swprintf(song_show_info,L"<data><item color=\"%s\" song_txt=\"%s[%s%d]\" index =\"%d\" page_name=\"%s\" is_down=\"%d\" is_update=\"%d\" maiba_pk=\"%d\"/></data>",m_select_song_name_color.c_str(),song_name,g_all_language[4].c_str(),select_song_count,number,page_name, local_path == 1 ? 1:0, local_path == 2 ? 1:0, maiba_pk);
				}

				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"SongRow",song_show_info);
				if (result)
				{
					flash_player_call_function(request);
				}

				//更新已选列表 
				//show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_flowers_song(const TCHAR *args,bool preview_song)
{
	try
	{
		TCHAR sql[10240];
		int number=0;
		song_info person_song_info;
		bool result=false;
		TCHAR song_id[128];
		int page_index=0;
		TCHAR request_data[1024];
		TCHAR identitycard[256];
		TCHAR url_code[256];

		memset(song_id,0x0,sizeof(song_id));
		memset(sql,0x0,sizeof(sql));
		memset(request_data,0x0,sizeof(request_data));
		memset(identitycard,0x0,sizeof(identitycard));
		memset(url_code,0x0,sizeof(url_code));

		page_index = m_flash_manage.get_last_page_index();


		_tcscpy(song_id,args);

		m_memeber_manage[m_activate_vip_button].get_user_identitycard(identitycard);

		if (page_index == page_dekaron_maiba)
		{
			//得到分享的URL
			get_dekaron_song_url_id(song_id,url_code);
			if (0 != _tcscmp(url_code,L""))
			{
				swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/SENDFLOWER?type=1&voiceid=%s&identitycard=%s",url_code,identitycard);
			}
			else
			{
				return;
			}
		}
		else
		{
			swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/OPERATE?type=1&voiceid=%s&identitycard=%s",song_id,identitycard);
		}

		//发送献花
		thread_send_to_box_tcp_function(request_data,18007);

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_person_song(const TCHAR *args,bool preview_song)
{
	try
	{
#if 0
		TCHAR sql[10240];
		int number=0;
		song_info person_song_info;
		bool result=false;
		TCHAR song_id[128];
		int page_index=0;
		TCHAR request_data[1024];
		TCHAR identitycard[256];

		memset(song_id,0x0,sizeof(song_id));
		memset(sql,0x0,sizeof(sql));
		memset(request_data,0x0,sizeof(request_data));
		memset(identitycard,0x0,sizeof(identitycard));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();

		//得到当前用户的id
		m_memeber_manage[m_activate_vip_button].get_user_identitycard(identitycard);

		switch (page_index)
		{
		case page_find_maiba:
			{
				swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/OPERATE?type=3&voiceid=%s&identitycard=%s",args,identitycard);
			}
			break;
		default:
			{
				if (preview_song)
				{
					//收藏预览歌曲
					person_song_info = m_preview_song_info;
					m_preview_song_info.get_song_id(song_id);
				}
				else
				{
					_tcscpy(song_id,args);
				}
				//收藏私房歌曲
				swprintf(request_data,L"SDEND_ORDER:PLACEVERSION/STORESONG?songid=%s&identitycard=%s",song_id,identitycard);
			}
			break;
		}

		//发送收藏码
		thread_send_to_box_tcp_function(request_data,18007);
#else
		TCHAR sql[10240];
		int number=0;
		song_info person_song_info;
		bool result=false;
		TCHAR song_id[16];
		int page_index=0;

		memset(song_id,0x0,sizeof(song_id));
		memset(sql,0x0,sizeof(sql));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (preview_song)
		{
			//收藏预览歌曲
			person_song_info = m_preview_song_info;
		}
		else
		{
			if (NULL==args)
			{
				return;
			}
			swscanf(args,L"%d",&number);
			//得到要收藏的歌曲信息
			if (page_singed==page_index)
			{
				//已唱
				result = m_video_play_manager.get_sing_song_information(person_song_info,number,true);
			}
			else
			{
				//其他
				result = m_query_song_manager.get_song_info(number,person_song_info);
			}
			if (!result)
			{
				return;
			}
		}

		//得到歌曲id
		person_song_info.get_song_id(song_id);
		swprintf(sql,L"song_id=\'%s\'and member_name=\'%s\'",song_id,m_member_name);
		//查找是否存在
		result = m_db_query.table_data_existence(member_song_select_expr.row_count_expr.c_str(),sql);
		if (result)
		{
			//存在，进行提示，不允许插入
			flash_show_tip_message(28);
			return;
		}
		//录入会员数据库中
		memset(sql,0x0,sizeof(sql));
		swprintf(sql,L"insert into member_song(%s) select %s from song where song_id=\'%s\' limit 1 offset 0",song_select_expr.all_column_expr.c_str(),song_select_expr.all_column_expr.c_str(),song_id);
		WriteLog(__FL__, sql);
		result = m_db_query.exec_sql(sql);
		if (!result)
		{
			return;
		}
		//添加会员名字
		memset(sql,0x0,sizeof(sql));
		swprintf(sql,L"update member_song set member_name=\'%s\' where song_id=\'%s\' and member_name ISNULL",m_member_name,song_id);
		result = m_db_query.exec_sql(sql);
		if (result)
		{
			//执行成功，会员歌曲数加一
			m_member_song_count++;
			//发送给后台服务器
			memset(sql,0x0,sizeof(sql));
			swprintf(sql,L"Message&MEMBERSONGID;ADD:%s:%s$END",m_member_name,song_id);
			send_data_to_service_udp(sql);
			//提示插入成功
			flash_show_tip_message(29);
		}
#endif		
		return;
	}
	catch (...)
	{

	}
	return;
}

/*
void Cflashktv10Wnd::flash_message_call_person_song(const TCHAR *args,bool preview_song)
{
try
{
TCHAR sql[10240];
int number=0;
song_info person_song_info;
bool result=false;
TCHAR song_id[128];
int page_index=0;

memset(song_id,0x0,sizeof(song_id));
memset(sql,0x0,sizeof(sql));

//得到页面索引
page_index = m_flash_manage.get_last_page_index();
if (preview_song)
{
//收藏预览歌曲
person_song_info = m_preview_song_info;
}
else
{
if (NULL==args)
{
return;
}
swscanf(args,L"%d",&number);
//得到要收藏的歌曲信息
if (page_singed==page_index)
{
//已唱
result = m_video_play_manager.get_sing_song_information(person_song_info,number,true);
}
else
{
//其他
result = m_query_song_manager.get_song_info(number,person_song_info);
}
if (!result)
{
return;
}
}

//得到歌曲id
person_song_info.get_song_id(song_id);
swprintf(sql,L"song_id=\'%s\'and member_name=\'%s\'",song_id,m_member_name);
//查找是否存在
result = m_db_query.table_data_existence(member_song_select_expr.row_count_expr.c_str(),sql);
if (result)
{
//存在，进行提示，不允许插入
flash_show_tip_message(28);
return;
}
//录入会员数据库中
memset(sql,0x0,sizeof(sql));
swprintf(sql,L"insert into member_song(%s) select %s from song where song_id=\'%s\' limit 1 offset 0",song_select_expr.all_column_expr.c_str(),song_select_expr.all_column_expr.c_str(),song_id);
WriteLog(__FL__, sql);
result = m_db_query.exec_sql(sql);
if (!result)
{
return;
}
//添加会员名字
memset(sql,0x0,sizeof(sql));
swprintf(sql,L"update member_song set member_name=\'%s\' where song_id=\'%s\' and member_name ISNULL",m_member_name,song_id);
result = m_db_query.exec_sql(sql);
if (result)
{
//执行成功，会员歌曲数加一
m_member_song_count++;
//发送给后台服务器
memset(sql,0x0,sizeof(sql));
swprintf(sql,L"Message&MEMBERSONGID;ADD:%s:%s$END",m_member_name,song_id);
send_data_to_service_udp(sql);
//提示插入成功
flash_show_tip_message(29);
}
}
catch (...)
{

}
return;
}
*/
bool Cflashktv10Wnd::show_singer_song_introduction(TCHAR *star_name,TCHAR *star_sex,TCHAR *star_region)
{
	try
	{
		TCHAR temp_condition[1024];
		TCHAR temp_condition1[256];
		bool result=false;

		if (NULL==star_name)
		{
			return false;
		}

		memset(temp_condition,0x0,sizeof(temp_condition));
		memset(temp_condition1,0x0,sizeof(temp_condition1));

		//查询歌手信息
		singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.assign(star_name);

		//显示歌星图片和歌星介绍
		//show_singer_image_introduction(star_name,star_sex,star_region);

		//组织查询条件
		swprintf(temp_condition,L"=\'%s\' or singer_name like \'%%/%s\' or singer_name like \'",star_name,star_name);
		song_query_condition[SINGER_NAME_SUFFIX].operation_symbols = temp_condition;
		song_query_condition[SINGER_NAME_SUFFIX].wildcard = L"/%%\'";
		song_query_condition[SINGER_NAME_SUFFIX].expression.assign(star_name);

		/*
		swprintf(temp_condition,L"=\"%s\" or singer_id2=\"%s\" or singer_id3=\"%s\" ",star_name,star_name,star_name);
		swprintf(temp_condition1,L"or singer_id4=\"%s\"",star_name);
		song_query_condition[SINGER_ID1_STUFFIX].operation_symbols =  temp_condition;
		song_query_condition[SINGER_ID1_STUFFIX].expression =temp_condition1;
		song_query_condition[SINGER_ID1_STUFFIX].wildcard = L"";*/

		/*song_query_condition[SINGER_ID1_STUFFIX].operation_symbols = L" =\'";
		song_query_condition[SINGER_ID1_STUFFIX].expression = star_name;
		song_query_condition[SINGER_ID1_STUFFIX].wildcard = L"\'";*/
		if (m_voice_singer)
		{
			//按照类别赋值查询条件
			song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L" == \'";
			song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"100";
			song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
		}
		//查询数据库和显示结果到flash界面上
		result = song_query_show_data(song_select_expr);


		return true;
	}
	catch (...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::get_singer_image_path(const TCHAR *star_name,TCHAR *star_sex,TCHAR *star_region,TCHAR *image_path)
{
	try
	{
		if ((NULL==star_name)||(NULL==image_path))
		{
			return false;
		}
		std::wstring *result_set=NULL;
		const TCHAR *split_symbol=NULL;
		TCHAR one_singer_name[256];
		TCHAR show_star_picture_path[256];
		TCHAR singer_sex[256];
		query_condition tmp_singer_query_condition[1];
		int row=0;
		bool result=false;

		memset(one_singer_name,0x0,sizeof(one_singer_name));
		memset(show_star_picture_path,0x0,sizeof(show_star_picture_path));
		memset(singer_sex,0x0,sizeof(singer_sex));

		if (0==_tcscmp(star_name,L""))
		{
			//歌星名字不存在,采用默认图片
			swprintf(image_path,L"%s\\%s\\default.jpg",m_work_path,g_folder_name[19]);

			return true;			
		}

		if ((NULL==star_sex)||(NULL==star_region)||(0==_tcscmp(star_region,L"")))
		{
			//通过数据库查询歌星性别和国籍
			//分配空间
			result_set = new std::wstring[singer_select_expr.result_column_nums];
			if (NULL==result_set)
			{
				return false;
			}
			//设置查询条件
			tmp_singer_query_condition[0].column_name = L"singer_name";
			tmp_singer_query_condition[0].operation_symbols = L"=\"";
			tmp_singer_query_condition[0].expression = star_name;
			tmp_singer_query_condition[0].wildcard = L"\"";
			//查询歌星库
			row = m_db_query.query_db_get_table_data(result_set,0,singer_select_expr.result_column_nums,singer_select_expr.result_column_expr.c_str(),tmp_singer_query_condition,1,NULL,NULL,1,0);
			if (row>0)
			{
				_tcscpy(singer_sex,result_set[1].c_str());
				if (star_region)
				{
					_tcscpy(star_region,result_set[2].c_str());
				}
			}
			//删除分配的空间
			delete []result_set;
			result_set = NULL;
		}
		else
		{
			//如果已经存在就不用查询了
			_tcscpy(singer_sex,star_sex);
		}

		//只取第一个歌星名字
		split_symbol = _tcschr(star_name,'/');
		if (split_symbol)
		{
			//取第一个歌星的姓名
			_tcsncpy(one_singer_name,star_name,split_symbol-star_name);
		}
		else
		{
			_tcscpy(one_singer_name,star_name);
		}
		//得到歌星图片路径
		swprintf(show_star_picture_path,L"%s\\%s\\%s.jpg",m_work_path,g_folder_name[19],one_singer_name);
		if (PathFileExists(show_star_picture_path))
		{
			//解密歌星图片
			decrypt_star_picture(show_star_picture_path,true);
		}
		else if (0==_tcscmp(singer_sex,L"2"))
		{
			//默认女图片
			swprintf(show_star_picture_path,L"%s\\%s\\woman.jpg",m_work_path,g_folder_name[19]);
		}
		else if (0==_tcscmp(singer_sex,L"1"))
		{
			//默认男图片
			swprintf(show_star_picture_path,L"%s\\%s\\man.jpg",m_work_path,g_folder_name[19]);
		}
		else if (0==_tcscmp(singer_sex,L"3"))
		{
			//默认对唱图片
			swprintf(show_star_picture_path,L"%s\\%s\\pair.jpg",m_work_path,g_folder_name[19]);
		}

		if (!PathFileExists(show_star_picture_path))
		{
			//采用默认图片
			swprintf(show_star_picture_path,L"%s\\%s\\default.jpg",m_work_path,g_folder_name[19]);
		}

		//拷贝歌星图片路径
		_tcscpy(image_path,show_star_picture_path);

		return true;
	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::show_singer_image_introduction(const TCHAR *star_name,TCHAR *star_sex,TCHAR *star_region)
{
	try
	{
		TCHAR request[10240];
		TCHAR singer_data[1024];
		TCHAR show_star_picture_path[256];
		TCHAR singer_type[256];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(show_star_picture_path,0x0,sizeof(show_star_picture_path));
		memset(singer_data,0x0,sizeof(singer_data));
		memset(singer_type,0x0,sizeof(singer_type));

		if (star_region)
		{
			_tcscpy(singer_type,star_region);
		}

		//得到歌星图片路径
		result = get_singer_image_path(star_name,star_sex,singer_type,show_star_picture_path);
		if (0!=_tcscmp(singer_type,L""))
		{
			//显示歌星的信息到界面上
			swprintf(singer_data,L"<data><info singer_name=\"%s：%s\" image_path=\"%s\"/></data>",singer_type,star_name,show_star_picture_path);
		}
		else
		{
			//没有查询到只显示名字
			swprintf(singer_data,L"<data><info singer_name=\"%s\" image_path=\"%s\"/></data>",star_name,show_star_picture_path);
		}
		memset(request,0x0,sizeof(request));
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"SingerInfo",singer_data);
		if (result)
		{
			flash_player_call_function(request);
		}

		//显示歌星资料
		show_singer_introduction(star_name);

		return true;
	}
	catch(...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::save_data_copy()
{
	try
	{
		//保存条件副本
		int i=0;
		int page_index=0;

		page_index = m_flash_manage.get_last_page_index();
		if (page_index<0)
		{
			return false;
		}

		for (i=0;i<SONG_CONDITION_NUMS;i++)
		{
			song_query_condition_copy[page_index][i] = song_query_condition[i];
		}
		for (i=0;i<SINGER_CONDITION_NUMS;i++)
		{
			singer_query_condition_copy[page_index][i] = singer_query_condition[i];
		}
		for (int i=0;i<MOVIE_CONDITION_NUMS;i++)
		{
			movie_query_condition_copy[page_index][i] = movie_query_condition[i];
		}
		//数据库参数保存副本
		m_db_query.save_data_copy(page_index);
		//歌曲排序方式
		memset(m_song_order_item_copy[page_index],0x0,sizeof(m_song_order_item_copy[page_index]));
		_tcscpy(m_song_order_item_copy[page_index],m_db_order_item);

		//保存高亮按钮编号
		m_button_number_copy[page_index][0] = m_singer_region_button_number;
		m_button_number_copy[page_index][1] = m_language_button_number;
		m_button_number_copy[page_index][2] = m_new_theme_button_number;
		m_button_number_copy[page_index][3] = m_class_button_number;
		m_button_number_copy[page_index][4] = m_new_song_button_number;
		m_button_number_copy[page_index][5] = m_opera_button_number;
		m_button_number_copy[page_index][6] = m_video_button_number;
		m_button_number_copy[page_index][7] = m_word_count_button_number;
		m_button_number_copy[page_index][8] = m_year_button_number;
		m_button_number_copy[page_index][9] = m_movie_button_number;
		m_button_number_copy[page_index][10] = m_song_version_button_number;
		m_button_number_copy[page_index][11] = m_singer_sex_button_number;

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::resume_data_copy()
{
	try
	{
		//把副本赋值回来
		int i=0;
		int page_index=0;

		page_index = m_flash_manage.get_last_page_index();

		for (i=0;i<SONG_CONDITION_NUMS;i++)
		{
			song_query_condition[i] = song_query_condition_copy[page_index][i];
		}
		for (i=0;i<SINGER_CONDITION_NUMS;i++)
		{
			singer_query_condition[i] = singer_query_condition_copy[page_index][i];
		}
		for (int i=0;i<MOVIE_CONDITION_NUMS;i++)
		{
			movie_query_condition[i] = movie_query_condition_copy[page_index][i];
		}
		//数据库参数副本赋值
		m_db_query.resume_data_copy(page_index);
		//歌曲排序方式
		memset(m_db_order_item,0x0,sizeof(m_db_order_item));
		_tcscpy(m_db_order_item,m_song_order_item_copy[page_index]);
		//显示字母
		switch(page_index)
		{
		case page_title:          //歌名点歌
		case page_theme_song:          //主题点歌
		case page_new_theme_song:
		case page_top_song:       //金曲排行
		case page_new_song:       //新歌推荐
		case page_opera:          //经典戏曲
		case page_language:       //语种点歌
		case page_member_song:    //会员歌曲
		case page_singer_song:    //具体歌星的歌曲列表页面
		case page_class:          //分类点歌，即旧的主题
		case page_movie_song:     //影视金曲
		case page_era_song:       //年代金曲
		case page_write:        //手写点歌
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
		case page_voice_china:  //好声音
			{
				show_letter_window(song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str());
			}
			break;
		case page_singer:         //歌星列表
		case page_custom_singer:  //场所歌星
		case page_voice_china_singer:
			{
				show_letter_window(singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.c_str());
			}
			break;
		case page_number_song:  //编号点歌
			{
				show_letter_window(song_query_condition[SONG_ID_SUFFIX].expression.c_str());
			}
			break;
		case page_movie:          //电影欣赏
		case page_concert:  //演唱会
		case page_place_video:  //场所视频
			{
				show_letter_window(movie_query_condition[MOVIE_SFSA_SUFFIX].expression.c_str());
			}
			break;
		default:
			break;
		}

		//恢复高亮按钮编号
		m_singer_region_button_number = m_button_number_copy[page_index][0];
		m_language_button_number = m_button_number_copy[page_index][1];
		m_new_theme_button_number = m_button_number_copy[page_index][2];
		m_class_button_number = m_button_number_copy[page_index][3];
		m_new_song_button_number = m_button_number_copy[page_index][4];
		m_opera_button_number = m_button_number_copy[page_index][5];
		m_video_button_number = m_button_number_copy[page_index][6];
		m_word_count_button_number = m_button_number_copy[page_index][7];
		m_year_button_number = m_button_number_copy[page_index][8];
		m_movie_button_number = m_button_number_copy[page_index][9];
		m_song_version_button_number = m_button_number_copy[page_index][10];
		m_singer_sex_button_number = m_button_number_copy[page_index][11];

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::update_select_song_count(void)
{
	try
	{
		int select_song_count=0;
		int sing_song_count=0;
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;
		int page_index=0;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		//得到已选歌曲数
		select_song_count = m_video_play_manager.get_select_song_count();
		//得到已经演唱数
		sing_song_count = m_video_play_manager.get_sing_song_count();

		//显示已选歌曲的数据
		swprintf(data,L"<data><info str=\"%d\" str2=\"%d\"/></data>",select_song_count,sing_song_count);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"songsAmount",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::flash_message_call_singer_clear_all(const TCHAR *args)
{
	try
	{
		//清空歌星的所有条件
		clear_all_query_condition();
		//查询数据库和显示结果到flash界面上，通过热度排序
		singer_query_show_data();

		m_singer_region_button_number = 0;		

		//重置按钮状态
		set_flash_button_state(L"singer_clear_all",m_singer_region_button_number);
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_singer_region(const TCHAR *args)
{
	try
	{
		int singer_region=0;
		bool result=false;
		TCHAR request[1024];
		int page_index=0;
		int pre_button_number=0;
		query_condition singer_region_condition;  //歌星的区域

		memset(request,0x0,sizeof(request));

		swscanf(args,L"%d",&singer_region);

		//保存歌星区域条件
		singer_region_condition = singer_query_condition[SINGER_REGION_SUFFIX];
		pre_button_number = m_singer_region_button_number;

		//清空歌星的所有条件
		//clear_all_query_condition();

		//得到当前页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (page_singer==page_index)
		{
			//置歌星区域条件
			switch(singer_region)
			{
			case MAINLAND_MALE:  //华人男星
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"Эрэгтэй дуучин";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类  大陆男歌星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"1";

					}
					else
					{
						//新分类  华人男星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"1";
					}
#endif
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case MAINLAND_FEMALE://华人女星
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"Эмэгтэй дуучин";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类 大陆女歌星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"2";

					}
					else
					{
						//新分类 华人女星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"2";
					}
#endif
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case HK_TAIWAN_MALE: //华人组合
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"Хамтлаг";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类  港台男歌星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"3";

					}
					else
					{
						//新分类 华人组合
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"3";
					}
#endif
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case HK_TAIWAN_FEMALE://韩日歌星
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"Япон, Солонгос";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类 港台女歌星
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"4";
					}
					else
					{
						//新分类 韩日歌星(日本男星、日本女星、韩国男星、韩国女星)
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"4";
					}
#endif
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case CONCERT_PORTFOLIO://欧美歌星
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"АНУ,  Европ";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类  演唱组合
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"5";
					}
					else
					{
						//新分类 欧美歌星(欧美男星、欧美女星)
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"5";
					}
#endif
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case FOREIGN_SINGER:  //外国组合
				{
#ifdef MONGOLIA_VERSION  //蒙古版本
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"Гадаад хамтлаг";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
#else
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类 %外国%
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"6";
						//singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" like \"";
						//singer_query_condition[SINGER_REGION_SUFFIX].expression = L"外国";
						//singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"%\"";
					}
					else
					{
						//新分类 外国组合(日本组合、韩国组合、欧美组合)
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"6";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					}
#endif
				}
				break;
			case POPULAR_SINGER: //热门歌手  改成了主打歌星
				{
					//不分区域
					//singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_name";
					//singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" in (";
					//singer_query_condition[SINGER_REGION_SUFFIX].expression = L"select singer_name from top_song";
					//singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L")";

					singer_query_condition[POPULAR_SINGER_SUFFIX].expression = L"1";
				}
				break;
			case ALL_SINGER:     //全部歌手
				{
					if (SINGER_CLASS_MODE_OLD==m_singer_class_mode)
					{
						//旧分类
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
						singer_query_condition[SINGER_REGION_SUFFIX].expression.clear();
					}
					else
					{
						//新分类
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression.clear();
					}
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					////查询数据库和显示结果到flash界面上，通过拼音首字母排序
					//result = singer_query_show_data();
					//if (!result)
					//{
					//	result = singer_query_show_data();
					//}
				}
				break;
			case CHINESE: //华人
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"20";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					}
				}
				break;
			case EUROPE_AMERICA: //欧美
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"23";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					}
				}
				break;
			case KOREA: //韩国
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"21";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					}
				}
				break;
			case JAPAN: //日本
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region_new";
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"22";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					}
				}
				break;
			case OTHER: //其他
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_REGION_SUFFIX].expression = L"\'20\',\'21\',\'22\',\'23\'";
						singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L"not in (";
						singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L")";
					}
				}
				break;
			default:
				return;
			}
			m_singer_region_button_number = singer_region;
			if (m_singer_region_button_number>13)
			{
				m_singer_region_button_number = 0;
			}
		}
		else
		{
			//场所歌星
			switch(singer_region)
			{
			case 2:  //男歌星
				{
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"男歌星";
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case 3:  //女歌星
				{
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"女歌星";
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			case 4:  //原创歌星
				{
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
					singer_query_condition[SINGER_REGION_SUFFIX].expression = L"原创歌星";
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
				}
				break;
			default:
			case 5:  //全部
				{
					singer_query_condition[SINGER_REGION_SUFFIX].column_name = L"singer_region";
					singer_query_condition[SINGER_REGION_SUFFIX].expression.clear();
					singer_query_condition[SINGER_REGION_SUFFIX].operation_symbols = L" = \"";
					singer_query_condition[SINGER_REGION_SUFFIX].wildcard = L"\"";
					//查询数据库和显示结果到flash界面上，通过拼音首字母排序
					result = singer_query_show_data();
					if (!result)
					{
						result = singer_query_show_data();
					}
				}
				return;
			}
			m_singer_region_button_number = singer_region-1;
			if (m_singer_region_button_number>4)
			{
				m_singer_region_button_number = 4;
			}
		}

		//查询数据库和显示结果到flash界面上，通过热度排序
		result = singer_query_show_data();
		if (!result)
		{
			//恢复歌星区域条件
			singer_query_condition[SINGER_REGION_SUFFIX] = singer_region_condition;
			m_singer_region_button_number = pre_button_number;
			result = singer_query_show_data();
		}

		//重置按钮状态
		set_flash_button_state(L"singer_button",m_singer_region_button_number);

		return;
	}
	catch (...)
	{

	}
	return;
}
void Cflashktv10Wnd::flash_message_call_singer_sex_ex(const TCHAR *args)
{
	try
	{
		int singer_region=0;
		bool result=false;
		TCHAR request[1024];
		int page_index=0;
		int pre_button_number=0;
		query_condition singer_region_condition;  //歌星的区域

		memset(request,0x0,sizeof(request));

		swscanf(args,L"%d",&singer_region);

		//保存歌星区域条件
		singer_region_condition = singer_query_condition[SINGER_SEX_SUBSCRIPT];
		pre_button_number = m_singer_region_button_number;

		//清空歌星的所有条件
		//clear_all_query_condition();

		//得到当前页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (page_singer==page_index)
		{
			//置歌星区域条件
			switch(singer_region)
			{
			case 0: //所有
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression.clear();
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L" = \"";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L"\"";
					}
				}
				break;
			case 1: //男
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L" = \"";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression = L"1";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L"\"";
					}
				}
				break;
			case 2: //女
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L" = \"";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression = L"2";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L"\"";
					}
				}
				break;
			case 3:	//组合
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L"not in (";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression = L"\'1\',\'2\',\'8\',\'9\',\'10\'";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L")";
					}
				}
				break;
			case 4:	//乐队
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L" = \"";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression = L"9";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L"\"";
					}
				}
				break;
			case 5:	//合唱
				{
					if (SINGER_CLASS_MODE_NEW==m_singer_class_mode)
					{
						singer_query_condition[SINGER_SEX_SUBSCRIPT].column_name = L"singer_sex";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].operation_symbols = L" = \"";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].expression = L"10";
						singer_query_condition[SINGER_SEX_SUBSCRIPT].wildcard = L"\"";
					}
				}
				break;
			default:
				return;
			}
			m_singer_region_button_number = singer_region;
			if (m_singer_region_button_number>5)
			{
				m_singer_region_button_number = 0;
			}
		}

		//查询数据库和显示结果到flash界面上，通过热度排序
		result = singer_query_show_data();
		if (!result)
		{
			//恢复歌星区域条件
			singer_query_condition[SINGER_SEX_SUBSCRIPT] = singer_region_condition;
			m_singer_region_button_number = pre_button_number;

			result = singer_query_show_data();
		}

		//重置按钮状态
		set_flash_button_state(L"singer_sex",m_singer_region_button_number);

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::set_flash_button_state(TCHAR *command,int button_number)
{
	try
	{
		int page_index=0;
		TCHAR request[1024];
		TCHAR send_data[1024];
		TCHAR page_name[256];
		bool result=false;

		memset(request,0x0,sizeof(request));
		memset(send_data,0x0,sizeof(send_data));
		memset(page_name,0x0,sizeof(page_name));

		page_index = m_flash_manage.get_last_page_index();
		if (SONG_SHOW_MODE_CARD==m_song_show_mode)
		{
			//卡片
			_tcscpy(page_name,page_call_para_card[page_index]);
		}
		else
		{
			//列表
			_tcscpy(page_name,page_call_para[page_index]);
		}

		swprintf(send_data,L"<data><info page_name=\"%s\" button_number=\"%d\" /></data>",page_name,button_number);
		//改变高亮按钮状态
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,send_data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch(...)
	{

	}

	return;
}

void Cflashktv10Wnd::set_button_highlight_state(bool init_state)
{
	try
	{
		int page_index = 0;

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_singer:
			{
				if (init_state)
				{
					//歌星分类按钮默认状态
					m_singer_region_button_number = 0;
				}
				set_flash_button_state(L"singer_button",m_singer_region_button_number);
			}
			break;
		case page_custom_singer:
			{
				if (init_state)
				{
					//歌星分类按钮默认状态
					m_singer_region_button_number = 4;
					m_word_count_button_number = 0;
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"singer_button",m_singer_region_button_number);
			}
			break;
		case page_title:  //歌名点歌
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_write:  //歌名点歌
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_yunadd_song:
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_hdmi:         //高清专区
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_top_song:  //排行
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_language:  //语种点歌
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0;
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_movie_song://影视金曲
			{
				if (init_state)
				{
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_member_song://会员歌曲
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
			}
			break;
		case page_singer_song://具体歌星歌曲
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_new_theme_song:
		case page_theme_song:  //新主题
			{
				if (init_state)
				{
					m_new_theme_button_number = 8;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"new_theme_button",m_new_theme_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_class://分类页面
			{
				if (init_state)
				{
					m_class_button_number = 9; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"theme_button",m_class_button_number);
			}
			break;
		case page_new_song:  //新歌页面
			{
				if (init_state)
				{
					m_new_song_button_number = 3;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"newsong_button",m_new_song_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_voice_china:    //好声音
			{
				if (init_state)
				{
					//m_new_song_button_number = 0;
					m_word_count_button_number = 0;
				}
				//set_flash_button_state(L"newsong_button",m_new_song_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
			}
			break;
		case page_opera:  //戏曲
			{
				if (init_state)
				{
					m_opera_button_number = 8;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				set_flash_button_state(L"opera_button",m_opera_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_video:   //视频转播页面
			{
				set_flash_button_state(L"video_button",m_video_button_number);
			}
			break;
		case page_movie:  //电影
			{
				if (init_state)
				{
					m_word_count_button_number = 0;
					m_movie_button_number = 8; 
					m_song_version_button_number = 0;
				}
				//设置按钮高亮状态
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"movie_button",m_movie_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_era_song:  //年代金曲
			{
				if (init_state)
				{
					m_word_count_button_number = 0;
					m_year_button_number = 7; 
					m_song_version_button_number = 0;
				}
				//设置按钮高亮状态
				set_flash_button_state(L"number_button",m_word_count_button_number);
				//设置按钮状态
				set_flash_button_state(L"years_button",m_year_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_word_count:   //字数点歌
			{
				if (init_state)
				{
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
				}
				//设置按钮高亮状态
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case page_search_song:  //搜索歌曲
			{
				if (init_state)
				{
					m_language_button_number = 0;
					m_word_count_button_number = 0;
					m_song_version_button_number = 0;
					m_singer_sex_button_number = -1;
				}
				//设置按钮高亮状态
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
				set_flash_button_state(L"SingerSex",m_singer_sex_button_number);
			}
			break;
		case page_fast_songs_slow_dance:
			{
				if (init_state)
				{
					//语种按钮默认状态
					m_language_button_number = 0;
					m_word_count_button_number = 0; 
					m_song_version_button_number = 0;
					m_class_button_number = 2;
				}
				set_flash_button_state(L"query_language_button",m_language_button_number);
				set_flash_button_state(L"number_button",m_word_count_button_number);
				set_flash_button_state(L"version_button",m_song_version_button_number);
				set_flash_button_state(L"theme_button",m_class_button_number);
			}
			break;
		default:
			break;
		}

		return;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call_theme(const TCHAR *args)
{
	try
	{
		int theme_type=0;
		int result=0;
		int pre_button_number=0;
		TCHAR szName[MAX_PATH] = {0x00};
		query_condition src_query_condition;
		bool show_title_flag = true;

		swscanf(args,L"%d",&theme_type);
		if (((1==theme_type) || (2==theme_type)) && !m_allow_play_dj)
		{
			//不允许播放dj，只有输入密码才可以
			//flash_message_call_page_jump(page_system_manager);
			//show_pop_up_dj_window();
			flash_show_tip_message(122);
			flash_message_call_function(PAGE_BACK);
			m_page_allow_back=false;
			return;
		}

		//保存上一次查询条件
#ifdef DON_GUAN_K_PLUS
		src_query_condition.operation_symbols = L" in (";
		src_query_condition.wildcard = L")";
		src_query_condition.column_name = song_query_condition[SONG_THEME_SUFFIX].column_name;
		switch(m_class_button_number)
		{
		case 1:				
			src_query_condition.expression = L"1";
			break;
		case 2:
			src_query_condition.expression = L"2";
			break;
		case 11:
			src_query_condition.expression = L"201";
			break;
		}
#else
		src_query_condition = song_query_condition[SONG_THEME_SUFFIX];
#endif // DON_GUAN_K_PLUS

		pre_button_number = m_class_button_number;

		//一级查询，清空所有条件
		clear_all_query_condition();
		//按照类别赋值查询条件
		switch(theme_type)
		{
		case 1:   //劲爆迪曲 \'DJ\',\'迪曲\'
			{ 
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L" in (";
				//song_query_condition[SONG_THEME_SUFFIX].expression = L"\'DJ\',\'迪曲\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"1";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L")";
				m_class_button_number = 1;
				swprintf(szName, L"迪曲");
				show_title_flag = false;
			}
			break;
		case 2:   //浓情舞曲
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L" =\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"2";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 2;
				swprintf(szName, L"浓情舞曲");
				show_title_flag = false;
			}
			break;
		case 3:   //嘹亮军歌
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"3";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 3;
				swprintf(szName, L"革命军旅");
			}
			break;
		case 4:   //对唱合唱
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"5";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 4;
				swprintf(szName, L"对唱合唱");
			}
			break;
		case 5:   //经典老歌
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"6";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 5;
				swprintf(szName, L"经典老歌");
			}
			break;
		case 6:   //儿童歌曲
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"7";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 6;
				swprintf(szName, L"儿童歌曲");
			}
			break;
		case 7:   //祝福歌曲
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"4";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 7;
				swprintf(szName, L"祝福歌曲");
			}
			break;
		case 8:   //地方民歌
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"9";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 8;
				swprintf(szName, L"地方民歌");
			}
			break;
		case 9:  //影视歌曲
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"8";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				swprintf(szName, L"影视歌曲");
			}
			break;
		case 10:   //美声唱法
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"10";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				swprintf(szName, L"美声唱法");
			}
			break;
		case 11:  //国外民歌
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"11";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				swprintf(szName, L"国外民歌");
			}
			break;
		case 12:  //经典戏曲
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"29";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 9;
				swprintf(szName, L"经典戏曲");
			}
			break;
#ifdef DON_GUAN_K_PLUS
		case 13:  //慢摇
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"201";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";
				m_class_button_number = 11;
				swprintf(szName, L"慢摇");
				show_title_flag = false;
			}
			break;
		case 14: // 劲曲、漫舞、慢摇
			{
				song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L" in (";
				song_query_condition[SONG_THEME_SUFFIX].expression = L"\"1\",\"2\",\"201\"";
				song_query_condition[SONG_THEME_SUFFIX].wildcard = L")";
				m_class_button_number = 11;
				swprintf(szName, L"慢摇");
				show_title_flag = false;
			}
			break;
#endif // DON_GUAN_K_PLUS
		case 0:   //全部
		default:
			song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L" in (";
			song_query_condition[SONG_THEME_SUFFIX].wildcard = L")";
			if (m_allow_play_dj)
			{
				song_query_condition[SONG_THEME_SUFFIX].expression = L"\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\"";
			}
			else 
			{	
				song_query_condition[SONG_THEME_SUFFIX].expression = L"\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\"";
			}


			m_class_button_number = 10;
			swprintf(szName, L"全部");
			break;
		}

		if (show_title_flag)
		{
			//发送主题名称
			TCHAR request[2048] = {0x00};
			swprintf(request,L"<invoke name=\"theme_song_name\" returntype=\"xml\"><arguments><string><data><pageinfo themesongname=\"theme_song_name\" logo_url=\"\" page_title=\"%s\"/></data></string></arguments></invoke>", szName);
			flash_player_call_function(request);

			m_pre_theme_name = szName;
		}

		//查询数据，并显示到列表中
		result = song_query_two_show_data(song_select_expr,SONG_THEME_SUFFIX,&src_query_condition);
		if (1!=result)
		{
			m_class_button_number = pre_button_number;
		}

		if (9 != theme_type)
		{
			//设置高亮按钮
			set_flash_button_state(L"theme_button",m_class_button_number);
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_era(const TCHAR *args)
{
	try
	{
		int song_era=0;
		int result=0;
		int pre_button_number=0;
		query_condition pre_query_condition;

		swscanf(args,L"%d",&song_era);
		//保存前一个检索条件
		pre_query_condition = song_query_condition[ISSUE_YEAR_SUFFIX];
		pre_button_number = m_year_button_number;
		//一级查询，清空所有条件
		clear_all_query_condition();

		//按照年代赋值查询条件
		switch(song_era)
		{
		case 1:   //50年代以前
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1800";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1949\"";
				m_year_button_number = 0;
			}
			break;
		case 2:   //50年代
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1950";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1959\"";
				m_year_button_number = 1;
			}
			break;
		case 3:   //60年代
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1960";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1969\"";
				m_year_button_number = 2;
			}
			break;
		case 4:   //70年代
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1970";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1979\"";
				m_year_button_number = 3;
			}
			break;
		case 5:   //80年代
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1980";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1989\"";
				m_year_button_number = 4;
			}
			break;
		case 6:   //90年代
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"1990";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\" and issue_year<=\"1999\"";
				m_year_button_number = 5;
			}
			break;
		case 7:   //00年代以后
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression = L"2000";
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\"";
				m_year_button_number = 6;
			}
			break;
		case 0:   //全部
		default:
			{
				song_query_condition[ISSUE_YEAR_SUFFIX].operation_symbols = L">=\"";
				song_query_condition[ISSUE_YEAR_SUFFIX].expression.clear();
				song_query_condition[ISSUE_YEAR_SUFFIX].wildcard = L"\"";
				m_year_button_number = 7;
			}
			break;
		}

		//查询数据，并显示到列表中
		result = song_query_two_show_data(song_select_expr,ISSUE_YEAR_SUFFIX,&pre_query_condition);
		if (1!=result)
		{
			m_year_button_number = pre_button_number;
		}

		//设置按钮状态
		set_flash_button_state(L"years_button",m_year_button_number);
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_voice_china()
{
	try
	{
		int theme_type=0;
		int result=0;
		query_condition pre_query_condition;
		int pre_button_number=0;

		//保存原来的查询条件
		pre_query_condition = song_query_condition[NEW_SONG_THEME_SUFFIX];
		pre_button_number = m_new_theme_button_number;		

		//一级查询，清空所有条件
		clear_all_query_condition();

		//按照类别赋值查询条件
		song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L" == \'";
		song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"100";
		song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";

		//查询数据，并显示到列表中
		result = song_query_two_show_data(song_select_expr,NEW_SONG_THEME_SUFFIX,&pre_query_condition);
		if (1!=result)
		{
			//第一次没有查询成功恢复上一次检索条件

		}

	}
	catch (...)
	{

	}
	return;
}


void Cflashktv10Wnd::flash_message_call_new_theme(const TCHAR *args)
{
	try
	{
		int theme_type=0;
		int result=0;
		query_condition pre_query_condition;
		int pre_button_number=0;
		TCHAR szName[MAX_PATH] = {0x00};

		swscanf(args,L"%d",&theme_type);

		//保存原来的查询条件
		pre_query_condition = song_query_condition[NEW_SONG_THEME_SUFFIX];
		pre_button_number = m_new_theme_button_number;		

		//一级查询，清空所有条件
		clear_all_query_condition();
		//按照类别赋值查询条件
		switch(theme_type)
		{
		case 1:   //深深回忆
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"1";
				m_new_theme_button_number = 0;
				swprintf(szName, L"深深回忆");
			}
			break;
		case 2:   //寂寞心情
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"2";
				m_new_theme_button_number = 1;
				swprintf(szName, L"寂寞心情");
			}
			break;
		case 3:   //伤感部落
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"3";
				m_new_theme_button_number = 2;
				swprintf(szName, L"伤感部落");
			}
			break;
		case 4:   //深情吟唱
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"4";
				m_new_theme_button_number = 3;
				swprintf(szName, L"深情吟唱");
			}
			break;
		case 5:   //网络歌曲
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"5";
				m_new_theme_button_number = 4;
				swprintf(szName, L"网络歌曲");
			}
			break;
		case 6:   //非主流
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"6";
				m_new_theme_button_number = 5;
				swprintf(szName, L"非主流");
			}
			break;
		case 7:   //中国风
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"7";
				m_new_theme_button_number = 6;
				swprintf(szName, L"中国风");
			}
			break;
		case 8:   //摇滚年代
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"8";
				m_new_theme_button_number = 7;
				swprintf(szName, L"摇滚年代");
			}
			break;
		case 9:  //中国好声音
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"17";
				m_new_theme_button_number = 0;
				swprintf(szName, L"中国好声音");
			}
			break;
		case 10:  //中国最强音
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"18";
				m_new_theme_button_number = 1;
				swprintf(szName, L"中国最强音");
			}
			break;
		case 11:  //中国梦之声
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"19";
				m_new_theme_button_number = 2;
				swprintf(szName, L"中国梦之声");
			}
			break;
		case 12:  //我是歌手
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"20";
				m_new_theme_button_number = 3;
				swprintf(szName, L"我是歌手");
			}
			break;
		case 13:  //最美和声
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"21";
				m_new_theme_button_number = 4;
				swprintf(szName, L"最美和声");
			}
			break;
		case 14:  //声动亚洲
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"22";
				m_new_theme_button_number = 5;
				swprintf(szName, L"声动亚洲");
			}
			break;
		case 15:  //我为歌狂
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"23";
				m_new_theme_button_number = 6;
				swprintf(szName, L"我为歌狂");
			}
			break;
		case 16:  //超女快男
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"24";
				m_new_theme_button_number = 7;
				swprintf(szName, L"超女快男");
			}
			break;
		case 17:  //中国好歌曲
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"26";
				m_new_theme_button_number = 8;
				swprintf(szName, L"中国好歌曲");
			}
			break;
		case 18:  //蒙面歌王
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"35";
				m_new_theme_button_number = 9;
				swprintf(szName, L"蒙面歌王");
			}
			break;
		case 19:  //中国新声代
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"36";
				m_new_theme_button_number = 10;
				swprintf(szName, L"中国新声代");
			}
			break;
		case 20:  //中国正在听
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"37";
				m_new_theme_button_number = 11;
				swprintf(szName, L"中国正在听");
			}
			break;
		case 21:  //超级歌单
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"38";
				m_new_theme_button_number = 12;
				swprintf(szName, L"超级歌单");
			}
			break;
		case 22:  //梦想星搭档
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"28";
				m_new_theme_button_number = 13;
				swprintf(szName, L"梦想星搭档");
			}
			break;
		case 23:  //央视春节联欢晚会
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"39";
				m_new_theme_button_number = 14;
				swprintf(szName, L"央视春节联欢晚会");
			}
			break;
		case 24:  //中国之星
			{
				song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L"=\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\'";
				song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"40";
				m_new_theme_button_number = 15;
				swprintf(szName, L"中国之星");
			}
			break;
		case 0:   //全部
		default:
			song_query_condition[NEW_SONG_THEME_SUFFIX].operation_symbols = L">=\"";
			song_query_condition[NEW_SONG_THEME_SUFFIX].expression = L"17";
			song_query_condition[NEW_SONG_THEME_SUFFIX].wildcard = L"\"";
			m_new_theme_button_number = 8;
			swprintf(szName, L"全部");
			break;
		}

		//发送主题名称
		TCHAR request[2048] = {0x00};
		swprintf(request,L"<invoke name=\"theme_song_name\" returntype=\"xml\"><arguments><string><data><pageinfo themesongname=\"theme_song_name\" logo_url=\"\" page_title=\"%s\"/></data></string></arguments></invoke>", szName);
		flash_player_call_function(request);

		//保存名称
		m_pre_theme_name = szName;

		//查询数据，并显示到列表中
		//result = song_query_two_show_data(song_select_expr,NEW_SONG_THEME_SUFFIX,&pre_query_condition);
		result = song_query_show_data(song_select_expr, true,false, true);
		if (1!=result)
		{
			//第一次没有查询成功恢复上一次检索条件
			m_new_theme_button_number = pre_button_number;
		}
		//改变按钮状态
		set_flash_button_state(L"new_theme_button",m_new_theme_button_number);
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_song_version(const TCHAR *args)
{
	try
	{
		int result=0;
		query_condition pre_query_condition;
		int pre_button_number=0;

		if (NULL==args)
		{
			return;
		}
		//保存原来的查询条件
		pre_query_condition = song_query_condition[SONG_VERSION_SUFFIX];
		pre_button_number = m_song_version_button_number;	

		switch(_wtoi(args))
		{
		case 1:   //MTV版本
			{
				song_query_condition[SONG_VERSION_SUFFIX].expression = L"1";
				m_song_version_button_number = 1;
			}
			break;
		case 2:  //演唱会版本
			{
				song_query_condition[SONG_VERSION_SUFFIX].expression = L"3";
				m_song_version_button_number = 2;
			}
			break;
		case 3:  //人物版本
			{
				song_query_condition[SONG_VERSION_SUFFIX].expression = L"4";
				m_song_version_button_number = 3;
			}
			break;
		case 4:  //影视版本
			{
				song_query_condition[SONG_VERSION_SUFFIX].expression = L"6";
				m_song_version_button_number = 3;
			}
			break;
		default:
			{
				//全部
				song_query_condition[SONG_VERSION_SUFFIX].expression.clear();
				m_song_version_button_number = 0;
			}
			break;
		}

		//查询数据，并显示到列表中
		//result = song_query_two_show_data(song_select_expr,SONG_VERSION_SUFFIX,&pre_query_condition);

		int page_index = m_flash_manage.get_last_page_index();

		switch(page_index)
		{
		case page_title:        //歌名点歌
		case page_singer_song:  //具体歌星歌曲页面
		case page_lyric:        //歌词检索页面
		case page_theme_song:        //主题检索页面
		case page_new_theme_song:
		case page_class:        //分类点歌
		case page_new_song:     //新歌页面
		case page_opera:        //戏曲页面
		case page_language:     //语种点歌
		case page_movie_song:   //影视金曲
		case page_era_song:     //年代金曲
		case page_number_song:  //编号点歌
		case page_search_song:  //搜索歌曲
		case page_write:        //手写点歌
		case page_pkjx:
		case page_word_count:   //字数点歌
		case page_hdmi:         //高清专区
			{
				result = song_query_show_data(song_select_expr);
			}
			break;
		case page_top_song:  //排行页面
			{
				result = song_query_show_data(top_song_select_expr);
			}
			break;			 
		default:
			break;
		}

		if (1!=result)
		{
			//第一次没有查询成功恢复上一次检索条件
			m_song_version_button_number = pre_button_number;
		}
		//改变按钮状态
		set_flash_button_state(L"version_button",m_song_version_button_number);
		//发送检索条件
		send_query_condition_text_to_flash();

		return;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call_singer_sex(const TCHAR *args)
{
	try
	{
		int result=0;
		query_condition pre_query_condition;
		int pre_button_number=0;


		if (NULL==args)
		{
			return;
		}

		//保存原来的查询条件
		pre_query_condition = song_query_condition[SINGER_SEX_SUFFIX];
		pre_button_number = m_singer_sex_button_number;	

		switch(_wtoi(args))
		{
		case 0:   //男生
			{
				song_query_condition[SINGER_SEX_SUFFIX].operation_symbols = L"=\"";
				song_query_condition[SINGER_SEX_SUFFIX].wildcard = L"\"";
				song_query_condition[SINGER_SEX_SUFFIX].expression = L"1";
				m_singer_sex_button_number = 0;
			}
			break;
		case 1:  //女生
			{
				song_query_condition[SINGER_SEX_SUFFIX].operation_symbols = L"=\"";
				song_query_condition[SINGER_SEX_SUFFIX].wildcard = L"\"";
				song_query_condition[SINGER_SEX_SUFFIX].expression = L"2";
				m_singer_sex_button_number = 1;
			}
			break;
		case 2:  //对唱
			{
				song_query_condition[SINGER_SEX_SUFFIX].operation_symbols = L"=\"";
				song_query_condition[SINGER_SEX_SUFFIX].wildcard = L"\"";
				song_query_condition[SINGER_SEX_SUFFIX].expression = L"3";
				m_singer_sex_button_number = 2;
			}
			break;
		case 3:  //合唱
			{
				song_query_condition[SINGER_SEX_SUFFIX].operation_symbols = L" in (";
				song_query_condition[SINGER_SEX_SUFFIX].wildcard = L")";
				song_query_condition[SINGER_SEX_SUFFIX].expression = L"\"6\",\"7\",\"4\",\"5\"";
				m_singer_sex_button_number = 3;
			}
			break;
		default:
			{
				//全部
				song_query_condition[SINGER_SEX_SUFFIX].expression.clear();
				m_singer_sex_button_number = -1;
			}
			break;
		}

		//查询数据，并显示到列表中
		result = song_query_two_show_data(song_select_expr,SINGER_SEX_SUFFIX,&pre_query_condition);
		if (1!=result)
		{
			//第一次没有查询成功恢复上一次检索条件
			m_singer_sex_button_number = pre_button_number;
		}
		//改变按钮状态
		set_flash_button_state(L"SingerSex",m_singer_sex_button_number);
		//发送检索条件
		send_query_condition_text_to_flash();

		return;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call_opera(const TCHAR *args)
{
	try
	{
		int opera_type_number=0;
		int result=0;
		int pre_button_number=0;
		query_condition pre_query_condition;

		swscanf(args,L"%d",&opera_type_number);

		//保存前一次检索条件
		pre_button_number = m_opera_button_number;
		pre_query_condition = song_query_condition[SONG_TYPE_SUFFIX];

		//清空所有检索条件
		clear_all_query_condition();

		switch(opera_type_number)
		{
		case 1:   //京剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"1";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 0;
			}
			break;
		case 2:   //秦腔
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"2";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 1;
			}
			break;
		case 3:    //黄梅戏
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"3";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 2;
			}
			break;
		case 4:   //梆子
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"4";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 3;
			}
			break;
		case 6:  //豫剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"5";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 4;
			}
			break;
		case 5:  //粤剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"6";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 5;
			}
			break;
		case 7:  //潮剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"7";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 6;
			}
			break;
		case 8:  //越剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"8";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 7;
			}
			break;
		case 9:   //沪剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"9";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 10:  //花鼓戏
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"10";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 11:  //闽剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"11";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 12:   //评剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"12";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 13:  //曲剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"13";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 14:   //锡剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"14";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
			}
			break;
		case 15:   //现代京剧
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"15";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 1;
			}
			break;
		case 0:  //全部
		default:
			{
				song_query_condition[SONG_TYPE_SUFFIX].operation_symbols=L"=\'";
				song_query_condition[SONG_TYPE_SUFFIX].expression = L"";
				song_query_condition[SONG_TYPE_SUFFIX].wildcard = L"\'";
				m_opera_button_number = 8;
			}
			break;
		}

		//主题是戏剧
		song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L"=\'";
		song_query_condition[SONG_THEME_SUFFIX].expression = L"29";
		song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";

		//查询数据库和显示结果到flash界面上
		result = song_query_two_show_data(song_select_expr,SONG_TYPE_SUFFIX,&pre_query_condition);
		if (1!=result)
		{
			m_opera_button_number = pre_button_number;
		}

		set_flash_button_state(L"opera_button",m_opera_button_number);
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::flash_message_call_song_sort_song()
{
	try
	{
		TCHAR song_name_sort_sql[1024];
		char song_name_temp[1024];
		TCHAR query_all_condition[256];
		std::wstring *result_set=NULL;

		bool result = false;

		string_conversion string_con;

		memset(song_name_sort_sql,0x0,sizeof(song_name_sort_sql));
		memset(song_name_temp,0x0,sizeof(song_name_temp));

		swprintf(song_name_sort_sql,L"select song_name_sort from song where local_path <> '1' group by song_name_sort");
		string_con.widechar_to_multibyte(song_name_sort_sql,song_name_temp,sizeof(song_name_temp));

		//一级查询，清空所有条件
		clear_all_query_condition();

		//得到当前查询条件有多少条数据
		int row=m_db_query.get_row_count(song_name_temp);

		song_query_condition[SONG_LOCAL_PATH_SUFFIX].operation_symbols = L"<> "; 
		song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression = L"\"1\"";
		song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression += L" or local_path is null";
		song_query_condition[SONG_LOCAL_PATH_SUFFIX].wildcard = L"";		

		//申请空间
		result_set = new std::wstring[row];

		int result_row = m_db_query.get_table_data(result_set,1,song_name_sort_sql,NULL,NULL,NULL,NULL,row,0);
		if (row <= 0)
		{
			delete []result_set;
			result_set=NULL;

			song_query_condition[SONG_NAME_SORT_SUFFIX].operation_symbols = L" in ("; 
			song_query_condition[SONG_NAME_SORT_SUFFIX].expression =L"-1"; //代表错误，键盘查询时需要
			song_query_condition[SONG_NAME_SORT_SUFFIX].wildcard = L")";

			send_to_flash_empty_list();

			show_no_match_result_tip(false);

			//显示行页信息
			show_row_and_page_count(L"flase",0,1,1);

			WriteLog(__FL__, L"查询<我要参加>没有获得数据，返回!!");
			return false;
		}

		memset(query_all_condition,0x0,sizeof(query_all_condition));
		//得到查询出来的值
		for (int i=0;i<row; i++)
		{
			if (1 == (((_ttoi(result_set[i].c_str()))>>2)&0x01))
			{
				memset(song_name_sort_sql,0x0,sizeof(song_name_sort_sql));
				swprintf(song_name_sort_sql,L"%s",result_set[i].c_str());
				_tcscat(query_all_condition,song_name_sort_sql);
				_tcscat(query_all_condition,L",");
			}
		}

		TCHAR *install_path = _tcsrchr(query_all_condition, _T(','));
		if (install_path)
		{
			install_path[0] = '\0';
		}		

		if (0 == _tcscmp(query_all_condition,L""))
		{
			song_query_condition[SONG_NAME_SORT_SUFFIX].operation_symbols = L" in ("; 
			song_query_condition[SONG_NAME_SORT_SUFFIX].expression =L"-1"; //代表错误，键盘查询时需要
			song_query_condition[SONG_NAME_SORT_SUFFIX].wildcard = L")";

			send_to_flash_empty_list();

			show_no_match_result_tip(false);
			//显示行页信息
			show_row_and_page_count(L"flase",0,1,1);
			WriteLog(__FL__, L"查询<我要参加>没有得到条件，返回!!");
			return false;
		}

		song_query_condition[SONG_NAME_SORT_SUFFIX].operation_symbols = L" in ("; 
		song_query_condition[SONG_NAME_SORT_SUFFIX].expression =query_all_condition; //代表错误，键盘查询时需要
		song_query_condition[SONG_NAME_SORT_SUFFIX].wildcard = L")";

		result =  song_query_show_data(song_select_expr);
		if (!result)
		{
			clear_query_condition_by_page_and_init(true);
			return false;
		}

		return true;
	}
	catch (...)
	{

	} 

	return false;
}

void Cflashktv10Wnd::flash_message_call_file_format(const TCHAR *args)
{
	try
	{
		int file_format_value=0;
		int result=0;
		int pre_button_number=0;
		query_condition pre_query_condition;

		swscanf(args,L"%d",&file_format_value);
		//保存前一个检索条件
		pre_query_condition = song_query_condition[FILE_FORMAT_SUFFIX];
		pre_button_number = m_year_button_number;
		//一级查询，清空所有条件
		clear_all_query_condition();

		song_query_condition[FILE_FORMAT_SUFFIX].expression = L"1";

		//查询数据，并显示到列表中
		//result = song_query_two_show_data(song_select_expr,FILE_FORMAT_SUFFIX,&pre_query_condition);
		result =  song_query_show_data(song_select_expr,true,true);
		if (!result)
		{
			clear_query_condition_by_page_and_init(true);
		}

	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_new_song(const TCHAR *args)
{
	try
	{
		query_condition temp_song_query_condition[1];
		bool result=false;
		int ret=0;

		//清空所有检索条件
		clear_all_query_condition();
		int pre_button_number = m_new_song_button_number;

		if (0==_tcscmp(args,L"1"))
		{
			//本月新歌
			song_query_condition[NEW_SONG_DATA_SUFFIX].expression = L"datetime('now','-1 month')";
			m_new_song_button_number = 1;
		}
		else if (0==_tcscmp(args,L"2"))
		{
			//本季新歌
			song_query_condition[NEW_SONG_DATA_SUFFIX].expression = L"datetime('now','-3 month')";
			m_new_song_button_number = 2;
		}
		else if (0==_tcscmp(args,L"3"))
		{
			//本年新歌
			song_query_condition[NEW_SONG_DATA_SUFFIX].expression = L"datetime('now','-12 month')";
			m_new_song_button_number = 3;
		}
		else
		{
			//默认本月新歌
			song_query_condition[NEW_SONG_DATA_SUFFIX].expression = L"datetime('now','-1 month')";
			m_new_song_button_number = 1;
		}

		//默认条件，主题字段是新歌推荐
		/*song_query_condition[SONG_THEME_SUFFIX].operation_symbols = L" = \'";
		song_query_condition[SONG_THEME_SUFFIX].expression = L"新歌推荐";
		song_query_condition[SONG_THEME_SUFFIX].wildcard = L"\'";*/

		temp_song_query_condition[0].column_name = song_query_condition[NEW_SONG_DATA_SUFFIX].column_name;
		temp_song_query_condition[0].operation_symbols = song_query_condition[NEW_SONG_DATA_SUFFIX].operation_symbols;
		temp_song_query_condition[0].wildcard = song_query_condition[NEW_SONG_DATA_SUFFIX].wildcard;

		if(pre_button_number == 3)
			temp_song_query_condition[0].expression  = L"datetime('now','-12 month')";
		else if(pre_button_number == 2)
			temp_song_query_condition[0].expression  = L"datetime('now','-3 month')";
		else if(pre_button_number == 1)
			temp_song_query_condition[0].expression  = L"datetime('now','-1 month')";

		//查询数据库和显示结果到flash界面上
		ret = song_query_two_show_data(song_select_expr, NEW_SONG_DATA_SUFFIX, temp_song_query_condition);
		//ret = song_query_show_data(song_select_expr);
		if (1!=ret)
		{
			m_new_song_button_number = pre_button_number;
		}

		set_flash_button_state(L"newsong_button",m_new_song_button_number);
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::show_service_image(SERVICE_PICTRUE_PAGE_OPERATE page_operate, TCHAR *interface_name /* = L"" */)
{
	try
	{
		TCHAR data[2048];
		TCHAR request[1024*10];
		int total_page_count=0;
		int cur_page_number=0;
		bool result=false;
		TCHAR picture_path[2048]; 
		std::wstring pictur_xml;

		memset(picture_path,0x0,sizeof(picture_path));

		result = m_show_service_picture.get_show_picture(page_operate,pictur_xml);
		if (result)
		{
			//显示图片
			memset(request,0x0,sizeof(request));

			if (_tcscmp(interface_name, L"") == 0)
			{
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"PlaceIntro",pictur_xml.c_str());
			}else{
				result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),interface_name,pictur_xml.c_str());
			}

			if (result)
			{
				flash_player_call_function(request);
			}
		}

		return true;

		result = m_show_service_picture.get_page_info(total_page_count,cur_page_number);
		if (result)
		{
			//显示页数
			memset(request,0x0,sizeof(request));
			memset(data,0x0,sizeof(data));

			if (total_page_count<1)
			{
				total_page_count = 1;
			}
			swprintf(data,L"<data><pageinfo total=\"\" pagenum=\"%d/%d\"/></data>",cur_page_number,total_page_count);
			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"page_info",data);
			if (result)
			{
				flash_player_call_function(request);
			}
		}
		return true;
	}
	catch (...)
	{

	}
	return false;
}

void Cflashktv10Wnd::show_row_and_page_count(TCHAR *refresh_page,int row,int page_count,int cur_page_number)
{
	try
	{
		TCHAR request[1024];
		TCHAR row_page_data[1024];
		bool result=false;
		int page_index=0;
		TCHAR temp_string[256];

		memset(request,0x0,sizeof(request));
		memset(row_page_data,0x0,sizeof(row_page_data));
		memset(temp_string,0x0,sizeof(temp_string));

		//规范显示
		if(row<0)
		{
			row = 0;
		}
		if (page_count<1)
		{
			page_count = 1;
		}
		if (cur_page_number<1)
		{
			cur_page_number = 1;
		}
		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//根据页面不同，显示首或位
		if ((page_singer==page_index)||(page_custom_singer==page_index) || (page_pk == page_index)||(page_voice_china_singer==page_index))
		{
			_tcscpy(temp_string,g_all_language[21].c_str());
		}
		else
		{
			_tcscpy(temp_string,g_all_language[20].c_str());
		}

		//组织字符串
		if (m_show_song_total_count)
		{
			//显示总数
			//swprintf(row_page_data,L"<data><pageinfo isInit=\"%s\" total=\"%s%d%s\" pagenum=\"%d/%d\"/></data>",refresh_page,g_all_language[19].c_str(),row,temp_string,cur_page_number,page_count);
			swprintf(row_page_data,L"<data><pageinfo isInit=\"%s\" total=\"%d\" pagenum=\"%d/%d\"/></data>",refresh_page,row,cur_page_number,page_count);
		}
		else
		{
			//不显示歌曲总数
			swprintf(row_page_data,L"<data><pageinfo isInit=\"%s\" total=\"\" pagenum=\"%d/%d\"/></data>",refresh_page,cur_page_number,page_count);
		}
		//显示页数和行数
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"page_info",row_page_data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_movie_story(const TCHAR *args,bool memory_state)
{
	try
	{
		TCHAR movie_story[256];
		bool result=false;
		int number=0;
		query_condition pre_query_condition;
		int pre_number=0;


		memset(movie_story,0x0,sizeof(movie_story));

		if (memory_state)
		{
			//保存查询条件
			pre_number = m_movie_button_number;
			pre_query_condition = movie_query_condition[MOVIE_STORY_SUFFIX];
		}
		//清空歌星的所有条件
		clear_all_query_condition();

		//改变查询条件
		_tcscpy(movie_story,args);
		movie_query_condition[MOVIE_STORY_SUFFIX].expression = movie_story;
		if (memory_state)
		{
			//记录当前按钮选中的编号
			m_movie_button_number = _wtoi(movie_story)-1;
		}
		//查询并显示数据
		result = movie_query_show_data();
		if (!result)
		{
			if (memory_state)
			{
				//恢复原有查询条件
				m_movie_button_number = pre_number;
				movie_query_condition[MOVIE_STORY_SUFFIX] = pre_query_condition;
			}
			movie_query_show_data();
		}
		if (memory_state)
		{
			//设置高亮按钮状态
			set_flash_button_state(L"movie_button",m_movie_button_number);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_submit_custom_song(const TCHAR* args)
{
	try
	{
		if (0 == _tcscmp(args,L"1"))
		{
			//提交定制歌曲信息
			TCHAR suggest[1024];
			TCHAR one_message[1024];
			TCHAR phone[20];
			TCHAR send_data[2048];

			memset(phone,0x0,sizeof(phone));
			memset(suggest,0x0,sizeof(suggest)); 
			memset(send_data,0x0,sizeof(send_data));

			for (int i = 0; i < CUSTOM_SONG_COUNT - 1; i++)
			{
				memset(one_message,0x0,sizeof(one_message));

				if (0 == i%2)
				{
					swprintf(one_message,L"song:%s;",m_custom_song[i].c_str());
				}
				else
				{
					swprintf(one_message,L"singer:%s;",m_custom_song[i].c_str());
				}

				_tcscat(suggest,one_message);
			}


			swprintf(phone,L"phone:%s",m_custom_phone.c_str());
			_tcscat(suggest,phone);

			swprintf(send_data,L"MessageCustomSong|room_ip:%s;%s$END",m_room_ip,suggest);
			//发送给服务程序
			send_data_to_service_udp(send_data);

			//清空歌曲和电话号码
			page_custom_clear();

			//清空手写区域
			m_handwriting_window.clear_ink_window();
			//清空识别的结果
			clear_handwriting_recognizer_word();
			for (int i=0;i<INK_RECOGNIZE_ALTERNATE_NUMS;i++)
			{
				m_recognition_result[i].Empty();
			}

			//提示已经提交成功
			flash_show_tip_message(40);
		}
		else if (0 == _tcscmp(args,L"2"))
		{
			//重写定制歌曲
			page_custom_clear();
		}
	}
	catch (...)
	{

	}
	return;
}


void Cflashktv10Wnd::flash_message_call_submit_opinion(const TCHAR *args)
{
	try
	{
		if (0==_tcscmp(args,L"1"))
		{
			//提交意见
			TCHAR suggest[1024];
			TCHAR one_suggest[256];
			TCHAR suggest_result[256];
			TCHAR all_suggest[1024];
			TCHAR send_data[1024];
			int suggest_count=0;
			string_conversion string_conv;

			memset(suggest,0x0,sizeof(suggest));
			memset(all_suggest,0x0,sizeof(all_suggest));

			//提交调查结果
			for(int i=0;i<SURVER_QUESTION_COUNT;i++)
			{
				if (0!=_tcscmp(m_surver_question[i],L""))
				{
					//发送给消息服务器
					/*"Message^&意见:"
					"%d" //序号　满意度
					"%s;计算机上显示;文字;红色;1;"//调查名
					"^&%s" // 机器名
					"^&%s" // 机器名
					"^&0"*/
					memset(suggest,0x0,sizeof(suggest));
					swprintf(suggest,L"Message^&意见:%d%s;计算机上显示;文字;红色;1;^&%s^&%s^&0",m_satisfaction_degree[i],m_surver_question[i],m_room_ip,m_room_ip);
					if (!m_use_new_msg_system)
					{
						//旧的消息系统
						send_message_to_msg_server(suggest);
					}

					memset(one_suggest,0x0,sizeof(one_suggest));
					memset(suggest_result,0x0,sizeof(suggest_result));
					switch (m_satisfaction_degree[i])
					{
					case 4:
						{
							_tcscpy(suggest_result,L"5");
						}
						break;
					case 3:
						{
							_tcscpy(suggest_result,L"4");
						}
						break;
					case 2:
						{
							_tcscpy(suggest_result,L"3");
						}
						break;
					case 1:
						{
							_tcscpy(suggest_result,L"2");
						}
						break;
					case 0:
						{
							_tcscpy(suggest_result,L"1");
						}
						break;
					default:  //满意
						{
							_tcscpy(suggest_result,L"5");
						}
						break;
					}
					suggest_count++;
					swprintf(one_suggest,L"<suggestion%d>%s:%s</suggestion%d>",suggest_count,m_surver_question[i],suggest_result,suggest_count);
					//增加意见
					_tcscat(all_suggest,one_suggest);
				}
			}
			//提交客户意见
			if (!m_others_opinion.empty())
			{
				memset(suggest,0x0,sizeof(suggest));
				swprintf(suggest,L"Message^&意见:5客户建议-%s;计算机上显示;文字;红色;1;^&%s^&%s^&0",m_others_opinion.c_str(),m_room_ip,m_room_ip);
				if (!m_use_new_msg_system)
				{
					//旧的消息系统
					send_message_to_msg_server(suggest);
				}
			}
			//提交手机号
			if (!m_contact_phone.empty())
			{
				memset(suggest,0x0,sizeof(suggest));
				swprintf(suggest,L"Message^&意见:6联系方式-%s;计算机上显示;文字;红色;1;^&%s^&%s^&0",m_contact_phone.c_str(),m_room_ip,m_room_ip);
				if (!m_use_new_msg_system)
				{
					//旧的消息系统
					send_message_to_msg_server(suggest);
				}
			}


			if (suggest_count <=0)
			{
				//请填写您的意见
				flash_show_tip_message(117);
				return;
			}

			if ((suggest_count>0)|| (!m_others_opinion.empty()))
			{
				//客人提了意见，才提交
				memset(send_data,0x0,sizeof(send_data));
				swprintf(send_data,L"SuggestionMessage|<data room_ip=\"%s\" others_suggestion=\"%s\" phone=\"%s\" count=\"%d\">%s</data>",m_room_ip,m_others_opinion.c_str(),m_contact_phone.c_str(),suggest_count,all_suggest);
				if (m_use_new_msg_system)
				{
					//发送给新的消息系统
					send_message_to_msg_server(send_data);
				}
				//发送给服务程序
				send_data_to_service_udp(send_data);
			}
			//清空显示的意见和电话号码
			page_proposal_clear();
			//提示已经提交成功
			flash_show_tip_message(40);
		}
		else
		{
			//重写意见
			//清空显示的意见和电话号码
			page_proposal_clear();
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::page_proposal_clear(void)
{
	try
	{
		//清空保存的数据
		for(int i=0;i<SURVER_QUESTION_COUNT;i++)
		{
			memset(m_surver_question[i],0x0,sizeof(m_surver_question[i]));
			m_satisfaction_degree[i] = 0;
		}
		m_others_opinion.clear();
		m_contact_phone.clear();
		//清空界面显示
		flash_show_contact_phone(g_all_language[42].c_str(),false);
		flash_show_others_opinion(g_all_language[41].c_str(),false);
		m_input_box_show_help[0]=true;
		m_input_box_show_help[1]=true;
		flash_clear_surver_result();
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::page_custom_clear(void)
{
	try
	{
		//清空保存的数据
		for (int i = 0; i < CUSTOM_SONG_COUNT; i++)
		{
			m_custom_song[i].clear();
			if (i != 0)
			{
				flash_show_custom_song(L"",i,false);
			}

		}
		m_custom_phone.clear();

		m_custom_input_fouce = 0;
		flash_show_custom_song(L"",0,true);
		flash_show_custom_phone(L"",false);
	}
	catch (...)
	{

	}
	return;
}


void Cflashktv10Wnd::flash_message_call_query_song_type(const TCHAR* args)
{
	try
	{
		int query_type=0; 

		swscanf(args,L"%d",&query_type);

		//设置按钮的高亮
		switch (query_type)
		{
		case 1:  //字数
			{
				set_flash_button_state(L"number_button",m_word_count_button_number);
			}
			break;
		case 2: // 版本
			{
				set_flash_button_state(L"version_button",m_song_version_button_number);
			}
			break;
		case 4: // 全部
			{

			}
			break;
		default:
			break;
		}

	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::show_text_on_flash(const TCHAR *text,bool place_notice)
{
	try
	{
		TCHAR request[2048];
		TCHAR welcome_word[2048];
		TCHAR data[2048];
		bool result=false;
		int page_index=0;

		memset(request,0x0,sizeof(request));
		memset(welcome_word,0x0,sizeof(welcome_word));
		memset(data,0x0,sizeof(data));

		if ((NULL==text)||(0==_tcscmp(text,L""))||(!m_flash_screen_init_finish))
		{
			//换皮肤时也不允许发送
			return;
		}

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		if ((SCREEN_TYPE_HORIZON==m_interface_type)&&((page_homepage==page_index)||(page_assist==page_index)))
		{
			//横版的首页和辅助页面没有字幕滚动
			return;
		}

		if (place_notice)
		{
			swprintf(welcome_word,L"%s",text);
		}
		else
		{
			//增加特殊显示信息
			if(CLOSE_ROOM_STATE==m_pc_state)
			{
				//关房中也要提示
				swprintf(welcome_word,L"%s %s:%s %s",text,g_all_language[34].c_str(),m_show_room_name,g_all_language[49].c_str());
			}
			else
			{
				swprintf(welcome_word,L"%s  %s:%s",text,g_all_language[34].c_str(),m_show_room_name);
			}
		}


		//删除特殊字符
		flash_replace_special_char(welcome_word);
		swprintf(data,L"<data><info str=\"%s\"/></data>",welcome_word);
		//欢迎词
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"rollText",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::get_song_info_by_id(const TCHAR *song_id,song_info &query_song_info,PLAY_SONG_TYPE video_type)
{
	try
	{
		query_condition temp_song_query_condition[1];
		std::wstring *result_set=NULL;
		int row=0;
		int file_size=0;
		int value=0;
		int bit_rate=0;

		//分配空间
		result_set = new std::wstring[song_select_expr.result_column_nums];
		if (NULL==result_set)
		{
			return false;
		}

		//置查询条件
		temp_song_query_condition[0].column_name = L"song_id";
		temp_song_query_condition[0].operation_symbols = L"=\'";
		temp_song_query_condition[0].expression = song_id;
		temp_song_query_condition[0].wildcard = L"\'";

		//得到歌曲信息
		row = m_db_query.query_db_get_table_data(result_set,song_select_expr.result_column_expr.c_str(),temp_song_query_condition,1,song_select_expr.result_column_nums,1,0);
		if (row<=0)
		{
			delete []result_set;
			result_set = NULL;

			return false;
		}

		//分析xml，得到歌曲信息
		query_song_info.set_song_id(result_set[0].c_str());
		query_song_info.set_accompany_sing_track(result_set[1].c_str());
		query_song_info.set_karaoke_track(result_set[2].c_str());
		query_song_info.set_guid_track(result_set[3].c_str());
		query_song_info.set_song_name(result_set[4].c_str());
		query_song_info.set_movie_name(result_set[5].c_str());
		value = 0;
		swscanf(result_set[6].c_str(),L"%d",&value);
		query_song_info.set_song_sort(value);
		value = 0;
		swscanf(result_set[7].c_str(),L"%d",&value);
		query_song_info.set_accompany_volume(value);
		value = 0;
		swscanf(result_set[8].c_str(),L"%d",&value);
		query_song_info.set_karaoke_volume(value);
		query_song_info.set_language(result_set[9].c_str());
		query_song_info.set_song_type(result_set[10].c_str());
		query_song_info.set_singer_name(result_set[11].c_str());
		query_song_info.set_singer_sex(result_set[12].c_str());
		query_song_info.set_song_version(result_set[13].c_str());
		value = 0;
		swscanf(result_set[14].c_str(),L"%d",&value);
		query_song_info.set_light_control_set(value);
		value = 0;
		swscanf(result_set[15].c_str(),L"%d",&value);
		query_song_info.set_audio_effect_code(value);
		query_song_info.set_file_format(result_set[16].c_str());
		query_song_info.set_local_path(result_set[17].c_str());
		query_song_info.set_server_path1(result_set[18].c_str());
		query_song_info.set_server_path2(result_set[19].c_str());
		query_song_info.set_server_path3(result_set[20].c_str());
		query_song_info.set_server_path4(result_set[21].c_str());
		query_song_info.set_server_path5(result_set[22].c_str());
		query_song_info.set_server_path6(result_set[23].c_str());
		query_song_info.set_song_relative_path(result_set[24].c_str());
		value = 0;
		swscanf(result_set[25].c_str(),L"%d",&value);
		query_song_info.set_video_saturation(value);
		value = 0;
		swscanf(result_set[26].c_str(),L"%d",&value);
		query_song_info.set_video_luminance(value);
		value = 0;
		swscanf(result_set[27].c_str(),L"%d",&value);
		query_song_info.set_video_contrast(value);
		query_song_info.set_lyric(result_set[28].c_str());
		query_song_info.set_culture_code(result_set[29].c_str());
		query_song_info.set_preview_path(result_set[30].c_str());
		query_song_info.set_video_type(video_type);
		query_song_info.set_singer_id1(result_set[31].c_str());
		query_song_info.set_singer_id2(result_set[32].c_str());
		query_song_info.set_singer_id3(result_set[33].c_str());
		query_song_info.set_singer_id4(result_set[34].c_str());
		query_song_info.set_file_version(result_set[35].c_str());
		if (result_set)
		{
			//释放空间
			delete []result_set;
			result_set = NULL;
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::get_film_info_by_id(const TCHAR *song_id, song_info &query_song_info)
{
	//获取电影信息
	access_record_set_sql *pFilmInfo = m_film_manager.get_film_by_id(song_id);
	if(pFilmInfo == NULL)
		return false;

	//生成电影信息
	query_song_info.set_song_id(pFilmInfo->GetRecordData(L"film_id"));
	query_song_info.set_song_name(pFilmInfo->GetRecordData(L"film_name"));
	query_song_info.set_server_path1(pFilmInfo->GetRecordData(L"server_path1"));
	query_song_info.set_server_path2(pFilmInfo->GetRecordData(L"server_path2"));
	query_song_info.set_server_path3(pFilmInfo->GetRecordData(L"server_path3"));
	query_song_info.set_song_relative_path(pFilmInfo->GetRecordData(L"movie_relative_path"));
	CString csActorName = pFilmInfo->GetRecordData(L"film_director");
	query_song_info.set_singer_name(m_film_manager.ActorToString(csActorName));
	query_song_info.set_video_type(PLAY_MOVIE);

	//释放
	delete pFilmInfo;
	pFilmInfo = NULL;

	return true;
}
bool Cflashktv10Wnd::get_movie_info_by_id(const TCHAR *song_id,song_info &query_song_info,PLAY_SONG_TYPE video_type)
{
	try
	{
		query_condition temp_movie_query_condition[1];
		std::wstring *result_set=NULL;
		int row=0;
		int value=0;

		//分配空间
		result_set = new std::wstring[movie_select_expr.result_column_nums];
		if (NULL==result_set)
		{
			return false;
		}

		//置查询条件
		temp_movie_query_condition[0].column_name = L"id";
		temp_movie_query_condition[0].operation_symbols = L"=\'";
		temp_movie_query_condition[0].expression = song_id;
		temp_movie_query_condition[0].wildcard = L"\'";

		//得到歌星信息
		row = m_db_query.query_db_get_table_data(result_set,movie_select_expr.result_column_expr.c_str(),temp_movie_query_condition,1,movie_select_expr.result_column_nums,1,0);
		if (row<=0)
		{
			delete []result_set;
			result_set = NULL;

			return false;
		}

		//分析xml，得到歌曲信息
		query_song_info.set_song_id(result_set[0].c_str());
		query_song_info.set_song_name(result_set[1].c_str());
		//原伴唱音量相同
		value = 0;
		swscanf(result_set[2].c_str(),L"%d",&value);
		query_song_info.set_accompany_volume(value);
		query_song_info.set_karaoke_volume(value);
		query_song_info.set_movie_region(result_set[3].c_str());
		value = 0;
		swscanf(result_set[4].c_str(),L"%d",&value);
		query_song_info.set_movie_story(value);
		query_song_info.set_file_format(result_set[5].c_str());
		query_song_info.set_local_path(result_set[6].c_str());
		query_song_info.set_server_path1(result_set[7].c_str());
		query_song_info.set_server_path2(result_set[8].c_str());
		query_song_info.set_server_path3(result_set[9].c_str());
		query_song_info.set_server_path4(result_set[10].c_str());
		query_song_info.set_server_path5(result_set[11].c_str());
		query_song_info.set_server_path6(result_set[12].c_str());
		query_song_info.set_song_relative_path(result_set[13].c_str());
		value = 0;
		swscanf(result_set[14].c_str(),L"%d",&value);
		query_song_info.set_video_saturation(value);
		value = 0;
		swscanf(result_set[15].c_str(),L"%d",&value);
		query_song_info.set_video_luminance(value);
		value = 0;
		swscanf(result_set[16].c_str(),L"%d",&value);
		query_song_info.set_video_contrast(value);
		query_song_info.set_culture_code(result_set[17].c_str());
		query_song_info.set_video_type(video_type);

		if (result_set)
		{
			//释放空间
			delete []result_set;
			result_set = NULL;
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}


bool Cflashktv10Wnd::get_record_song_info_by_id(const TCHAR *song_id,song_info &query_song_info,PLAY_SONG_TYPE video_type)
{
	try
	{
		query_condition temp_song_query_condition[1];
		std::wstring *result_set=NULL;
		int row=0;
		int file_size=0;
		int value=0;
		int bit_rate=0;

		//分配空间
		result_set = new std::wstring[song_recorder_select_expr.result_column_nums];
		if (NULL==result_set)
		{
			return false;
		}

		//置查询条件
		temp_song_query_condition[0].column_name = L"song_id";
		temp_song_query_condition[0].operation_symbols = L"=\'";
		temp_song_query_condition[0].expression = song_id;
		temp_song_query_condition[0].wildcard = L"\'";

		//得到歌曲信息
		row = m_db_query.query_db_get_table_data(result_set,song_recorder_select_expr.result_column_expr.c_str(),temp_song_query_condition,1,song_recorder_select_expr.result_column_nums,1,0);
		if (row<=0)
		{
			delete []result_set;
			result_set = NULL;

			return false;
		}

		//分析xml，得到歌曲信息
		query_song_info.set_song_id(result_set[0].c_str());
		query_song_info.set_song_name(result_set[1].c_str());
		query_song_info.set_singer_name(result_set[2].c_str());
		query_song_info.set_recorder_video_path(result_set[3].c_str());
		query_song_info.set_culture_code(result_set[4].c_str());
		query_song_info.set_recorder_wave_path(result_set[5].c_str());
		value = 0;
		swscanf(result_set[6].c_str(),L"%d",&value);
		query_song_info.set_recorder_start_time(value);
		query_song_info.set_recorder_datatime(result_set[7].c_str());
		query_song_info.set_video_type(video_type);

		if (result_set)
		{
			//释放空间
			delete []result_set;
			result_set = NULL;
		}

		return true;
	}
	catch (...)
	{

	}

	return false;
}

void Cflashktv10Wnd::get_server_path_by_db(void)
{
	try
	{
		std::wstring select_result[1];
		TCHAR sql[1024];
		int row=0;
		int server_count=0;

		for (int i=0;i<6;i++)
		{
			memset(sql,0x0,sizeof(sql));
			memset(m_server_ip[i],0x0,sizeof(m_server_ip[i]));
			select_result[0].clear();

			//加3模除6，为了和初始化时一致
			swprintf(sql,L"select server_path%d from song where server_path%d != \'\'",i+1,i+1);
			row = m_db_query.query_db_get_table_data(select_result,sql,NULL,0,1,1,0);
			if ((row>0)&&(!select_result[0].empty()))
			{
				_tcscpy(m_server_ip[i],select_result[0].c_str()+2);
				server_count++;
			}
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::check_net_status(void)
{
	try
	{
		unsigned long return_time=0;
		TCHAR show_text[1024];
		string_conversion string_conv;
		char server_ip[256];

		memset(show_text,0x0,sizeof(show_text));
		memset(server_ip,0x0,sizeof(server_ip));

		for (int i=0;i<6;i++)
		{
			if (0==_tcscmp(m_server_ip[i],L""))
			{
				continue;
			}
			//转化成多字节
			string_conv.widechar_to_multibyte(m_server_ip[i],server_ip,sizeof(server_ip));
			//检测网络状况
			return_time = ping(server_ip,500);
			if (return_time<500)
			{
				//网络通
				swprintf(show_text,L"%s%dms",g_all_language[63].c_str(),return_time);
				flash_show_tip_message(show_text);
			}
			else
			{
				//网络不通
				flash_show_tip_message(64);
			}
			break;
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::change_song_show_mode(const TCHAR *args)
{
	try
	{

		int page_index = 0;
		bool result=false;


		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		//改变页面
		result = page_change_function(page_index);
		if(!result)
		{
			return;
		}
		//改变数据
		switch(page_index)
		{
		case page_title:    //有卡片的页面
		case page_lyric:
		case page_theme_song:
		case page_new_theme_song:
		case page_class:
		case page_new_song:
		case page_opera:
		case page_language:
		case page_movie_song:     //影视金曲
		case page_era_song:       //年代金曲
		case page_number_song:    //编号点歌
		case page_write:        //手写点歌
		case page_word_count:
		case page_hdmi:         //高清专区
		case page_voice_china:  //好声音
			{
				song_pre_next_page_change(song_select_expr,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_top_song:
			{
				song_pre_next_page_change(top_song_select_expr,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_selected:   //已选页面
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_singed:   //已唱页面
			{
				show_select_or_sing_song(SHOW_SING_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_recording:   //录音页面
			{
				song_recorder_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_member_song:  //会员歌曲页面
			{
				member_song_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		default:  //没有卡片的页面
			break;
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_change_language(const TCHAR *args)
{
	try
	{
		if(NULL==args)
		{
			return;
		}
		//改变语言
		if (0==_tcscmp(args,L"cn"))  //简体中文
		{
			g_flash_use_language = FLASH_LANGUAGE_SIMPLIFIED_CHINESE;
		}
#ifdef MONGOLIA_VERSION
		//else if (0==_tcscmp(args,L"mo"))  //蒙语
		else if (0==_tcscmp(args,L"tr"))  //蒙语
		{
			g_flash_use_language = FLASH_LANGUAGE_MONGOLIA;
		}
#else
		else if(0==_tcscmp(args,L"tr")) //繁体中文
		{
			g_flash_use_language = FLASH_LANGUAGE_TRADITIONAL_CHINESE;
		}
#endif
		else if (0==_tcscmp(args,L"en"))  //英文
		{
			g_flash_use_language = FLASH_LANGUAGE_ENGLISH;
		}
		else if (0==_tcscmp(args,L"kr"))  //韩文
		{
			g_flash_use_language = FLASH_LANGUAGE_KOREAN;
		}
		else if (0==_tcscmp(args,L"jp"))  //日本
		{
			g_flash_use_language = FLASH_LANGUAGE_JAPANESE;
		}
		//更新目前使用的语言
		change_flash_show_language();


		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::change_flash_show_language(void)
{
	try
	{
		TCHAR request[1024];
		TCHAR data[256];
		bool result=false;
		TCHAR file_name[256];

		memset(file_name,0x0,sizeof(file_name));
		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		//改变语言
		switch(g_flash_use_language)
		{
		case FLASH_LANGUAGE_SIMPLIFIED_CHINESE:
			{
#ifdef  MONGOLIA_VERSION   //蒙古版本
				_tcscpy(data,L"1");
#else
				_tcscpy(data,L"0");
#endif
				_tcscpy(file_name,L"language_cn.ini");
			}
			break;
		case FLASH_LANGUAGE_TRADITIONAL_CHINESE:
			{
				_tcscpy(data,L"1");
				_tcscpy(file_name,L"language_tr.ini");
			}
			break;
		case FLASH_LANGUAGE_ENGLISH:
			{
				_tcscpy(data,L"2");
				_tcscpy(file_name,L"language_en.ini");
			}
			break;
		case FLASH_LANGUAGE_KOREAN:
			{
				_tcscpy(data,L"3");
				_tcscpy(file_name,L"language_kr.ini");
			}
			break;
		case FLASH_LANGUAGE_JAPANESE:
			{
				_tcscpy(data,L"4");
				_tcscpy(file_name,L"language_jp.ini");
			}
			break;
		case FLASH_LANGUAGE_MONGOLIA:
			{
				_tcscpy(data,L"0");
				_tcscpy(file_name,L"language_mo.ini");
			}
			break;
		}
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"language_button",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		//从配置文件中读取所有提示信息
		read_tip_text(file_name);
		//重新刷新列表
		//refresh_screen_list(true); 

		//把坐标点发送给flash
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"language_button",data);
		if (result && m_controlbar_flash_player_exist)
		{
			m_controlbar_flash_player.CallFunction(request);
		}
		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::query_song_by_handheld_sql(char *recv_data)
{
	try
	{
		int page_operate_code=0;
		char sql[1024];
		char *pre_symbol=NULL;
		char *next_symbol=NULL;
		int total_row_count=0;
		int cur_page_count=0;
		std::wstring *select_result=NULL;
		bool result=false;
		char send_data[1024];
		int handheld_song_column_nums=27;  //手持的歌曲列数

		memset(sql,0x0,sizeof(sql));
		memset(send_data,0x0,sizeof(send_data));

		//得到页操作码
		memcpy(sql,recv_data,sizeof(char));
		sscanf(sql,"%d",&page_operate_code);
		if (FIRST_PAGE_OPERATE==page_operate_code)
		{
			//查询第一页
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//查询行数
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					total_row_count = m_db_query.get_row_count(sql);
					if (total_row_count<=0)
					{
						//没有数据
						sprintf(send_data,"QUERYSONGINFO%d#%d|",page_operate_code,total_row_count);
						send_master_slave_data(NULL,send_data,strlen(send_data));
						return;
					}
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,sql);
						if (row>0)
						{
							result = m_query_song_manager.set_handheld_song_list(select_result,handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,handheld_song_column_nums);
							//发送歌曲信息
							send_query_song_to_handheld(page_operate_code,total_row_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}			
		}
		else
		{
			//上下页操作
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//得到当前页号
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					sscanf(sql,"%d",&cur_page_count);
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,sql);
						if (row>0)
						{
							result = m_query_song_manager.set_handheld_song_list(select_result,handheld_song_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,handheld_song_column_nums);
							//发送歌曲信息
							send_query_song_to_handheld(page_operate_code,cur_page_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::query_movie_by_handheld_sql(char *recv_data)
{
	try
	{
		int page_operate_code=0;
		char sql[1024];
		char *pre_symbol=NULL;
		char *next_symbol=NULL;
		int total_row_count=0;
		int cur_page_count=0;
		std::wstring *select_result=NULL;
		bool result=false;
		char send_data[1024];

		memset(sql,0x0,sizeof(sql));
		memset(send_data,0x0,sizeof(send_data));

		//得到页操作码
		memcpy(sql,recv_data,sizeof(char));
		sscanf(sql,"%d",&page_operate_code);
		if (FIRST_PAGE_OPERATE==page_operate_code)
		{
			//查询第一页
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//查询行数
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					total_row_count = m_db_query.get_row_count(sql);
					if (total_row_count<=0)
					{
						//没有数据
						sprintf(send_data,"QUERYMOVIEINFO%d#%d|",page_operate_code,total_row_count);
						send_master_slave_data(NULL,send_data,strlen(send_data));
						return;
					}
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,sql);
						if (row>0)
						{
							result = m_query_song_manager.set_handheld_movie_list(select_result,movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,movie_select_expr.result_column_nums);
							//发送歌曲信息
							send_query_movie_to_handheld(page_operate_code,total_row_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}			
		}
		else
		{
			//上下页操作
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//得到当前页号
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					sscanf(sql,"%d",&cur_page_count);
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,sql);
						if (row>0)
						{
							result = m_query_song_manager.set_handheld_movie_list(select_result,movie_select_expr.result_column_nums*HANDHELD_PAGE_SHOW_ROW_COUNT,movie_select_expr.result_column_nums);
							//发送歌曲信息
							send_query_movie_to_handheld(page_operate_code,cur_page_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::query_singer_by_handheld_sql(char *recv_data)
{
	try
	{
		int page_operate_code=0;
		char sql[1024];
		char *pre_symbol=NULL;
		char *next_symbol=NULL;
		int total_row_count=0;
		int cur_page_count=0;
		std::wstring *select_result=NULL;
		bool result=false;
		char send_data[1024];

		memset(sql,0x0,sizeof(sql));
		memset(send_data,0x0,sizeof(send_data));

		//得到页操作码
		memcpy(sql,recv_data,sizeof(char));
		sscanf(sql,"%d",&page_operate_code);
		if (FIRST_PAGE_OPERATE==page_operate_code)
		{
			//查询第一页
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//查询行数
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					total_row_count = m_db_query.get_row_count(sql);
					if (total_row_count<=0)
					{
						//没有数据
						sprintf(send_data,"QUERYSINGERINFO%d#%d|",page_operate_code,total_row_count);
						send_master_slave_data(NULL,send_data,strlen(send_data));
						return;
					}
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[singer_select_expr.result_column_nums*singer_page_show_row_count];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,singer_select_expr.result_column_nums*singer_page_show_row_count,sql);
						if (row>0)
						{
							result = m_query_singer_manager.set_handheld_singer_list(select_result,singer_select_expr.result_column_nums*singer_page_show_row_count,singer_select_expr.result_column_nums);
							//发送歌星信息
							send_query_singer_to_handheld(page_operate_code,total_row_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}			
		}
		else
		{
			//上下页操作
			pre_symbol = strchr(recv_data,'@');
			if (pre_symbol)
			{
				next_symbol = strchr(pre_symbol,'$');
				if (next_symbol)
				{
					//得到当前页号
					memset(sql,0x0,sizeof(sql));
					memcpy(sql,pre_symbol+1,(next_symbol-pre_symbol-1)*sizeof(char));
					sscanf(sql,"%d",&cur_page_count);
					//查询数据
					memset(sql,0x0,sizeof(sql));
					strcpy(sql,next_symbol+1);
					select_result = new std::wstring[singer_select_expr.result_column_nums*singer_page_show_row_count];
					if (select_result)
					{
						int row = m_db_query.query_db_get_table_data(select_result,singer_select_expr.result_column_nums*singer_page_show_row_count,sql);
						if (row>0)
						{
							result = m_query_singer_manager.set_handheld_singer_list(select_result,singer_select_expr.result_column_nums*singer_page_show_row_count,singer_select_expr.result_column_nums);
							//发送歌星信息
							send_query_singer_to_handheld(page_operate_code,cur_page_count);
						}

						//释放空间
						delete  []select_result;
						select_result = NULL;
					}
				}
			}
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_survey_result(int question_number,const TCHAR *args)
{
	try
	{
		TCHAR *split_symbol=NULL;

		if ((NULL==args)||(question_number<0)||(question_number>=SURVER_QUESTION_COUNT))
		{
			return;
		}
		memset(m_surver_question[question_number],0x0,sizeof(m_surver_question[question_number]));
		//得到调查问题和满意度,格式：问题:满意度 例子：服务质量：1
		_tcscpy(m_surver_question[question_number],args);
		split_symbol = _tcsrchr(m_surver_question[question_number],':');
		swscanf(split_symbol+1,L"%d",&m_satisfaction_degree[question_number]);
		split_symbol[0] = '\0';
		//满意度减一，是为了和消息系统匹配
		m_satisfaction_degree[question_number]--;

		//改变光标焦点
		if (m_input_box_show_help[0])
		{
			//清空原有的帮助文字
			flash_show_others_opinion(g_all_language[41].c_str(),false);
		}
		else
		{
			flash_show_others_opinion(m_others_opinion.c_str(),false);
		}
		if (m_input_box_show_help[1])
		{
			//清空原有的帮助文字
			flash_show_contact_phone(g_all_language[42].c_str(),false);
		}
		else
		{
			flash_show_contact_phone(m_contact_phone.c_str(),false);
		}

	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_custom_tip_message(const TCHAR* args)
{
	try
	{
		int number=0; 
		if (NULL==args)
		{
			return;
		}
		swscanf(args,L"%d",&number);

		m_custom_input_fouce = number;

		for (int i = 0; i < CUSTOM_SONG_COUNT; i++)
		{
			if (i == number)
			{
				flash_show_custom_song(m_custom_song[i].c_str(),i,true);
			}
			else
			{
				flash_show_custom_song(m_custom_song[i].c_str(),i,false);
			}
		}


		//电话失去焦点
		if (number == 10)
		{
			flash_show_custom_phone(m_custom_phone.c_str(),true);
			set_flash_button_state(L"custom_buttom_number",1);
			m_handwriting_window.ShowWindow(SW_HIDE);
			m_show_handwriting_window = false;
		}
		else
		{
			flash_show_custom_phone(m_custom_phone.c_str(),false);
			set_flash_button_state(L"custom_buttom_number",0);
			m_handwriting_window.BringWindowToTop();
			m_handwriting_window.ShowWindow(SW_SHOW);
			m_handwriting_window.UpdateWindow();
			m_show_handwriting_window = true;
		}
	}
	catch (...)
	{

	} 

	return;
}

void Cflashktv10Wnd::flash_message_call_surver_tip_message(const TCHAR *args)
{
	try
	{
		TCHAR message[1024];

		memset(message,0x0,sizeof(message));

		if (0==_tcscmp(args,L"6"))
		{
			//其他建议
			if (m_input_box_show_help[0])
			{
				//清空原有的帮助文字
				flash_show_others_opinion(L"",true);
				m_input_box_show_help[0] = false;
			}
			else
			{
				flash_show_others_opinion(m_others_opinion.c_str(),true);
			}
			if (m_input_box_show_help[1])
			{
				//清空原有的帮助文字
				flash_show_contact_phone(g_all_language[42].c_str(),false);
			}
			else
			{
				flash_show_contact_phone(m_contact_phone.c_str(),false);
				flash_show_custom_phone(m_custom_phone.c_str(),false);
			}

			set_flash_button_state(L"surver_buttom_number",0);
			//弹出提示帮助
			//swprintf(message,L"%s――>",g_all_language[41].c_str());
			//flash_show_tip_message(message);
		}
		else if (0==_tcscmp(args,L"7"))
		{
			//书写号码
			if (m_input_box_show_help[1])
			{
				//清空原有的帮助文字
				flash_show_contact_phone(L"",true);
				m_input_box_show_help[1]=false;
			}
			else
			{
				flash_show_contact_phone(m_contact_phone.c_str(),true);
			}
			if (m_input_box_show_help[0])
			{
				//清空原有的帮助文字
				flash_show_others_opinion(g_all_language[41].c_str(),false);
			}
			else
			{
				flash_show_others_opinion(m_others_opinion.c_str(),false);
			}
			//弹出提示帮助
			//swprintf(message,L"%s――>",g_all_language[70].c_str());
			//flash_show_tip_message(message);
			set_flash_button_state(L"surver_buttom_number",1);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::change_query_mode(query_condition select_condition[],int condition_suffix,TCHAR *column_name,TCHAR *max_char,bool spell_query)
{
	try
	{
		if ((NULL==column_name)||(NULL==max_char))
		{
			return;
		}
		int page_index=0;
		TCHAR temp_condition[256];
		TCHAR column_text[256];

		memset(column_text,0x0,sizeof(column_text));

		//得到页面索引
		page_index = m_flash_manage.get_last_page_index();
		if (page_movie_song==page_index)//影视金曲只检索副标题  2011-08-01 modify
		{
			//影视金曲页面
			if(spell_query)
			{
				//拼音检索
				_tcscpy(column_text,L"moive_spell_first_letter");
			}
			else
			{
				//手写检索
				_tcscpy(column_text,L"movie_name");
			}
		}
		else
		{
			_tcscpy(column_text,column_name);
		}

		//2011-09-23 modify 都要重置列名，防止模糊查询时，影视金曲查询的也是歌曲拼音列
		select_condition[condition_suffix].column_name = column_text;
		if (!m_use_obscure_query && !select_condition[condition_suffix].expression.empty())
		{
			//没有模糊查询，并且条件不是空，改变查询方式，启用索引
			memset(temp_condition,0x0,sizeof(temp_condition));

			swprintf(temp_condition,L"\" and %s<=\"%s%s\"",column_text,select_condition[condition_suffix].expression.c_str(),max_char);
			select_condition[condition_suffix].operation_symbols = L">=\"";
			select_condition[condition_suffix].wildcard = temp_condition;
		}

		return;
	}
	catch (...)
	{

	}

	return;
}


void Cflashktv10Wnd::read_tip_text(TCHAR *file_name)
{
	try
	{
		TCHAR path[256];
		TCHAR key_value[256];
		config_file_manager config_file;
		std::wstring text_value;

		memset(path,0x0,sizeof(path));
		swprintf(path,L"%s\\%s\\%s",m_work_path,g_folder_name[33],file_name);
		if (!PathFileExists(path))
		{
			//文件不存在就采用默认值
			return;
		}
		memset(path,0x0,sizeof(path));
		swprintf(path,L"%s\\%s",g_folder_name[33],file_name);
		//设置语言配置文件路径
		config_file.init(path);

		//读取提示语言
		for (int i=0;i<TIP_LANGUAGE_COUNT;i++)
		{
			memset(key_value,0x0,sizeof(key_value));
			swprintf(key_value,L"tip%d",i);
			text_value = config_file.read_string(L"language",key_value,L"");
			if (!text_value.empty())
			{
				g_all_language[i] = text_value;
			}
		}
		//读取标题语言
		for (int i=0;i<PAGE_MAX_NUMBER;i++)
		{
			memset(key_value,0x0,sizeof(key_value));
			swprintf(key_value,L"tip%d",i);
			text_value = config_file.read_string(L"title_language",key_value,L"");
			if (!text_value.empty())
			{
				g_page_name[i] = text_value;
			}
		}

		return;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::flash_message_call_number_select_song(const TCHAR *args)
{
	try
	{
		TCHAR temp_args[16];
		int len=0;
		TCHAR data[512];
		TCHAR request[512];
		bool result=false;
		//2015-3-18 09:14:32---add---by---LTL
		std::wstring last_query_condition;   //记录上次查询的条件
		memset(temp_args,0x0,sizeof(temp_args));
		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		if (0==_tcscmp(args,L"delete"))
		{
			//回删
			len = (int)song_query_condition[SONG_ID_SUFFIX].expression.length();
			if (len<=0)
			{
				return;
			}
			song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"=\'";
			song_query_condition[SONG_ID_SUFFIX].expression = song_query_condition[SONG_ID_SUFFIX].expression.substr(0,len-1);
			song_query_condition[SONG_ID_SUFFIX].wildcard=L"\'";
		}
		else if (0==_tcscmp(args,L"clear"))
		{
			//清空
			//按照页面清空查询条件并初始化
			clear_query_condition_by_page_and_init(false);
		}
		else
		{
			//赋值
			last_query_condition = song_query_condition[SONG_ID_SUFFIX].expression;
			_tcscpy(temp_args,args);
			song_query_condition[SONG_ID_SUFFIX].operation_symbols = L"=\'";
			song_query_condition[SONG_ID_SUFFIX].expression += temp_args;
			song_query_condition[SONG_ID_SUFFIX].wildcard=L"\'";
			if(song_query_condition[SONG_ID_SUFFIX].expression.length()>15)
			{
				//编号不能超过15个
				song_query_condition[SONG_ID_SUFFIX].expression.clear();
			}
		}

		//2011-08-01 add  改变查询模式，启用索引
		change_query_mode(song_query_condition,SONG_ID_SUFFIX,L"song_id",L"9",false);
		//查询数据库和显示结果到flash界面上
		int ret  = song_query_two_show_data(song_select_expr);
		if (1==ret)
		{
			//查询成功
			show_letter_window(song_query_condition[SONG_ID_SUFFIX].expression.c_str());
		}
		else if (0==ret)
		{
			//查询失败
			//改为上一次的查询结果
			song_query_condition[SONG_ID_SUFFIX].expression = last_query_condition;
			change_query_mode(song_query_condition,SONG_ID_SUFFIX,L"song_id",L"9",false);
			int ret  = song_query_two_show_data(song_select_expr);
			show_letter_window(song_query_condition[SONG_ID_SUFFIX].expression.c_str());
		}
		else
		{
			//查询失败
			show_letter_window(L"");
		}

		return;		
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::show_video_page_tip_msg(void)
{
	try
	{
		TCHAR pc_tip_msg[256];
		TCHAR tv_tip_msg[256];
		TCHAR request[1024];
		TCHAR data[1024];
		bool result=false;

		memset(pc_tip_msg,0x0,sizeof(pc_tip_msg));
		memset(tv_tip_msg,0x0,sizeof(tv_tip_msg));
		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));

		switch(pc_play_video_type)
		{
		default:
		case VIDEO_TYPE_SONG:        //歌曲
		case VIDEO_TYPE_PREVIEW_SONG://预览歌曲
			{
				_tcscpy(pc_tip_msg,g_all_language[78].c_str());
			}
			break;
		case VIDEO_TYPE_LOBBY_LIVE:  //大厅直播
			{
				_tcscpy(pc_tip_msg,g_all_language[79].c_str());
			}
			break;
		case VIDEO_TYPE_TV:          //电视
			{
				_tcscpy(pc_tip_msg,g_all_language[80].c_str());
			}
			break;
		}

		switch (tv_play_video_type)
		{
		default:
		case VIDEO_TYPE_PREVIEW_SONG://预览歌曲
		case VIDEO_TYPE_SONG:        //歌曲
			{
				_tcscpy(tv_tip_msg,g_all_language[81].c_str());
			}
			break;
		case VIDEO_TYPE_LOBBY_LIVE:  //大厅直播
			{
				_tcscpy(tv_tip_msg,g_all_language[82].c_str());
			}
			break;
		case VIDEO_TYPE_TV:          //电视
			{
				_tcscpy(tv_tip_msg,g_all_language[83].c_str());
			} 
			break;
		}

		swprintf(data,L"<data><info text1=\"%s\" text2=\"%s\" /></data>",pc_tip_msg,tv_tip_msg);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"video_text",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::send_query_condition_text_to_flash(void)
{
	try
	{
		int page_index=0;
		TCHAR data[1024];
		TCHAR request[1024];
		bool result=false;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		page_index = m_flash_manage.get_last_page_index();
		if (page_search_song!=page_index)
		{
			return;
		}	

		//语种条件
		_tcscpy(data,song_query_condition[LANGUAGE_SUFFIX].expression.c_str());
		//歌星性别
		if ((0!=_tcscmp(data,L"")) && !song_query_condition[SINGER_SEX_SUFFIX].expression.empty())
		{
			_tcscat(data,L"，");
		}
		if (0==_tcscmp(song_query_condition[SINGER_SEX_SUFFIX].expression.c_str(),L"1"))
		{
			_tcscat(data,L"男生");
		}
		else if (0==_tcscmp(song_query_condition[SINGER_SEX_SUFFIX].expression.c_str(),L"2"))
		{
			_tcscat(data,L"女生");
		}
		else if (0==_tcscmp(song_query_condition[SINGER_SEX_SUFFIX].expression.c_str(),L"3"))
		{
			_tcscat(data,L"对唱");
		}
		else if (0==_tcscmp(song_query_condition[SINGER_SEX_SUFFIX].expression.c_str(),L"\"6\",\"7\",\"4\",\"5\""))
		{
			_tcscat(data,L"合唱");
		}
		//歌曲版本
		if ((0!=_tcscmp(data,L"")) && !song_query_condition[SONG_VERSION_SUFFIX].expression.empty())
		{
			_tcscat(data,L"，");
		}
		_tcscat(data,song_query_condition[SONG_VERSION_SUFFIX].expression.c_str());
		//字数
		if ((0!=_tcscmp(data,L"")) && !song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.empty())
		{
			_tcscat(data,L"，");
		}
		if ((0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"3"))&&(0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols.c_str(),L"<")))
		{
			_tcscat(data,L"三字以下");
		}
		else if ((0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"7"))&&(0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].operation_symbols.c_str(),L">")))
		{
			_tcscat(data,L"七字以上");
		}
		else if (0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"3"))
		{
			_tcscat(data,L"三字");
		}
		else if (0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"4"))
		{
			_tcscat(data,L"四字");
		}
		else if (0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"5"))
		{
			_tcscat(data,L"五字");
		}
		else if (0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"6"))
		{
			_tcscat(data,L"六字");
		}
		else if (0==_tcscmp(song_query_condition[SONG_NAME_WORD_COUNT_SUFFIX].expression.c_str(),L"7"))
		{
			_tcscat(data,L"七字");
		}

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"condition_text",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		return;
	}
	catch (...)
	{

	}

	return;
}

UINT Cflashktv10Wnd::recv_video_dating_thread(LPVOID pParam)
{
	Cflashktv10Wnd* pThis = (Cflashktv10Wnd *)pParam;
	pThis->recv_video_dating_server_data();
	AfxEndThread(0);
	return 1L;
}

void Cflashktv10Wnd::recv_video_dating_server_data()
{
	while (m_brecvData_thread)
	{
		//recv data
		int recv_len=0;
		sockaddr_in send_addr;
		int nLen = sizeof(send_addr);

		memset(m_recv_video_dating_data,0x0,sizeof(m_recv_video_dating_data));

		recv_len = ::recvfrom(recv_video_dating,(char *)m_recv_video_dating_data,sizeof(m_recv_video_dating_data),0,(sockaddr*)&send_addr, &nLen);

		//解析数据
		if (recv_len > 0)
		{
			parse_recv_video_dating_data(m_recv_video_dating_data);
		}

	}
}

UINT Cflashktv10Wnd::recvData_thread(LPVOID pParam)
{
	Cflashktv10Wnd* pThis = (Cflashktv10Wnd *)pParam;
	pThis->recv_pk_server_data();
	AfxEndThread(0);
	return 1L;
}

void Cflashktv10Wnd::recv_pk_server_data()
{
	while (m_brecvData_thread)
	{
		//recv data
		int recv_len=0;
		sockaddr_in send_addr;
		int nLen = sizeof(send_addr);

		memset(m_recv_pk_data,0x0,sizeof(m_recv_pk_data));

		recv_len = ::recvfrom(recv_socket,(char *)m_recv_pk_data,sizeof(m_recv_pk_data),0,(sockaddr*)&send_addr, &nLen);

		//解析数据
		if (recv_len > 0)
		{
			parse_recv_data(m_recv_pk_data);
		}

	}
}

void Cflashktv10Wnd::parse_recv_video_dating_data(TCHAR* data)
{
	if (NULL==data)
	{
		return;
	}
	TCHAR parse_data[20480];
	const TCHAR *parse_msg=NULL;

	memset(parse_data,0x0,sizeof(parse_data));
	_tcscpy(parse_data,data);

	//首先判断是否是对方接收邀请消息
	if (0==_tcsncmp(parse_data,L"ReceiveMessage:",15))
	{		
		parse_client_video_dating(data);
	}

	//判断是否是消息
	if (0 != _tcsncmp(parse_data,L"ServiceMessage:",15))
	{
		//开始符不对，说明不是服务器发送过来的数据，直接丢弃
		return;
	}

	//后移动15个字节
	parse_msg = parse_data+15;

	//解析xml文档
	int iCount = 0;
	CMarkup parse_xml_doc;
	bool result=false;
	bool bFlags_ip = false; //判断相等IP的标准
	std::wstring itemValue;
	char local_ip[256];
	TCHAR localhostIP[256];
	string_conversion string_conv; 
	bool bStart = false;  //是否开始唱歌 

	memset(localhostIP,0x0,sizeof(localhostIP));
	memset(local_ip,0x0,sizeof(local_ip)); 


	result = GetHostIP(local_ip);
	if (!result)
	{
		return;
	}
	string_conv.multibyte_to_widechar((const char *)local_ip,localhostIP,sizeof(localhostIP)/sizeof(TCHAR));


	result =parse_xml_doc.SetDoc(parse_msg);
	if (!result)
	{
		return;
	}
	parse_xml_doc.ResetPos();   //pk_list
	result = parse_xml_doc.FindChildElem(); 
	if (!result)
	{
		return;
	}

	while (TRUE)
	{
		bFlags_ip = false;
		result = parse_xml_doc.IntoElem(); //item
		if (!result)
		{
			break;
		}
		//<item ip=\"%s\" name=\"%s\" status=\"%d\" character=\"%d\"/>m_server_video_dating_data[i]
		//ip
		itemValue = parse_xml_doc.GetAttrib(L"ip");
		swprintf(m_server_video_dating_data[iCount].ip,_T("%s"),itemValue.c_str());

		//名称
		itemValue = parse_xml_doc.GetAttrib(L"name");
		swprintf(m_server_video_dating_data[iCount].name,_T("%s"),itemValue.c_str());

		//状态
		itemValue = parse_xml_doc.GetAttrib(L"status");
		m_server_video_dating_data[iCount].nstatus = _ttoi(itemValue.c_str());

		//角色
		itemValue = parse_xml_doc.GetAttrib(L"character");
		m_server_video_dating_data[iCount].ncharacter = _ttoi(itemValue.c_str());

		parse_xml_doc.OutOfElem();

		if (0 == _tcscmp(localhostIP,m_server_video_dating_data[iCount].ip))
		{
			bFlags_ip = true;
			//本机的信息
			_tcscpy(m_video_dating_info.ip,m_server_video_dating_data[iCount].ip);
			_tcscpy(m_video_dating_info.name,m_server_video_dating_data[iCount].name);
			m_video_dating_info.nstatus = m_server_video_dating_data[iCount].nstatus;
			m_video_dating_info.ncharacter = m_server_video_dating_data[iCount].ncharacter;
		}

		if (!bFlags_ip)
		{
			//ip相等不让显示
			iCount++;
		}
		else 
		{
			//是本机ip地址时，判断invitationIP是否为空

		}
		result = parse_xml_doc.FindChildElem();
		if (!result)
		{
			break;
		}		
	}

	m_video_dating_total = iCount; //得到总共有多少条数据
	int page_index=0;

	//得到最后一页索引
	page_index = m_flash_manage.get_last_page_index();
	if (page_index == page_video_dating)
	{
		send_vd_three_screen_data(CUR_PAGE_OPERATE,0);
	}
}

void Cflashktv10Wnd::parse_recv_data(TCHAR* data)
{
	//<pk_list><item ipAddress="192.168.0.1",Member="10000" sex="1" state="0" /></pk_list>
	//////////////////////////////////////////////////////////////////////////

	if (NULL==data)
	{
		return;
	}
	TCHAR parse_data[20480];
	const TCHAR *parse_msg=NULL;

	memset(parse_data,0x0,sizeof(parse_data));
	_tcscpy(parse_data,data);

	//首先判断是否是对方接收邀请消息
	if (0==_tcsncmp(parse_data,L"ReceiveMessage:",15))
	{		
		establish_video_connection(data);		
	}

	//判断是否是消息
	if (0 != _tcsncmp(parse_data,L"ServiceMessage:",15))
	{
		//开始符不对，说明不是服务器发送过来的数据，直接丢弃
		return;
	}

	//后移动15个字节
	parse_msg = parse_data+15;

	//解析xml文档
	int iCount = 0;
	CMarkup parse_xml_doc;
	bool result=false;
	bool bFlags_ip = false; //判断相等IP的标准
	std::wstring itemValue;
	char local_ip[256];
	TCHAR localhostIP[256];
	string_conversion string_conv; 
	bool bStart = false;  //是否开始唱歌 

	memset(localhostIP,0x0,sizeof(localhostIP));
	memset(local_ip,0x0,sizeof(local_ip)); 


	result = GetHostIP(local_ip);
	if (!result)
	{
		return;
	}
	string_conv.multibyte_to_widechar((const char *)local_ip,localhostIP,sizeof(localhostIP)/sizeof(TCHAR));


	result =parse_xml_doc.SetDoc(parse_msg);
	if (!result)
	{
		return;
	}
	parse_xml_doc.ResetPos();   //pk_list
	result = parse_xml_doc.FindChildElem(); 
	if (!result)
	{
		return;
	}

	while (TRUE)
	{
		bFlags_ip = false;
		result = parse_xml_doc.IntoElem(); //item
		if (!result)
		{
			break;
		}
		//<pk_list><item ipAddress="192.168.0.1",Member="10000" sex="1" state="0" sendIP ="192.168.0.1" invitationIP=\"192.168.0.2\" /></pk_list>
		//ip
		itemValue = parse_xml_doc.GetAttrib(L"ipAddress");
		swprintf(m_send_member_data[iCount].ipaddress,_T("%s"),itemValue.c_str());

		//会员名
		itemValue = parse_xml_doc.GetAttrib(L"Member");
		swprintf(m_send_member_data[iCount].name,_T("%s"),itemValue.c_str());

		//性别
		itemValue = parse_xml_doc.GetAttrib(L"sex");
		swprintf(m_send_member_data[iCount].nsex,_T("%s"),itemValue.c_str());

		//状态
		itemValue = parse_xml_doc.GetAttrib(L"state");
		swprintf(m_send_member_data[iCount].nstatus,_T("%s"),itemValue.c_str());

		//盒子端口
		itemValue = parse_xml_doc.GetAttrib(L"nBoxIp");
		swprintf(m_send_member_data[iCount].nBoxIp,_T("%s"),itemValue.c_str());
		//端口
		itemValue = parse_xml_doc.GetAttrib(L"port");
		swscanf(itemValue.c_str(),L"%d",&m_send_member_data[iCount].nPort);

		parse_xml_doc.OutOfElem();

		if (0 == _tcscmp(localhostIP,m_send_member_data[iCount].ipaddress))
		{
			bFlags_ip = true;
			//本机的信息
			_tcscpy(m_pk_information.ipaddress,m_send_member_data[iCount].ipaddress);
			_tcscpy(m_pk_information.name,m_send_member_data[iCount].name);
			_tcscpy(m_pk_information.nsex,m_send_member_data[iCount].nsex);
			_tcscpy(m_pk_information.nstatus,m_send_member_data[iCount].nstatus);
			_tcscpy(m_pk_information.nBoxIp,m_send_member_data[iCount].nBoxIp);
			m_pk_information.nPort = m_send_member_data[iCount].nPort;
		}

		if (!bFlags_ip)
		{
			//ip相等不让显示
			iCount++;
		}
		else 
		{
			//是本机ip地址时，判断invitationIP是否为空

		}
		result = parse_xml_doc.FindChildElem();
		if (!result)
		{
			break;
		}		
	}

	m_pk_member_total = iCount; //得到总共有多少条数据
	int page_index=0;

	//得到最后一页索引
	page_index = m_flash_manage.get_last_page_index();
	if (page_index == page_pk)
	{
		send_pk_three_screen_data(CUR_PAGE_OPERATE,0);
	}
}

bool Cflashktv10Wnd::recv_serv_or_room_msg()
{
	//创建socket用于接收数据
	recv_video_dating = ::socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
	if (recv_video_dating<0)
	{
		return 0;
	}
	//设置socket属性
	struct linger zerolinger;
	zerolinger.l_onoff = 1;
	zerolinger.l_linger = 5;
	setsockopt(recv_video_dating,SOL_SOCKET,SO_LINGER,(const char *)&zerolinger,sizeof(zerolinger));
	int recv_timeout=60000;
	setsockopt(recv_video_dating,SOL_SOCKET,SO_RCVTIMEO,(const char *)&recv_timeout,sizeof(recv_timeout));

	//bind local addr
	sockaddr_in addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.S_un.S_addr = INADDR_ANY;
	addr.sin_port = ntohs(6664);      //数据接收端口
	memset(&addr.sin_zero, 0, sizeof(addr.sin_zero));
	if (SOCKET_ERROR == bind(recv_video_dating, (struct sockaddr*)&addr, sizeof(sockaddr_in)))
	{
		WriteLog(__FL__, L"绑定6664端口失败!!");
		return 0;
	}

	//启动一个线程用于接收发过来的数据
	AfxBeginThread(recv_video_dating_thread,this);
	Sleep(1000); //等待线程启动
	return 1;
}

bool Cflashktv10Wnd::connect_server()
{
	//创建socket用于接收数据
	recv_socket = ::socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
	if (recv_socket<0)
	{
		return 0;
	}
	//设置socket属性
	struct linger zerolinger;
	zerolinger.l_onoff = 1;
	zerolinger.l_linger = 5;
	setsockopt(recv_socket,SOL_SOCKET,SO_LINGER,(const char *)&zerolinger,sizeof(zerolinger));
	int recv_timeout=60000;
	setsockopt(recv_socket,SOL_SOCKET,SO_RCVTIMEO,(const char *)&recv_timeout,sizeof(recv_timeout));

	//bind local addr
	sockaddr_in addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.S_un.S_addr = INADDR_ANY;
	addr.sin_port = ntohs(6663);      //数据接收端口
	memset(&addr.sin_zero, 0, sizeof(addr.sin_zero));
	if (SOCKET_ERROR == bind(recv_socket, (struct sockaddr*)&addr, sizeof(sockaddr_in)))
	{
		WriteLog(__FL__, L"绑定6663端口失败!!");
		return 0;
	}

	//启动一个线程用于接收发过来的数据
	AfxBeginThread(recvData_thread,this);
	return 1;
}


void Cflashktv10Wnd::send_pk_data_to_server(int iFlags)
{
	bool result = false;
	char local_ip[256];
	TCHAR send_message[10240]; //发送的数据

	string_conversion string_conv;
	config_file_manager file_mangaer;

	PK_MEMBER_DATA pk_data; 
	memset(local_ip,0x0,sizeof(local_ip));
	memset(send_message,0x0,sizeof(send_message));

	//给服务器发送数据
	//1、得到本机的ip
	result = GetHostIP(local_ip);
	if (!result)
	{
		return;
	}
	string_conv.multibyte_to_widechar((const char *)local_ip,pk_data.ipaddress,sizeof(pk_data.ipaddress)/sizeof(TCHAR));
	_tcscpy(pk_data.name,m_pk_name);
	pk_data.nPort = m_pk_local_video_port;
	if (1 == m_pk_menber_sex)
	{
		_tcscpy(pk_data.nsex,_T("w"));
	}
	else 
	{
		_tcscpy(pk_data.nsex,_T("m"));
	}

	if (0 == iFlags)  //退出
	{
		_tcscpy(pk_data.nstatus,g_all_language[101].c_str());
	}
	else if (1 == iFlags) //登陆
	{
		_tcscpy(pk_data.nstatus,g_all_language[101].c_str());

	}
	else if (2 == iFlags) //发送邀请命令
	{

		_tcscpy(pk_data.nstatus,g_all_language[101].c_str());

	}
	else if (3 == iFlags) //接收
	{
		_tcscpy(pk_data.nstatus,g_all_language[99].c_str());

	}
	else if (4 == iFlags) //拒绝
	{
		_tcscpy(pk_data.nstatus,g_all_language[101].c_str());
	}

	//TODO：标志:本机IP:会员名:性别:盒子ip:状态
	swprintf(send_message,_T("Message&PKMEMBER;%d:%s:%s:%s:%s:%s:%d$END"),
		iFlags,pk_data.ipaddress,pk_data.name,pk_data.nsex,pk_data.nstatus,m_pk_local_video_ip,pk_data.nPort);
	WriteLog(__FL__, L"发送数据给服务端----------------------");
	WriteLog(__FL__, send_message);

	send_data_to_service_udp(send_message);
}

void Cflashktv10Wnd::send_vd_three_screen_data(int page_operate,int operate_type)
{
	bool result = false;
	TCHAR request[10240];
	std::wstring vd_list_xml;
	int page_total = 0;
	memset(request,0x0,sizeof(request));
	page_total = get_video_dating_page_total(); //得到总的页数
	//CUR_PAGE_OPERATE,     
	//PRE_PAGE_OPERATE,     
	//NEXT_PAGE_OPERATE,    
	record_vd_current_page(page_operate);

	//显示行页信息
	show_row_and_page_count(L"true",m_video_dating_total,page_total,m_vd_page_num);

	make_video_dating_list(vd_list_xml);
	result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),vd_list_xml.c_str(),true,page_video_dating,0,SONG_SHOW_MODE_LIST);

	if (result)
	{
		flash_player_call_function(request);
	}	
}

void Cflashktv10Wnd::send_pk_three_screen_data(int page_operate,int operate_type)
{
	bool result = false;
	TCHAR request[10240];
	std::wstring pk_list_xml;
	int page_total = 0;
	memset(request,0x0,sizeof(request));
	page_total = get_pk_memeber_page_total(); //得到总的页数
	//CUR_PAGE_OPERATE,     
	//PRE_PAGE_OPERATE,     
	//NEXT_PAGE_OPERATE,    
	record_pk_current_page(page_operate);

	make_pk_member_list(pk_list_xml);
	result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),pk_list_xml.c_str(),true,page_pk,0,SONG_SHOW_MODE_LIST);

	if (result)
	{
		flash_player_call_function(request);
	}

	//显示行页信息
	show_row_and_page_count(L"true",m_pk_member_total,page_total,m_pk_page_num);
}

int Cflashktv10Wnd::get_video_dating_page_total()
{
	int page_total = 0;
	if (m_video_dating_total > 0 && m_video_dating_total < 9)
	{
		return 1;
	}
	if (0 == m_video_dating_total/9)
	{
		page_total = m_video_dating_total / 9;
	}
	else 
	{
		page_total = m_video_dating_total/9 + 1;
	}
	return page_total;
}

int Cflashktv10Wnd::get_pk_memeber_page_total()
{
	int page_total = 0;
	if (m_pk_member_total > 0 && m_pk_member_total < 9)
	{
		return 1;
	}
	if (0 == m_pk_member_total/9)
	{
		page_total = m_pk_member_total / 9;
	}
	else 
	{
		page_total = m_pk_member_total/9 + 1;
	}
	return page_total;
}

void Cflashktv10Wnd::make_video_dating_list(std::wstring &pk_list_xml)
{
	TCHAR song_show_info[2048];
	TCHAR BtnShow[10];
	memset(BtnShow,0x0,sizeof(BtnShow));
	int nCurrentPage = 0;    //当前第几页
	int page_total = 0;     //得到总的页数
	int nStart = 0;
	int nEnd = 0;
	int nIdx = 0;

	nCurrentPage = m_vd_page_num;
	page_total = get_video_dating_page_total();
	//组织前一页
	//<item Member=”a” sex=”m|w” state=”空闲|正在PK…” isBtnShow=”true|false”>
	if (0 == page_total)
	{
		//flash_show_tip_message(94);
		return;
	}
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_video_dating_total;
	}
	else
	{
		if (1 == nCurrentPage)  //显示最后一页
		{
			nStart = (page_total - 1) * 9;
			nEnd = m_video_dating_total;
		}
		else
		{
			nStart = (nCurrentPage - 2)* 9;
			nEnd = nStart + 9;
		}
	}

	pk_list_xml += L"<pre_list>";
	for (int i = nStart; i < nEnd; i++)
	{
		if (nCurrentPage == 1)
		{
			break;
		}
		memset(song_show_info,0x0,sizeof(song_show_info));

		if (m_server_video_dating_data[i].nstatus == VD_IDLE)
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item id=\"%d\" name=\"%s\" character=\"%d\" state=\"%d\" isBtnShow=\"%s\" />"),
			nIdx,m_server_video_dating_data[i].name,m_server_video_dating_data[i].ncharacter,m_server_video_dating_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
		nIdx++;
	}
	pk_list_xml += L"</pre_list><cur_list>";
	//组织当前页
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_video_dating_total;
	}
	else
	{

		nStart = (nCurrentPage - 1)* 9;
		if (page_total == nCurrentPage) //显示最后一页
		{
			nEnd = m_video_dating_total;
		}
		else
		{
			nEnd = nStart + 9;
		}	
	}
	nIdx = 0;
	for (int i= nStart;i<nEnd;i++)
	{
		memset(song_show_info,0x0,sizeof(song_show_info));

		if (m_server_video_dating_data[i].nstatus == VD_IDLE)
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item id=\"%d\" name=\"%s\" character=\"%d\" state=\"%d\" isBtnShow=\"%s\" />"),
			nIdx,m_server_video_dating_data[i].name,m_server_video_dating_data[i].ncharacter,m_server_video_dating_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
		nIdx++;
	}

	pk_list_xml += L"</cur_list><next_list>";
	//下一页
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_video_dating_total;
	}
	else
	{
		if (page_total == nCurrentPage)  //显示第一页
		{
			nStart = 0;
			nEnd = 9;
		}
		else
		{
			nStart = (nCurrentPage) * 9;
			if (page_total == nCurrentPage + 1) //显示最后一页
			{
				nEnd = m_video_dating_total;
			}
			else
			{
				nEnd = nStart + 9;
			}			
		}
	}
	nIdx = 0;
	for (int i=nStart;i<nEnd;i++)
	{
		if (page_total == nCurrentPage)
		{
			break;
		}
		memset(song_show_info,0x0,sizeof(song_show_info));

		if (m_server_video_dating_data[i].nstatus == VD_IDLE)
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item id=\"%d\" name=\"%s\" character=\"%d\" state=\"%d\" isBtnShow=\"%s\" />"),
			nIdx,m_server_video_dating_data[i].name,m_server_video_dating_data[i].ncharacter,m_server_video_dating_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
		nIdx++;
	}
	pk_list_xml += L"</next_list>";
}

void Cflashktv10Wnd::make_pk_member_list(std::wstring &pk_list_xml)
{	
	TCHAR song_show_info[2048];
	TCHAR BtnShow[10];
	memset(BtnShow,0x0,sizeof(BtnShow));
	int nCurrentPage = 0;    //当前第几页
	int page_total = 0;     //得到总的页数
	int nStart = 0;
	int nEnd = 0;

	nCurrentPage = m_pk_page_num;
	page_total = get_pk_memeber_page_total();
	//组织前一页
	//<item Member=”a” sex=”m|w” state=”空闲|正在PK…” isBtnShow=”true|false”>
	if (0 == page_total)
	{
		//flash_show_tip_message(94);
		return;
	}
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_pk_member_total;
	}
	else
	{
		if (1 == nCurrentPage)  //显示最后一页
		{
			nStart = (page_total - 1) * 9;
			nEnd = m_pk_member_total;
		}
		else
		{
			nStart = (nCurrentPage - 2)* 9;
			nEnd = nStart + 9;
		}
	}

	pk_list_xml += L"<pre_list>";
	for (int i = nStart; i < nEnd; i++)
	{
		memset(song_show_info,0x0,sizeof(song_show_info));

		if (0 == _tcscmp(m_send_member_data[i].nstatus,g_all_language[101].c_str()))
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item Member=\"%s\" sex=\"%s\" state=\"%s\" isBtnShow=\"%s\" />"),
			m_send_member_data[i].name,m_send_member_data[i].nsex,m_send_member_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
	}
	pk_list_xml += L"</pre_list><cur_list>";
	//组织当前页
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_pk_member_total;
	}
	else
	{

		nStart = (nCurrentPage - 1)* 9;
		if (page_total == nCurrentPage) //显示最后一页
		{
			nEnd = m_pk_member_total;
		}
		else
		{
			nEnd = nStart + 9;
		}	
	}

	for (int i= nStart;i<nEnd;i++)
	{
		if (0 == _tcscmp(m_send_member_data[i].nstatus,g_all_language[101].c_str()))
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item Member=\"%s\" sex=\"%s\" state=\"%s\" isBtnShow=\"%s\" />"),
			m_send_member_data[i].name,m_send_member_data[i].nsex,m_send_member_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
	}

	pk_list_xml += L"</cur_list><next_list>";
	//下一页
	if (1 == page_total)
	{
		nStart = 0;
		nEnd = m_pk_member_total;
	}
	else
	{
		if (page_total == nCurrentPage)  //显示第一页
		{
			nStart = 0;
			nEnd = 9;
		}
		else
		{
			nStart = (nCurrentPage) * 9;
			if (page_total == nCurrentPage + 1) //显示最后一页
			{
				nEnd = m_pk_member_total;
			}
			else
			{
				nEnd = nStart + 9;
			}			
		}
	}

	for (int i=nStart;i<nEnd;i++)
	{
		if (0 == _tcscmp(m_send_member_data[i].nstatus,g_all_language[101].c_str()))
		{
			_tcscpy(BtnShow,_T("true"));
		}
		else
		{
			_tcscpy(BtnShow,_T("false"));
		}
		swprintf(song_show_info,_T("<item Member=\"%s\" sex=\"%s\" state=\"%s\" isBtnShow=\"%s\" />"),
			m_send_member_data[i].name,m_send_member_data[i].nsex,m_send_member_data[i].nstatus,BtnShow);
		pk_list_xml += song_show_info;
	}
	pk_list_xml += L"</next_list>";
}

void Cflashktv10Wnd::record_vd_current_page(int operate_type)
{
	int page_total = 0;
	page_total = get_video_dating_page_total();
	switch(operate_type)
	{
	case FIRST_PAGE_OPERATE: //第一页数据
	case CUR_PAGE_OPERATE:
		{
			m_vd_page_num = 1;
		}
		break;
	case PRE_PAGE_OPERATE: //向上翻页
		{
			m_vd_page_num--;
			if (m_vd_page_num < 1)
			{
				m_vd_page_num = page_total;
			}
		}
		break;
	case NEXT_PAGE_OPERATE://向下翻页
		{
			m_vd_page_num++;
			if (page_total < m_vd_page_num)
			{
				m_vd_page_num = 1;
			}
		}
		break;
	default:
		break;
	}
}

void Cflashktv10Wnd::record_pk_current_page(int operate_type)
{
	int page_total = 0;
	page_total = get_pk_memeber_page_total();
	switch(operate_type)
	{
	case FIRST_PAGE_OPERATE: //第一页数据
	case CUR_PAGE_OPERATE:
		{
			m_pk_page_num = 1;
		}
		break;
	case PRE_PAGE_OPERATE: //向上翻页
		{
			m_pk_page_num--;
			if (m_pk_page_num < 1)
			{
				m_pk_page_num = page_total;
			}
		}
		break;
	case NEXT_PAGE_OPERATE://向下翻页
		{
			m_pk_page_num++;
			if (page_total < m_pk_page_num)
			{
				m_pk_page_num = 1;
			}
		}
		break;
	default:
		break;
	}

}

void Cflashktv10Wnd::parse_client_video_dating(TCHAR* data)
{
	if (NULL==data)
	{
		return;
	}
	bool result=false;
	TCHAR request[2048]; 
	TCHAR parse_data[20480];
	const TCHAR *temp=NULL;
	const TCHAR *parse_msg=NULL;
	TCHAR live_path[256];
	TCHAR send_data[2048];
	TCHAR invite_ip[256];
	TCHAR strMessageName[256];

	memset(strMessageName,0x0,sizeof(strMessageName));
	memset(request,0x0,sizeof(request));
	memset(invite_ip,0x0,sizeof(invite_ip));
	memset(parse_data,0x0,sizeof(parse_data));
	memset(live_path,0x0,sizeof(live_path));
	_tcscpy(parse_data,data);

	parse_msg = parse_data+15;

	//状态:sned/accept
	temp = _tcschr(parse_msg,':');
	memset(send_data,0x0,sizeof(send_data));
	memcpy(send_data,parse_msg,(temp-parse_msg)*sizeof(TCHAR));

	//发过来的ip,是对方的
	parse_msg = temp+1;
	temp = _tcschr(parse_msg,'$');
	memset(invite_ip,0x0,sizeof(invite_ip));
	memcpy(invite_ip,parse_msg,(temp-parse_msg)*sizeof(TCHAR));

	if (0 == _tcsncmp(send_data,_T("send"),4))  //发送邀请
	{
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		for (int i = 0; i < MAX_MENBER_NUM; i ++)
		{
			if (_tcscmp(m_server_video_dating_data[i].ip, invite_ip) == 0)
			{
				m_video_dating_accept_info = m_server_video_dating_data[i];
				break;
			}
		}	

		swprintf(data,L"<data><info name=\"%s\"/></data>", m_video_dating_accept_info.name);
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"popup_vd_dialog",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}	
	else if (0 == _tcscmp(send_data,_T("refuse"))) //接收到拒绝邀请时
	{
		m_b_pk_invitation = false;
		TCHAR data[256];
		memset(data,0x0,sizeof(data));

		swprintf(data,L"%s%s", m_video_dating_accept_info.name, g_all_language[128].c_str());
		flash_show_tip_message(data);

		//改状态
		send_server_video_dating_data(VD_IDLE);
	}
	else if (0 == _tcscmp(send_data,_T("quit")))  //接收到退出按钮时
	{
		//改状态
		send_server_video_dating_data(VD_IDLE);

		//关闭视频
		m_player_manager.Live_Close(0);
		m_player_manager.Live_Close(1);

		//关闭视频OSD图片
		m_player_manager.stop_bmp_osd();		

		TCHAR request[1024];
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));

		memset(request,0x0,sizeof(request));
		m_video_dating_accept_info = m_server_video_dating_data[m_vd_send_idx];
		swprintf(data,L"<data><info tip=\"\"/></data>");
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"begin_video",data);
		if (result)
		{
			flash_player_call_function(request);
		}
	}
	else if (0 == _tcscmp(send_data,_T("accept")))  //接受
	{
		//改状态
		send_server_video_dating_data(VD_BUSY);

		//对方接收后，发送接收消息过来
		//连接本机盒子,给本机和对方打流
		if (PK_HARDWARE_MODE_SETBOX == m_pk_hardware_mode)
		{
			send_data_to_video_box_start(m_pk_information.ipaddress,m_pk_acceptIP);
			_sleep(2000);
		}

		//设置视频OSD图片
		set_pk_video_osd_picture();
		if (PK_HARDWARE_MODE_CAM == m_pk_hardware_mode)
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0, L"devcam://");   //自己视频
				//m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_myself);
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_otherside);
			}
			swprintf(data, L"cam://%s", m_video_dating_accept_info.ip);
			m_player_manager.Live_Open(1, data);	 //对方视频
			//m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_otherside);
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_myself);
		}
		else
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0,L"shn://localhost:5678");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_otherside);
			}

			m_player_manager.Live_Open(1,L"shn://localhost:5679");	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_myself);
		}

		TCHAR request[1024];
		TCHAR data[1024];
		memset(data,0x0,sizeof(data));

		memset(request,0x0,sizeof(request));
		m_video_dating_accept_info = m_server_video_dating_data[m_vd_send_idx];
		swprintf(data,L"<data><info tip=\"%s\"/></data>", m_video_dating_accept_info.name);
		bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"begin_video",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		WriteLog(__FL__, L"视频交友成功!");
	}
}

//解析对方发过来的数据
void Cflashktv10Wnd::establish_video_connection(TCHAR* data)
{
	if (NULL==data)
	{
		return;
	}
	bool result=false;
	TCHAR request[2048]; 
	TCHAR parse_data[20480];
	const TCHAR *temp=NULL;
	const TCHAR *parse_msg=NULL;
	TCHAR live_path[256];
	TCHAR send_data[2048];
	TCHAR invite_ip[256];
	TCHAR strMessageName[256];

	memset(strMessageName,0x0,sizeof(strMessageName));
	memset(request,0x0,sizeof(request));
	memset(invite_ip,0x0,sizeof(invite_ip));
	memset(parse_data,0x0,sizeof(parse_data));
	memset(live_path,0x0,sizeof(live_path));
	_tcscpy(parse_data,data);

	parse_msg = parse_data+15;

	//状态:sned/accept
	temp = _tcschr(parse_msg,':');
	memset(send_data,0x0,sizeof(send_data));
	memcpy(send_data,parse_msg,(temp-parse_msg)*sizeof(TCHAR));

	//发过来的ip,是对方的
	parse_msg = temp+1;
	temp = _tcschr(parse_msg,'$');
	memset(invite_ip,0x0,sizeof(invite_ip));
	memcpy(invite_ip,parse_msg,(temp-parse_msg)*sizeof(TCHAR));
	memset(m_pk_acceptIP,0x0,sizeof(m_pk_acceptIP));
	_tcscpy(m_pk_acceptIP,invite_ip);

	if (0 == _tcsncmp(send_data,_T("send"),4))  //发送邀请
	{
		//发送弹出对话个flash
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"popup_pk_dialog",_T("pk_SHOW"));
		if (result)
		{
			flash_player_call_function(request);
		}

		//开始计时
		show_pk_accept_window_time_identifier = SetTimer(SHOW_PK_ACCEPT_WINDOW_TIMER_EVENT_ID,120*1000,NULL);
		for (int i = 0 ; i < m_pk_member_total; i++)
		{
			if (0 == _tcscmp(m_send_member_data[i].ipaddress,invite_ip))
			{
				_tcscpy(strMessageName,m_send_member_data[i].name);
				break;
			}
		}

		//在电视上显示pk提示
		m_pk_info_show_pc = true;
		swprintf(m_pk_info_tip_msg,L"     %s%s%s",g_all_language[107].c_str(),strMessageName,g_all_language[107].c_str());
		show_song_name();

		CString strMessage;
		strMessage.Format(_T("%s%s"),strMessageName,g_all_language[99].c_str());

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member",strMessage);
		if (result)
		{
			flash_player_call_function(request);
		}
	}	
	else if (0 == _tcscmp(send_data,_T("refuse"))) //接收到拒绝邀请时
	{
		send_pk_data_to_server(4);
		m_b_pk_invitation = false;
		TCHAR data[256];
		memset(data,0x0,sizeof(data));

		swprintf(data,L"%s",g_all_language[98].c_str());
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);

		if (result)
		{
			flash_player_call_function(request);
		}

	}
	else if (0 == _tcscmp(send_data,_T("quit")))  //接收到退出按钮时
	{
		m_b_pk_connect = false;
		m_b_pk_invitation = false;

		TCHAR data[256];
		memset(data,0x0,sizeof(data));

		swprintf(data,L"%s",g_all_language[98].c_str());

		//发送信息给服务器
		send_pk_data_to_server(4);

		//TODO:发给盒子退出消息
		send_data_to_video_box_stop(m_pk_local_video_ip);
		//关闭视频
		m_player_manager.Live_Close(0);
		m_player_manager.Live_Close(1);

		//关闭视频OSD图片
		m_player_manager.stop_bmp_osd();

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
		if (result)
		{
			flash_player_call_function(request);
		}


		if (show_pk_accept_window_time_identifier)  //杀死定时器
		{
			KillTimer(show_pk_accept_window_time_identifier);
			show_pk_accept_window_time_identifier = 0;
		}
	}
	else if (0 == _tcscmp(send_data,_T("accept")))  //接受
	{
		TCHAR data[256];

		memset(data, 0x0, sizeof(data));

		//清空自己的已选歌曲  
		m_video_play_manager.clear_select_song(false);
		//更新选择歌曲数目
		update_select_song_count();

		//设置播放器的播放状态,设置当前歌为空闲状态
		m_video_play_manager.set_player_cur_state(IDLESSE_STATE);
		m_video_play_manager.set_player_next_state(IDLESSE_STATE);

		//对方接收后，发送接收消息过来
		//连接本机盒子,给本机和对方打流
		m_b_pk_connect = true;
		if (PK_HARDWARE_MODE_SETBOX == m_pk_hardware_mode)
		{
			send_data_to_video_box_start(m_pk_information.ipaddress,m_pk_acceptIP);
			_sleep(2000);
		}


		memset(data,0x0,sizeof(data));
		swprintf(data,L"%s",g_all_language[99].c_str());

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"pk_invite_member_send",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		//设置视频OSD图片
		set_pk_video_osd_picture();
		if (PK_HARDWARE_MODE_CAM == m_pk_hardware_mode)
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0, L"devcam://");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition1);
			}

			swprintf(data, L"cam://%s", m_pk_acceptIP);
			m_player_manager.Live_Open(1, data);	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition0);
		}
		else
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0,L"shn://localhost:5678");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition1);
			}

			m_player_manager.Live_Open(1,L"shn://localhost:5679");	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition0);
		}

		WriteLog(__FL__, L"打开视频通话成功!");
	}
	else if (0 == _tcscmp(send_data,_T("pk_song")))   //点歌同步
	{
		//flash_message_call_page_jump(page_pkjx);
	}
	else if (0 == _tcsncmp(send_data,_T("delete_songs"),12))
	{
		TCHAR args[10];  //存储选择的数字
		memset(args,0x0,sizeof(args)); 

		if (0 == _tcsncmp(send_data + 13,_T("1"),1))
		{
			//已选列表删除
			_tcscpy(args,send_data + 14); 
			//删除已选歌曲中的歌曲	
			flash_message_call_delete_select_song(args,true);
		}
		else if (0 == _tcsncmp(send_data + 13,_T("2"),1))
		{
			//已选列表存在，其他点歌时删除
			_tcscpy(args,send_data + 14); 

			//通过ID删除选择的歌曲
			m_video_play_manager.delete_select_song_by_id(args);

			//刷新屏幕
			refresh_screen_list();
			//更新选择歌曲数目
			update_select_song_count();
		}

	}
	else if (0 == _tcsncmp(send_data,_T("sync_songs"),10)) //同步歌曲
	{
		song_info query_song_info;

		result = get_song_info_by_id(send_data + 10,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
		if (result)
		{
			//插入已选，或播放该歌曲
			//优先
			play_or_insert_select_list(query_song_info,false,true);
			//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
			refresh_screen_list();
		}
	}
	else if (0 == _tcsncmp(send_data,_T("priority_song1"),14))    //优先歌曲其他歌曲
	{
		song_info query_song_info; 
		result = get_song_info_by_id(send_data + 14,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
		if (!result)
		{
			return;
		}

		//插入已选，或播放该歌曲
		//优先
		play_or_insert_select_list(query_song_info,true,true);
		//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
		refresh_screen_list();
	}
	else if (0 == _tcsncmp(send_data,_T("priority_song2"),14))    //优先已选列表中的歌曲
	{

		TCHAR args[10];  //存储选择的数字;  
		memset(args,0x0,sizeof(args)); 

		_tcscpy(args,send_data + 14); 

		flash_message_call_priority_select_song(args,true);

		//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
		refresh_screen_list();
	}
	else if (0 == _tcsncmp(send_data,_T("priority_song3"),14))   //优先点播歌曲
	{ 
		TCHAR song_id[128];
		TCHAR number[2];
		bool priority = false;
		memset(song_id,0x0,sizeof(song_id));
		memset(number,0x0,sizeof(number));
		song_info preview_song_info;

		_tcsncpy(number,send_data + 14,1);
		_tcscpy(song_id,send_data + 15);
		int play_number = 0;

		if (0 == _tcsncmp(L"1",send_data + 14,1))
		{
			priority = true;
		}
		else if (0 == _tcsncmp(L"0",send_data + 14,1))
		{
			priority = false;
		}

		//查看已选是否存在
		result = m_video_play_manager.query_select_song_by_id(song_id,play_number);
		if (result) //存在
		{
			m_video_play_manager.priority_select_song(play_number-1,priority); 
		}
		else
		{
			result = get_song_info_by_id(song_id,preview_song_info,PLAY_SONG_TYPE_SELECT_SONG);	
			//根据播放器状态，播放或插入已选歌曲中
			result = play_or_insert_select_list(preview_song_info,priority);
			if (!result)
			{
				return;
			}
		}

		//重新显示上下首歌名
		refresh_screen_list();
		show_song_name();
	}	
	else if(0 == _tcscmp(send_data,_T("cut_song")))   //切歌
	{
		flash_message_call_function(SONG_NEXT,0,true);
	}
	else if (0 == _tcscmp(send_data,_T("replay_song")))  //重唱
	{
		flash_message_call_function(SONG_REPLAY,0,true);
	}
	else if (0 == _tcscmp(send_data,_T("stop_song")))  //暂停音乐
	{
		flash_message_call_function(SONG_PLAY_PAUSE,0,true);
	}
	else if (0 == _tcscmp(send_data,_T("clearAllSong")))   //清空所有歌曲
	{
		m_video_play_manager.clear_select_song(false);
		//更新选择歌曲数目
		update_select_song_count();
		//重新显示
		refresh_screen_list();
		//更新显示的下首歌曲名字
		show_song_name();
	}
	else if (0 == _tcsncmp(send_data,_T("disrupt_song"),12))   //打乱歌曲
	{
		//清空当前已选列表的歌曲
		m_video_play_manager.clear_select_song(false);
		update_select_song_count();

		//添加发送过来的歌曲
		CMarkup parse_xml_doc;
		std::wstring itemValue;
		song_info query_song_info;
		TCHAR  song_id[128];
		bool result = false;

		result =parse_xml_doc.SetDoc(send_data + 12);
		if (!result)
		{
			return;
		}
		parse_xml_doc.ResetPos();   //pk_list
		result = parse_xml_doc.FindChildElem(); 
		if (!result)
		{
			return;
		}
		while (TRUE)
		{ 
			memset(song_id,0x0,sizeof(song_id));
			result = parse_xml_doc.IntoElem(); //item
			if (!result)
			{
				break;
			}
			// <item song_id=\"%s\"/>"
			itemValue = parse_xml_doc.GetAttrib(L"song_id");
			swprintf(song_id,L"%s",itemValue.c_str());

			result = get_song_info_by_id(song_id,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
			if (result)
			{
				//插入已选，或播放该歌曲
				//优先
				play_or_insert_select_list(query_song_info,false,true);
				//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
				refresh_screen_list();
			}

			parse_xml_doc.OutOfElem();
			result = parse_xml_doc.FindChildElem();
			if (!result)
			{
				break;
			}		
		}

	}
	else if (0 == _tcsncmp(send_data,_T("auto_play"),9))   //自动播放下一首歌
	{
		//CString strTemp;
		//strTemp.Format(L"%s",send_data);
		//MessageBox(strTemp);

		//清空当前已选列表的歌曲
		m_video_play_manager.clear_select_song(false);
		update_select_song_count();

		//添加发送过来的歌曲
		CMarkup parse_xml_doc;
		std::wstring itemValue;
		song_info query_song_info;
		TCHAR  song_id[128];
		bool result = false;

		result =parse_xml_doc.SetDoc(send_data + 9);
		if (!result)
		{
			return;
		}
		parse_xml_doc.ResetPos();   //pk_list
		result = parse_xml_doc.FindChildElem(); 
		if (!result)
		{
			return;
		}
		while (TRUE)
		{ 
			memset(song_id,0x0,sizeof(song_id));
			result = parse_xml_doc.IntoElem(); //item
			if (!result)
			{
				break;
			}
			// <item song_id=\"%s\"/>"
			itemValue = parse_xml_doc.GetAttrib(L"song_id");
			swprintf(song_id,L"%s",itemValue.c_str());

			result = get_song_info_by_id(song_id,query_song_info,PLAY_SONG_TYPE_SELECT_SONG);
			if (result)
			{
				//插入已选，或播放该歌曲
				//优先
				play_or_insert_select_list(query_song_info,false,true);
				//改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
				refresh_screen_list();
			}

			parse_xml_doc.OutOfElem();
			result = parse_xml_doc.FindChildElem();
			if (!result)
			{
				break;
			}		
		} 
	}
	else if (0 == _tcsncmp(send_data,_T("pk_pos"),6))  //同步音乐
	{
		int nPos = 0;
		long play_time=0;
		int nInterval = 0;
		int nTime = 0;
		if (m_b_pk_connect)
		{
			swscanf(send_data + 6,L"%d",&nPos);
			nTime =  play_time % 60;
			//得到当前的时间
			play_time = m_player_manager.get_play_time_length();
			nInterval = play_time - nPos;
			if ((abs(nInterval) > 1))  //不超过秒
			{
				m_player_manager.seek(nPos);
			}

			if (abs(nInterval) != 0 && !nTime)
			{
				m_player_manager.seek(nPos);
			}
		}
	}
}

//发送邀请给对方
void Cflashktv10Wnd::send_date_to_invitation()
{
	//本机ip，消息为send标志和当前已经选择列表的的歌曲数
	int song_total= 0;
	song_info song_information;
	std::wstring song_list_xml; 
	TCHAR song_id[256];
	TCHAR song_id_info[256];
	TCHAR song_message[2048];
	memset(song_id_info,0x0,sizeof(song_id_info));
	memset(song_id,0x0,sizeof(song_id));
	memset(song_message,0x0,sizeof(song_message));
	//得到当前已选歌曲总数
	song_total = m_video_play_manager.get_select_song_count();

	//得到所有已选歌曲的信息
	song_list_xml += L"<song_id>"; 
	for (int i = 0; i < song_total; i++)
	{
		//得到已选歌曲的信息
		m_video_play_manager.get_select_song_information(song_information,i,false);

		//得到所有id号
		song_information.get_song_id(song_id);
		swprintf(song_id_info,_T("<item song_id=\"%s\"/>"),song_id);
		song_list_xml += song_id_info;
	}
	song_list_xml += L"</song_id>";

	swprintf(song_message,_T("send%s"),song_list_xml.c_str());	
	connect_inviation(m_pk_invitationIP,L"send");

	//自己的显示正在pk
	send_pk_data_to_server(3);

}

void Cflashktv10Wnd::accept_vd_invitation(int nFlags)
{
	TCHAR live_path[256];
	TCHAR data[256];
	config_file_manager config_file;

	memset(live_path,0x0,sizeof(live_path)); 
	memset(data, 0x0, sizeof(data));

	if (1 == nFlags)  //接收
	{
		if (PK_HARDWARE_MODE_SETBOX == m_pk_hardware_mode)
		{
			//连接本机盒子,给本机和对方打流
			send_data_to_video_box_start(m_pk_information.ipaddress,m_pk_acceptIP);
			_sleep(2000);
		}

		//设置视频OSD图片
		set_pk_video_osd_picture();

		if (PK_HARDWARE_MODE_CAM == m_pk_hardware_mode)
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0, L"devcam://");   //自己视频
				//m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_myself);
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_otherside);
			}
			swprintf(data, L"cam://%s", m_video_dating_accept_info.ip);
			m_player_manager.Live_Open(1, data);	 //对方视频
			//m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_otherside);
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_myself);
		}
		else
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0,L"shn://localhost:5678");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition_otherside);
			}

			m_player_manager.Live_Open(1,L"shn://localhost:5679");	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition_myself);
		}

		WriteLog(__FL__, L"接受,打开视频通话成功!");	 
	}
	else if (0 == nFlags) //拒绝
	{
		connect_video_dating(m_video_dating_accept_info.ip,L"refuse");
		WriteLog(__FL__, L"拒绝视频PK!");
	}
}
//接受对方邀请
void Cflashktv10Wnd::accept_invitation(int nFlags)
{

	TCHAR live_path[256];
	TCHAR data[256];
	config_file_manager config_file;

	memset(live_path,0x0,sizeof(live_path)); 
	memset(data, 0x0, sizeof(data));

	if (1 == nFlags)  //接收
	{		
		m_b_pk_connect = true;
		//改状态
		send_pk_data_to_server(3);

		//发给对面的ip
		connect_inviation(m_pk_acceptIP,L"accept");

		if (PK_HARDWARE_MODE_SETBOX == m_pk_hardware_mode)
		{
			//连接本机盒子,给本机和对方打流
			send_data_to_video_box_start(m_pk_information.ipaddress,m_pk_acceptIP);
			_sleep(2000);
		}

		//设置视频OSD图片
		set_pk_video_osd_picture();

		//开始视频 
		//	CRect rPosition0(302,163,792,436);
		//	CRect rPosition1(802,340,978,436);

		if (PK_HARDWARE_MODE_CAM == m_pk_hardware_mode)
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0, L"devcam://");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition1);
			}
			swprintf(data, L"cam://%s", m_pk_acceptIP);
			m_player_manager.Live_Open(1, data);	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition0);
		}
		else
		{
			//开始视频 
			if (m_pk_show_video)
			{
				m_player_manager.Live_Open(0,L"shn://localhost:5678");   //自己视频
				m_player_manager.Set(SD_SET_PIP0_POSITION,(long)&m_rectPosition1);
			}

			m_player_manager.Live_Open(1,L"shn://localhost:5679");	 //对方视频
			m_player_manager.Set(SD_SET_PIP1_POSITION,(long)&m_rectPosition0);
		}

		WriteLog(__FL__, L"接受,打开视频通话成功!");	 
	}
	else if (0 == nFlags) //拒绝
	{
		m_b_pk_connect = false;
		send_pk_data_to_server(4);
		connect_inviation(m_pk_acceptIP,L"refuse");
		WriteLog(__FL__, L"拒绝视频PK!");
	}
}

void Cflashktv10Wnd::send_data_to_video_box_start(TCHAR* local_ip,TCHAR* other_ip)
{
	TCHAR send_message[1024];
	char  send_messgetext[1024];   //发送的字符串
	char  box_ip[256];            //连接本机盒子ip
	TCHAR send_box_ip[256];

	memset(send_message,0x0,sizeof(send_message));
	memset(send_messgetext,0x0,sizeof(send_messgetext));
	memset(box_ip,0x0,sizeof(box_ip));
	memset(send_box_ip,0x0,sizeof(send_box_ip));
	string_conversion str_conv;
	config_file_manager confile;

	//得到对方的盒子IP
	//发送给盒子信息一方已经退出
	if (0 != _tcscmp(m_pk_invitationIP,L""))
	{
		_tcscpy(send_box_ip,m_pk_invitationIP);
	}
	if (0 != _tcscmp(m_pk_acceptIP,L""))
	{
		_tcscpy(send_box_ip,m_pk_acceptIP);
	}

	//得到对方的盒子ip
	for (int i = 0; i < MAX_MENBER_NUM; i++)
	{
		if (0 == _tcscmp(send_box_ip,m_send_member_data[i].ipaddress))
		{
			_tcscpy(m_pk_other_boxIP,m_send_member_data[i].nBoxIp);
			break;
		}
	}
	//ip转换为char
	str_conv.widechar_to_multibyte(m_pk_local_video_ip,box_ip,sizeof(box_ip));
	//发送消息给对方
	SOCKET pk_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if(pk_socket == INVALID_SOCKET)
	{
		return;
	}
	struct linger zeroLinger;	
	zeroLinger.l_onoff = 1;	
	zeroLinger.l_linger = 5;
	BOOL fBroadcast = TRUE;
	setsockopt(pk_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger	,sizeof(zeroLinger));
	//设置广播
	::setsockopt(pk_socket,SOL_SOCKET,SO_BROADCAST,(CHAR *)&fBroadcast,sizeof (BOOL));
	int m_nSendTimeout = 6000;
	//set send timeout
	setsockopt(pk_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

	// 填写远程地址信息
	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr(box_ip); //盒子的ip地址
	addr.sin_port = htons(4777); 
	/*[recordConfig]\n\rDestinationIP=本机ip:本机端口(对方ip:对方端口)\n\rBitrate_kbps=1500\n\rInputSystem=av
	\n\rchannel=192250\n\rvideoMode=1\n\rH264=1\n\renable=true\n\r对方盒子ip AudioVolume=20
	*/
	swprintf(send_message,L"[recordConfig]\n\rDestinationIP=%s:5678(%s:5679)\n\rBitrate_kbps=1500\n\rInputSystem=av\n\rchannel=192250\n\rvideoMode=1\n\rH264=1\n\renable=true\n\rAudioIP=%s\n\rAudioVolume=%d",
		local_ip,other_ip,m_pk_other_boxIP,m_audio_volume);

	WriteLog(__FL__, L"发送连接对方盒子!");
	WriteLog(__FL__, send_message);

	//	CString strTemp;
	//	strTemp.Format(L"%s\n",send_message);
	// 	MessageBox(strTemp);
	str_conv.widechar_to_multibyte(send_message,send_messgetext,sizeof(send_messgetext));

	int nRecv = ::sendto(pk_socket, (char*)send_messgetext,_tcslen(send_message)*sizeof(TCHAR),0,(sockaddr *)&addr,sizeof(addr));
	if(nRecv > 0)
	{
		//发送数据成功
	}

	// 关闭套节字
	::closesocket(pk_socket);
}

void Cflashktv10Wnd::send_data_to_video_box_stop(TCHAR* boxIP)
{
	TCHAR send_message[1024];
	char  send_messgetext[1024];
	char  box_ip[256];            //连接本机盒子ip

	memset(send_message,0x0,sizeof(send_message));
	memset(box_ip,0x0,sizeof(box_ip));

	string_conversion str_conv;

	//ip转换为char
	str_conv.widechar_to_multibyte(boxIP,box_ip,sizeof(box_ip));

	//发送消息给对方
	SOCKET pk_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if(pk_socket == INVALID_SOCKET)
	{
		return;
	}
	struct linger zeroLinger;	
	zeroLinger.l_onoff = 1;	
	zeroLinger.l_linger = 5;
	BOOL fBroadcast = TRUE;
	setsockopt(pk_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger	,sizeof(zeroLinger));
	//设置广播
	::setsockopt(pk_socket,SOL_SOCKET,SO_BROADCAST,(CHAR *)&fBroadcast,sizeof (BOOL));
	int m_nSendTimeout = 6000;
	//set send timeout
	setsockopt(pk_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

	// 填写远程地址信息
	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr(box_ip); 
	addr.sin_port = htons(4778); 

	swprintf(send_message,L"stop");  

	WriteLog(__FL__, L"发送关闭盒子!");

	//
	str_conv.widechar_to_multibyte(send_message,send_messgetext,sizeof(send_messgetext));

	int nRecv = ::sendto(pk_socket, (char*)send_messgetext,_tcslen(send_message)*sizeof(TCHAR),0,(sockaddr *)&addr,sizeof(addr));
	if(nRecv > 0)
	{
		//发送数据成功
	}

	// 关闭套节字
	::closesocket(pk_socket);
}

void Cflashktv10Wnd::connect_video_dating(TCHAR* connect_ip,TCHAR *send_msg)
{
	TCHAR live_path[256];
	TCHAR send_message[2048];
	char ipaddress[256];

	memset(send_message,0x0,sizeof(send_message));
	memset(live_path,0x0,sizeof(live_path));
	memset(ipaddress,0x0,sizeof(ipaddress));

	string_conversion string_conv;
	string_conv.widechar_to_multibyte(connect_ip,ipaddress,sizeof(ipaddress)/sizeof(char));

	//发送消息给对方
	SOCKET pk_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if(pk_socket == INVALID_SOCKET)
	{
		return;
	}
	struct linger zeroLinger;	
	zeroLinger.l_onoff = 1;	
	zeroLinger.l_linger = 5;
	BOOL fBroadcast = TRUE;
	setsockopt(pk_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger	,sizeof(zeroLinger));
	//设置广播
	::setsockopt(pk_socket,SOL_SOCKET,SO_BROADCAST,(CHAR *)&fBroadcast,sizeof (BOOL));
	int m_nSendTimeout = 6000;
	//set send timeout
	setsockopt(pk_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

	// 填写远程地址信息
	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr(ipaddress); //对方的ip地址
	addr.sin_port = htons(6664);
	//ReceiveMessage:标志信息，本机ip
	swprintf(send_message,L"ReceiveMessage:%s:%s$END",send_msg,m_video_dating_info.ip);

	WriteLog(__FL__, L"视频交友给对方盒子发送pk请求,打开对方盒子ip!");

	//本网络的广播地址
	int nRecv = ::sendto(pk_socket, (char*)send_message,_tcslen(send_message)*sizeof(TCHAR),0,(sockaddr *)&addr,sizeof(addr));
	if(nRecv > 0)
	{
		//发送数据成功
	}
	// 关闭套节字
	::closesocket(pk_socket);
}

void Cflashktv10Wnd::connect_inviation(TCHAR* connect_ip,TCHAR *send_msg)
{
	TCHAR live_path[256];
	TCHAR send_message[2048];
	char ipaddress[256];

	memset(send_message,0x0,sizeof(send_message));
	memset(live_path,0x0,sizeof(live_path));
	memset(ipaddress,0x0,sizeof(ipaddress));

	string_conversion string_conv;
	string_conv.widechar_to_multibyte(connect_ip,ipaddress,sizeof(ipaddress)/sizeof(char));

	//发送消息给对方
	SOCKET pk_socket = ::socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	if(pk_socket == INVALID_SOCKET)
	{
		return;
	}
	struct linger zeroLinger;	
	zeroLinger.l_onoff = 1;	
	zeroLinger.l_linger = 5;
	BOOL fBroadcast = TRUE;
	setsockopt(pk_socket,SOL_SOCKET,SO_LINGER,(const char *)&zeroLinger	,sizeof(zeroLinger));
	//设置广播
	::setsockopt(pk_socket,SOL_SOCKET,SO_BROADCAST,(CHAR *)&fBroadcast,sizeof (BOOL));
	int m_nSendTimeout = 6000;
	//set send timeout
	setsockopt(pk_socket,SOL_SOCKET,SO_SNDTIMEO,(const char *)&m_nSendTimeout,sizeof(m_nSendTimeout));

	// 填写远程地址信息
	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr(ipaddress); //对方的ip地址
	addr.sin_port = htons(6663);
	//ReceiveMessage:标志信息，本机ip
	swprintf(send_message,L"ReceiveMessage:%s:%s$END",send_msg,m_pk_information.ipaddress);

	WriteLog(__FL__, L"给对方盒子发送pk请求,打开对方盒子ip!");

	//本网络的广播地址
	int nRecv = ::sendto(pk_socket, (char*)send_message,_tcslen(send_message)*sizeof(TCHAR),0,(sockaddr *)&addr,sizeof(addr));
	if(nRecv > 0)
	{
		//发送数据成功
	}
	// 关闭套节字
	::closesocket(pk_socket);
}


void Cflashktv10Wnd::send_room_state_to_ipad_server(void)
{
	try
	{
		char send_data[256];

		memset(send_data,0x0,sizeof(send_data));

		if (CLOSE_ROOM_STATE==m_pc_state)
		{
			//关房
			strcpy(send_data,"SERVERDATAclose");
		}
		else
		{
			//开房
			strcpy(send_data,"SERVERDATAopen0");
		}
		send_master_slave_data(NULL,send_data);

		return;
	}
	catch (...)
	{

	}
	return;
}


bool Cflashktv10Wnd::draw_text_to_image(Graphics &draw_handle,int x,int y,int width,int height,StringAlignment horizontal_alignment,Color font_color,Font &text_font,TCHAR *text)
{
	try
	{
		RectF text_rect;
		StringFormat text_format;
		SolidBrush text_brush(Color(255,46,0,22));

		if (NULL==text)
		{
			return false;
		}

		text_rect.X = x*1.0f;
		text_rect.Y = y*1.0f;
		text_rect.Width = width*1.0f;
		text_rect.Height = height*1.0f;
		text_format.SetAlignment(horizontal_alignment);
		text_format.SetLineAlignment(StringAlignmentCenter);
		text_brush.SetColor(font_color);

		draw_handle.DrawString(text,-1,&text_font,text_rect,&text_format,&text_brush);

		return true;
	}
	catch (...)
	{

	}
	return false;
}

UINT Cflashktv10Wnd::start_ipad_service(void)
{
	try
	{
		TCHAR ipad_path[256];
		bool result = false;
		DWORD process_id=0;

		memset(ipad_path,0x0,sizeof(ipad_path));

		//检查程序是否运行
		result = check_process_run_state(L"ipadservice.exe");
		if (!result)
		{
			//没有运行就启动
			memset(ipad_path,0x0,sizeof(ipad_path));
			swprintf(ipad_path,L"%s\\ipadservice.exe",m_work_path);
			start_plug_in_process(ipad_path,SW_SHOW,process_id);
		}
	}
	catch (...)
	{

	} 

	return -1;
}

UINT Cflashktv10Wnd::start_ipad_service_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		return pThis->start_ipad_service();
	}
	catch (...)
	{

	}

	return -1;
}

UINT Cflashktv10Wnd::song_share_success(void)
{
	try
	{   
		TCHAR share_log[256];
		TCHAR data[1024];
		CString pic_jsoin;

		while(m_thread_run)
		{
			SLEEP_FOR; //增加sleep

			if (m_connect_rule_server_count >= 5)
			{
				WriteLog(__FL__, L"请求发送规则服务器数据超过5次，不在发送给规则服务器！");
				break;
			}

			if (!m_song_share_success.empty())
			{
				SONG_SHARE_SUCCESS song_share = m_song_share_success.front();

				//得到第一个 
				memset(share_log,0x0,sizeof(share_log));
				swprintf(share_log,L"从队列中取出数据进行发送给规则服务器SongID=%s",song_share.song_id);
				WriteLog(__FL__, share_log); 

				memset(data,0x0,sizeof(data));

				pic_jsoin = song_share.member_pic;
				pic_jsoin.Replace(L"\\",L"\\\\");

				swprintf(data,L"SONG_SHARE_SUCCESS{\"song_id\":\"%s\",\"user_name\":\"%s\",\"nick_name\":\"%s\",\"member_pic\":\"%s\",\"voice_code\":\"%s\"}",
					song_share.song_id,song_share.user_name,song_share.nick_name,pic_jsoin.GetBuffer(0),song_share.voice_code);

				REQUEST_BOX_DATA *request_rule_data = new REQUEST_BOX_DATA;
				request_rule_data->pThis = this;
				_tcscpy(request_rule_data->request_data,data);
				AfxBeginThread(send_data_to_maiba_rule_thread,request_rule_data);

			}

			Sleep(10*1000);
		}

	}
	catch (...)
	{

	}

	return 0;
}

void Cflashktv10Wnd::share_song_to_rale_server(TCHAR * song_id,TCHAR* URL)
{

	TCHAR nick_name[256];
	TCHAR user_name[256];
	TCHAR member_pic[256];
	TCHAR voice_code[256];
	const TCHAR* temp = NULL;

	memset(nick_name,0x0,sizeof(nick_name));
	memset(user_name,0x0,sizeof(user_name));
	memset(member_pic,0x0,sizeof(member_pic));
	memset(voice_code,0x0,sizeof(voice_code));

	//http://www.joyk.com.cn/player.html?id=da876945-876a-4e03-8b9b-bf5b078fa378140552560100

	temp = _tcsrchr(URL, _T('='));
	if (temp == NULL)
	{
		return;
	}
	_tcscpy(voice_code,temp+1);

	if (0 != strcmp(m_set_maiba_rule_ip,""))
	{
		SONG_SHARE_SUCCESS song_share;
		memset(&song_share,0x0,sizeof(song_share)); 

		if (-1 == m_activate_vip_button)
		{
			_tcscpy(user_name,L"");
			_tcscpy(nick_name,L"");
			_tcscpy(member_pic,L"");
		}
		else
		{
			//得到当前的用户名 
			m_memeber_manage[m_activate_vip_button].get_user_name(user_name);
			m_memeber_manage[m_activate_vip_button].get_nick_name(nick_name);
			m_memeber_manage[m_activate_vip_button].get_user_head(member_pic);
		}

		_tcscpy(song_share.song_id,song_id);
		_tcscpy(song_share.nick_name,nick_name);
		_tcscpy(song_share.user_name,user_name);
		_tcscpy(song_share.member_pic,member_pic);
		_tcscpy(song_share.voice_code,voice_code);

		if (0 != _tcscmp(user_name,L"") && (m_set_free_pk||m_set_dekaron_pk||m_set_challenge_star||m_set_across_pass))
		{
			m_song_share_success.push_back(song_share);
		}
	}
}

UINT Cflashktv10Wnd::mixer_audio(void)
{
	try
	{
		BYTE two_channel[SAMPLE_NUMBER_PER_READ*2*2];
		short left_channel[SAMPLE_NUMBER_PER_READ];
		short right_channel[SAMPLE_NUMBER_PER_READ];
		HANDLE file_handle;
		DWORD ReadByte=0;
		BOOL result=FALSE;
		bool bool_ret=false;
		string_conversion string_conv;
		char DateTime[256];
		char SongID[256];
		char VoicePath[256];
		char MusicPath[256];
		char local_mp3_path[256];
		char local_sencond_mp3_path[256];
		char local_mp3_name[256];
		TCHAR mixer_log[256];

		if (!m_recorder_handle)
		{
			return -1;
		}

		while(m_thread_run)
		{
			Sleep(2000);

			if (!m_wav_info_deque.empty())
			{
				Sleep(5000);
				//得到第一个
				RECORD_SONG_INFO wave_info = m_wav_info_deque.front();
				//转成char
				memset(DateTime,0x0,sizeof(DateTime));
				memset(SongID,0x0,sizeof(SongID));
				memset(VoicePath,0x0,sizeof(VoicePath));
				memset(MusicPath,0x0,sizeof(MusicPath));
				memset(local_mp3_path,0x0,sizeof(local_mp3_path));
				memset(local_sencond_mp3_path,0x0,sizeof(local_sencond_mp3_path));
				memset(local_mp3_name,0x0,sizeof(local_mp3_name));

				string_conv.widechar_to_multibyte(wave_info.DateTime,DateTime,sizeof(DateTime));
				string_conv.widechar_to_multibyte(wave_info.SongID,SongID,sizeof(SongID));
				string_conv.widechar_to_multibyte(wave_info.VoiceWavePath,VoicePath,sizeof(VoicePath));
				string_conv.widechar_to_multibyte(wave_info.MusicWavePath,MusicPath,sizeof(MusicPath));
				//string_conv.widechar_to_multibyte(m_tape_mp3_name,local_mp3_name,sizeof(local_mp3_name));
				string_conv.widechar_to_multibyte(wave_info.mp3Path, local_mp3_name, sizeof(local_mp3_name));

				memset(mixer_log,0x0,sizeof(mixer_log));
				swprintf(mixer_log,L"从队列中取出数据进行合成 SongID=%s， 人声文件路径 = %s",wave_info.SongID, wave_info.VoiceWavePath);
				WriteLog(__FL__, mixer_log);

				//生成mp3文件名
				sprintf(local_mp3_path,"%s.mp3",local_mp3_name);
				//64K码率的mp3文件名
				sprintf(local_sencond_mp3_path,"%s-64.mp3",local_mp3_name);
				//检查伴音文件是否生成
				if (!PathFileExists(wave_info.MusicWavePath))
				{
					//删除文件
					DeleteFile(wave_info.VoiceWavePath);
					//移除第一个
					m_wav_info_deque.pop_front();
					WriteLog(__FL__, L"伴音文件提取失败，请检查是否是大歌星专用狗，路径:");

					//人声文件不存在
					if(!DeleteFile(wave_info.MusicWavePath))
						WriteLog(__FL__, wave_info.MusicWavePath);

					//删除录音记录
					flash_message_call_delete_recorder_song_by_id(wave_info.SongID);

					continue;
				}
				if (!PathFileExists(wave_info.MusicWavePath))
				{
					//人声文件不存在
					DeleteFile(wave_info.MusicWavePath);
					//移除第一个
					m_wav_info_deque.pop_front();
					WriteLog(__FL__, L"录制人声失败，声卡故障，请检查");

					//删除录音记录
					flash_message_call_delete_recorder_song_by_id(wave_info.SongID);
					continue;
				}
				//打开共享内存
				file_handle = CreateFile(wave_info.MusicWavePath,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
				if (INVALID_HANDLE_VALUE==file_handle)
				{
					//打开伴音文件失败，稍后重新打开
					Sleep(3000);
					file_handle = CreateFile(wave_info.MusicWavePath,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
					if (INVALID_HANDLE_VALUE==file_handle)
					{
						//删除文件
						DeleteFile(wave_info.VoiceWavePath);
						DeleteFile(wave_info.MusicWavePath);
						//移除第一个
						m_wav_info_deque.pop_front();
						WriteLog(__FL__, L"接收伴音文件失败，请检查数据库中的音轨信息是否正确");

						//删除录音记录
						flash_message_call_delete_recorder_song_by_id(wave_info.SongID);
						continue;
					}
				}
				//开始合成
				WriteLog(__FL__, L"开始调用StartSong()函数");
				bool_ret = dagexing::StartSong(m_recorder_handle,VoicePath,local_mp3_path,local_sencond_mp3_path,22050,0.5);
				if (!bool_ret) {
					TCHAR log[2048];
					TCHAR widebyte_error_msg[2048];

					memset(log,0x0,sizeof(log));
					memset(widebyte_error_msg,0x0,sizeof(widebyte_error_msg));

					const char * error_msg = GetErrMsg(m_recorder_handle);
					if (NULL!=error_msg)
					{
						string_conv.multibyte_to_widechar(error_msg,widebyte_error_msg,sizeof(widebyte_error_msg));
						swprintf(log,L"录音合成StartSong()函数调用失败,错误信息：%s",widebyte_error_msg);
					}
					WriteLog(__FL__, log);
					//关闭
					CloseHandle(file_handle);
					//删除文件
					DeleteFile(wave_info.VoiceWavePath);
					DeleteFile(wave_info.MusicWavePath);
					//删除录音记录
					flash_message_call_delete_recorder_song_by_id(wave_info.SongID);
					//移除第一个
					m_wav_info_deque.pop_front();

					continue;
				}
				while(1){
					memset(two_channel,0x0,sizeof(two_channel));
					memset(left_channel,0x0,sizeof(left_channel));
					memset(right_channel,0x0,sizeof(right_channel));

					//读取music的伴音
					result = ReadFile(file_handle,two_channel,SAMPLE_NUMBER_PER_READ*4,&ReadByte,NULL);
					if(!result||(ReadByte<=0))
					{ 
						memset(mixer_log,0x0,sizeof(mixer_log));
						swprintf(mixer_log,L"读取music的伴音失败! SongID=%s",wave_info.SongID);
						WriteLog(__FL__, mixer_log);
						break;
					}
					//解密
					for(int i=0;i<ReadByte;i++)
					{
						two_channel[i] = (two_channel[i]<<4)|(two_channel[i]>>4);
					}
					//分离双通道
					for (int i=0;i<ReadByte;i+=4)
					{
						left_channel[i/4] = (two_channel[i+1]<<8)|two_channel[i];
						right_channel[i/4] = (two_channel[i+3]<<8)|two_channel[i+2];
					}
					//提交api合成
					bool_ret = dagexing::MusicSample(m_recorder_handle, left_channel,right_channel,ReadByte/4);
					if (!bool_ret) {
						TCHAR log[2048];
						TCHAR widebyte_error_msg[2048];

						memset(log,0x0,sizeof(log));
						memset(widebyte_error_msg,0x0,sizeof(widebyte_error_msg));

						const char * error_msg = GetErrMsg(m_recorder_handle);
						if (NULL!=error_msg)
						{
							string_conv.multibyte_to_widechar(error_msg,widebyte_error_msg,sizeof(widebyte_error_msg));
							swprintf(log,L"录音合成MusicSample()函数调用失败,错误信息：%s",widebyte_error_msg);
						}
						WriteLog(__FL__, log);
						break;
					}
				}
				WriteLog(__FL__, L"开始调用FinishSong()函数");
				if(!FinishSong(m_recorder_handle))
				{
					TCHAR log[2048];
					TCHAR widebyte_error_msg[2048];

					memset(log,0x0,sizeof(log));
					memset(widebyte_error_msg,0x0,sizeof(widebyte_error_msg));

					const char * error_msg = GetErrMsg(m_recorder_handle);
					if (NULL!=error_msg)
					{
						string_conv.multibyte_to_widechar(error_msg,widebyte_error_msg,sizeof(widebyte_error_msg));
						swprintf(log,L"录音合成FinishSong()函数调用失败,错误信息：%s",widebyte_error_msg);
					}
					WriteLog(__FL__, log);
					//关闭
					CloseHandle(file_handle);
					//删除文件
					DeleteFile(wave_info.VoiceWavePath);
					DeleteFile(wave_info.MusicWavePath);
					//移除第一个
					m_wav_info_deque.pop_front();
					flash_message_call_delete_recorder_song_by_id(wave_info.SongID);
					continue;
				}
				//关闭
				CloseHandle(file_handle);
				//删除文件
				DeleteFile(wave_info.MusicWavePath);
				DeleteFile(wave_info.VoiceWavePath);
				DeleteFileA(local_sencond_mp3_path);
				//移除第一个
				m_wav_info_deque.pop_front();
				WriteLog(__FL__, L"mp3合成完成");
				//检查合成的mp3是不是0字节
				file_handle = CreateFileA(local_mp3_path,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
				if (file_handle)
				{
					DWORD file_size = GetFileSize(file_handle,NULL);
					if(file_size>0)
					{
						CloseHandle(file_handle);
						continue;				
					}
					CloseHandle(file_handle);
				}

				WriteLog(__FL__, L"合成的mp3是0字节");
				//删除本地文件
				DeleteFileA(local_mp3_path);
				//删除录音记录
				flash_message_call_delete_recorder_song_by_id(wave_info.SongID);
			}
		}
	}
	catch (...)
	{

	}
	return 0;
}

UINT Cflashktv10Wnd::song_share_success_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		pThis->song_share_success();

		AfxEndThread(0);
	}
	catch (...)
	{

	} 

	return -1;
}

UINT Cflashktv10Wnd::mixer_audio_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);
		pThis->mixer_audio();
		return 0;
	}
	catch (...)
	{

	}
	return -1;
}


void Cflashktv10Wnd::send_tape_song_to_pad(void)
{
	try
	{
		TCHAR send_data[10240*2];
		char  data_utf[10240*2];
		TCHAR temp_data[1024];
		TCHAR URL[256];
		bool result=false;
		string_conversion string_conv;
		int row=0;
		std::wstring* result_set=NULL;
		int colume_count=0;
		int max_row=100;

		memset(send_data,0x0,sizeof(send_data));

		//标示符号
		_tcscpy(send_data,L"TAPESONGINFO<data>");

		colume_count = song_recorder_select_expr.result_column_nums;
		//查询数据库得到数据 最多100首
		result_set = new std::wstring[colume_count*max_row];
		if (result_set)
		{
			row = m_db_query.query_db_get_table_data(result_set,song_recorder_select_expr.result_column_expr.c_str(),NULL,0,song_recorder_select_expr.result_column_nums*max_row,max_row,0);
			if (row>0)
			{
				for(int i=0;i<row;i++)
				{
					//组织一条xml信息
					memset(temp_data,0x0,sizeof(temp_data));
					memset(URL, 0x0, sizeof(URL));

					m_http_service.get_web_url(result_set[i*colume_count].c_str(),URL,NULL);

					swprintf(temp_data,L"<song id=\"%s\" name=\"%s\" singer=\"%s\" video_path = \"%s\" culture_code=\"%s\" path=\"%s\" start_time=\"%s\" datetime=\"%s\" score=\"%s\" url=\"%s\" />",result_set[i*colume_count].c_str(),       \
						result_set[i*colume_count+1].c_str(),result_set[i*colume_count+2].c_str(),result_set[i*colume_count+3].c_str(),result_set[i*colume_count+4].c_str(),
						result_set[i*colume_count+5].c_str(),result_set[i*colume_count+6].c_str(),result_set[i*colume_count+7].c_str(),result_set[i*colume_count+8].c_str(),URL);
					//连接
					_tcscat(send_data,temp_data);
				}
			}
			//结束符
			_tcscat(send_data,L"</data>");

			delete []result_set;
			result_set = NULL;
		}

		//转成utf-8 多字节不支持韩文 2013-03-25 zlg
		memset(data_utf,0x0,sizeof(data_utf));
		string_conv.widechar_to_utf8(send_data,data_utf,sizeof(data_utf));
		//发送已选歌曲信息到手持设备
		send_master_slave_data(NULL,data_utf);

		return;
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::exit_enter_guid_song(bool guid_song)
{
	try
	{
		bool result = false;
		TCHAR guid_track_value[256];

		memset(guid_track_value,0x0,sizeof(guid_track_value));

		song_info song_information;
		result = m_video_play_manager.get_playing_video(song_information);
		if (result)
		{
			song_information.get_guid_track(guid_track_value);
		}
		if (guid_song && (0 != _tcscmp(guid_track_value,L"")))
		{
			//启用导唱音轨 2013-07-16添加，进入伴唱后，自动开启导唱

			//进入导唱
			m_enter_guide_song = true;

			//m_player_manager.enter_guid_song();
			m_player_manager.enter_guid_song(true);
			set_button_show_state(GUID_BUTTON_STATE,true);

		}
		else
		{
			//关闭导唱音轨 2013-07-16添加，开启原唱，默认关闭导唱

			//退出导唱
			m_enter_guide_song = false;
			//m_player_manager.exit_guid_song();
			m_player_manager.enter_guid_song(false);

			//取消按钮高亮状态
			set_button_show_state(GUID_BUTTON_STATE,false);
		}
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::maiba_pk_data_test()
{
	try
	{
		TCHAR maiba_head_path[256];
		std::wstring song_list;

		memset(maiba_head_path,0x0,sizeof(maiba_head_path));
		swprintf(maiba_head_path,L"%s\\head\\10000112.jpg",m_work_path);

		for (int i=0; i< 10; i++)
		{
			//song_list += L"<item song_id=\"10000112\" song_name=\"你是我的眼\" singer_name=\"林宥嘉\" song_score=\"98\"  member_pic=\"C:\\a.jpg\" listen_count=\"1000\" flowers_count=\"15222\" />";
		}

		//return

		memset(m_maiba_song_info,0x0,sizeof(m_maiba_song_info));

		memset(maiba_head_path,0x0,sizeof(maiba_head_path));
		m_web_song_total_count = 48;
		//swprintf(maiba_head_path,L"%s\\head\\10000112.jpg",m_work_path);
		swprintf(maiba_head_path,L"C:\\head\\10000112.jpg",m_work_path);
		for (int i=0; i < m_web_song_total_count;i++)
		{
			_tcscpy(m_maiba_song_info[i].song_name,L"你是我的眼");
			_tcscpy(m_maiba_song_info[i].singer_name,L"林宥嘉");
			_tcscpy(m_maiba_song_info[i].song_id,L"10000112");
			_tcscpy(m_maiba_song_info[i].song_score,L"98");
			_tcscpy(m_maiba_song_info[i].member_pic,maiba_head_path);
			_tcscpy(m_maiba_song_info[i].listen_count,L"12546");
			_tcscpy(m_maiba_song_info[i].flowers_count,L"1244");
			_tcscpy(m_maiba_song_info[i].user_id,L"user_id");
			_tcscpy(m_maiba_song_info[i].voice_id,L"voice_id0001");
			_tcscpy(m_maiba_song_info[i].song_down_addrss,L"http:\\");
		}

		m_web_current_page_number = 1;
		m_web_total_page_nmuber = 1;
	}
	catch (...)
	{

	}

	return;
}

bool Cflashktv10Wnd::flash_message_call_maiba_pk_data(PAGE_OPERATE page_operate_type)
{
	try
	{ 
		TCHAR request[1024*52];
		int page_index=0;
		bool result = false;  
		std::wstring song_list_xml;
		config_file_manager config_file;

		int nPos = 0;
		TCHAR song_temp[1024];

		if (m_web_total_page_nmuber <=0)
		{
			//flash_show_tip_message(L"没有歌曲数据!");
			song_list_xml += L"<song_list></song_list>";

			//组织歌曲字符串 
			result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,page_operate_type);

			if (!result)
			{
				return false;
			}

			flash_player_call_function(request);

			return false;
		}

		memset(request,0x0,sizeof(request)); 

		page_index = m_flash_manage.get_last_page_index();

		switch (m_maiba_current_request_type)
		{
		case MAIBA_DEKARON: //挑战麦霸
			{
				/* memset(song_temp,0x0,sizeof(song_temp));
				swprintf(song_temp,L"<item song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\"  member_pic=\"%s\" listen_count=\"%s\" flowers_count=\"%s\" />",
				m_maiba_song_info[m_maiba_number_button].song_id,m_maiba_song_info[m_maiba_number_button].song_name,m_maiba_song_info[m_maiba_number_button].singer_name,
				m_maiba_song_info[m_maiba_number_button].member_pic,m_maiba_song_info[m_maiba_number_button].listen_count,m_maiba_song_info[m_maiba_number_button].flowers_count);*/
			}
			break;
		case MAIBA_SHARE:   //K歌分享
			break;
		case MAIBA_FIND:		//发现麦霸
			break;
		default:
			return false;
		} 

		song_list_xml += L"<song_list>";
		for (int i=0; i< 48;i++)
		{
			memset(song_temp,0x0,sizeof(song_temp));	
			if (0 != _tcscmp(m_maiba_song_info[i].voice_id,L""))
			{
				swprintf(song_temp,L"<item voice_id=\"%s\" song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\"  member_pic=\"%s\" listen_count=\"%s\" flowers_count=\"%s\" color=\"%s\" score_flower=\"1\" />",
					m_maiba_song_info[i].voice_id, m_maiba_song_info[i].song_id,m_maiba_song_info[i].song_name,m_maiba_song_info[i].nick_name,m_maiba_song_info[i].song_score,
					m_maiba_song_info[i].member_pic,m_maiba_song_info[i].listen_count,m_maiba_song_info[i].flowers_count,m_default_song_row_color.c_str());
				song_list_xml += song_temp;
			}			 
		}
		song_list_xml += L"</song_list>";	



		if (m_maiba_request_page==1)
		{
			//首次进入 
			show_row_and_page_count(L"true",m_web_song_total_count,m_web_total_page_nmuber,m_web_current_page_number);
			result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,page_operate_type); 
		}
		else
		{
			show_row_and_page_count(L"false",m_web_song_total_count,m_web_total_page_nmuber,m_web_current_page_number);
			//组织歌曲字符串 
			result = m_flash_manage.make_maiba_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),false,page_index,page_operate_type);

		}

		if (!result)
		{
			return false;
		}

		flash_player_call_function(request);


	}
	catch (...)
	{

	}

	return false;
}


bool Cflashktv10Wnd::flash_message_call_change_show_page(const TCHAR *args)
{
	try
	{
		int cur_page_number=0;
		TCHAR page_number[16];
		int page_index=0;
		bool result=false;

		memset(page_number,0x0,sizeof(page_number));

		//得到当前页码
		swscanf(args,L"%d",&cur_page_number);

		page_index = m_flash_manage.get_last_page_index();
		//设置当前页码
		switch(page_index)
		{
		case page_selected: //已选歌曲列表
		case page_singed:  //已唱歌曲列表
			{
				m_video_play_manager.set_show_page_number(cur_page_number);
			}
			break;
		default:
			{
				m_db_query.set_cur_page_number(cur_page_number);
			}
			break;
		}
		switch(page_index)
		{
		case page_title:	   //列表_拼音
		case page_lyric:	   //列表_歌词
		case page_write:	   //列表_手写
		case page_opera:	   //列表_戏曲
		case page_language:	   //列表_语种
		case page_singer_song: //具体歌星的列表
		case page_theme:       //列表-主题
		case page_entertainment_programme:
		case page_class:
		case page_new_song:	   //列表_新歌
		case page_era_song:
		case page_search_song:
		case page_theme_song:
		case page_new_theme_song:
		case page_word_count:
		case page_hdmi:         //高清专区
			{
				song_pre_next_page_change(song_select_expr,CUR_PAGE_OPERATE,0);						
			}
			break;
		case page_top_song:	//列表_排行
			{
				//歌曲列表快划
				song_pre_next_page_change(top_song_select_expr,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_singer:  //歌星列表
		case page_voice_china_singer:
			{
				singer_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_selected: //已选歌曲列表
			{
				show_select_or_sing_song(SHOW_SELECT_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_singed:  //已唱歌曲列表
			{
				show_select_or_sing_song(SHOW_SING_SONG,CUR_PAGE_OPERATE,0);
			}
			break;
		case page_recording:  //录音回放列表
			{
				song_recorder_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_movie:   //电影列表
			{
				movie_pre_next_page_change(CUR_PAGE_OPERATE,0);
			}
			break;
		case page_member_song:  //列表会员
			{
				member_song_pre_next_page_change(CUR_PAGE_OPERATE,0);

			}
			break;
		case page_ktvExplain:     //场所攻略
		case page_room:           //包厢使用手册
		case page_fire:           //消防图解
		case page_guide:          //消防指南
			{
				show_service_image(SERVICE_PICTRUE_CUR_PAGE);
			}
			break;
		default:
			break;
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

UINT Cflashktv10Wnd::query_recommand_top_song_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd *pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);
		pThis->recommand_song_by_top_song();
		AfxEndThread(0);
	}
	catch (...)
	{

	}
	return 0;
}


bool Cflashktv10Wnd::recommand_song_by_top_song()
{
	try
	{
		TCHAR sql[1024];
		std::wstring *result_set=NULL;

		memset(sql,0x0,sizeof(sql));

		//申请空间
		result_set = new std::wstring[song_select_expr.result_column_nums*10];

		//去除top_song表中的前十的数据
		swprintf(sql,L"sing_number > 0");
		int row = m_db_query.get_table_data(result_set,top_song_select_expr.result_column_nums,top_song_select_expr.result_column_expr.c_str(),sql,NULL,L"sing_number",L"DESC",10,0);

		if (row > 0)  //没有查询到当前歌星有其他歌曲
		{
			//设置数据
			m_query_song_manager.set_recommend_song_list(result_set,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums,0,true);
		} 
		delete []result_set;
		result_set=NULL; 

		return true;
	}
	catch (...)
	{

	}

	return false;
}


bool Cflashktv10Wnd::recommand_song_by_song_id()
{
	try
	{ 
		TCHAR query_sql[1024];   //查询的sql语句
		std::wstring *result_set=NULL;

		memset(query_sql,0x0,sizeof(query_sql));  

		result_set = new std::wstring[7];
		//通过歌曲id得到当前歌曲的信息
		swprintf(query_sql,L"select a.[issue_year],a.[language],a.[song_theme],a.[singer_sex],b.[singer_region_new],a.[song_name],b.[singer_name] from song a,singer b where a.[singer_id1] = b.[singer_id] and a.[song_id] = \"%s\"",m_recommedn_song_id);

		//得到数据

		int row = m_db_query.get_table_data(result_set,7,query_sql,NULL,NULL,L"sing_number",L"DESC",1,0);
		if (row <= 0)
		{
			delete []result_set;
			result_set=NULL;
			return false;
		}

		get_recommend_song_info(result_set[0].c_str(),result_set[1].c_str(),result_set[2].c_str(),result_set[3].c_str(),result_set[4].c_str(),
			result_set[5].c_str(),result_set[6].c_str(),m_recommedn_song_id);

		if (result_set)
		{
			delete []result_set;
			result_set=NULL;
		}
		return true;
	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::song_query_member_data_by_id(std::wstring song_id_list)
{
	try
	{
		char sql_contion[1024*5];
		TCHAR sql_condition[1024*5];

		TCHAR request[1024*24];
		memset(sql_contion,0x0,sizeof(sql_contion));
		memset(sql_condition,0x0,sizeof(sql_condition));
		string_conversion string_con;
		std::wstring *result_set=NULL;
		std::wstring song_list_xml;
		int row = 0;
		bool result = false;
		int total_count = 0;
		int total_page = 0;
		int current_page = 0;



		int page_index = m_flash_manage.get_last_page_index();

		if (song_id_list.empty())
		{
			result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
			if (!result)
			{
				return false;
			}
			flash_player_call_function(request);

			return false;
		}

		total_count = m_memeber_manage[m_activate_vip_button].get_total_member_count();
		total_page = m_memeber_manage[m_activate_vip_button].get_total_member_page();
		current_page = m_memeber_manage[m_activate_vip_button].get_current_member_page();

		if (total_count<m_page_show_row_count)
		{
			row = total_count;
		}
		else
		{
			row = m_page_show_row_count;
		}



		//申请空间 10-row
		result_set = new std::wstring[row*song_select_expr.result_column_nums];
		if (!result_set)
		{
			WriteLog(__FL__, L"申请空间失败!");
			return false;
		}

		m_query_song_manager.initialized_variables();

		//swprintf(sql_condition,L"where song_id in(%s)",song_select_expr.result_column_expr.c_str(),song_id_list.c_str());
		swprintf(sql_condition,L"song_id in(%s)",song_id_list.c_str());

		//string_con.widechar_to_utf8(sql_condition,sql_contion,sizeof(sql_contion));
		row = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),sql_condition,NULL,NULL,NULL,m_page_show_row_count,0);
		//row = m_db_query.query_db_get_table_data(result_set,song_select_expr.result_column_nums*row,sql_contion);

		if (row <=0)
		{

			delete []result_set;
			result_set=NULL; 
			return false;
		}


		//显示行页信息
		show_row_and_page_count(L"true",total_count,total_page,current_page);

		//设置歌曲列表
		result = m_query_song_manager.set_song_list(result_set,song_select_expr.result_column_nums*row,song_select_expr.result_column_nums,total_count,current_page,m_page_show_row_count);
		if (!result)
		{
			delete []result_set;
			result_set = NULL;
			return false;
		}
		//注意释放空间
		delete []result_set;
		result_set = NULL;

		result = m_query_song_manager.make_song_list_xml(song_list_xml,m_video_play_manager,m_page_show_row_count,m_song_show_mode,page_index);
		if (!result)
		{
			return false;
		}
		//组织歌曲字符串   直接显示数据页操作码是0
		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
		if (!result)
		{
			return false;
		}
		flash_player_call_function(request);

		set_flash_button_state(L"vip_activate_button",m_activate_vip_button);

	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::get_recommend_song_info(const TCHAR* issue_year,const TCHAR *language,const TCHAR* song_theme,const TCHAR* singer_sex,const TCHAR* singer_region_new,const TCHAR *song_name,const TCHAR* singer_name,const TCHAR* song_id)
{
	try
	{
		//TCHAR sql_other[1024];		//其他类型
		TCHAR query_condition[10240];  //查询当前歌星前三首歌查询语句
		char  sql_other_contion[10240]; 

		std::wstring *result_set=NULL;
		std::wstring *result_set_recommend = NULL;
		int current_singer_song = 0;  //当前歌星的歌曲
		int row = 0;       //相同类型的歌曲
		int recommand_other_song = 0;  //推荐除这个歌曲的其他歌星的数目
		bool result = false;
		string_conversion string_con;
		bool query_sql_type=true;   //查询类型，false,不是特殊类型，true是特殊类型
		int recommend_pos = 0;

		RECOMMAND_SONG_INFO recommend_song_info[3];
		memset(recommend_song_info,0x0,sizeof(recommend_song_info));

		//申请空间
		result_set = new std::wstring[song_select_expr.result_column_nums*3];
		if (NULL == result_set)
		{
			return false;
		}

		//从歌星里取出排名前三的歌曲
		memset(query_condition,0x0,sizeof(query_condition));
		swprintf(query_condition,L"singer_name=\"%s\" and language=\"%s\" and song_id != \"%s\"",singer_name,language,song_id);
		current_singer_song = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),query_condition,NULL,L"sing_number",L"DESC",3,0);

		if (current_singer_song > 0)  //没有查询到当前歌星有其他歌曲
		{
			//设置数据
			m_query_song_manager.set_recommend_song_list(result_set,current_singer_song*song_select_expr.result_column_nums,song_select_expr.result_column_nums,0,true);
			//得到当前歌名
			for (int i=0;i<current_singer_song*song_select_expr.result_column_nums;i+=song_select_expr.result_column_nums)
			{
				_tcscpy(recommend_song_info[recommend_pos].song_name,result_set[i+4].c_str());
				recommend_pos++;
			}
		}

		delete []result_set;
		result_set=NULL; 

		recommand_other_song = RECOMMAND_SONG_INFO_COUNT - current_singer_song;
		//推荐其他的歌曲
		//判断是否是特殊类型
		memset(query_condition,0x0,sizeof(query_condition));
		if (0 == _tcscmp(song_theme,L"14"))  //革命歌曲
		{
			//判断年代是否
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}
			else
			{
				//(年代、语种) 
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}

		}
		else  if (0 == _tcscmp(song_theme,L"7")) //儿歌
		{
			//(年代、语种)
			swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
				language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);


		}
		else if (0 == _tcscmp(song_theme,L"29"))  //戏剧
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}
			else
			{
				//(年代、语种)
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}

		}
		else if (0 == _tcscmp(song_theme,L"1"))  //迪曲
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}
			else
			{
				//(年代、语种)
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" and song_name != \"%s\" ",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name);
			}

		}
		else 
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				swprintf(query_condition,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
										  a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
										  a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
										  a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
										  from song a,singer b where a.[singer_name] = b.[singer_name] 				\
										  and a.[language]=\"%s\" and	a.[song_theme]=\"%s\" and a.[singer_sex]=\"%s\"\
										  and b.[singer_region_new]=\"%s\" and a.song_name != \"%s\" and a.song_name != \"%s\" and a.song_name != \"%s\" \
										  and a.song_name != \"%s\" order by sing_number DESC limit %d offset 0",
										  language,song_theme,singer_sex,singer_region_new,
										  song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name,recommand_other_song);
			}
			else
			{
				swprintf(query_condition,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
										  a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
										  a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
										  a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
										  from song a,singer b where a.[singer_name] = b.[singer_name] and a.[issue_year] > \"%d\" 				\
										  and a.[issue_year] < \"%d\" and a.[language]=\"%s\" and	a.[song_theme]=\"%s\" and a.[singer_sex]=\"%s\"\
										  and b.[singer_region_new]=\"%s\" and a.song_name != \"%s\" and a.song_name != \"%s\" and a.song_name != \"%s\" \
										  and a.song_name != \"%s\" order by sing_number DESC limit %d offset 0",
										  (_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,singer_sex,singer_region_new,
										  song_name,recommend_song_info[0].song_name,recommend_song_info[1].song_name,recommend_song_info[2].song_name,recommand_other_song);

			}

			//标示为特殊版本
			query_sql_type=false;

		}


		//申请空间 10-row
		result_set_recommend = new std::wstring[recommand_other_song*song_select_expr.result_column_nums];
		if (!result_set_recommend)
		{
			WriteLog(__FL__, L"申请空间失败!");
			return false;
		}

		//查询7条数据
		memset(sql_other_contion,0x0,sizeof(sql_other_contion));
		string_con.widechar_to_utf8(query_condition,sql_other_contion,sizeof(sql_other_contion));
		if (query_sql_type)
		{
			row = m_db_query.get_table_data(result_set_recommend,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),query_condition,NULL,L"sing_number",L"DESC",recommand_other_song,0);
		}
		else
		{
			row = m_db_query.query_db_get_table_data(result_set_recommend,song_select_expr.result_column_nums*recommand_other_song,sql_other_contion);
		}

		if (row > 0)  //没有查询到当前歌星有其他歌曲
		{
			//设置数据
			m_query_song_manager.set_recommend_song_list(result_set_recommend,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums,current_singer_song,false);

		}

		delete []result_set_recommend;
		result_set_recommend=NULL; 

		//“可能喜欢”开关开启 并且 可以产生气泡时才发送flash数据
		if (m_bBubble && m_bMightLike)
		{
			//发送数据给flash
			flash_message_call_recommend_song();
		}
		else
		{
			//发送互动场景屏推荐歌曲
			flash_message_call_recommend_song_list();
		}

		return true;
	}
	catch (...)
	{

	}

	return false;
}


UINT Cflashktv10Wnd::query_recommend_song_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		pThis->recommand_song_by_song_id();

		AfxEndThread(0);

		return 0;
	}
	catch (...)
	{

	}
	return -1;
}

bool Cflashktv10Wnd::flash_message_call_recommend_song()
{
	try
	{
		std::wstring song_list_xml;
		TCHAR request[10240];
		int page_index=0;
		bool result = false;   

		memset(request,0x0,sizeof(request)); 

		page_index = m_flash_manage.get_last_page_index();


		m_query_song_manager.make_recommend_song_list(song_list_xml,m_video_play_manager);


		//组织歌曲字符串 
		result = m_flash_manage.make_recommend_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index);
		if (!result)
		{
			return false;
		}

		flash_player_call_function(request);

		return true;
	}
	catch (...)
	{

	} 

	return false;
}



bool Cflashktv10Wnd::flash_message_call_place_notice()
{
	try
	{
		TCHAR request[1024];
		TCHAR data[1024];
		bool result = false;
		int page_index = 0;

		memset(data,0x0,sizeof(data));
		memset(request,0x0,sizeof(request));

		page_index = m_flash_manage.get_last_page_index();

		swprintf(data,L"<data><info page_name=\"%s\" txt=\"%s\"/></data>",page_call_para[page_index],m_place_notice_info);

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"place_notice",data);

		if (result)
		{
			flash_player_call_function(request);
		}
	}
	catch (...)
	{

	}

	return false;
}

void Cflashktv10Wnd::flash_message_call_room_name_ranking()
{
	/*
	try
	{
	std::wstring song_list_xml;
	TCHAR song_show_info[256];
	TCHAR request[1024];
	bool result = false;


	memset(song_show_info,0x0,sizeof(song_show_info));

	song_list_xml += L"<data>";
	for (int i = 0; i < 5; i++)
	{
	memset(song_show_info,0x0,sizeof(song_show_info));
	//swprintf(song_show_info,L"<item number=\"%s\" room_name=\"%s\"  score=\"%s\" />");
	swprintf(song_show_info,L"<item number=\"No.%d\" room_name=\"888号房\"  score=\"%d\" />",i,i+90);
	song_list_xml+=song_show_info;
	}

	song_list_xml += L"</data>";


	result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"room_ranking",song_list_xml.c_str());

	if (result)
	{
	flash_player_call_function(request);
	}

	}
	catch (...)
	{

	}


	return ;
	*/
	try
	{ 
		TCHAR request[1024];
		bool result = false;

		if (0 == _tcscmp(m_maiba_ranking_info.c_str(),L""))
		{
			//初始化麦霸数据
			m_maiba_ranking_info = L"<data></data>";
		}

		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"room_ranking",m_maiba_ranking_info.c_str());

		if (result)
		{
			flash_player_call_function(request);
		}

	}
	catch (...)
	{

	}


	return ;
}
void Cflashktv10Wnd::parse_message_call_room_ranking(char* recv_data)
{
	try
	{
		TCHAR data[1024];
		string_conversion string_con;
		if (!recv_data)
		{
			return;
		}
		memset(data,0x0,sizeof(data));
		string_con.utf8_to_widechar(recv_data,data,sizeof(data));

		m_maiba_ranking_info = data;
	}
	catch (...)
	{

	}

	return;
}


bool Cflashktv10Wnd::parse_maiba_arena_info(char* recv_data)
{
	try
	{
		/*
		RequestMaibaRule<song_list>
		<item song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\" wave_path=\"%s\" video_path=\"%s\" />
		</song_list>
		*/
		string_conversion string_con;
		CMarkup parse_xml_doc;
		bool result = false;
		std::wstring item_value; 
		TCHAR maiba_data[1024*5];
		TCHAR song_temp[1024];
		int nPos =0;
		std::wstring song_list_xml;

		memset(maiba_data,0x0,sizeof(maiba_data));
		memset(m_maiba_song_info,0x0,sizeof(m_maiba_song_info));

		//解析xml文档
		result =parse_xml_doc.SetDoc(maiba_data);
		if (!result)
		{
			return false;
		}
		parse_xml_doc.ResetPos();   //list
		result = parse_xml_doc.FindChildElem(); 
		if (!result)
		{
			return false;
		}

		while(true)
		{
			result = parse_xml_doc.IntoElem(); //data    
			if (!result)
			{
				break;
			}
			item_value = parse_xml_doc.GetAttrib(L"song_id");
			_tcscpy(m_maiba_song_info[nPos].song_id,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"song_name"); 
			_tcscpy(m_maiba_song_info[nPos].song_name,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"singer_name"); 
			_tcscpy(m_maiba_song_info[nPos].singer_name,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"song_score");
			_tcscpy(m_maiba_song_info[nPos].song_score,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"wave_path");
			_tcscpy(m_maiba_song_info[nPos].wave_path,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"video_path");
			_tcscpy(m_maiba_song_info[nPos].video_path,item_value.c_str());

			item_value = parse_xml_doc.GetAttrib(L"voice_id");
			_tcscpy(m_maiba_song_info[nPos].voice_id,item_value.c_str());

			parse_xml_doc.OutOfElem();  
			result = parse_xml_doc.FindChildElem();

			nPos++;
			if (!result)
			{
				break;
			}	
		}

		//
		song_list_xml += L"<song_list>";
		for (int i=0; i< nPos;i++)
		{
			memset(song_temp,0x0,sizeof(song_temp));
			swprintf(song_temp,L"<item voice_id=\"%s\" song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\"  member_pic=\"%s\" listen_count=\"%s\" flowers_count=\"%s\" color=\"%s\"/>",
				m_maiba_song_info[i].voice_id,m_maiba_song_info[m_maiba_number_button].song_id,m_maiba_song_info[m_maiba_number_button].song_name,m_maiba_song_info[m_maiba_number_button].singer_name,
				m_maiba_song_info[m_maiba_number_button].member_pic,m_maiba_song_info[m_maiba_number_button].listen_count,m_maiba_song_info[m_maiba_number_button].flowers_count);
			song_list_xml += song_temp;
		}
		song_list_xml += L"</song_list>";	

		//发送给flash
		//flash_message_call_maiba_pk_data(song_list_xml.c_str(),FIRST_PAGE_OPERATE);
	}
	catch (...)
	{

	}

	return false;

}

bool Cflashktv10Wnd::judge_parse_request_web_data(TCHAR* webFlags)
{
	try
	{
		//得到当前的状态，是否要进行解析
		if (REQUEST_NO == m_request_song_type)
		{
			WriteLog(__FL__, L"当前没有处于请求页面");
			return false;
		}
		else if (MYRECORDSHARE == m_request_song_type)
		{
			//我的分享
			if (0!=_tcscmp(webFlags,L"MYRECORDSHARE"))
			{
				return false;
			}
		}
		else if (COUNTRYHOT == m_request_song_type)
		{
			//全国最火				  
			if (0!=_tcscmp(webFlags,L"COUNTRYHOT"))
			{
				return false;
			}
		}
		else if (COUNTRYNEW == m_request_song_type)
		{
			//全国最新				  
			if (0!=_tcscmp(webFlags,L"COUNTRYNEW"))
			{
				return false;
			}
		}
		else if (PLACEHOT == m_request_song_type)
		{
			//本场最火
			if (0!=_tcscmp(webFlags,L"PLACEHOT"))
			{
				return false;
			}
		}
		else if (PLACENEW == m_request_song_type)
		{
			//本场最新
			if (0!=_tcscmp(webFlags,L"PLACENEW"))
			{
				return false;
			}
		}
		else if (MYCOLLECTION == m_request_song_type)
		{
			//我的收藏
			if (0!=_tcscmp(webFlags,L"MYCOLLECTION"))
			{
				return false;
			}
		}
		else if (MYPRIVATESONG == m_request_song_type)
		{
			if (0!=_tcscmp(webFlags,L"MYPRIVATESONG"))
			{
				return false;
			}
		}

		return true;
	}
	catch (...)
	{

	}

	return false;
}

//网络数据
bool Cflashktv10Wnd::parse_maiba_song_info(char* recv_data)
{
	try
	{
		TCHAR maiba_temp[256];
		TCHAR maiba_data[1024*50];
		TCHAR msg_item[256]; //得到当前发过来的类型 
		const TCHAR *parse_msg=NULL;
		const TCHAR *temp=NULL; 
		std::wstring down_load_picture =L""; //组织下载图片数据
		TCHAR send_data[1024*20];
		TCHAR total_text[22];  //总条数


		bool result = false;
		std::wstring item_value;
		string_conversion string_con;
		CMarkup parse_xml_doc;
		int nPos =0;

		memset(maiba_data,0x0,sizeof(maiba_data));
		memset(maiba_temp,0x0,sizeof(maiba_temp));
		memset(total_text,0x0,sizeof(total_text));

		string_con.utf8_to_widechar(recv_data,maiba_data,sizeof(maiba_data));

		memset(m_maiba_song_info,0x0,sizeof(m_maiba_song_info));

		WriteLog(__FL__, L"接受到的数据如下：");
		//	WriteLog(__FL__, maiba_data);


		std::wstring maiba_song_list;

		//MAIBASONGINFO$COUNT=(总条数)$MYCOLLECTION$ 
		parse_msg = maiba_data;
		memset(msg_item,0x0,sizeof(msg_item));
		temp = _tcschr(parse_msg,'$');
		if (temp && (temp-parse_msg)*sizeof(TCHAR) < 50)
		{

		}
		else 
		{
			WriteLog(__FL__, L"数据错误!");
			WriteLog(__FL__, parse_msg);
			return false;
		}
		memset(msg_item,0x0,sizeof(msg_item));
		memcpy(msg_item,parse_msg,(temp-parse_msg)*sizeof(TCHAR));
		swscanf(msg_item,L"COUNT=%d",&m_web_song_total_count);
		if (m_web_song_total_count%48)
		{
			m_web_total_page_nmuber = m_web_song_total_count/48 + 1;
		}
		else
		{
			m_web_total_page_nmuber = m_web_song_total_count/48;
		}

		WriteLog(__FL__, msg_item);

		parse_msg = temp+1;
		temp = _tcschr(parse_msg,'$');
		if (temp && (temp-parse_msg)*sizeof(TCHAR) < 50)
		{
		}
		else 
		{
			WriteLog(__FL__, L"数据错误!");
			WriteLog(__FL__, parse_msg);
			return false;
		}

		memset(msg_item,0x0,sizeof(msg_item));
		memcpy(msg_item,parse_msg,(temp-parse_msg)*sizeof(TCHAR));

		if (!judge_parse_request_web_data(msg_item))
		{
			m_web_total_page_nmuber = 0;
			m_web_song_total_count = 0;
			flash_message_call_maiba_pk_data(FIRST_PAGE_OPERATE);
			return false;
		}

		//判断当前页面是否是在发现麦霸页面
		int page_index = m_flash_manage.get_last_page_index();
		if (page_index == page_recording)
		{
			if (m_maiba_current_request_type != MAIBA_SHARE)
			{
				return false;
			}

		}

		parse_msg = temp+1;

		//解析xml文档
		result =parse_xml_doc.SetDoc(parse_msg);
		if (!result)
		{
			return false;
		}
		parse_xml_doc.ResetPos();   //list
		result = parse_xml_doc.FindChildElem(); 
		if (!result)
		{
			return false;
		}
		/*<song_list><item ><song_id>10000112</song_id><song_name>ni shi wo de yan</song_name><singer_name>linyoujia</singer_name>
		<song_score>98</song_score><listen_count>1000</listen_count><flowers_count>15222</flowers_count><user_id>1455577</user_id>
		<voice_id>111444</voice_id><song_down_addrss>http:\\</song_down_addrss><member_add>http:\\</member_add> 
		</item></song_list>*/

		while(true)
		{
			parse_xml_doc.IntoElem();  
			result = parse_xml_doc.FindChildElem(); //<item>

			if (!result)
			{
				break;
			}
			parse_xml_doc.IntoElem();  //song_id
			item_value = parse_xml_doc.GetData(); 
			_tcscpy(m_maiba_song_info[nPos].song_id,item_value.c_str());

			parse_xml_doc.FindElem(); //song_name
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].song_name,item_value.c_str());

			parse_xml_doc.FindElem();  //singer_name
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].singer_name,item_value.c_str());

			parse_xml_doc.FindElem();   //song_score
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].song_score,item_value.c_str());

			parse_xml_doc.FindElem();   //listen_count
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].listen_count,item_value.c_str());

			parse_xml_doc.FindElem();    //flowers_count
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].flowers_count,item_value.c_str());

			parse_xml_doc.FindElem();     //user_id
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].user_id,item_value.c_str());

			parse_xml_doc.FindElem();   //voice_id
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].voice_id,item_value.c_str());

			//parse_xml_doc.FindElem();     //song_dwon_name
			//item_value = parse_xml_doc.GetData();
			//_tcscpy(m_maiba_song_info[nPos].song_down_name,item_value.c_str());

			parse_xml_doc.FindElem();   //song_down_addrss
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].song_down_addrss,item_value.c_str());
			parse_memeber_head_picture_name(item_value.c_str(),m_maiba_song_info[nPos].recorder_video,1);

			parse_xml_doc.FindElem();   //member_add
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].member_addr,item_value.c_str());
			parse_memeber_head_picture_name(item_value.c_str(),m_maiba_song_info[nPos].member_pic,2);


			parse_xml_doc.FindElem();   //<nick_name>昵称<nick_name>
			item_value = parse_xml_doc.GetData();
			_tcscpy(m_maiba_song_info[nPos].nick_name,item_value.c_str()); 

			//返回<item>
			parse_xml_doc.OutOfElem();
			parse_xml_doc.OutOfElem();
			parse_xml_doc.OutOfElem();
			parse_xml_doc.OutOfElem();
			parse_xml_doc.OutOfElem(); 
			parse_xml_doc.OutOfElem(); 
			parse_xml_doc.OutOfElem(); 
			parse_xml_doc.OutOfElem(); 
			parse_xml_doc.OutOfElem(); 
			parse_xml_doc.OutOfElem();
			parse_xml_doc.OutOfElem();

			result = parse_xml_doc.FindChildElem();
			nPos++;
			if (nPos>=MAX_MAIBA_PK_COUNT || !result)
			{
				break;
			}
		}

		if (!m_server_path.empty())
		{
			for (int i=0;i<nPos;i++)
			{
				if (!PathFileExists(m_maiba_song_info[i].member_pic))
				{
					//不存在
					down_load_picture+=	m_maiba_song_info[i].member_addr;
					down_load_picture+= L"\n";
				}			 
			}

			memset(send_data,0x0,sizeof(send_data));
			//string_con.widechar_to_multibyte(down_load_picture.c_str(),send_data_temp,sizeof(send_data_temp));
			int file_size = _tcslen(down_load_picture.c_str());

			swprintf(send_data,L"Message&DOWN_FILE_FROM_BOX;GET_FACE_DOWN:filelen=%d&strean=%s",file_size,down_load_picture.c_str());

			//下载数据服务端
			send_data_to_service_udp(send_data);
		}

		//发送给flash
		flash_message_call_maiba_pk_data(FIRST_PAGE_OPERATE);
	}
	catch (...)
	{

	} 

	return false;
}

void Cflashktv10Wnd::request_head_picture_function()
{
	try
	{
		std::wstring down_load_picture =L""; //组织下载图片数据
		TCHAR send_data[1024*20];
		TCHAR head_download[256];

		for (int i=0;i<5;i++)
		{
			memset(head_download,0x0,sizeof(head_download));
			m_memeber_manage[i].get_member_down_address(head_download);
			if (0 == _tcscmp(head_download,L""))
			{
				break;
			}

			down_load_picture += head_download;
			down_load_picture+= L"\n";
		}

		memset(send_data,0x0,sizeof(send_data));

		int file_size = _tcslen(down_load_picture.c_str());
		if (file_size <= 1)
		{
			return;
		}

		swprintf(send_data,L"Message&DOWN_FILE_FROM_BOX;GET_FACE_DOWN:filelen=%d&strean=%s",file_size,down_load_picture.c_str());

		//下载数据服务端
		send_data_to_service_udp(send_data);
	}
	catch (...)
	{

	}
	return;
}

bool Cflashktv10Wnd::parse_memeber_head_picture_name(IN const TCHAR* down_addr,OUT TCHAR* local_path,IN int down_type)
{
	try
	{

		const TCHAR *install_path = _tcsrchr(down_addr,'/');

		//Pictures/UserPictures/140112302493/s5376bacc-106e-4563-b796-3e28e.jpg
		if ((NULL == install_path) || m_server_path.empty())
		{
			return false;
		}

		/*_tcscpy(user_head,L"\\\\%s\\face\\",m_service_server_ip);
		_tcscpy(user_head,install_path+1);*/
		if (1==down_type)
		{
			swprintf(local_path,L"%s\\mp3\\%s",m_server_path.c_str(),install_path+1);
		}
		else
		{
			swprintf(local_path,L"%s\\face\\%s",m_server_path.c_str(),install_path+1);
		}

		return true;
	}
	catch (...)
	{

	}

	return false;
}

bool Cflashktv10Wnd::show_handwrite_select_result(void)
{
	try
	{
		int page_index = 0;
		TCHAR data[1024];
		TCHAR request[1024];
		bool result = false;

		memset(data, 0x0, sizeof(data));
		memset(request, 0x0, sizeof(request));

		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_singer:
		case page_voice_china_singer:
			{
				swprintf(data,L"<data><info str=\"%s\"/></data>",singer_query_condition[SINGER_TABLE_NAME_SUFFIX].expression.c_str());
			}
			break;
		default:
			{
				swprintf(data,L"<data><info str=\"%s\"/></data>",song_query_condition[SONG_NAME_SUFFIX].expression.c_str());
			}
			break;
		}
		//显示选择的字
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"selectedResult_handwriting",data);
		if (result)
		{
			flash_player_call_function(request);
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}

bool Cflashktv10Wnd::show_pinyin_select_result(void)
{
	try
	{
		int page_index = 0;

		page_index = m_flash_manage.get_last_page_index();
		switch(page_index)
		{
		case page_singer:
		case page_voice_china_singer:
			{
				//显示选择的字
				show_letter_window(singer_query_condition[SPELL_FIRST_LETTER_ABBREVIATION].expression.c_str());
			}
			break;
		default:
			{
				show_letter_window(song_query_condition[SPELL_FIRST_LETTER_ABBREVIATION_SUFFIX].expression.c_str());
			}
			break;
		}

		return true;
	}
	catch (...)
	{

	}
	return false;
}



void Cflashktv10Wnd::set_system_version_date(void)
{
	try
	{
		bool result = false;
		TCHAR request[1024];
		TCHAR data[1024];
		int dog_validity=0;
		TCHAR valid_day[256] = {0x00};

		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data)); 

		//int valid_day = dog_valid_time/(24*3600);

		time_t timer;  
		struct tm *tblock;  
		timer=time(NULL); 
		timer += dog_valid_time;
		tblock=localtime(&timer);

		swprintf(valid_day,L"%04d/%02d/%02d", tblock->tm_year + 1900, tblock->tm_mon + 1, tblock->tm_mday);

		swprintf(data,L"<data><version name=\"%s\" address=\"%s\" tel=\"%s\" dog_num=\"%s\" validity=\"%s\"/></data>",
			user_infor.Name,user_infor.Address,user_infor.Tel,g_dog_serial_num,valid_day);

		//直接组织歌曲字符串 
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"system_vision_date",data);
		if (!result)
		{
			return;
		}

		flash_player_call_function(request);
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::parse_arena_song_info(TCHAR* song_id)
{
	try
	{ 
		TCHAR parse_data[1024];
		TCHAR query_sql[1024];
		const TCHAR *parse_msg =NULL;
		const TCHAR *temp = NULL;

		string_conversion string_con;
		int row = 0;
		int value=0;
		std::wstring *result_set=NULL;


		memset(query_sql,0x0,sizeof(query_sql)); 
		memset(parse_data,0x0,sizeof(parse_data));

		if (song_id==NULL)
		{
			return;
		}
		//根据歌曲id得到擂台歌曲信息
		m_arena_song_info.initialized_variables();

		//申请空间 10-row
		result_set = new std::wstring[song_select_expr.result_column_nums];

		swprintf(query_sql,L"song_id=\"%s\" ",song_id);

		row = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),query_sql,NULL,NULL,NULL,1,0);
		if (row<=0)
		{
			delete []result_set;
			result_set = NULL;
			WriteLog(__FL__, L"歌库中没有这首歌曲！");
			return;
		}

		for (int i =0; i<song_select_expr.result_column_nums;i++ )
		{
			//一行行的赋值
			m_arena_song_info.set_song_id(result_set[i].c_str());
			m_arena_song_info.set_accompany_sing_track(result_set[i+1].c_str());
			m_arena_song_info.set_karaoke_track(result_set[i+2].c_str());
			m_arena_song_info.set_guid_track(result_set[i+3].c_str());
			m_arena_song_info.set_song_name(result_set[i+4].c_str());
			m_arena_song_info.set_movie_name(result_set[i+5].c_str());
			value = 0;
			swscanf(result_set[i+6].c_str(),L"%d",&value);
			m_arena_song_info.set_song_sort(value);
			value = 0;
			swscanf(result_set[i+7].c_str(),L"%d",&value);
			m_arena_song_info.set_accompany_volume(value);
			value = 0;
			swscanf(result_set[i+8].c_str(),L"%d",&value);
			m_arena_song_info.set_karaoke_volume(value);
			m_arena_song_info.set_language(result_set[i+9].c_str());
			m_arena_song_info.set_song_type(result_set[i+10].c_str());
			m_arena_song_info.set_singer_name(result_set[i+11].c_str());
			m_arena_song_info.set_singer_sex(result_set[i+12].c_str());
			m_arena_song_info.set_song_version(result_set[i+13].c_str());
			value = 0;
			swscanf(result_set[i+14].c_str(),L"%d",&value);
			m_arena_song_info.set_light_control_set(value);
			value = 0;
			swscanf(result_set[i+15].c_str(),L"%d",&value);
			m_arena_song_info.set_audio_effect_code(value);
			m_arena_song_info.set_file_format(result_set[i+16].c_str());
			m_arena_song_info.set_local_path(result_set[i+17].c_str());
			m_arena_song_info.set_server_path1(result_set[i+18].c_str());
			m_arena_song_info.set_server_path2(result_set[i+19].c_str());
			m_arena_song_info.set_server_path3(result_set[i+20].c_str());
			m_arena_song_info.set_server_path4(result_set[i+21].c_str());
			m_arena_song_info.set_server_path5(result_set[i+22].c_str());
			m_arena_song_info.set_server_path6(result_set[i+23].c_str());
			m_arena_song_info.set_song_relative_path(result_set[i+24].c_str());
			value = 0;
			swscanf(result_set[i+25].c_str(),L"%d",&value);
			m_arena_song_info.set_video_saturation(value);
			value = 0;
			swscanf(result_set[i+26].c_str(),L"%d",&value);
			m_arena_song_info.set_video_luminance(value);
			value = 0;
			swscanf(result_set[i+27].c_str(),L"%d",&value);
			m_arena_song_info.set_video_contrast(value);
			m_arena_song_info.set_lyric(result_set[i+28].c_str());
			m_arena_song_info.set_culture_code(result_set[i+29].c_str());
			m_arena_song_info.set_preview_path(result_set[i+30].c_str());
			m_arena_song_info.set_video_type(PLAY_SONG_TYPE_SELECT_SONG);
			m_arena_song_info.set_singer_id1(result_set[i+31].c_str());
			m_arena_song_info.set_singer_id2(result_set[i+32].c_str());
			m_arena_song_info.set_singer_id3(result_set[i+33].c_str());
			m_arena_song_info.set_singer_id4(result_set[i+34].c_str());
			m_arena_song_info.set_file_version(result_set[i+35].c_str());

			break;
		}

		m_exist_arena_song = true;

		delete []result_set;
		result_set = NULL;
	}
	catch (...)
	{

	}

	return;
}

void Cflashktv10Wnd::down_song_file_success(char *down_data)
{
	try
	{
		string_conversion string_con;
		TCHAR update_sql[256];
		TCHAR recv_data[256];
		TCHAR song_id[256];
		TCHAR server_path[256];
		bool result = false;
		const TCHAR* parse_msg = NULL;
		const TCHAR* temp = NULL;
		TCHAR request[1024];
		TCHAR data[1024];
		bool exist_current_song = false;
		TCHAR server_temp[256];
		int server_path_pos = 0;
		TCHAR current_server_path[256];
		TCHAR relative_path[256];

		//DOWNSONGFILESUCCESS:song_id&server_path%d=\"\\\\%s\"

		memset(update_sql,0x0,sizeof(update_sql));
		memset(recv_data,0x0,sizeof(recv_data));
		memset(song_id,0x0,sizeof(song_id));
		memset(server_path,0x0,sizeof(server_path));
		memset(request,0x0,sizeof(request));
		memset(data,0x0,sizeof(data));
		memset(server_temp,0x0,sizeof(server_temp));
		memset(current_server_path,0x0,sizeof(current_server_path));
		memset(relative_path, 0x00, sizeof(relative_path));

		enum PLAYER_PLAY_STATE player_state;

		string_con.multibyte_to_widechar(down_data,recv_data,sizeof(recv_data));

		parse_msg = recv_data;

		temp = _tcschr(parse_msg,'&');
		if (NULL == temp)
		{
			TCHAR szMsg[MAX_PATH] = {0x00};
			swprintf(szMsg, L"消息没有& msg = %s", parse_msg);
			WriteLog(__FL__, L"szMsg");
			return;
		}

		//得到歌曲id
		memcpy(song_id,parse_msg,(temp-parse_msg)*sizeof(TCHAR));

		//得到服务器路径
		TCHAR temp_msg[256] = {0x00};
		_tcscpy(temp_msg, temp + 1);
		TCHAR * server = _tcschr(temp_msg, '&');
		int len = _tcslen(temp_msg) - _tcslen(server);
		_tcsncpy(server_path, temp_msg, len);

		parse_msg = temp+1;
		//update song set server_path3="\\10.0.3.165",local_path='0' where song_id="899338"
		//DOWNSONGFILESUCCESS:song_id&server_path%d=\"\\\\%s\"

		//解析得到当前是第几个服务器和服务器地址
		temp = _tcschr(parse_msg,'=');
		memcpy(server_temp,parse_msg,(temp-parse_msg)*sizeof(TCHAR));
		swscanf(server_temp,L"server_path%d",&server_path_pos);

		_tcscpy(current_server_path,temp+2);
		TCHAR *install_path = _tcsrchr(current_server_path, _T('"'));
		if (install_path)
		{
			_tcscpy(relative_path, install_path);
			install_path[0] = '\0';
		}

		//获得绝对路径
		temp = _tcschr(relative_path,'=');
		if (temp == NULL)
			return;
		_tcscpy(relative_path, temp + 1);
		//memcpy(relative_path,relative_path,(temp-relative_path)*sizeof(TCHAR));


		//修改排行数据为本地数据
		ZeroMemory(update_sql, sizeof(update_sql));
		swprintf(update_sql,L"update top_song set %s,local_path='0',song_relative_path='%s' where song_id=\"%s\"",server_path,relative_path,song_id);
		result = m_db_query.exec_sql(update_sql);

		ZeroMemory(update_sql, sizeof(update_sql));
		//swprintf_s(update_sql,L"update song set local_path='1' where song_id=\"%s\"",update_song_id);
		swprintf(update_sql,L"update song set %s,local_path='0',song_relative_path='%s' where song_id=\"%s\"",server_path,relative_path,song_id);

		result = m_db_query.exec_sql(update_sql);
		if (!result)
		{
			WriteLog(__FL__, L"修改数据库失败");
			WriteLog(__FL__, update_sql);
		}
		else
		{
			song_info update_song;
			result = get_song_info_by_id(song_id,update_song,PLAY_SONG_TYPE_SELECT_SONG);

			//查询当前的歌曲id是否存在
			exist_current_song = judge_down_song_map_by_id(song_id);

			if (!exist_current_song)
			{
				TCHAR szMsg[MAX_PATH] = {0x00};
				swprintf(szMsg, L"当前歌曲ID不存在或者已经更新过了");
				WriteLog(__FL__, szMsg);

				return;
			}

			//插入到已选列表
			//result = play_or_insert_select_list(update_song,false);
			//得到当前播放的歌曲
			player_state = m_video_play_manager.get_player_cur_state();

			//修改已选列表歌曲的下载标示
			result = m_video_play_manager.modify_down_load_select_song(song_id,current_server_path,server_path_pos,relative_path);
			if (!result)
			{
				return;
			}

			switch (player_state)
			{
			case BEGIN_STATE:     //开始
			case END_STATE:       //结束
			case IDLESSE_STATE:   //空闲:
				{
					m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);

					if (m_player_manager.is_playing())
					{
						flash_message_call_function(SONG_NEXT);
					}					
				}
				break;
			case PLAY_SONG_STATE:
				m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);
				break;
			}

			int result=false;
			int page_number=0;
			TCHAR send_data[1024*50];
			enum PLAYER_PLAY_STATE player_next_state;
			TCHAR syn_song_id[1024*50];

			memset(send_data,0x0,sizeof(send_data));
			memset(syn_song_id,0x0,sizeof(syn_song_id));

			//得到播放器的下一个状态
			player_next_state = m_video_play_manager.get_player_next_state();
			if (1==m_master_slave_control_flag)
			{
				refresh_screen_list(true);

				// mod by yzg 2015-12-06
				//主控机，播放下一首发送给被控机
				//选择的歌曲数大于0，同步歌曲
				result = get_select_song_number(syn_song_id);
				if (result && (0!=_tcscmp(syn_song_id,L"")))
				{
					//同步已选歌曲
					swprintf(send_data,L"SYN_SELECT_SONG%d$%s",player_next_state,syn_song_id);
				}
				else
				{
					//发送给被控机当前空闲歌曲的索引
					int index = m_video_play_manager.get_cur_idlesse_video_number(); //空闲的索引
					swprintf(send_data, L"SET_IDLESSE_INDEX&%d", index);
					//发送给被控机
					send_master_slave_data(send_data,NULL);

					//没有已选歌曲就不用同步
					swprintf(send_data,L"SYN_SELECT_SONG%d",player_next_state);
				}
				//发送给被控机
				send_master_slave_data(send_data,NULL);
				//mod end
			}
		}
	}
	catch (...)
	{
	}

	return;
}

bool Cflashktv10Wnd::judge_down_song_map_by_id(TCHAR * song_id)
{
	try
	{
		if (song_id==NULL)
		{
			return false;
		}

		wstring songValue;

		songValue.assign(song_id);
		vector<wstring>::iterator songIter;	 //Map迭代器 

		WriteLog(__FL__, L"judge_down_song_map_by_id:1");

		m_cloud_song_lock.lock();
		songIter = std::find(m_down_song_vec.begin(), m_down_song_vec.end(), songValue);
		if(songIter == m_down_song_vec.end())
		{
			WriteLog(__FL__, L"judge_down_song_map_by_id:2");
			m_cloud_song_lock.unlock();
			//没有找到
			return false;			
		}
		m_down_song_vec.erase(songIter);
		m_cloud_song_lock.unlock();
		WriteLog(__FL__, L"judge_down_song_map_by_id:3");
		return true; 
	}
	catch (...)
	{

	} 

	return false;
}

void Cflashktv10Wnd::send_to_flash_empty_list(bool flag /* = true */)
{
	int page_index=0;
	TCHAR request[10240];
	std::wstring song_list_xml;
	bool result=false;

	page_index = m_flash_manage.get_last_page_index();
	song_list_xml+=L"<pre_list/><cur_list/><next_list/>";

	if (flag)
	{
		result = m_flash_manage.make_song_request(request,sizeof(request)/sizeof(TCHAR),song_list_xml.c_str(),true,page_index,0,m_song_show_mode);
	}else{
		result = m_flash_manage.make_singer_request(request,sizeof(request)/sizeof(TCHAR),L"SingerPhotoList",song_list_xml.c_str(),true,page_index,0);
	}

	if (!result)
	{
		return;
	}
	flash_player_call_function(request);
}

void Cflashktv10Wnd::send_mobile_code_to_slave(int flag)
{
	try
	{
		TCHAR send_data[256];

		memset(send_data,0x0,sizeof(send_data));

		//只有主控发送给被控机
		if (1!=m_master_slave_control_flag)
		{
			return;
		}

		switch(flag)
		{
		case 0:
			{
				//移动点歌验证码
				swprintf(send_data,L"MOBILECODE%s",m_ipad_login_code);
			}
			break;
		case 1:
			{
				//移动点歌验证码
				swprintf(send_data,L"WECHATCODE%s",m_wechat_song_encode);
			}
			break;
		}

		send_master_slave_data(send_data,NULL);
	}
	catch (...)
	{

	}
	return;
}

void Cflashktv10Wnd::flash_message_call_cloud_song()
{
	clear_all_query_condition();

	song_query_condition[SONG_LOCAL_PATH_SUFFIX].operation_symbols = L" = "; 
	song_query_condition[SONG_LOCAL_PATH_SUFFIX].expression = L"\"1\"";
	song_query_condition[SONG_LOCAL_PATH_SUFFIX].wildcard = L"";

	bool bflag = m_allow_show_cloud_song;
	m_allow_show_cloud_song = false;
	bool result =  song_query_show_data(song_select_expr);
	m_allow_show_cloud_song = bflag;
	if (!result)
	{
		clear_query_condition_by_page_and_init(true);
		return;
	}
}

void Cflashktv10Wnd::PlayDLNAFunction()
{	
	song_info song_info_class;
	//设置视频名
	song_info_class.set_song_name(m_lpDlna_url_data->szTitle);
	song_info_class.set_song_id(L"65026518");

	//设置音量
	song_info_class.set_accompany_volume(50);
	song_info_class.set_karaoke_volume(50);
	//设置视频类型
	song_info_class.set_video_type(PLAY_DLNA_VIDEO);

	//如果正在播放用户点的歌曲，那么把该歌曲放到已选歌曲中
	pThis->m_video_play_manager.add_select_song(song_info_class, true);

	//改变播放器的状态
	pThis->m_video_play_manager.set_player_next_state(PLAY_SONG_STATE);

	//播放下一首时，选择歌曲已经改变，需要重新刷屏，防止预约顺序错误
	pThis->flash_message_call_function(SONG_NEXT);
}

#define DEFAULT_MASTER_SLAVE_PORT 27015 
#define DEFAULT_MASTER_SLAVE_BUFLEN 512  

UINT Cflashktv10Wnd::recv_master_slave_file(LPVOID param)
{
	Cflashktv10Wnd *pWnd = (Cflashktv10Wnd*)param;
	string_conversion strcon;
	int iResult; 
	char temp[DEFAULT_MASTER_SLAVE_BUFLEN], file_name[DEFAULT_MASTER_SLAVE_BUFLEN];
	TCHAR wfile_name[DEFAULT_MASTER_SLAVE_BUFLEN] = {0x00};

	strcon.widechar_to_multibyte(pWnd->m_work_path, file_name, sizeof(file_name));
	sprintf(file_name, "%s\\draw_image.bmp", file_name);
	strcon.multibyte_to_widechar(file_name, wfile_name, sizeof(wfile_name));

	SOCKADDR_IN addrSrv;
	addrSrv.sin_addr.S_un.S_addr=htonl(INADDR_ANY);
	addrSrv.sin_port=ntohs(DEFAULT_MASTER_SLAVE_PORT);
	addrSrv.sin_family = AF_INET;  

	SOCKET ListenSocket = INVALID_SOCKET;  
	ListenSocket = socket(AF_INET,SOCK_STREAM,0);  
	if(ListenSocket == INVALID_SOCKET)  
	{  
		return 1;  
	}

	iResult = bind(ListenSocket, (SOCKADDR*)&addrSrv,sizeof(SOCKADDR));  
	if(iResult == SOCKET_ERROR)  
	{  
		iResult = shutdown(ListenSocket, SD_SEND);  
		if(iResult == SOCKET_ERROR)  
		{  
			closesocket(ListenSocket);  
			return 1;  
		} 
		return 1;  
	}

	// listen on a socket  
	if(listen(ListenSocket, SOMAXCONN))  
	{   
		closesocket(ListenSocket);  
		return 1;  
	} 

	// accept a connection  

	SOCKET ClientSocket = INVALID_SOCKET;  
	while(pWnd->m_thread_run)
	{
		SLEEP_FOR; //增加sleep

		ClientSocket = accept(ListenSocket, NULL, NULL);  
		if(ClientSocket == INVALID_SOCKET)  
		{
			continue;
		}

		if (PathFileExists(wfile_name))
		{
			DeleteFile(wfile_name);
		}

		//create file  
		FILE *fp = fopen(file_name, "wb");  
		if(fp == NULL)  
		{
			closesocket(ClientSocket);
			continue;
		}

		// file operation and send data  

		int num = 0;  
		while (1)  
		{  
			num = recv(ClientSocket, temp, DEFAULT_MASTER_SLAVE_BUFLEN, 0); 		

			if(num == 0)   
				break;  
			fwrite(temp, 1, num, fp);  
		}		    
		closesocket(ClientSocket);

		fclose(fp);
		pWnd->show_image_to_tv(wfile_name);
	}
	return 0;
}

UINT Cflashktv10Wnd::send_master_slave_file(TCHAR *path)
{
	string_conversion strconn;
	int iResult;  
	char temp[DEFAULT_MASTER_SLAVE_BUFLEN], file_name[DEFAULT_MASTER_SLAVE_BUFLEN];

	strconn.widechar_to_multibyte(path, file_name, sizeof(file_name));

	FILE *fp = fopen(file_name, "rb");  
	if(fp == NULL)  
	{  
		return -1;  
	}

	SOCKADDR_IN addrSrv;
	addrSrv.sin_addr.S_un.S_addr=inet_addr(m_master_control_ip);
	addrSrv.sin_port=ntohs(DEFAULT_MASTER_SLAVE_PORT);
	addrSrv.sin_family = AF_INET; 

	SOCKET ConnectSocket = socket(AF_INET,SOCK_STREAM,0);

	// connect to server  
	iResult = connect(ConnectSocket, (SOCKADDR*)&addrSrv,sizeof(SOCKADDR));  
	if(iResult == SOCKET_ERROR)  
	{  
		closesocket(ConnectSocket);  
		ConnectSocket = INVALID_SOCKET;// if fail try next address returned by getaddrinfo  
	}

	if(ConnectSocket == INVALID_SOCKET)  
	{  
		return 1;  
	}  

	int num = 0;  
	while(!feof(fp))  
	{  
		num = fread(temp, 1, DEFAULT_MASTER_SLAVE_BUFLEN, fp);  
		send(ConnectSocket, temp, num, 0);  
	}  

	fclose(fp);  
	iResult = shutdown(ConnectSocket, SD_SEND);  
	if(iResult == SOCKET_ERROR)  
	{  
		closesocket(ConnectSocket);  
		return 1;  
	} 
	closesocket(ConnectSocket); 
	return 0;
}

void Cflashktv10Wnd::ReloadEqIndex(void)
{
	LONG EqIndex = 0;
	if(m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)
	{
		HRESULT hr = m_IRTCOMAPI_20068->VistaGetEqIndex(m_ulIndex,&EqIndex);
	}
}

void Cflashktv10Wnd::InitKaraoke()
{
	BOOL VoiceCancel = FALSE;
	WCHAR wBuff[4]={0,0,0,0};
	LONG CurrentKey = 0;

	if(m_IRTCOMAPI_20068 && m_bIRTCOMAPISuccess)
	{
		HRESULT hr = m_IRTCOMAPI_20068->VistaGetVoiceCancelEnabled(m_ulIndex, &VoiceCancel);
		if(S_OK == hr)
		{
			// 初始化都为原唱
			if(VoiceCancel)
				m_IRTCOMAPI_20068->VistaSetVoiceCancelEnabled(m_ulIndex, FALSE);
		}
		else
		{
			WriteLog(__FL__, L"InitKaraoke Fail.");
		}
	}
}

void Cflashktv10Wnd::InitCom(void)
{
	BOOL fPropSetInitialized = FALSE;
	ULONG			ulDeviceCount = 0L;	//声卡个数

	HRESULT hr = CoCreateInstance( CLSID_PropSet, NULL, CLSCTX_INPROC_SERVER,
		IID_IPropSet, (void**) &m_IRTCOMAPI);

	if(!SUCCEEDED(hr))
	{
		WriteLog(__FL__, L"Cannot create PropSet instance !!!");
		m_IRTCOMAPI = NULL;
		return;
	}

	hr = m_IRTCOMAPI->Init(&fPropSetInitialized);
	if(!fPropSetInitialized)
	{
		WriteLog(__FL__, L"Cannot initialize PropSet !!!");
		m_IRTCOMAPI = NULL;
		return;
	}

	hr = m_IRTCOMAPI->QueryInterface(IID_IPropSet20065,(void**)&m_IRTCOMAPI_20065);
	if(!SUCCEEDED(hr))
	{
		WriteLog(__FL__, L"Cannot Query Interface PropSet20065 !!!");
		m_IRTCOMAPI = NULL;
		m_IRTCOMAPI_20065 = NULL;
		return;
	}
	if(m_IRTCOMAPI_20065)
	{
		HRESULT hr = m_IRTCOMAPI_20065->GetDeviceCount(&ulDeviceCount);
		if(!SUCCEEDED(hr))
		{
			WriteLog(__FL__, L"GetDeviceCount not support !!!");
			m_IRTCOMAPI = NULL;
			m_IRTCOMAPI_20065 = NULL;
			return;
		}
	}
	//判断声卡个数
	if (ulDeviceCount == 0L)
	{
		WriteLog(__FL__, L"没有找到声卡设备！！！");
		return;
	}
	hr = m_IRTCOMAPI->QueryInterface(IID_IPropSet20082,(void**)&m_IRTCOMAPI_20082);
	if (!SUCCEEDED(hr))
	{
		m_IRTCOMAPI = NULL;
		m_IRTCOMAPI_20065 = NULL;
		m_IRTCOMAPI_20082 = NULL;
		WriteLog(__FL__, L"Cannot Query Interface PropSet20082 !!!");
		return;
	}
	//检测默认声卡
	WCHAR wszTmp[MAX_PATH] = {0x00};
	WCHAR  devicename[MAX_PATH] = {0x00};//声卡名称
	WCHAR deviceid[MAX_PATH] = {0x00};
	ULONG DeviceFormFactor = 0L;
	BOOL IsPlayback = FALSE;
	BOOL IsDefDevice = FALSE;

	swprintf(wszTmp, L"检测到一共%ld个声卡。",ulDeviceCount);
	WriteLog(__FL__, wszTmp);

	for(ULONG ulIndex = 0; ulIndex < ulDeviceCount; ulIndex++)
	{
		hr = m_IRTCOMAPI_20065->GetDeviceName(ulIndex, devicename);

		if(m_IRTCOMAPI_20082)
		{
			// 获取设备(声卡)信息
			hr = m_IRTCOMAPI_20082->VistaGetDeviceInfo(ulIndex,&DeviceFormFactor,&IsPlayback,&IsDefDevice,deviceid);
			if(S_OK==hr)
			{
				if(IsDefDevice)//找到默认声卡，保存索引
				{
					swprintf(wszTmp, L"默认声卡的名称为:%s", devicename);
					WriteLog(__FL__, wszTmp);
					m_ulIndex = ulIndex;
					break;
				}
			}
		}
	}
	if (!IsDefDevice)
	{
		WriteLog(__FL__, L"没有找到默认声卡！！默认使用索引[0]！！");
		//return ;
	}
	hr = m_IRTCOMAPI->QueryInterface(IID_IPropSet20068,(void**)&m_IRTCOMAPI_20068);
	if(!SUCCEEDED(hr))
	{
		WriteLog(__FL__, L"Cannot Query Interface PropSet20068 !!!");
		m_IRTCOMAPI = NULL;
		m_IRTCOMAPI_20065 = NULL;
		m_IRTCOMAPI_20068 = NULL;
		return;
	}
	m_bIRTCOMAPISuccess = TRUE;

	ReloadEqIndex();

	InitKaraoke();

	WriteLog(__FL__, L"Initialize PropSet Successfully!!!");
}
int Cflashktv10Wnd::send_maiba_rule_to_master(char* send_data)
{
	char send_data_rule[1024*100] = {0x00};
	sprintf_s(send_data_rule, "maibarule%s", send_data, strlen(send_data));
	if (m_master_slave_control_flag == 1)
	{
		send_master_slave_data(NULL, send_data_rule);
	}
	return 0;
}
//异形Flash
void Cflashktv10Wnd::show_screen_flash_wnd(SCREEN_FLASH_TYPE en_screen_flash_type)
{
	TCHAR wszPath[256] = {0x00};
	//swprintf(wszPath, L"D:\\SourceCode\\flashktvEasy_Plus\\flashktvEasy\\Debug\\score_image_new\\score.swf");
	//swprintf(wszPath, L"D:\\SourceCode\\flashktvEasy_Plus\\flashktvEasy\\Debug\\欢呼声.swf");
	CTransparentWnd *pWnd = new CTransparentWnd;
	CRect rtFlash(0, 0, m_rt_soft_activity.Width(), m_rt_soft_activity.Height());
	if (!PlayScreenFlash(pWnd, NULL, wszPath, m_rt_soft_activity, rtFlash, SCREEN_FLASH_WND_ID, SCREEN_FLASH_PLAYER_ID))
		WriteLog(__FL__, L"显示异形flash失败");

	//*/

//	m_vecTransparentWnd.push_back(m_pWnd);
}
void Cflashktv10Wnd::show_score_video_flash()
{
	TCHAR wszPath[256] = {0x00};
	swprintf(wszPath, L"%s\\score_flash_interface\\Main.swf", m_work_path);
	m_pWnd = new CTransparentWnd;
	CRect rtFlash(0, 0, m_rt_soft_activity.Width(), m_rt_soft_activity.Height());
	if (!PlayScreenFlash(m_pWnd, NULL, wszPath, m_rt_soft_activity, rtFlash, SCREEN_FLASH_WND_ID, SCREEN_FLASH_PLAYER_ID))
	{
		WriteLog(__FL__, L"显示异形flash失败");
		return ;
	}
	m_pWnd->SetWindowStyle(NULL, 255);
	m_pWnd->ShowWindow(SW_SHOW);
}
bool Cflashktv10Wnd::flash_message_call_score_tv(int nScore, int nSimilarity, int nStability, int nIntact)
{
	try
	{
		bool bRet = false;
		TCHAR request[256] = {0x00}, data[256] = {0x00};
		PLAY_SONG_TYPE video_type =	m_player_manager.get_playing_video_type();

		swprintf(data, L"<data><info total_score=\"%d\" similarity=\"%d\" stability=\"%d\" intact=\"%d\"></info></data>", nScore, nSimilarity, nStability, nIntact);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"score_video", data);
		if (!bRet)	return false;
		
		if (m_bScoreFlashFinish)
		{
			if (m_soft_load_score_flash_success)
			{
				m_soft_score_flash_player.CallFunction(request);
			}
			if (m_load_score_flash_success)
			{
				m_score_flash_player.CallFunction(request);
			}
		}
		return true;
	}
	catch (...)
	{
	}
	return false;
}

//读取榜单文件，获取歌曲信息
UINT Cflashktv10Wnd::read_trend_list(LPVOID param)
{
	Cflashktv10Wnd *wnd = (Cflashktv10Wnd*)param;
	TCHAR szTrendListPath[256] = {0x00};//文件路径

	swprintf(szTrendListPath, L"%s\\trendlist\\TrendList.txt", wnd->m_str_trend_list_path.c_str());
	if (!PathFileExists(szTrendListPath))	return -1;

	//json解析榜单文件
	Json::Reader reader;
	Json::Value root;
	ifstream ifs;

	ifs.open(szTrendListPath);

	//不能解析
	if (!reader.parse(ifs, root, false))
	{
		WriteLog(__FL__, L"潮流榜单文件格式错误！");
		return -1;
	}

	if (!root.isMember("album"))
	{
		WriteLog(__FL__, L"潮流榜单文件格式错误！");
		return -1;
	}

	Json::Value album = root["album"];

	if(!wnd->parse_trend_list_json(album))
	{
		WriteLog(__FL__, L"潮流榜单文件格式错误！");
		return -1;
	}
	ifs.close();
	return 0;
}
bool Cflashktv10Wnd::parse_trend_list_json(Json::Value &info)
{
	string_conversion string_conv;
	TCHAR wszTmp[256] = {0x00};
	char szTmp[256] = {0x00};
	int nIndex = 0;

	for (int i = 0; i < info.size(); i++)
	{
		CTrendListManager pTrendListManger;

		string strPkId = info[i]["PkId"].asString();
		string strAlbumName = info[i]["AlbumName"].asString();//榜单名称
		string strAlbumPicPath = info[i]["AlbumPicPath"].asString();//图片地址
		string strAlbumCreateDate = info[i]["AlbumCreateDate"].asString();//更新日期
		int nPos = strAlbumPicPath.rfind('\\');
		string strPicName = strAlbumPicPath.substr(nPos+1);	//图片名称

		memset(wszTmp, 0x0, 256);
		string_conv.utf8_to_widechar(strAlbumName.c_str(), wszTmp, 256);
		pTrendListManger.m_strName = wszTmp;
		memset(wszTmp, 0x0, 256);
		string_conv.utf8_to_widechar(strPicName.c_str(), wszTmp, 256);
		TCHAR wszPicPath[256] = {0x00};
		swprintf(wszPicPath, L"%s\\trendlist\\Pic\\%s", m_str_trend_list_path.c_str(), wszTmp);
		if (wcslen(wszTmp)>0 && PathFileExists(wszPicPath))
			pTrendListManger.m_strImgPath = wszPicPath;
		else
		{
			swprintf(wszPicPath, L"%s\\trendlistpic\\default.png", m_work_path);
			pTrendListManger.m_strImgPath = wszPicPath;
		}
		memset(wszTmp, 0x0, 256);
		string_conv.utf8_to_widechar(strAlbumCreateDate.c_str(), wszTmp, 256);
		pTrendListManger.m_strUpdateDate = wszTmp;
		if(info[i].isMember("assistData"))
		{
			Json::Value songInfo = info[i]["assistData"];
			nIndex = 0;

			for (int j=0; j<songInfo.size(); j++)
			{
				string strAlbumId = songInfo[j]["AlbumId"].asString();
				string strSongId = songInfo[j]["SongId"].asString();//歌曲id
				string strSongName = songInfo[j]["SongName"].asString();//歌曲名称
				string strSingerName = songInfo[j]["SingerName"].asString();//歌星名字

				memset(wszTmp, 0x0, 256);
				string_conv.utf8_to_widechar(strSongId.c_str(), wszTmp, 256);
				string_conv.widechar_to_multibyte(wszTmp, szTmp, 256);

				//查询本地数据库是否存在此歌曲
				song_info trend_song_info;
				if (get_song_info_by_id(wszTmp, trend_song_info, PLAY_TREND_LIST))
				{
					if(nIndex>9)	break;//每个榜单10首歌
// 					TCHAR wszPath[256] = {0x00};
// 					if(trend_song_info.get_local_path(wszPath))
// 					{
// 						if(wcscmp(wszPath, L"1") == 0)	continue;//云歌曲不显示
// 					}

					pTrendListManger.m_TrendListSongInfo[nIndex].nIndex = nIndex;
					wcscpy(pTrendListManger.m_TrendListSongInfo[nIndex].szSongId, wszTmp);
					memset(wszTmp, 0x0, 256);
					string_conv.utf8_to_widechar(strSongName.c_str(), wszTmp, 256);
					wcscpy(pTrendListManger.m_TrendListSongInfo[nIndex].szSongName, wszTmp);
					memset(wszTmp, 0x0, 256);
					string_conv.utf8_to_widechar(strSingerName.c_str(), wszTmp, 256);
					wcscpy(pTrendListManger.m_TrendListSongInfo[nIndex].szSingerName, wszTmp);

					nIndex ++;
				}
			}
			pTrendListManger.m_nSongCount = nIndex;
		}
		m_vec_TrendListManager.push_back(pTrendListManger);
	}
	return true;
}

//组织数据xml
bool Cflashktv10Wnd::make_trend_list_xml(wstring &strTotalXml)
{
	bool result = false;
	wstring strSubXml(L"");
	int nListCount = 0;	//榜单个数
	TCHAR wszData[1024] = {0x00};
	strTotalXml = L"<trend_list>";

	vector<CTrendListManager>::iterator iter = m_vec_TrendListManager.begin();
	for (; iter != m_vec_TrendListManager.end(); ++iter)
	{
		strSubXml.clear();
		CTrendListManager pTrendListManager = *iter;
		pTrendListManager.make_trend_list_sub_xml(strSubXml, m_video_play_manager);
		nListCount ++;
		strTotalXml += strSubXml;
	}
	//小于5个列表时发送默认图片路径
	while (nListCount < 5)
	{
		swprintf(wszData, L"<trend_list_info imgpath=\"%s\\trendlistpic\\default.png\"></trend_list_info>", m_work_path);
		strSubXml = wszData;
		strTotalXml += strSubXml;
		nListCount ++;
	}

	strTotalXml += L"</trend_list>";
	return true;
}
//显示榜单信息
void Cflashktv10Wnd::flash_message_call_trend_list(int page_code,const TCHAR *args)
{
	try
	{
		song_info song_info_class; 
		string_conversion string_conv;
		TCHAR wszSongId[256] = {0x00};

		wstring strArgs = args;

		int nPos = strArgs.find('&');
		int nLen = strArgs.length();
		if (nPos == wstring::npos)	return;

		wstring strListIndex = strArgs.substr(0,nPos);
		wstring strSongIndex = strArgs.substr(nPos+1);

		int nListIndex = 0, nSongIndex = 0;
		nListIndex = _ttoi(strListIndex.c_str());
		nSongIndex = _ttoi(strSongIndex.c_str());

		if (nListIndex >= m_vec_TrendListManager.size())	return;

		for (int i=0;i<m_vec_TrendListManager.size();++i)
		{
			if (i == nListIndex)
			{
				CTrendListManager pTmp = m_vec_TrendListManager[i];
				if (nSongIndex >= pTmp.m_nSongCount) return;

				for (int j=0; j<pTmp.m_nSongCount; ++j)
				{
					if (j == nSongIndex)
					{
						wcscpy(wszSongId, pTmp.m_TrendListSongInfo[j].szSongId);
						break;
					}
				}
				break;
			}
		}
		if (wcslen(wszSongId) == 0)
		{
			return;
		}

		bool result = get_song_info_by_id(wszSongId, song_info_class, PLAY_SONG_TYPE_SELECT_SONG);
		if (!result)
		{
			return;
		}
		TCHAR song_local_path[256] = {0x00};
		song_info_class.get_local_path(song_local_path);
		if (0==_tcscmp(song_local_path, L"1"))
		{
			//需要下载当前歌曲
			dwon_song_file_to_server(wszSongId,1);

			///标示为下载歌曲
			song_info_class.set_down_update_song(1);
		}
		//根据播放器状态，播放或插入已选歌曲中
		result = play_or_insert_select_list(song_info_class,false);
		if (!result)
		{
			return;
		}
		//添加
		repeat_select_song(wszSongId, page_code);

		//得到显示的编号，然后改变显示颜色，必须先把歌曲插入已选中，然后在改变颜色，因为涉及到刷屏
		//		chang_select_song_color(song_info_class,number,false);
		//发码给flash
		flash_message_call_trend_list_data(page_code, false);

		//重新显示上下首歌名
		show_song_name();
	}
	catch (...)
	{
	}

	return;
}
void Cflashktv10Wnd::flash_message_call_trend_list_data(int page_code,bool binit /*= true*/)
{
	bool result = false;
	TCHAR request[1024*40] = {0x00};
	wstring strTrendListXml(L"");

	//获取XML数据
	result = make_trend_list_xml(strTrendListXml);

	//组织歌曲字符串
	result = m_flash_manage.make_trend_list_request(request,sizeof(request)/sizeof(TCHAR),strTrendListXml.c_str(),binit,page_code,CUR_PAGE_OPERATE);
	if (!result)
	{
		WriteLog(__FL__, L"发送潮流榜单XML数据失败!");
		return;
	}

	flash_player_call_function(request);
}
/////////////////////////////////////////////////////////////////////////
/***********************互动场景屏***************************************/
bool Cflashktv10Wnd::flash_message_call_inter_screen_config()
{
	try
	{
		TCHAR request[1024] = {0x00};
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		bool result=false;
		Tag_Inter_Screen_Info info = {0x00};

		m_inter_screen_manager.GetInterScreenInfo(&info);
		// 
		if (info.n_mode == 1)
		{
			strTmp.Format(_T("<item name=\"scroll_top\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_top.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"scroll_bottom\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_bottom.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_left\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_left.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_right\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_right.c_str());
			strSub += strTmp;
		}
		else if (info.n_mode == 2)
		{
			strTmp.Format(_T("<item name=\"scroll_top\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_top.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"scroll_bottom\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_bottom.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_left\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_left.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_right\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_right.c_str());
			strSub += strTmp;

		}
		else if (info.n_mode == 3)
		{
			strTmp.Format(_T("<item name=\"scroll_top\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_top.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"scroll_bottom\" value=\"%s\"/>"), m_inter_screen_manager.m_str_scroll_tip_info_bottom.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_left\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_left.c_str());
			strSub += strTmp;
			strTmp.Format(_T("<item name=\"list_right\" value=\"%s\"/>"), m_inter_screen_manager.m_str_list_info_right.c_str());
			strSub += strTmp;
		}
		else
		{

		}

		strData.Format(_T("<data id=\"inter_screen_config\" mode=\"%d\"><info>%s</info></data>"), info.n_mode, strSub);

		//互动场景屏配置
		result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"inter_screen_config",strData.GetBuffer(0));
		if (result && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}

		return result;
	}
	catch(...)
	{
		return false;
	}
}
bool Cflashktv10Wnd::flash_message_call_show_inter_screen(int page_code)
{
	try
	{
		bool bRet = false;
		Tag_Inter_Screen_Info info = {0x00};

		if (!m_inter_screen_exist)
		{
			return false;
		}
		m_inter_screen_manager.GetInterScreenInfo(&info);

		if (info.n_mode == 1)//单视频
		{
			bRet = show_single_video_inter_screen(page_code);
		}
		else if (info.n_mode == 2)//双视频
		{
			bRet = show_double_video_inter_screen(page_code);
		}
		else if (info.n_mode == 3)//单辅助视频
		{
			bRet = show_assist_video_inter_screen(page_code);
		}
		else
		{
			m_master_show_window.ShowWindow(SW_SHOW);
		}

		return bRet;
	}
	catch(...)
	{
		return false;
	}
}
/*单视频模式*/
bool Cflashktv10Wnd::show_single_video_inter_screen(int page_code)
{
	try
	{
		bool bRet = false;
		TCHAR wszTmp[1024*10] = {0x00};
		song_info curSongInfo;

		m_video_play_manager.get_playing_video(curSongInfo);

		//上下滚动条信息（横版频谱、字幕信息（歌曲、广告、活动、游戏）、场景装饰）
		bRet = show_scroll_info(1, true);

		//左右列表信息（广告图片、竖版频谱、歌星图片、节目图片、已选列表、活动、榜单）
		bRet = show_list_info(1, true);

		//显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		//		bRet = show_wnd_info(page_code, 1, true);

		return bRet;
	}
	catch(...)
	{
		return false;
	}
}
/*双视频模式*/
bool Cflashktv10Wnd::show_double_video_inter_screen(int page_code)
{
	try
	{
		bool bRet = false;
		TCHAR wszTmp[1024*10] = {0x00};
		song_info curSongInfo;

		m_video_play_manager.get_playing_video(curSongInfo);

		//上下滚动条信息（横版频谱、字幕信息（歌曲、广告、活动、游戏）、场景装饰）
		bRet = show_scroll_info(2, true);

		//左右列表信息（广告图片、竖版频谱、歌星图片、节目图片、已选列表、活动、榜单）
		//		bRet = show_list_info(2, true);

		//显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		//		bRet = show_wnd_info(page_code, 1, true);

		return bRet;
	}
	catch(...)
	{
		return false;
	}
}
/*单辅助视频模式*/
bool Cflashktv10Wnd::show_assist_video_inter_screen(int page_code)
{
	try
	{
		bool bRet = false;
		TCHAR wszTmp[1024*10] = {0x00};
		song_info curSongInfo;

		m_video_play_manager.get_playing_video(curSongInfo);

		//上下滚动条信息（横版频谱、字幕信息（歌曲、广告、活动、游戏）、场景装饰）
		//		bRet = show_scroll_info(3, true);

		//左右列表信息（广告图片、竖版频谱、歌星图片、节目图片、已选列表、活动、榜单）
		bRet = show_list_info(3, true);

		//显示视频窗口（节目视频、转播视频、视频广告、互动游戏（比例为16：9））
		//		bRet = show_wnd_info(page_code, 1, true);

		return bRet;
	}
	catch(...)
	{
		return false;
	}
}

/**/
bool Cflashktv10Wnd::show_scroll_info(int nMode, bool bTop /*= true*/)
{
	try
	{
		bool bRet = false;
		int nFlag = 0, nModule = 1;//滚动条
		TCHAR wszData[1024*10] = {0x00};

		// 横形频谱
		if (m_inter_screen_manager.IsMember(L"301", nModule, bTop))
		{
			bRet = 1;
		}
		// 广告字幕
		if (m_inter_screen_manager.IsMember(L"701", nModule, bTop))
		{
			bRet = flash_message_call_ad_caption(m_inter_screen_caption.ad_info);
		}

		// 场景装饰（异形flash）
		if (m_inter_screen_manager.IsMember(L"801", nModule, bTop))
		{
			bRet = 1;
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/**/
bool Cflashktv10Wnd::show_list_info(int nMode, bool bLeft/* = true*/)
{
	try
	{
		bool bRet = false;
		int nFlag = 0, nModule = 2;
		TCHAR wszData[1024*10] = {0x00};

		// 广告图片
		if (m_inter_screen_manager.IsMember(L"201", nModule, bLeft))
		{
			bRet = flash_message_call_ad_pic();
		}
		// 竖形频谱
		if (m_inter_screen_manager.IsMember(L"302", nModule, bLeft))
		{
			bRet = flash_message_call_vertical_frequency();
		}
		// 歌星图片
		if (m_inter_screen_manager.IsMember(L"401", nModule, bLeft))
		{
			bRet = flash_message_call_singer_pic();
		}
		// 节目图片
		if (m_inter_screen_manager.IsMember(L"402", nModule, bLeft))
		{
			bRet = flash_message_call_program_pic();
		}
		// 已选列表
		if (m_inter_screen_manager.IsMember(L"501", nModule, bLeft))
		{
			bRet = flash_message_call_selected_song_list();
		}
		// 推荐歌曲
		if (m_inter_screen_manager.IsMember(L"502", nModule, bLeft))
		{
			bRet = flash_message_call_recommend_song_list();
		}
		// 活动展示
		//if (m_inter_screen_manager.IsMember(L"601", nModule, bLeft))
		{
			bRet = flash_message_call_activity();
		}
		// 榜单信息
		//		if (m_inter_screen_manager.IsMember(L"602", nModule, bLeft))
		// 		{
		// 			bRet = flash_message_call_ranking_list();
		// 		}
		TCHAR szrp[MAX_PATH] = {0x00};
		//if (m_set_free_pk)
		{
			swprintf(szrp, L"0:1");
			flash_message_call_maiba(MAIBA_DEKARON, szrp);
		}
		//if (m_set_dekaron_pk)
		{
			swprintf(szrp, L"1:1");
			flash_message_call_maiba(MAIBA_DEKARON, szrp);
		}
		// 获奖实时动态
		if (m_inter_screen_manager.IsMember(L"603", nModule, bLeft))
		{
			bRet = flash_message_call_award_info();
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*设置窗口位置*/
bool Cflashktv10Wnd::show_wnd_info(int page_code, int nMode, bool bMaster/* = true*/)
{
	try
	{
		if (!m_inter_screen_exist)
		{
			return false;
		}
		bool bRet = false;
		int nModule = 3;

		// MV节目视频
		if (m_inter_screen_manager.IsMember(L"101", nModule, bMaster))
		{
			if (bMaster)
			{
				if (m_show_activity_wnd == 1)
				{
					m_activity_video_wnd.MoveWindow(m_rt_master);
					m_activity_video_wnd.BringWindowToTop();
					m_activity_video_wnd.ShowWindow(SW_SHOW);
				}
				else
				{
					m_master_show_window.MoveWindow(m_rt_master);
					m_master_show_window.BringWindowToTop();
					m_master_show_window.ShowWindow(SW_SHOW);
				}
			}
			else
			{				
				if (m_show_activity_wnd == 0)
				{
					m_activity_video_wnd.MoveWindow(m_rt_slave);
					m_activity_video_wnd.BringWindowToTop();
					m_activity_video_wnd.ShowWindow(SW_SHOW);
				}
				else
				{
					m_slave_show_window.MoveWindow(m_rt_slave);
					m_slave_show_window.BringWindowToTop();
					m_slave_show_window.ShowWindow(SW_SHOW);
				}
			}
		}
		// 转播视频
		if (m_inter_screen_manager.IsMember(L"102", nModule, bMaster))
		{
			bRet = 1;
		}
		// 广告视频
		if (m_inter_screen_manager.IsMember(L"202", nModule, bMaster))
		{
			bRet = 1;
		}
		// 互动游戏
		if (m_inter_screen_manager.IsMember(L"901", nModule, bMaster))
		{
			bRet = 1;
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*广告图片201*/
bool Cflashktv10Wnd::flash_message_call_ad_pic()
{
	try
	{
		bool bRet = false;
		TCHAR request[1024*10] = {0x00};
		CString strPath = _T(""), strData = _T(""), strSub = _T("");
		int nFileCnt = 0;

		strPath.Format(_T("%s\\inter_screen\\ad_pic\\*.*"), m_work_path);

		search_pic(strPath, strSub, nFileCnt);

		if (nFileCnt == 0)	return false;
		//
		strData.Format(_T("<data id=\"201\" count=\"%d\"><info>%s</info></data>"), nFileCnt, strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"201", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*横形频谱301*/
bool Cflashktv10Wnd::flash_message_call_horizontal_frequency()
{
	try
	{
		bool bRet = false;

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*树形频谱302*/
bool Cflashktv10Wnd::flash_message_call_vertical_frequency()
{
	try
	{
		bool bRet = false;

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*歌星图片401*/
bool Cflashktv10Wnd::flash_message_call_singer_pic()
{
	try
	{
		bool bRet = false;
		TCHAR request[1024*10] = {0x00}, wszValue[256] = {0x00};
		CString strTmp = _T(""), strPath = _T(""), strData = _T(""), strSub = _T("");
		int nFileCnt = 0;
		song_info cur_info;

		if (m_video_play_manager.get_playing_video(cur_info))
		{
			//cur_info.get_singer_name(wszValue);
			cur_info.get_singer_id1(wszValue);
			if(0 == _tcscmp(wszValue,L""))
			{
				_tcscpy(wszValue,L"default");
				strTmp.Format(_T("%s\\%s\\singer_pic\\%s"), m_work_path, g_folder_name[41], wszValue);

				TCHAR szSex[8] = {0x00};
				cur_info.get_singer_sex(szSex);
				if (_tcscmp(szSex, L"1") == 0)
				{
					strTmp.Format(_T("%s\\%s\\singer_pic\\%s"), m_work_path, g_folder_name[41], L"default\\男");
				}
				else if (_tcscmp(szSex, L"2") == 0)
				{
					strTmp.Format(_T("%s\\%s\\singer_pic\\%s"), m_work_path, g_folder_name[41], L"default\\女");
				}
				else
				{
					strTmp.Format(_T("%s\\%s\\singer_pic\\%s"), m_work_path, g_folder_name[41], L"default\\组合");
				}
			}
			else
				strTmp.Format(_T("%s\\%s\\singer_pic\\%s"), m_work_path, g_folder_name[41], wszValue);

			if(PathFileExists(strTmp))
			{
				strPath.Format(_T("%s\\*.*"), strTmp);
			}
		}

		search_pic(strPath, strSub, nFileCnt);

		if (nFileCnt == 0)	return false;
		//
		strData.Format(_T("<data id=\"401\" count=\"%d\"><info>%s</info></data>"), nFileCnt, strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"401", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*节目图片402*/
bool Cflashktv10Wnd::flash_message_call_program_pic()
{
	try
	{
		bool bRet = false;
		TCHAR request[1024*10] = {0x00}, wszValue[256] = {0x00};
		CString strTmp = _T(""), strPath = _T(""), strData = _T(""), strSub = _T("");
		int nFileCnt = 0;
		song_info cur_info;

		if (m_video_play_manager.get_playing_video(cur_info))
		{
			cur_info.get_song_id(wszValue);
			if(0 == _tcscmp(wszValue,L""))
			{
				_tcscpy(wszValue,L"default");
			}
			strTmp.Format(_T("%s\\%s\\program_pic\\%s"), m_work_path, g_folder_name[41], wszValue);

			if(!PathFileExists(strTmp))
			{
				strTmp.Format(_T("%s\\%s\\program_pic\\%s"), m_work_path, g_folder_name[41], L"default");
			}
			strPath.Format(_T("%s\\*.*"), strTmp);
		}

		search_pic(strPath, strSub, nFileCnt);

		if (nFileCnt == 0)	return false;
		//
		strData.Format(_T("<data id=\"402\" count=\"%d\"><info>%s</info></data>"), nFileCnt, strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"402", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}

/*已选列表501*/
bool  Cflashktv10Wnd::flash_message_call_selected_song_list()
{
	try
	{
		bool bRet = false;
		int nSelCnt = 0;
		song_info info;
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		TCHAR request[1024*10] = {0x00};
		TCHAR wszSongId[256], wszSongName[256], wszSingerName[256];

		nSelCnt = m_video_play_manager.get_select_song_count();
		if (nSelCnt > 10)
		{
			nSelCnt = 10;
		}
		for (int i=0; i<nSelCnt; ++i)
		{
			memset(wszSongId, 0x00, 256);
			memset(wszSongName, 0x00, 256);
			memset(wszSingerName, 0x00, 256);

			if(m_video_play_manager.get_select_song_information(info, i, false))
			{
				info.get_song_id(wszSongId);
				info.get_song_name(wszSongName);
				info.get_singer_name(wszSingerName);
				strTmp.Format(_T("<item song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\"/>"), wszSongId, wszSongName, wszSingerName);
			}
			strSub += strTmp;
		}

		strData.Format(_T("<data id=\"501\" ><info>%s</info></data>"), strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"501", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			CString str = m_inter_screen_flash_player.CallFunction(request);
			int n = 0;
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*推荐列表502*/
bool  Cflashktv10Wnd::flash_message_call_recommend_song_list()
{
	try
	{
		bool bRet = false;
		wstring strSub(L"");
		TCHAR request[1024*10] = {0x00}, wszData[1024*10] = {0x00};

		if(m_query_song_manager.make_recommend_song_list(strSub, m_video_play_manager))
		{
			swprintf(wszData, L"<data id=\"502\" >%s</data>", strSub.c_str());
		}

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"502", wszData);
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*活动展示601*/
bool  Cflashktv10Wnd::flash_message_call_activity()
{
	try
	{
		bool bRet = false;

		// 自由PK
		if(/*m_set_free_pk && */m_inter_screen_manager.IsMember(L"601_1", 2, true))
			organise_arena_rule_info(L"601_1", 1);

		// 擂台PK
		if(/*m_set_dekaron_pk && */m_inter_screen_manager.IsMember(L"601_2", 2, true))
			organise_arena_rule_info(L"601_2", 2);

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*榜单602*/
bool  Cflashktv10Wnd::flash_message_call_ranking_list()
{
	try
	{
		bool bRet = false;
		int nSongCnt = m_maiba_song_list_count;
		int score_flower = 2;//分数
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		TCHAR request[1024*10] = {0x00};

		if (nSongCnt > 10)
		{
			nSongCnt = 10;
		}
		for (int i=0; i<nSongCnt; ++i)
		{
			strTmp.Format(_T("<item voice_id=\"%s\" song_id=\"%s\" song_name=\"%s\" singer_name=\"%s\" song_score=\"%s\"  member_pic=\"%s\" listen_count=\"\" flowers_count=\"\" color=\"%s\" score_flower=\"%d\" room_name=\"%s\"/>"), 
				m_maiba_song_list[i].voice_id,m_maiba_song_list[i].song_id,m_maiba_song_list[i].song_name,m_maiba_song_list[i].nick_name,m_maiba_song_list[i].score,m_maiba_song_list[i].member_pic, m_default_song_row_color.c_str(), 
				score_flower, m_maiba_song_list[i].room_name);

			strSub += strTmp;
		}
		// 自由PK
		if(m_set_free_pk)
		{
			strData.Format(_T("<data id=\"602_1\" ><info>%s</info></data>"), strSub);

			bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"602_1", strData.GetBuffer(0));
			if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
			{
				m_inter_screen_flash_player.CallFunction(request);
			}
		}
		// 擂台PK
		if(m_set_dekaron_pk)
		{
			strData.Format(_T("<data id=\"602_2\" ><info>%s</info></data>"), strSub);

			bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"602_2", strData.GetBuffer(0));
			if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
			{
				m_inter_screen_flash_player.CallFunction(request);
			}
		}

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*获奖实时信息603*/
bool  Cflashktv10Wnd::flash_message_call_award_info()
{
	try
	{
		bool bRet = false;

		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*广告字幕701*/
bool Cflashktv10Wnd::flash_message_call_ad_caption(TCHAR *caption)
{
	try
	{
		bool bRet = false;
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		TCHAR request[1024*10] = {0x00};

		strTmp.Format(_T("<item info=\"%s\"/>"), caption);
		strSub += strTmp;

		strData.Format(_T("<data id=\"701\" ><info>%s</info></data>"), strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"701", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*活动字幕702*/
bool Cflashktv10Wnd::flash_message_call_activity_caption(TCHAR *caption)
{
	try
	{
		bool bRet = false;
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		TCHAR request[1024*10] = {0x00};

		strTmp.Format(_T("<item info=\"%s\"/>"), caption);
		strSub += strTmp;

		strData.Format(_T("<data id=\"702\" ><info>%s</info></data>"), strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"702", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
/*节目信息703*/
bool Cflashktv10Wnd::flash_message_call_program_info(TCHAR *caption)
{
	try
	{
		bool bRet = false;
		CString strData(_T("")), strSub(_T("")), strTmp(_T(""));
		TCHAR request[1024*10] = {0x00};

		strTmp.Format(_T("<item info=\"%s\"/>"), caption);
		strSub += strTmp;

		strData.Format(_T("<data id=\"703\" ><info>%s</info></data>"), strSub);

		bRet = m_flash_manage.make_request(request, sizeof(request)/sizeof(TCHAR), L"703", strData.GetBuffer(0));
		if (bRet && m_inter_screen_flash_player.m_hWnd != NULL)
		{
			m_inter_screen_flash_player.CallFunction(request);
		}
		return bRet;
	}
	catch (...)
	{
	}
	return false;
}
bool Cflashktv10Wnd::search_pic(CString strPath, CString &strData, int &nFileCnt)
{
	CString strTmp = _T(""), strFileName = _T(""), strFilePath = _T("");
	CFileFind file;
	int nLen = 0;

	BOOL bContinue = file.FindFile(strPath);
	while (bContinue)     //遍历所选目录
	{
		bContinue = file.FindNextFile();
		if (file.IsDirectory() || file.IsDots())//如果是文件夹，跳过
		{
			continue;
		}
		else//如果是文件，则判断是否满足扩展名要求
		{
			strFileName = file.GetFileName();
			strFilePath = file.GetFilePath();
			nLen = strFileName.GetLength();

			if (strFileName.Mid(nLen-4).Compare(_T(".jpg")) == 0 || strFileName.Mid(nLen-4).Compare(_T(".JPG")) == 0 ||
				strFileName.Mid(nLen-4).Compare(_T(".png")) == 0 || strFileName.Mid(nLen-4).Compare(_T(".PNG")) == 0 )
			{
				strTmp.Format(_T("<item pic_path=\"%s\"/>"), strFilePath);
				strData += strTmp;
				nFileCnt ++;
			}
		} 
	}
	return true;
}

bool Cflashktv10Wnd::show_listen_question_answer()
{
	TCHAR data[MAX_PATH] = {0x00};
	TCHAR command[256] = {0x00};
	TCHAR request[1024] = {0x00};
	//得到目前页面索引
	int page_index = m_flash_manage.get_last_page_index();
	if (page_index == page_listen_knowledge_song)
	{
		flash_message_call_function(SONG_PAUSE);

		m_listen_song_lock.lock();

		if(m_vec_listen_song_info.size() == m_nListenPassCount)
		{
			song_info songInfo = m_vec_listen_song_info[m_iCurrent_pass];

			TCHAR szSingerName[MAX_PATH] = {0x00};
			TCHAR szSong_name[MAX_PATH] = {0x00};
			TCHAR szSong_id[MAX_PATH] = {0x00};
			TCHAR szTmp[MAX_PATH] = {0x00};
			TCHAR szAnswer[MAX_PATH] = {0x00};

			songInfo.get_song_name(szSong_name);
			songInfo.get_song_id(szSong_id);
			songInfo.get_singer_name(szSingerName);

			vector<wstring> answer_vec;
			answer_vec.clear();

			if(listen_get_question_answer(szSong_id))
			{
				//swprintf(szTmp, L"%s-%s", szSong_name, szSingerName);
				swprintf(szAnswer, L"%s", szSong_name);
				answer_vec.push_back(szAnswer);

				memset(szSong_name, 0x00, sizeof(szSong_name));
				m_listen_song_info_answer[0].get_song_name(szSong_name);
				m_listen_song_info_answer[0].get_singer_name(szSingerName);
				//swprintf(szTmp, L"%s-%s", szSong_name, szSingerName);
				if (_tcslen(szSong_name) == 0)
				{
					_tcscpy(szSong_name, L"冰雨");
				}
				swprintf(szTmp, L"%s", szSong_name);
				answer_vec.push_back(szTmp);

				memset(szSong_name, 0x00, sizeof(szSong_name));
				m_listen_song_info_answer[1].get_song_name(szSong_name);
				m_listen_song_info_answer[1].get_singer_name(szSingerName);
				//swprintf(szTmp, L"%s-%s", szSong_name, szSingerName);
				if (_tcslen(szSong_name) == 0)
				{
					_tcscpy(szSong_name, L"爱很简单");
				}
				swprintf(szTmp, L"%s", szSong_name);
				answer_vec.push_back(szTmp);

				memset(szSong_name, 0x00, sizeof(szSong_name));
				m_listen_song_info_answer[2].get_song_name(szSong_name);
				m_listen_song_info_answer[2].get_singer_name(szSingerName);
				//swprintf(szTmp, L"%s-%s", szSong_name, szSingerName);
				if (_tcslen(szSong_name) == 0)
				{
					_tcscpy(szSong_name, L"高山青");
				}
				swprintf(szTmp, L"%s", szSong_name);
				answer_vec.push_back(szTmp);
			}
			else //获取答案失败
			{
				//swprintf(szTmp, L"%s-%s", szSong_name, szSingerName);
				swprintf(szAnswer, L"%s", szSong_name);
				answer_vec.push_back(szAnswer);

				//swprintf(szTmp, L"冰雨-刘德华");
				swprintf(szTmp, L"冰雨");
				answer_vec.push_back(szTmp);

				//swprintf(szTmp, L"爱很简单-张学友");
				swprintf(szTmp, L"爱很简单");
				answer_vec.push_back(szTmp);

				//swprintf(szTmp, L"高山青-邓丽君");
				swprintf(szTmp, L"高山青");
				answer_vec.push_back(szTmp);
			}

			std::srand ( unsigned ( std::time(0) ) );

			// using built-in random generator:
			std::random_shuffle ( answer_vec.begin(), answer_vec.end() );

			// using myrandom:
			std::random_shuffle ( answer_vec.begin(), answer_vec.end(), random);

			//计算正确答案
			vector<wstring>::iterator it = find(answer_vec.begin(), answer_vec.end(), szAnswer);
			if (it != answer_vec.end())
			{
				m_listen_answer_index = it - answer_vec.begin();
			}else{
				m_listen_answer_index = -3;
			}
			//m_listen_song_info_answer
			//random_shuffle()
			//发送码值到前端
			swprintf(data,L"<data><info open=\"%d\" answer0=\"%s\" answer1=\"%s\" answer2=\"%s\" answer3=\"%s\"/></data>", 
				m_iCount_down, answer_vec[0].c_str(), answer_vec[1].c_str(), answer_vec[2].c_str(), answer_vec[3].c_str());
			_tcscpy(command, L"pop_up_answer"); //开始闯关
			bool result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),command,data);
			if (result)
			{
				flash_player_call_function(request);
				listen_flash_call_function(request);
				listen_flash_soft_call_function(request);
			}
		}

		m_listen_song_lock.unlock();
	}
	return true;
}
bool Cflashktv10Wnd::listen_get_question_answer(const TCHAR *song_id)
{
	TCHAR query_sql[1024];   //查询的sql语句
	std::wstring *result_set=NULL;

	memset(query_sql,0x0,sizeof(query_sql));  

	result_set = new std::wstring[7];
	//通过歌曲id得到当前歌曲的信息
	swprintf(query_sql,L"select a.[issue_year],a.[language],a.[song_theme],a.[singer_sex],b.[singer_region_new],a.[song_name],b.[singer_name] from song a,singer b where a.[singer_id1] = b.[singer_id] and a.[song_id] = \"%s\"",song_id);

	//得到数据
	int row = m_db_query.get_table_data(result_set,7,query_sql,NULL,NULL,L"sing_number",L"DESC",1,0);
	if (row <= 0)
	{
		delete []result_set;
		result_set=NULL;
		return false;
	}

	bool bret = liste_get_recommend_song_info(result_set[0].c_str(),result_set[1].c_str(),result_set[2].c_str(),result_set[3].c_str(),result_set[4].c_str(),
		result_set[5].c_str(),result_set[6].c_str(),song_id);

	if (result_set)
	{
		delete []result_set;
		result_set=NULL;
	}

	return bret;
}

bool Cflashktv10Wnd::liste_get_recommend_song_info(const TCHAR* issue_year,const TCHAR *language,const TCHAR* song_theme,const TCHAR* singer_sex, const TCHAR* singer_region_new,const TCHAR *song_name,const TCHAR* singer_name,const TCHAR* song_id)
{
	try
	{
		//TCHAR sql_other[1024];		//其他类型
		TCHAR query_condition[10240];  //查询当前歌星前三首歌查询语句
		char  sql_other_contion[10240]; 

		std::wstring *result_set=NULL;
		std::wstring *result_set_recommend = NULL;
		int current_singer_song = 0;  //当前歌星的歌曲
		int row = 0;       //相同类型的歌曲
		int recommand_other_song = 3;  //推荐除这个歌曲的其他歌星的数目
		bool result = false;
		string_conversion string_con;
		bool query_sql_type=true;   //查询类型，false,不是特殊类型，true是特殊类型
		int recommend_pos = 0;

		//推荐其他的歌曲
		//判断是否是特殊类型
		memset(query_condition,0x0,sizeof(query_condition));
		if (0 == _tcscmp(song_theme,L"14"))  //革命歌曲
		{
			//判断年代是否
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and singer_name!=\"\" group by UPPER(song_name)",
					language,song_theme,song_name);
			}
			else
			{
				//(年代、语种) 
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\"  and singer_name!=\"\" group by UPPER(song_name)",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name);
			}

		}
		else  if (0 == _tcscmp(song_theme,L"7")) //儿歌
		{
			//(年代、语种)
			swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\"  and singer_name!=\"\" group by UPPER(song_name)",
				language,song_theme,song_name);


		}
		else if (0 == _tcscmp(song_theme,L"29"))  //戏剧
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\"  and singer_name!=\"\" group by UPPER(song_name)",
					language,song_theme,song_name);
			}
			else
			{
				//(年代、语种)
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\"  and singer_name!=\"\" group by UPPER(song_name)",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name);
			}

		}
		else if (0 == _tcscmp(song_theme,L"1"))  //迪曲
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				//(年代、语种)
				swprintf(query_condition,L"language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\"  and singer_name!=\"\" group by UPPER(song_name)",
					language,song_theme,song_name);
			}
			else
			{
				//(年代、语种)
				swprintf(query_condition,L"issue_year > \"%d\" and issue_year < \"%d\" and language = \"%s\" and song_theme=\"%s\" and song_name != \"%s\" and singer_name!=\"\" group by UPPER(song_name)",
					(_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,song_name);
			}

		}
		else 
		{
			//判断年代是否为空
			if (0 == _tcscmp(issue_year,L""))
			{
				swprintf(query_condition,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
										  a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
										  a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
										  a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
										  from song a,singer b where a.[singer_name] = b.[singer_name] 				\
										  and a.[language]=\"%s\" and	a.[song_theme]=\"%s\" and a.[singer_sex]=\"%s\"\
										  and b.[singer_region_new]=\"%s\" and a.[song_name] != \"%s\" and a.[singer_name]!=\"\" GROUP BY UPPER(song_name) order by sing_number DESC limit %d offset 0",
										  language,song_theme,singer_sex,singer_region_new,
										  song_name,recommand_other_song);
			}
			else
			{
				swprintf(query_condition,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
										  a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
										  a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
										  a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
										  from song a,singer b where a.[singer_name] = b.[singer_name] and a.[issue_year] > \"%d\" 				\
										  and a.[issue_year] < \"%d\" and a.[language]=\"%s\" and	a.[song_theme]=\"%s\" and a.[singer_sex]=\"%s\"\
										  and b.[singer_region_new]=\"%s\" and a.song_name != \"%s\" and a.singer_name!=\"\" GROUP BY UPPER(song_name) order by sing_number DESC limit %d offset 0",
										  (_tstoi(issue_year)-2),(_tstoi(issue_year)+2),language,song_theme,singer_sex,singer_region_new,
										  song_name,recommand_other_song);

			}

			//标示为特殊版本
			query_sql_type=false;

		}

		//申请空间 10-row
		result_set_recommend = new std::wstring[recommand_other_song*song_select_expr.result_column_nums];
		if (!result_set_recommend)
		{
			WriteLog(__FL__, L"申请空间失败!");
			return false;
		}
		TCHAR szLog[256]={0x00};
		//查询3条数据
		memset(sql_other_contion,0x0,sizeof(sql_other_contion));
		string_con.widechar_to_utf8(query_condition,sql_other_contion,sizeof(sql_other_contion));
		if (query_sql_type)
		{
			row = m_db_query.get_table_data(result_set_recommend,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),query_condition,NULL,L"sing_number",L"DESC",recommand_other_song,0);
		}
		else
		{
			row = m_db_query.query_db_get_table_data(result_set_recommend,song_select_expr.result_column_nums*recommand_other_song,sql_other_contion);
		}

		for (int i=0; i < 3; i++)
		{
			m_listen_song_info_answer[i].initialized_variables();
		}

		if (row > 2)  //如果够3条数据
		{
			//设置数据
			m_query_song_manager.set_listen_recommend_song_list(result_set_recommend,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums, m_listen_song_info_answer);
		}else{
			//查询排行榜数据
			TCHAR song_name_sort_sql[1024];
			char song_name_temp[1024];
			std::wstring *result_set=NULL;
			string_conversion string_con;

			memset(song_name_sort_sql,0x0,sizeof(song_name_sort_sql));
			memset(song_name_temp,0x0,sizeof(song_name_temp));

			swprintf(song_name_sort_sql,L"select count(song_id) from top_song where singer_name!=\"\" group by UPPER(song_name) limit -1 offset 0");
			string_con.widechar_to_multibyte(song_name_sort_sql,song_name_temp,sizeof(song_name_temp));

			//一级查询，清空所有条件
			clear_all_query_condition();

			//得到当前查询条件有多少条数据
			int rows = m_db_query.get_row_count(song_name_temp);

			if (rows != 0) //存在数据
			{
				int row = (rand() % (rows - 3)); //取第二关的歌曲信息
				row = (row > rows) ? 0 : row; //取得随机行

				swprintf(song_name_sort_sql,L"select song_name from top_song where singer_name!=\"\" group by UPPER(song_name) ");

				//申请空间
				result_set = new std::wstring[rows - row + 1];

				int result_row = m_db_query.get_table_data(result_set,1,song_name_sort_sql,NULL,NULL,NULL,NULL,row,row-1);
				if (result_row <= 2)//不够3条数据返回
				{
					delete []result_set;
					result_set=NULL;
					return false;
				}

				//得到查询出来的值
				for (int i=0;i<3; i++)
				{
					m_listen_song_info_answer[i].set_song_name(result_set[i].c_str());
				}

				delete []result_set;
				result_set=NULL;
			}
		}

		//判断如果歌曲名为空
		bool bflag = false;
		for (int i = 0; i < 3; i++)
		{
			TCHAR szSongId[MAX_PATH] = {0x00};
			m_listen_song_info_answer[i].get_song_id(szSongId);

			if (_tcscmp(szSongId, L"") == 0)
			{
				bflag = true;
				break;
			}
		}

		if (bflag)
		{
			RECOMMAND_SONG_INFO recommend_song_info[3];
			memset(recommend_song_info,0x0,sizeof(recommend_song_info));

			//申请空间
			result_set = new std::wstring[song_select_expr.result_column_nums*3];
			if (NULL == result_set)
			{
				return false;
			}

			//从歌星里取出排名前三的歌曲
			memset(query_condition,0x0,sizeof(query_condition));
			swprintf(query_condition,L"singer_name=\"%s\" and language=\"%s\" and song_id != \"%s\" and singer_name!=\"\" group by UPPER(song_name)",singer_name,language,song_id);
			current_singer_song = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,song_select_expr.result_column_expr.c_str(),query_condition,NULL,L"sing_number",L"DESC",3,0);

			if (current_singer_song > 2)  //没有查询到当前歌星有其他歌曲
			{
				m_query_song_manager.set_listen_recommend_song_list(result_set,current_singer_song*song_select_expr.result_column_nums,song_select_expr.result_column_nums, m_listen_song_info_answer);
			}

			delete []result_set;
			result_set=NULL; 
		}

		delete []result_set_recommend;
		result_set_recommend=NULL; 
		return true;
	}
	catch (...)
	{

	}

	return false;
}
UINT Cflashktv10Wnd::query_listen_song_info_tmp_thread(LPVOID pParam)
{
	try
	{
		Cflashktv10Wnd* pThis = reinterpret_cast<Cflashktv10Wnd *>(pParam);

		return pThis->query_listen_song_info_tmp();
	}
	catch (...)
	{
	}

	return -1;
}

bool Cflashktv10Wnd::query_listen_song_info_tmp()
{
	try
	{
		bool bRet = false;
		int nFrontCount = 0, nBackCount = 0;
		TCHAR query_sql[1024];   //查询的sql语句
		std::wstring *result_set=NULL;

		m_vec_listen_song_info_temp.clear();
		for (int i=0; i < m_nListenPassCount; i++)
		{
			m_listen_song_info[i].initialized_variables();
		}
		memset(query_sql,0x0,sizeof(query_sql));
		nFrontCount = m_nListenPassCount/2/* + (m_nListenPassCount%2 == 0) ? 0 : 1*/;
		result_set = new std::wstring[song_select_expr.result_column_nums*nFrontCount];

		swprintf(query_sql,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
							a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
							a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
							a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
							from song a,singer b where a.[guid_track] in (\"%s\", \"%s\", \"%s\") and a.[singer_id1] = b.[singer_id] 				\
							and a.[singer_name] != \"\" and a.[local_path]!=\"1\" group by UPPER(a.song_name) ORDER BY RANDOM() ", L"3", L"5", L"8");
//		WriteLog(__FL__, query_sql);
		int row = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,query_sql,NULL,NULL,NULL,NULL,nFrontCount,0);
		if (row < nFrontCount)
		{
			delete []result_set;
			result_set=NULL;
			return false;
		}
		if (row > 0)  //没有查询到当前歌星有其他歌曲
		{
			//设置数据
			bRet = m_query_song_manager.set_listen_recommend_song_list(result_set,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums, m_listen_song_info);
			if (bRet)
			{
				for (int i=0;i<nFrontCount;++i)
				{
					m_vec_listen_song_info_temp.push_back(m_listen_song_info[i]);
				}
			}
		}
		delete []result_set;
		result_set=NULL;
		row = 0;
		nBackCount = m_nListenPassCount - nFrontCount;
		memset(query_sql,0x0,sizeof(query_sql));  
		result_set = new std::wstring[song_select_expr.result_column_nums*nBackCount];

		swprintf(query_sql,L"select a.song_id,a.accompany_sing_track,a.karaoke_track,a.guid_track,a.song_name,a.show_movie_name,a.song_name_sort,a.accompany_volume,\
							a.karaoke_volume,a.language,a.song_type,a.singer_name,a.singer_sex,a.song_version,a.light_control_set,a.audio_effect_code,a.file_format,a.local_path,\
							a.server_path1,a.server_path2,a.server_path3,a.server_path4,a.server_path5,a.server_path6,a.song_relative_path,a.video_saturation,a.video_luminance,\
							a.video_contrast,a.lyric,a.culture_code,a.preview_path,a.singer_id1,a.singer_id2,a.singer_id3,a.singer_id4,a.file_version  \
							from song a,singer b where a.[guid_track] in (\"%s\", \"%s\") and a.[singer_id1] = b.[singer_id] 				\
							and a.[singer_name] != \"\" and a.[local_path]!=\"1\" group by UPPER(a.song_name) ORDER BY RANDOM() ", L"3", L"8");
//		WriteLog(__FL__, query_sql);
		row = m_db_query.get_table_data(result_set,song_select_expr.result_column_nums,query_sql,NULL,NULL,NULL,NULL,nBackCount,0);
		if (row < nBackCount)
		{
			delete []result_set;
			result_set=NULL;
			return false;
		}
		if (row > 0)  //没有查询到当前歌星有其他歌曲
		{
			//设置数据
			bRet = m_query_song_manager.set_listen_recommend_song_list(result_set,row*song_select_expr.result_column_nums,song_select_expr.result_column_nums, m_listen_song_info);
			if (bRet)
			{
				for (int i=0;i<nBackCount;++i)
				{
					m_vec_listen_song_info_temp.push_back(m_listen_song_info[i]);
				}
			}
		}
		delete []result_set;
		result_set=NULL;

		return true;
	}
	catch(...)
	{
	}
	return false;
}

bool Cflashktv10Wnd::copy_listen_song_info()
{
	try
	{
		m_listen_song_lock.lock();

		if (m_vec_listen_song_info_temp.size() == 0)	return false;

		m_vec_listen_song_info.clear();
		m_vec_listen_song_info.assign(m_vec_listen_song_info_temp.begin(), m_vec_listen_song_info_temp.end());//

		m_listen_song_lock.unlock();

		return true;
	}
	catch (...)
	{
	}
	return false;
}

void Cflashktv10Wnd::send_cloud_song_progress_to_flash(song_info &song_information, int progress)
{
	try
	{
		TCHAR request[1024];
		TCHAR song_show_info[1024];
		TCHAR song_name[256];
		bool result=false;
		int page_index=0;
		TCHAR page_name[256];
		TCHAR song_id[128] = {0x00};
		int number = 1;

		memset(request,0x0,sizeof(request));
		memset(song_show_info,0x0,sizeof(song_show_info));
		memset(song_name,0x0,sizeof(song_name));
		memset(page_name,0x0,sizeof(page_name));

		//得到选择的歌曲数目
		page_index = m_flash_manage.get_last_page_index();
		if (page_index != page_selected) //如果不是已选列表返回
			return;

		song_information.get_song_id(song_id);

		//得到歌曲名字
		result = song_information.get_song_name(song_name);

		m_video_play_manager.query_select_song_by_id(song_id, number, false);
		if (number < 0) return;

		//得到页行信息
		int row = 0, cur_page_number = 0, page_count = 0;
		result = m_video_play_manager.get_page_row_info(row,cur_page_number,page_count,SHOW_SELECT_SONG);
		if (!result) return;

		if (cur_page_number > 1) //如果不是第一页，则计算显示行
		{
			if (number > 9)
			{
				int gap = number - (cur_page_number - 1)*9;
				number = gap;
			}else
				return;
		}

		number--;
		if (number < 0) return;

		//得到页面名字
		result = m_flash_manage.get_page_name(page_index,page_name,m_song_show_mode);
		if (result)
		{
			swprintf(song_show_info,L"<data><item color=\"%s\" song_txt=\"%s[%d%%]\" index =\"%d\" page_name=\"%s\" /></data>",m_select_song_name_color.c_str(), song_name, progress, number, page_name);

			result = m_flash_manage.make_request(request,sizeof(request)/sizeof(TCHAR),L"SelectedRow",song_show_info);
			if (result)
			{
				flash_player_call_function(request);
			}
		}
	}
	catch (...)
	{

	}
	return;
}
void Cflashktv10Wnd::CloseActivePageOnTv()
{
	switch(m_nCurPageCode)
	{
	case page_across_pass:
		{
			m_bInPageAcrossPass = false;
			m_bAcrossPassing = false;
			//向被控端发送遮挡图片消息
			send_master_slave_cover_iamge_data(false, page_across_pass);

			if (m_inter_screen_exist)
			{
				//显示视屏窗口
				if (m_show_activity_wnd == 0)
				{
					m_master_show_window.MoveWindow(m_rt_master.left, m_rt_master.top, m_rt_master.Width(), m_rt_master.Height());
					m_master_show_window.ShowWindow(SW_SHOW);
				}
				else if (m_show_activity_wnd == 1)
				{
					m_slave_show_window.MoveWindow(m_rt_slave.left, m_rt_slave.top, m_rt_slave.Width(), m_rt_slave.Height());
					m_slave_show_window.ShowWindow(SW_SHOW);
				}
			}
			if (m_soft_decode_window_exist && m_use_soft_active_flash)
			{
				m_soft_decode_window_child.MoveWindow(0, 0, m_sencond_display_width, m_sencond_display_height);
				m_soft_decode_window_child.ShowWindow(SW_SHOW);
			}
			//销毁百秒夺奖控件
			if (m_bAcrossPassFlashPlayerExist)
			{
				m_AcrossPassFlashPlayer.DestroyWindow();
				m_bAcrossPassFlashPlayerExist = false;
			}
			if (m_bAcrossPassSoftFlashPlayerExist)
			{
				m_AcrossPassSoftFlashPlayer.DestroyWindow();
				m_bAcrossPassSoftFlashPlayerExist = false;
			}
			m_nFlashFinishCnt = 0;
			m_bAcrossPassFlashFinish = false;
		}
		break;
	case page_active_game:
		{
			flash_message_call(L"active_game_exit", L"0");
		}
		break;
	case page_listen_knowledge_song:
		{
			//销毁窗口
			destroy_listen_song();

			//向被控端发送遮挡图片消息
			send_master_slave_cover_iamge_data(false, page_listen_knowledge_song);
		}
		break;
	default:
		{

		}
		break;
	}
	m_nCurPageCode = 0;
}